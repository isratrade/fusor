---
# This playbook configures post-installation steps for OSE

- name: Apply common configuration to all nodes
  hosts: nodes
  user: ansible_ssh_user
  tasks:
    - name: configure iptables to allow for NFS shares
      command: iptables -I OS_FIREWALL_ALLOW -p tcp -m state --state NEW -m tcp --dport 2049 -j ACCEPT

- name: Configure OSE on master
  hosts: masters
  user: ansible_ssh_user
  tasks: 
    - name: Create OSE user
      command: htpasswd -cb {{ http_pass_file }} {{ ose_user }} {{ ose_password }}
    
    - name: Configure httpasswd authentication if not done already
      replace: "dest=/etc/origin/master/master-config.yaml regexp='DenyAllPasswordIdentityProvider' replace='AllowAllPasswordIdentityProvider'"
     
    - name: Restart master service for new authentication
      command: systemctl restart atomic-openshift-master.service
    
    - name: Check that we are system:admin user
      command: oc login -u system:admin
    
    - name: Enable scheduling for master
      command: oadm manage-node {{item}} --schedulable
      with_items: groups['masters']

    - pause: seconds=5

    - name: Label master on the infra region
      command: oc label node {{item}} region=infra --overwrite
      with_items: groups['masters']

    - name: Label worker nodes on the primary region
      command: oc label node {{item}} region=primary --overwrite
      with_items: groups['nodes']

    - name: Create default router
      command: "oadm router --create=true \
        --service-account=router \
        --credentials='/etc/origin/master/openshift-router.kubeconfig' \
        --images='openshift3/ose-haproxy-router:${version}' \
        --selector='region=infra'"

    - name: Create default registry
      command: "oadm registry --create=true \
        --service-account=registry \
        --credentials='/etc/origin/master/openshift-registry.kubeconfig' \
        --images='openshift3/ose-docker-registry:${version}' \
        --selector='region=infra'
        --mount-host='{{ docker_registry_host }}:/{{ docker_registry_path }}'"

    - name: Copy pod example files
      action: copy src="../files/pod_examples" dest="/home/{{ ose_user }}" owner={{ ose_user }} mode=0775

    - name: Replace default subdomain name for sample app
      replace: "dest=/home/{{ ose_user }}/pod_examples/hello_openshift.json regexp='cloudapps' replace={{ subdomain_name }}"

    - name: Replace default persistent NFS storage host for internal registry
      replace: "dest=/home/{{ ose_user }}/pod_examples/registry-volume-nfs.json regexp='master.example.com' replace={{ docker_registry_host }}"
      when: storage_type == "NFS"

    - name: Replace default persistent NFS storage path for internal registry
      replace: "dest=/home/{{ ose_user }}/pod_examples/registry-volume-nfs.json regexp='/var/export/registryvol' replace={{ docker_registry_path }}"
      when: storage_type == "NFS"

    - name: Create persistent NFS volume for internal registry
      command: oc create -f /home/{{ ose_user }}/pod_examples/registry-volume-nfs.json
      when: storage_type == "NFS"

    - name: Replace default GlusterFS path for internal registry
      replace: "dest=/home/{{ ose_user }}/pod_examples/registry-volume-gfs.json regexp='gv0' replace={{ docker_registry_path }}"
      when: storage_type == "GFS"

    - name: Replace default GlusterFS endpoints for internal registry
      replace: "dest=/home/{{ ose_user }}/pod_examples/glusterfs-endpoints.yaml regexp='192.168.236.15' replace={{ docker_registry_host}}"
      when: storage_type == "GFS"

    - name: Create GlusterFS service for internal registry
      command: oc create -f /home/{{ ose_user }}/pod_examples/glusterfs-service.yaml
      when: storage_type == "GFS"

    - name: Create GlusterFS endpoints for internal registry
      command: oc create -f /home/{{ ose_user }}/pod_examples/glusterfs-endpoints.yaml
      when: storage_type == "GFS"

    - name: Create GlusterFS persistent volume for internal registry
      command: oc create -f /home/{{ ose_user }}/pod_examples/registry-volume-gfs.json
      when: storage_type == "GFS"

    - name: Create persistent volume claim for internal registry
      command: oc create -f /home/{{ ose_user }}/pod_examples/registry-pvclaim.json

    - name: Create Docker Registry deployment config with persistent storage
      command: oc volume dc docker-registry --add --overwrite -t persistentVolumeClaim --claim-name=registry-pvclaim --name=registry-storage

    - name: Add management-infra role to admin user
      command: oadm policy add-role-to-user -n management-infra admin -z management-admin

    - name: Add management-infra role to management-admin user
      command: oadm policy add-role-to-user -n management-infra management-infra-admin -z management-admin

    - name: Add cluster role to user
      command: oadm policy add-cluster-role-to-user cluster-reader system:serviceaccount:management-infra:management-admin

    - name: Add scc to management-admin user
      command: oadm policy add-scc-to-user privileged system:serviceaccount:management-infra:management-admin

    - name: Create router for CFME to access data
      command: oadm router management-metrics -n default --credentials=/etc/origin/master/openshift-router.kubeconfig --service-account=router --ports='443:5000' --selector='kubernetes.io/hostname={{ inventory_hostname }}' --stats-port=1937 --host-network=false

    - name: Retrieve service token name
      shell: oc get -n management-infra sa/management-admin --template='{% raw %}{{range .secrets}}{{printf "%s\n" .name}}{{end}}{% endraw %}' | head -n 1 > ~/.key
      become: yes
      become_method: sudo

    - name: Get service token name
      shell: cat ~/.key
      register: key

    - name: Retrieve service token
      shell: oc get -n management-infra secrets {{ key.stdout }} --template='{% raw %}{{.data.token}}{% endraw %}' | base64 -d > ~/.token

    - name: Get service token
      shell: cat ~/.token
      register: token

    - name: Save token to known deployment location
      local_action: copy content={{ token.stdout }} dest={{ output_dir }}/{{ inventory_hostname }}.token

    - name: Login as specified OSE user
      command: oc login -u {{ ose_user }} -p {{ ose_password }}

    - name: Create Hello World project
      command: oc new-project helloworld
      when: helloworld_sample_app

    - name: Create hello world pod
      command: oc create -f /home/{{ ose_user }}/pod_examples/hello_openshift.json
      when: helloworld_sample_app
