/* jshint ignore:start */

/* jshint ignore:end */

define('fusor-ember-cli/adapters/application', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {

    'use strict';

    var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');
    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        namespace: 'api/v21',
        headers: {
            "X-CSRF-Token": token
        }
    });

});
define('fusor-ember-cli/adapters/deployment-plan', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var token = Ember.$('meta[name="csrf-token"]').attr('content');
    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        headers: {
            "X-CSRF-Token": token
        },

        // 'overcloud' is harded
        // ex. /fusor/api/openstack/deployments/:id/deployment_plans/overcloud
        buildURL: function buildURL(type, id, snapshot) {
            var url = '/fusor/api/openstack/deployments/' + id + '/deployment_plans/overcloud';
            return url;
        }
    });

});
define('fusor-ember-cli/adapters/deployment', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {

    'use strict';

    var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');
    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        namespace: 'fusor/api/v21',
        headers: {
            "X-CSRF-Token": token
        }
    });

});
define('fusor-ember-cli/adapters/entitlement', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].ActiveModelAdapter.extend({

        buildURL: function buildURL(type, query) {
            // Use consumer UUID to get entitlements
            // GET /customer_portal/consumers/#{CONSUMER['uuid']}/entitlements
            //debugger
            return '/customer_portal/consumers/' + query['uuid'] + '/entitlements';

            // To use http-mock instead of live consumer portal, comment out line above and uncomment below
            // return 'api-mock/entitlements';
        },

        // TODO - docs showed urlForQuery hook, is this later ember-data version???
        // source code says - RestAdapter#findQuery has been deprecated and renamed to `query`./
        findQuery: function findQuery(store, type, query) {
            // customization here - add query as a parameter fto buildURL
            return this.ajax(this.buildURL(type, query), 'GET');
        }

    });

});
define('fusor-ember-cli/adapters/flavor', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        buildURL: function buildURL(type, query) {
            var url = '/fusor/api/openstack/deployments/' + query['deployment_id'] + '/flavors';
            return url;
        },

        findQuery: function findQuery(store, type, query) {
            // customization here - add query as a parameter fto buildURL
            return this.ajax(this.buildURL(type, query), 'GET');
        }

    });

});
define('fusor-ember-cli/adapters/foreman-task', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {

    'use strict';

    var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');
    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        namespace: 'api/v21',
        headers: {
            "X-CSRF-Token": token
        }
    });

});
define('fusor-ember-cli/adapters/image', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        buildURL: function buildURL(type, query) {
            var url = '/fusor/api/openstack/deployments/' + query['deployment_id'] + '/images';
            return url;
        },

        findQuery: function findQuery(store, type, query) {
            // customization here - add query as a parameter fto buildURL
            return this.ajax(this.buildURL(type, query), 'GET');
        }
    });

});
define('fusor-ember-cli/adapters/management-application', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].ActiveModelAdapter.extend({

        buildURL: function buildURL(type, query) {
            // Use owner key to get consumers (subscription application manangers)
            // GET /customer_portal/owners/#{OWNER['key']}/consumers?type=satellite
            return '/customer_portal/owners/' + query['owner_key'] + '/consumers?type=satellite';

            // To use http-mock instead of live consumer portal, comment out line above and uncomment below
            // return 'api-mock/consumers';
        },

        // TODO - docs showed urlForQuery hook, is this later ember-data version???
        // source code says - RestAdapter#findQuery has been deprecated and renamed to `query`./
        findQuery: function findQuery(store, type, query) {
            // customization here - add query as a parameter fto buildURL
            return this.ajax(this.buildURL(type, query), 'GET');
        }

    });

});
define('fusor-ember-cli/adapters/node', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        buildURL: function buildURL(type, query) {
            var url = '/fusor/api/openstack/deployments/' + query['deployment_id'] + '/nodes';
            return url;
        },

        findQuery: function findQuery(store, type, query) {
            // customization here - add query as a parameter fto buildURL
            return this.ajax(this.buildURL(type, query), 'GET');
        }

    });

});
define('fusor-ember-cli/adapters/pool', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, ApplicationAdapter) {

    'use strict';

    exports['default'] = ApplicationAdapter['default'].extend({

        buildURL: function buildURL(type, query) {
            // Use consumer UUID to get pools
            // GET /customer_portal/pools?consumer=' + consumerUUID + '&listall=false');
            return '/customer_portal/pools?consumer=' + query['uuid'];

            // To use http-mock instead of live consumer portal, comment out line above and uncomment below
            // return 'api-mock/pools';
        },

        // TODO - docs showed urlForQuery hook, is this later ember-data version???
        // source code says - RestAdapter#findQuery has been deprecated and renamed to `query`./
        findQuery: function findQuery(store, type, query) {
            // customization here - add query as a parameter fto buildURL
            return this.ajax(this.buildURL(type, query), 'GET');
        }

    });

});
define('fusor-ember-cli/adapters/session-portal', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].LSAdapter.extend({
    namespace: 'rhci'
  });

});
define('fusor-ember-cli/adapters/subscription', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {

    'use strict';

    var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');
    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        namespace: 'fusor/api/v21',
        headers: {
            "X-CSRF-Token": token
        }

    });

});
define('fusor-ember-cli/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'fusor-ember-cli/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  var App;

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('fusor-ember-cli/components/accordion-item', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    isOpen: false,

    classNames: ['accordion-item'],

    actions: {
      openItem: function openItem() {
        this.set('isOpen', this.toggleProperty('isOpen'));
      }
    }
  });

});
define('fusor-ember-cli/components/base-f', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    didInsertElement: function didInsertElement() {
      return Ember['default'].$('[data-toggle="popover"]').popover();
    },

    willDestroyElement: function willDestroyElement() {
      return Ember['default'].$('[data-toggle="popover"]').popover('destroy');
    },

    labelClassSize: (function () {
      return this.getWithDefault('labelSize', 'col-lg-2 col-md-3 col-sm-5');
    }).property(),

    inputClassSize: (function () {
      return this.getWithDefault('inputSize', 'col-lg-4 col-md-6 col-sm-7');
    }).property(),

    showUnits: (function () {
      return !Ember['default'].isBlank(this.get('unitsLabel'));
    }).property('unitsLabel'),

    showHelpPopover: (function () {
      return !Ember['default'].isBlank(this.get('helpText'));
    }).property('showHelpIndicator'),

    unitsClassSize: (function () {
      return this.getWithDefault('unitsSize', 'col-md-2');
    }).property()
  });

});
define('fusor-ember-cli/components/base-popover', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    didInsertElement: function didInsertElement() {
      return Ember['default'].$('[data-toggle=popover]').popover();
    }
  });

});
define('fusor-ember-cli/components/button-f', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'button',
    classNames: ['btn btn-primary'],
    attributeBindings: ['disabled'],
    click: function click() {
      this.sendAction();
    }
  });

});
define('fusor-ember-cli/components/cancel-back-next', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    classNames: ['row'],

    actions: {
      saveAndCancelDeployment: function saveAndCancelDeployment() {
        var self = this.get('targetObject');
        self.send('saveAndCancelDeployment');
        return self.set('closeModal', true);
      },

      cancelAndDeleteDeployment: function cancelAndDeleteDeployment() {
        var self = this.get('targetObject');
        self.send('cancelAndDeleteDeployment');
        return self.set('closeModal', true);
      }

    }

  });

});
define('fusor-ember-cli/components/debug-info', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    isOpen: false,

    click: function click() {
      this.set('isOpen', this.toggleProperty('isOpen'));
    }

  });

});
define('fusor-ember-cli/components/delete-deployment-button', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'span',

    click: function click() {
      this.sendAction('action', this.get('deployment'));
    }

  });

});
define('fusor-ember-cli/components/deployment-role', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    role: null,
    profile: null,
    plan: null,
    nodeCount: 0,

    getParamValue: function getParamValue(paramName, params) {
      var paramValue = null;
      var numParams = params.get('length');
      for (var i = 0; i < numParams; i++) {
        var param = params.objectAt(i);
        if (param.get('id') === paramName) {
          paramValue = param.get('value');
          break;
        }
      }
      return paramValue;
    },

    roleAssigned: (function () {
      return this.get('profile') !== null;
    }).property('profile'),

    assignedClass: (function () {
      if (this.get('roleAssigned')) {
        return 'role-assigned';
      } else {
        return 'role-unassigned';
      }
    }).property('role-assigned'),

    roleNodeCount: (function () {
      var role = this.get('role');
      var params = this.get('plan.parameters');
      return this.getParamValue(role.get('countParameterName'), params);
    }).property('role', 'plan.parameters'),

    hasAssignedNodes: (function () {
      return this.get('roleNodeCount') >= 1;
    }).property('roleNodeCount'),

    multipleAssignedNodes: (function () {
      return this.get('roleNodeCount') >= 2;
    }).property('roleNodeCount'),

    profileNodes: (function () {
      var totalNodes = 10;
      return totalNodes;
    }).property('totalNodes'),

    availableOptions: (function () {
      var avail = [];
      var increment = 1;
      var maxNodes = Math.max(this.get('nodeCount'), this.get('roleNodeCount'));

      for (var i = 0; i <= maxNodes; i = i + increment) {
        var nextOption = Ember['default'].Object.create({
          label: '' + i,
          value: i,
          /* jshint ignore:start */
          selected: i == this.get('roleNodeCount')
          /* jshint ignore:end */
        });
        avail.pushObject(nextOption);
      }

      return avail;
    }).property('roleNodeCount'),

    actions: {
      updateNodeCount: function updateNodeCount() {
        var nodeCount = parseInt(this.$('select').val());
        this.sendAction('setRoleCount', this.get('role'), nodeCount);
      },

      editRole: function editRole() {
        this.sendAction('edit', this.get('role'));
      },

      removeRole: function removeRole() {
        this.sendAction('remove', this.get('role'));
      }
    }
  });

});
define('fusor-ember-cli/components/draggable-object-target', ['exports', 'ember-drag-drop/components/draggable-object-target'], function (exports, DraggableObjectTarget) {

	'use strict';

	exports['default'] = DraggableObjectTarget['default'];

});
define('fusor-ember-cli/components/draggable-object', ['exports', 'ember-drag-drop/components/draggable-object'], function (exports, DraggableObject) {

	'use strict';

	exports['default'] = DraggableObject['default'];

});
define('fusor-ember-cli/components/em-button', ['exports', 'ember-idx-button/button'], function (exports, ButtonComponent) {

	'use strict';

	exports['default'] = ButtonComponent['default'];

});
define('fusor-ember-cli/components/em-checkbox', ['exports', 'ember', 'ember-idx-forms/checkbox'], function (exports, Ember, CheckboxComponent) {

	'use strict';

	exports['default'] = CheckboxComponent['default'];

});
define('fusor-ember-cli/components/em-form-control-help', ['exports', 'ember', 'ember-idx-forms/control_help'], function (exports, Ember, FormControlHelperComponent) {

	'use strict';

	exports['default'] = FormControlHelperComponent['default'];

});
define('fusor-ember-cli/components/em-form-group', ['exports', 'ember', 'ember-idx-forms/group'], function (exports, Ember, FormGroupComponent) {

	'use strict';

	exports['default'] = FormGroupComponent['default'];

});
define('fusor-ember-cli/components/em-form-label', ['exports', 'ember', 'ember-idx-forms/label'], function (exports, Ember, FormLabelComponent) {

	'use strict';

	exports['default'] = FormLabelComponent['default'];

});
define('fusor-ember-cli/components/em-form-submit', ['exports', 'ember', 'ember-idx-forms/submit_button'], function (exports, Ember, SubmitButtonComponent) {

	'use strict';

	exports['default'] = SubmitButtonComponent['default'];

});
define('fusor-ember-cli/components/em-form', ['exports', 'ember', 'ember-idx-forms/form'], function (exports, Ember, FormComponent) {

	'use strict';

	exports['default'] = FormComponent['default'];

});
define('fusor-ember-cli/components/em-input', ['exports', 'ember', 'ember-idx-forms/input'], function (exports, Ember, InputComponent) {

	'use strict';

	exports['default'] = InputComponent['default'];

});
define('fusor-ember-cli/components/em-modal-body', ['exports', 'ember-idx-modal/modal-body'], function (exports, BodyComponent) {

	'use strict';

	exports['default'] = BodyComponent['default'];

});
define('fusor-ember-cli/components/em-modal-confirm-with-reason', ['exports', 'ember-idx-modal/modal-confirm-with-reason'], function (exports, ConfirmWithReasonModal) {

	'use strict';

	exports['default'] = ConfirmWithReasonModal['default'];

});
define('fusor-ember-cli/components/em-modal-confirm', ['exports', 'ember-idx-modal/modal-confirm'], function (exports, ModalConfirm) {

	'use strict';

	exports['default'] = ModalConfirm['default'];

});
define('fusor-ember-cli/components/em-modal-emform', ['exports', 'ember-idx-modal/modal-emform'], function (exports, ModalEmFormComponent) {

	'use strict';

	exports['default'] = ModalEmFormComponent['default'];

});
define('fusor-ember-cli/components/em-modal-footer', ['exports', 'ember-idx-modal/modal-footer'], function (exports, FooterComponent) {

	'use strict';

	exports['default'] = FooterComponent['default'];

});
define('fusor-ember-cli/components/em-modal-form', ['exports', 'ember-idx-modal/modal-form'], function (exports, ModalFormComponent) {

	'use strict';

	exports['default'] = ModalFormComponent['default'];

});
define('fusor-ember-cli/components/em-modal-title', ['exports', 'ember-idx-modal/modal-title'], function (exports, TitleComponent) {

	'use strict';

	exports['default'] = TitleComponent['default'];

});
define('fusor-ember-cli/components/em-modal-toggler', ['exports', 'ember-idx-modal/modal-toggler'], function (exports, TogglerComponent) {

	'use strict';

	exports['default'] = TogglerComponent['default'];

});
define('fusor-ember-cli/components/em-modal', ['exports', 'ember-idx-modal/modal'], function (exports, ModalComponent) {

	'use strict';

	exports['default'] = ModalComponent['default'];

});
define('fusor-ember-cli/components/em-select', ['exports', 'ember', 'ember-idx-forms/select'], function (exports, Ember, SelectComponent) {

	'use strict';

	exports['default'] = SelectComponent['default'];

});
define('fusor-ember-cli/components/em-text', ['exports', 'ember', 'ember-idx-forms/text'], function (exports, Ember, TextComponent) {

	'use strict';

	exports['default'] = TextComponent['default'];

});
define('fusor-ember-cli/components/env-path-list-item', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['path-list-item', 'list_item_active'],

    isChecked: (function () {
      return this.get('selectedEnvironment') === this.get('env');
    }).property('selectedEnvironment', 'env'),

    bgColor: (function () {
      if (this.get('isChecked') && this.get('disabled')) {
        return 'env_path_disabled';
      } else if (this.get('isChecked')) {
        return 'env_path_active';
      } else {
        return null;
      }
    }).property('isChecked', 'disabled'),

    envCssId: (function () {
      return 'env_' + this.get('env.id');
    }).property('env'),

    click: function click() {
      if (!this.get('disabled')) {
        return this.sendAction('action', this.get('env'));
      }
    }

  });

});
define('fusor-ember-cli/components/error-message', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    click: function click() {
      return this.set('errorMsg', null);
    }

  });

});
define('fusor-ember-cli/components/file-upload-form', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    selectedFile: null,

    formId: (function () {
      return this.getWithDefault('fileChooserFormId', 'fileChooserForm');
    }).property(),
    inputId: (function () {
      return this.getWithDefault('fileChooserFormId', 'fileChooserInput');
    }).property(),
    acceptValue: (function () {
      return this.getWithDefault('accept', '*');
    }).property(),
    getFileInput: function getFileInput() {
      var idValue = this.get('inputId');
      return this.$('#' + idValue)[0];
    },
    actions: {
      fileChosen: function fileChosen() {
        var fileInput = this.getFileInput();
        this.set('selectedFile', fileInput.files[0]);
      },
      doUpload: function doUpload() {
        var fileInput = this.getFileInput();
        this.sendAction('doUpload', this.get('selectedFile'), fileInput);
      },
      doCancel: function doCancel() {
        var fileInput = this.getFileInput();
        this.sendAction('doCancel', fileInput);
      }
    }
  });

});
define('fusor-ember-cli/components/hypervisor-name', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    namePlusDomain: (function () {
      if (this.get("host.is_discovered")) {
        return this.get("host.name") + "." + this.get('hypervisorDomain');
      } else {
        // name is fqdn for managed host
        return this.get("host.name");
      }
    }).property('host', 'hypervisorDomain')

  });

});
define('fusor-ember-cli/components/labeled-radio-button', ['exports', 'ember-radio-button/components/labeled-radio-button'], function (exports, LabeledRadioButton) {

	'use strict';

	exports['default'] = LabeledRadioButton['default'];

});
define('fusor-ember-cli/components/markdown-to-html', ['exports', 'ember-cli-showdown/components/markdown-to-html'], function (exports, MarkdownToHtml) {

	'use strict';

	exports['default'] = MarkdownToHtml['default'];

});
define('fusor-ember-cli/components/node-profile', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    assignMenuOpenClass: '',

    nodes: [],

    getParamValue: function getParamValue(paramName, params) {
      var paramValue = null;
      var numParams = params.get('length');
      for (var i = 0; i < numParams; i++) {
        var param = params.objectAt(i);
        if (param.get('id') === paramName) {
          paramValue = param.get('value');
          break;
        }
      }
      return paramValue;
    },

    assignedRoles: (function () {
      var assignedRoles = [];
      var profile = this.get('profile');
      var params = this.get('plan.parameters');
      var self = this;
      var roles = this.get('plan.roles') || [];
      roles.forEach(function (role) {
        if (self.getParamValue(role.get('flavorParameterName'), params) === profile.get('name')) {
          assignedRoles.pushObject(role);
        }
      });
      return assignedRoles;
    }).property('profile', 'plan', 'plan.roles', 'plan.parameters'),

    unassignedRoles: (function () {
      var unassignedRoles = [];
      var assignedRoles = this.get('assignedRoles');
      var roles = this.get('plan.roles') || [];
      roles.forEach(function (role) {
        var unassignedRole = true;
        for (var i = 0; i < assignedRoles.length; i++) {
          if (role.get('name') === assignedRoles[i].get('name')) {
            unassignedRole = false;
            break;
          }
        }
        if (unassignedRole) {
          unassignedRoles.pushObject(role);
        }
      });
      return unassignedRoles;
    }).property('assignedRoles', 'plan', 'plan.roles'),

    allRolesAssigned: (function () {
      return this.get('unassignedRoles').length === 0;
    }).property('unassignedRoles'),

    /* jshint ignore:start */
    nodeMatchesProfile: function nodeMatchesProfile(node, profile) {
      var nodeMemory = node.get('properties.memory_mb');
      var nodeCPUs = node.get('properties.cpus');
      var nodeDisk = node.get('properties.local_gb');
      var nodeCPUArch = node.get('properties.cpu_arch');
      var profileMemory = profile.get('ram');
      var profileCPUs = profile.get('vcpus');
      var profileDisk = profile.get('disk');
      var profileCPUArch = profile.get('extra_specs.cpu_arch');
      return nodeMemory == profileMemory && nodeCPUs == profileCPUs && nodeDisk == profileDisk && nodeCPUArch == profileCPUArch;
    },
    /* jshint ignore:end */

    matchingNodeCount: (function () {
      var nodeCount = 0;
      var profile = this.get('profile');
      var self = this;
      this.get('nodes').forEach(function (node) {
        if (self.nodeMatchesProfile(node, profile)) {
          nodeCount++;
        }
      });
      return nodeCount;
    }).property('profile', 'nodes.[]'),

    hideAssignMenu: function hideAssignMenu() {
      this.set('assignMenuOpenClass', '');
    },

    assignClass: (function () {
      if (this.doAssign) {
        return "";
      } else {
        return "nodes-coalescing";
      }
    }).property('doAssign'),

    actions: {
      showAssignMenu: function showAssignMenu() {
        if (this.get('unassignedRoles').length > 0) {
          this.set('assignMenuOpenClass', 'open');
        }
      },

      assignRole: function assignRole(role) {
        var profile = this.get('profile');
        var plan = this.get('plan');
        this.sendAction('assignRole', plan, role, profile);
      },

      assignDroppedRole: function assignDroppedRole(role) {
        role.set('isDraggingObject', false);
        var profile = this.get('profile');
        var plan = this.get('plan');
        if (this.getParamValue(role.get('flavorParameterName'), plan.get('parameters')) !== profile.get('name')) {
          this.sendAction('assignRole', plan, role, profile);
        }
      },
      editRole: function editRole(role) {
        this.sendAction('editRole', role);
      },

      setRoleCount: function setRoleCount(role, count) {
        this.sendAction('setRoleCount', role, count);
      },

      removeRole: function removeRole(role) {
        var profile = this.get('profile');
        this.sendAction('removeRole', profile, role);
      }
    },
    didInsertElement: function didInsertElement() {
      var self = this;
      Ember['default'].$('body').on('click', function () {
        try {
          self.hideAssignMenu();
        } catch (error) {}
      });
    }
  });

});
define('fusor-ember-cli/components/object-bin', ['exports', 'ember-drag-drop/components/object-bin'], function (exports, ObjectBin) {

	'use strict';

	exports['default'] = ObjectBin['default'];

});
define('fusor-ember-cli/components/progress-bar', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['row'],

    valueProgress: (function () {
      if (this.get('model.state') === 'planning') {
        return 0.1;
      } else if (this.get('model.state')) {
        return this.get('model.progress') * 100;
      } else {
        return 0;
      }
    }).property('model.progress'),

    percentProgress: (function () {
      return this.get('valueProgress').toFixed(1);
    }).property('valueProgress'),

    percentProgressInt: (function () {
      return this.get('valueProgress').toFixed(0);
    }).property('valueProgress'),

    styleWidth: (function () {
      return new Ember['default'].Handlebars.SafeString(this.get('percentProgressInt') + '%');
    }).property('percentProgressInt'),

    progressBarClass: (function () {
      var result = this.get('model.result');
      if (result === 'success') {
        return 'progress-bar progress-bar-success';
      } else if (result === 'error') {
        return 'progress-bar progress-bar-danger';
      } else if (result === 'warning') {
        return 'progress-bar progress-bar-warning';
      } else {
        return 'progress-bar';
      }
    }).property('model.result'),

    deploymentStatus: (function () {
      var valueProgress = this.get('valueProgress');
      if (valueProgress) {
        if (valueProgress === 100) {
          return 'Finished';
        } else {
          return 'In Process';
        }
      } else {
        return 'Waiting for content';
      }
    }).property('valueProgress'),

    isSpin: (function () {
      return this.get('deploymentStatus') === 'In Process' && this.get('model.result') === 'pending';
    }).property('deploymentStatus', 'model.result'),

    progressBarMsg: (function () {
      if (this.get('deploymentStatus') === 'In Process' && this.get('model.result') === 'pending') {
        if (this.get('isSatelliteProgressBar')) {
          return "Syncing content";
        } else {
          return "Installing components";
        }
      } else if (this.get('model.result') === 'error') {
        return "Error";
      } else if (this.get('model.result') === 'warning') {
        return "Warning";
      } else if (!this.get('isStarted')) {
        return "Waiting for content";
      } else if (this.get('isFinished')) {
        if (this.get('isSatelliteProgressBar')) {
          return "Sync content and setup successful";
        } else {
          return "Deployment successful";
        }
      }
    }).property('deploymentStatus', 'model.result', 'isFinished', 'isSatelliteProgressBar'),

    isFinished: (function () {
      return this.get('valueProgress') === 100;
    }).property('valueProgress'),

    isStarted: (function () {
      return this.get('valueProgress') > 0;
    }).property('valueProgress'),

    isError: (function () {
      return this.get('model.result') === 'error';
    }).property('model.result'),

    hasHumanizedErrors: (function () {
      return Ember['default'].isPresent(this.get('model.humanized_errors'));
    }).property('model.humanized_errors')

  });

});
define('fusor-ember-cli/components/radio-button-f', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('fusor-ember-cli/components/radio-button-input', ['exports', 'ember-radio-button/components/radio-button-input'], function (exports, RadioButtonInput) {

	'use strict';

	exports['default'] = RadioButtonInput['default'];

});
define('fusor-ember-cli/components/radio-button', ['exports', 'ember-radio-button/components/radio-button'], function (exports, RadioButton) {

	'use strict';

	exports['default'] = RadioButton['default'];

});
define('fusor-ember-cli/components/range-text-f', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    typeInput: (function () {
      return this.get('type') ? this.get('type') : 'text';
    }).property('type'),

    actions: {
      showErrors: function showErrors() {
        this.set("showError", true);
      }
    }

  });

});
define('fusor-ember-cli/components/review-link', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    // all these values can be overwritten
    isRequired: false,
    isDefault: false,
    useYieldInstead: false,
    isExternalURL: false,
    validationMessage: 'required field',
    defaultMessage: 'default',

    eyeIcon: 'fa-eye',
    isEyeOpen: true,

    showValidationMessage: (function () {
      return this.get('isRequired') && Ember['default'].isBlank(this.get('value'));
    }).property('isRequired', 'value'),

    showDefaultMessage: (function () {
      return this.get('isDefault') && Ember['default'].isBlank(this.get('value'));
    }).property('isDefault', 'value'),

    valueFormatted: (function () {
      if (this.get('isPassword') && this.get('isEyeOpen') && Ember['default'].isPresent(this.get('value'))) {
        return '********';
      } else {
        return this.get('value');
      }
    }).property('isPassword', 'isEyeOpen', 'value'),

    isNotALink: (function () {
      return Ember['default'].isBlank(this.get('routeName')) && !this.get('isExternalURL');
    }).property('isExternalURL', 'routeName'),

    actions: {
      showPassword: function showPassword() {
        this.set('isEyeOpen', this.toggleProperty('isEyeOpen'));
        if (this.get('isEyeOpen')) {
          return this.set('eyeIcon', "fa-eye");
        } else {
          return this.set('eyeIcon', "fa-eye-slash");
        }
      }
    }

  });

});
define('fusor-ember-cli/components/rhci-item', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['rhci-item'],
    classNameBindings: ['isChecked:rhci-item-selected'],

    click: function click() {
      if (!this.get('isDisabled')) {
        this.set('isChecked', this.toggleProperty('isChecked'));
      }
    },

    showMsgToSelect: (function () {
      return this.get('isHover') && !this.get('isChecked');
    }).property('isHover', 'isChecked'),

    showMsgToDeselect: (function () {
      return this.get('isHover') && this.get('isChecked');
    }).property('isHover', 'isChecked'),

    mouseEnter: function mouseEnter() {
      this.set('isHover', true);
    },

    mouseLeave: function mouseLeave() {
      this.set('isHover', false);
    }

  });

});
define('fusor-ember-cli/components/rhci-start', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    setIsDisabledCfme: (function () {
      if (this.get('isRhev') || this.get('isOpenStack')) {
        return this.set('isDisabledCfme', false);
      } else {
        this.set('isCloudForms', false);
        return this.set('isDisabledCfme', true);
      }
    }).observes('isRhev', 'isOpenStack')

  });

});
define('fusor-ember-cli/components/rhci-wizard', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['col-md-12', 'page-header', 'page-header-rhci']
  });

});
define('fusor-ember-cli/components/select-f', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('fusor-ember-cli/components/select-simple-f', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('fusor-ember-cli/components/step-number', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'span',
    classNames: ['badge'],
    classNameBindings: ['badgeInverse'],
    badgeInverse: false
  });

});
define('fusor-ember-cli/components/text-f', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    typeInput: (function () {
      return this.get('type') ? this.get('type') : 'text';
    }).property('type'),

    validIsRequiredAndBlank: (function () {
      return this.get('isRequired') && Ember['default'].isBlank(this.get('value'));
    }).property('value', 'isRequired'),

    isPassword: (function () {
      return this.get('type') === 'password';
    }).property('type'),

    passwordTooShort: (function () {
      if (this.get('minChars')) {
        return this.get('isPassword') && this.get('value.length') < this.get('minChars');
      }
    }).property('value', 'isPassword', 'minChars'),

    invalidIsAlphaNumeric: (function () {
      if (this.get('isAlphaNumeric')) {
        var validAlphaNumbericRegex = new RegExp(/^[A-Za-z0-9_-]+$/);
        if (Ember['default'].isPresent(this.get('value'))) {
          return !this.get('value').match(validAlphaNumbericRegex);
        }
      }
    }).property('value', 'isAlphaNumeric'),

    invalidIsHostname: (function () {
      if (this.get('isHostname')) {
        var validHostnameRegex = "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$";
        if (Ember['default'].isPresent(this.get('value'))) {
          return !this.get('value').match(validHostnameRegex);
        }
      }
    }).property('value', 'isHostname'),

    hasError: (function () {
      return this.get('showValidationError') && (Ember['default'].isPresent(this.get('errors.name')) || this.get('passwordTooShort') || this.get('validIsRequiredAndBlank') || this.get('validIsUnique') || this.get('invalidIsAlphaNumeric') || this.get('invalidIsHostname'));
    }).property('showValidationError', 'errors.name', 'passwordTooShort', 'validIsRequiredAndBlank', 'validIsUnique', 'invalidIsAlphaNumeric', 'invalidIsHostname'),

    setOrigValue: (function () {
      console.log('didInsertElement');
      this.set('origValue', this.get('value'));
      console.log(this.get('origValue'));
    }).on('didInsertElement'),

    validIsUnique: (function () {
      if (this.get('isUnique')) {
        var uniqueNames = this.get('uniqueValues').removeObject(this.get('origValue'));
        return uniqueNames.contains(this.get('value'));
      }
    }).property('uniqueValues', 'value', 'isUnique'),

    eyeIcon: 'fa-eye',
    isEyeOpen: true,

    actions: {
      showValidationErrors: function showValidationErrors() {
        this.set("showValidationError", true);
      },

      showPassword: function showPassword() {
        this.set('isEyeOpen', this.toggleProperty('isEyeOpen'));
        if (this.get('isEyeOpen')) {
          this.set('typeInput', 'password');
          return this.set('eyeIcon', "fa-eye");
        } else {
          this.set('typeInput', 'text');
          return this.set('eyeIcon', "fa-eye-slash");
        }
      }
    }
  });

});
define('fusor-ember-cli/components/textarea-f', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    rowsPassed: (function () {
      if (this.get('rows')) {
        if (this.get('rows') > 0) {
          return true;
        }
      }
    }).property('rows'),

    numRows: (function () {
      return this.getWithDefault('rows', '');
    }).property(),

    numCols: (function () {
      return this.getWithDefault('cols', '');
    }).property()

  });

});
define('fusor-ember-cli/components/tr-deployment', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    tagName: 'tr',

    isStarted: (function () {
      return !!this.get('deployment.foreman_task_uuid');
    }).property('deployment.foreman_task_uuid'),

    formanTaskResult: (function () {
      var self = this;
      if (this.get('deployment.foreman_task_uuid')) {
        var call = this.get('targetObject.store').find('foreman-task', this.get('deployment.foreman_task_uuid'));
        return call.then(function (result) {
          return self.set('formanTaskResult', result.get('result'));
        });
      } else {
        return null;
      }
    }).property('deployment.foreman_task_uuid'),

    isError: (function () {
      return this.get('formanTaskResult') === 'error';
    }).property('formanTaskResult'),

    canDelete: (function () {
      if (!this.get('isStarted')) {
        return true;
      } else {
        return this.get('isError');
      }
    }).property('isStarted', 'isError'),

    routeNameForEdit: (function () {
      if (Ember['default'].isBlank(this.get('deployment.state'))) {
        return "deployment";
      } else if (this.get('model.state') === '1') {
        return "review.summary";
      } else {
        return "review.progress.overview";
      }
    }).property('deployment.progress'),

    actions: {
      openDeploymentModal: function openDeploymentModal(item) {
        this.get('targetObject').set('deploymentInModal', item);
        return this.get('targetObject').set('isOpenModal', true);
      }
    }

  });

});
define('fusor-ember-cli/components/tr-engine', ['exports', 'ember', 'fusor-ember-cli/mixins/tr-engine-hypervisor-mixin'], function (exports, Ember, TrEngineHypervisorMixin) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend(TrEngineHypervisorMixin['default'], {

    isSelectedAsEngine: (function () {
      if (this.get('selectedRhevEngineHost')) {
        return this.get('selectedRhevEngineHost.id') === this.get('host.id');
      }
    }).property('host', 'selectedRhevEngineHost'),

    isChecked: (function () {
      return this.get('isSelectedAsEngine');
    }).property('isSelectedAsEngine'),

    actions: {
      engineHostChanged: function engineHostChanged(host) {
        return this.sendAction("action", host);
      }
    }

  });

});
define('fusor-ember-cli/components/tr-hypervisor', ['exports', 'ember', 'fusor-ember-cli/mixins/tr-engine-hypervisor-mixin'], function (exports, Ember, TrEngineHypervisorMixin) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend(TrEngineHypervisorMixin['default'], {

    isChecked: (function () {
      return this.get('isSelectedAsHypervisor');
    }).property('isSelectedAsHypervisor'),

    observeHostName: (function () {
      if (this.get('isSelectedAsHypervisor')) {
        if (this.get('isCustomScheme') && this.get('customPreprendName')) {
          this.get('host').set('name', this.get('customPreprendName') + this.get('num'));
        } else if (this.get('isHypervisorN')) {
          this.get('host').set('name', 'hypervisor' + this.get('num'));
        } else if (this.get('isMac')) {
          this.get('host').set('name', 'mac' + this.get('host').get('mac').replace(/:/g, ''));
        } else {
          this.get('host').set('name', this.get('host.name'));
        }
        return this.send('saveHostname');
      }
    }).observes('isSelectedAsHypervisor', 'customPreprendName', 'isCustomScheme', 'isHypervisorN', 'isFreeform', 'isMac'),

    addOrRemoveHypervisor: (function () {
      if (this.get('isSelectedAsHypervisor')) {
        this.get('model').addObject(this.get('host'));
      } else {
        this.get('model').removeObject(this.get('host'));
      }
    }).observes('isSelectedAsHypervisor'),

    isSelectedAsHypervisor: (function () {
      return this.get('selectedIds').contains(this.get('host.id'));
    }).property('selectedIds', 'host.id')

  });

});
define('fusor-ember-cli/components/tr-management-app', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    isChecked: (function () {
      return this.get('consumerUUID') === this.get('managementApp.id');
    }).property('consumerUUID', 'managementApp.id'),

    bgColor: (function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }).property('isChecked'),

    actions: {
      changeManagementApp: function changeManagementApp() {
        this.sendAction('action', this.get('managementApp'));
      }
    }

  });

});
define('fusor-ember-cli/components/tr-organization', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    isChecked: (function () {
      return this.get('selectedOrganization') === this.get('org');
    }).property('selectedOrganization', 'org'),

    bgColor: (function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }).property('isChecked'),

    actions: {
      organizationChanged: function organizationChanged() {
        this.sendAction('action', this.get('org'));
      }
    }

  });

});
define('fusor-ember-cli/components/tr-subscription-saved', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    tagName: 'tr',

    classNames: ['white-on-blue']

  });

});
define('fusor-ember-cli/components/tr-subscription', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    systemType: (function () {
      if (this.get('subscription.type') === "NORMAL") {
        return 'Physical';
      } else {
        return this.get('subscription.type');
      }
    }).property('subscription.type'),

    bgColor: (function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }).property('isChecked'),

    envCssId: (function () {
      return 'env_' + this.get('env.id');
    }).property('env'),

    isQtyValid: (function () {
      if (this.get('subscription.qtyToAttach') > 0 && this.get('subscription.qtyAvailable') > 0) {
        return this.get('subscription.qtyToAttach') <= this.get('subscription.qtyAvailable');
      }
    }).property('subscription.qtyAvailable', 'subscription.qtyToAttach'),
    isQtyInValid: Ember['default'].computed.not('isQtyValid'),

    disableQty: (function () {
      return this.get('subscription.qtyAvailable') === 0;
    }).property('subscription.qtyAvailable'),

    setDefaultQtyToAttach: (function () {
      var contractNumber = this.get("subscription.contractNumber");
      var matchingSubscription = this.get('model').filterBy('contract_number', contractNumber).get('firstObject');
      if (Ember['default'].isPresent(matchingSubscription) && matchingSubscription.get('quantity_attached') > 0) {
        this.get('subscription').set('qtyToAttach', matchingSubscription.get('quantity_attached'));
      } else {
        this.get('subscription').set('qtyToAttach', this.get("numSubscriptionsRequired"));
        if (this.get('isQtyInValid')) {
          this.get('subscription').set('qtyToAttach', this.get("subscription.qtyAvailable"));
        }
      }
    }).on('didInsertElement'),

    setIsSelectedSubscription: (function () {
      var contractsNumbers = this.get('model').getEach('contract_number');
      console.log('contractsNumbers are:');
      console.log(contractsNumbers);
      var yesno = contractsNumbers.contains(this.get('subscription.contractNumber'));
      this.get('subscription').set('isSelectedSubscription', yesno);
    }).on('didInsertElement'),

    isChecked: Ember['default'].computed.alias('subscription.isSelectedSubscription'),

    actions: {
      setValidQty: function setValidQty() {
        if (this.get('isQtyInValid')) {
          return this.set('subscription.qtyToAttach', this.get('subscription.qtyAvailable'));
        }
      }
    }

  });

});
define('fusor-ember-cli/components/tr-task', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    tagName: 'tr',

    actionNameAndRepository: (function () {
      return this.get('task.humanized_name') + ' ' + (this.get('task.repository') || '');
    }).property('task.humanized_name', 'task.repository'),

    isError: (function () {
      return this.get('task.result') === 'error';
    }).property('task.result'),

    textBold: (function () {
      if (this.get('isError')) {
        return 'bold';
      }
    }).property('isError'),

    textColor: (function () {
      if (this.get('isError')) {
        return 'errorForValidation';
      }
    }).property('isError'),

    percentProgress: (function () {
      return (this.get('task.progress') * 100).toFixed(0) + '%';
    }).property('task.progress')

  });

});
define('fusor-ember-cli/components/traffic-type', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['subnet-type-pull', 'existing ui-draggable']
  });

});
define('fusor-ember-cli/components/wizard-item', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li',

    classNameBindings: ['active', 'completed', 'future'],

    attributeBindings: ['dataToggle:data-toggle', 'dataPlacement:data-placement', 'title'],

    dataToggle: "tooltip",
    dataPlacement: "top",
    title: (function () {
      return this.get('fullname');
    }).property('fullname'),

    active: (function () {
      return this.get('childViews').isAny('active');
    }).property('childViews.@each.active'),

    completed: (function () {
      return !this.get('isDisabled') && !this.get('active');
    }).property('isDisabled', 'active'),

    future: (function () {
      return this.get('isDisabled');
    }).property('isDisabled')

  });

});
define('fusor-ember-cli/components/wizard-step', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    minHeightStyle: (function () {
      return new Ember['default'].Handlebars.SafeString('min-height: ' + this.get('minHeight') + 'px;');
    }).property('minHeight'),

    resizeWizard: (function () {
      var self = this;
      this.resizeHandler = (function () {
        // Rob's jquery code for resizing in
        // https://github.com/patternfly/rcue-rdom/blob/master/html/assign-roles-rhci.html
        var documentHeight = 0;
        var navbarpfHeight = 0;
        var pageheaderrhciHeight = 0;
        var rowHeight = 0;
        if (Ember['default'].$('.sidebar-pf').length > 0 && matchMedia('only screen and (min-width: 768px)').matches) {
          documentHeight = Ember['default'].$(document).height();
          navbarpfHeight = Ember['default'].$('.navbar-pf').outerHeight();
          pageheaderrhciHeight = Ember['default'].$('.page-header-rhci').outerHeight();
          rowHeight = documentHeight - navbarpfHeight - pageheaderrhciHeight;
        }
        // set height of attribute in controller
        return self.set('minHeight', rowHeight);
      }).bind(this);

      Ember['default'].$(window).on('resize', this.resizeHandler);
      this.resizeHandler();
    }).on('didInsertElement'),

    removeResize: (function () {
      Ember['default'].$(window).off('resize', this.resizeHandler);
    }).on('willDestroyElement')

  });

});
define('fusor-ember-cli/controllers/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['deployment'],

    deployAsPlugin: true,
    isEmberCliMode: Ember['default'].computed.not('deployAsPlugin'),
    isUpstream: false,

    isContainer: Ember['default'].computed.alias("isUpstream"),

    isLoggedIn: true, //Ember.computed.alias("session.isAuthenticated"),

    loginUsername: Ember['default'].computed.alias("session.currentUser.login"),

    nameRHCI: Ember['default'].computed.alias("controllers.deployment.nameRHCI"),
    nameRhev: Ember['default'].computed.alias("controllers.deployment.nameRhev"),
    nameOpenStack: Ember['default'].computed.alias("controllers.deployment.nameOpenStack"),
    nameCloudForms: Ember['default'].computed.alias("controllers.deployment.nameCloudForms"),
    nameSatellite: Ember['default'].computed.alias("controllers.deployment.nameSatellite"),
    logoPath: Ember['default'].computed.alias("controllers.deployment.logoPath"),

    actions: {
      invalidate: function invalidate() {
        return this.transitionTo('login');
      },

      signOut: function signOut() {
        return this.transitionTo('login');
      }
    }

  });

});
define('fusor-ember-cli/controllers/assign-nodes', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment', 'register-nodes'],

    deploymentId: Ember['default'].computed.alias("controllers.deployment.model.id"),
    isCloudForms: Ember['default'].computed.alias("controllers.deployment.isCloudForms"),

    getParamValue: function getParamValue(paramName, params) {
      var paramValue = null;
      var numParams = params.get('length');
      for (var i = 0; i < numParams; i++) {
        var param = params.objectAt(i);
        if (param.get('id') === paramName) {
          paramValue = param.get('value');
          break;
        }
      }
      return paramValue;
    },

    images: (function () {
      return this.get('model.images');
    }).property('model.images'),

    unassignedRoles: (function () {
      var unassignedRoles = [];
      var params = this.get('model.plan.parameters');
      var self = this;
      this.get('model.plan.roles').forEach(function (role) {
        if (self.getParamValue(role.get('flavorParameterName'), params) == null) {
          unassignedRoles.pushObject(role);
        }
      });
      return unassignedRoles;
    }).property('model.plan.roles', 'model.plan.parameters'),

    allRolesAssigned: (function () {
      return this.get('unassignedRoles').length === 0;
    }).property('unassignedRoles'),

    noRolesAssigned: (function () {
      return this.get('unassignedRoles').length === this.get('model.plan.roles').length;
    }).property('unassignedRoles'),

    profiles: (function () {
      return this.get('model.profiles');
    }).property('model.profiles'),

    numProfiles: (function () {
      return this.get('model.profiles.length');
    }).property('model.profiles.[]'),

    nodes: (function () {
      return this.get('model.nodes');
    }).property('model.nodes'),

    nodeCount: (function () {
      return this.get('model.nodes.length');
    }).property('model.nodes.[]'),

    assignedNodeCount: (function () {
      var count = 0;
      var params = this.get('model.plan.parameters');
      var self = this;
      this.get('model.plan.roles').forEach(function (role) {
        count += parseInt(self.getParamValue(role.get('countParameterName'), params), 10);
      });
      return count;
    }).property('model.plan.roles', 'model.plan.parameters'),

    isDraggingRole: (function () {
      var isDragging = false;
      this.get('model.plan.roles').forEach(function (role) {
        if (role.get('isDraggingObject') === true) {
          isDragging = true;
        }
      });
      return isDragging;
    }).property('model.plan.roles', 'model.plan.roles.@each.isDraggingObject'),

    droppableClass: (function () {
      if (this.get('isDraggingRole')) {
        return 'deployment-roles-active';
      } else {
        return '';
      }
    }).property('isDraggingRole'),

    showLoadingSpinner: false,
    loadingSpinnerText: "Loading...",

    doAssignRole: function doAssignRole(plan, role, profile) {
      var data;
      var me = this;

      if (profile == null) {
        var unassignedRoles = this.get('unassignedRoles');
        if (unassignedRoles.contains(role)) {
          // Role is already unassigned, do nothing
          return;
        }
        data = { 'role_name': role.get('name'), 'flavor_name': null };
      } else {
        data = { 'role_name': role.get('name'), 'flavor_name': profile.get('name') };
      }

      me.set('loadingSpinnerText', "Loading...");
      me.set('showLoadingSpinner', true);
      var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');

      Ember['default'].$.ajax({
        url: '/fusor/api/openstack/deployments/' + this.get('deploymentId') + '/deployment_plans/' + plan.get('id') + '/update_role_flavor',
        type: 'PUT',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": token
        },
        data: JSON.stringify(data),
        success: function success(result) {
          me.set('showLoadingSpinner', false);
          console.log('SUCCESS');
          me.store.push('deployment_plan', me.store.normalize('deployment_plan', result.deployment_plan));
        },
        error: function error(_error) {
          console.log('ERROR');
          console.log(_error);
          // TODO: Remove the reload call once we determine how to get around the failure
          //       that appears to be due to port forwarding. But make sure to leave the show spinner setting.
          me.get('model').plan.reload().then(function () {
            me.set('showLoadingSpinner', false);
          });
        }
      });
    },

    edittedRole: null,
    edittedRoleImage: null,
    edittedRoleNodeCount: null,
    edittedRoleProfile: null,
    edittedRoleParameters: null,
    showSettings: true,

    openEditDialog: function openEditDialog() {
      this.set('editRoleModalOpened', true);
      this.set('editRoleModalClosed', false);
    },

    closeEditDialog: function closeEditDialog() {
      this.set('editRoleModalOpened', false);
      this.set('editRoleModalClosed', true);
    },

    openGlobalServiceConfigDialog: function openGlobalServiceConfigDialog() {
      this.set('editGlobalServiceConfigModalOpened', true);
      this.set('editGlobalServiceConfigModalClosed', false);
    },

    closeGlobalServiceConfigDialog: function closeGlobalServiceConfigDialog() {
      this.set('editGlobalServiceConfigModalOpened', false);
      this.set('editGlobalServiceConfigModalClosed', true);
    },

    settingsTabActiveClass: (function () {
      if (this.get('showSettings')) {
        return "active";
      } else {
        return "inactive";
      }
    }).property('showSettings'),

    configTabActiveClass: (function () {
      if (this.get('showSettings')) {
        return "inactive";
      } else {
        return "active";
      }
    }).property('showSettings'),

    handleOutsideClick: function handleOutsideClick(e) {
      // do nothing, this overrides the closing of the dialog when clicked outside of it
    },

    actions: {
      editRole: function editRole(role) {
        this.set('showRoleSettings', 'active');
        this.set('showRoleConfig', 'inactive');
        var roleParams = [];
        var advancedParams = [];
        this.get('model.plan.parameters').forEach(function (param) {
          var paramId = param.get('id');
          if (paramId.indexOf(role.get('parameterPrefix')) === 0) {
            param.displayId = paramId.substring(role.get('parameterPrefix').length);
            param.displayId = param.displayId.replace(/([a-z])([A-Z])/g, '$1 $2');

            /* Using boolean breaks saving...
                      if (param.get('parameter_type') === 'boolean') {
                        param.set('isBoolean', true);
                      }
            */
            if (param.get('hidden')) {
              param.set('inputType', 'password');
            } else {
              param.set('inputType', param.get('parameter_type'));
            }

            if (paramId === role.get('imageParameterName') || paramId === role.get('countParameterName') || paramId === role.get('flavorParameterName')) {
              roleParams.pushObject(param);
            } else if (param.get('parameter_type') !== 'json') {
              advancedParams.pushObject(param);
            }
          }
        });

        this.set('edittedRole', role);
        this.set('edittedRoleImage', this.getParamValue(role.get('imageParameterName'), roleParams));
        this.set('edittedRoleNodeCount', this.getParamValue(role.get('countParameterName'), roleParams));
        this.set('edittedRoleProfile', this.getParamValue(role.get('flavorParameterName'), roleParams));
        this.set('edittedRoleParameters', advancedParams);

        this.openEditDialog();
      },

      saveRole: function saveRole() {
        var me = this;
        var plan = this.get('model.plan');
        var role = this.get('edittedRole');

        var params = [{ 'name': role.get('imageParameterName'), 'value': this.get('edittedRoleImage') }, { 'name': role.get('countParameterName'), 'value': this.get('edittedRoleNodeCount') }, { 'name': role.get('flavorParameterName'), 'value': this.get('edittedRoleProfile') }];

        this.get('edittedRoleParameters').forEach(function (param) {
          params.push({ 'name': param.get('id'), 'value': param.get('value') });
        });
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');

        me.set('loadingSpinnerText', "Saving...");
        me.set('showLoadingSpinner', true);
        Ember['default'].$.ajax({
          url: '/fusor/api/openstack/deployments/' + this.get('deploymentId') + '/deployment_plans/' + plan.get('id') + '/update_parameters',
          type: 'PUT',
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token
          },
          data: JSON.stringify({ 'parameters': params }),
          success: function success() {
            console.log('SUCCESS');
            me.store.find('deployment-plan', deploymentId).then(function (result) {
              me.set('model.plan', result);
              me.set('showLoadingSpinner', false);
            });
          },
          error: function error(_error2) {
            console.log('ERROR');
            console.log(_error2);
            me.set('showLoadingSpinner', false);
          }
        });

        this.closeEditDialog();
      },

      setRoleCount: function setRoleCount(role, count) {
        var me = this;
        var plan = this.get('model.plan');
        var data = { 'role_name': role.get('name'), 'count': count };
        var deploymentId = this.get('deploymentId');
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');

        me.set('loadingSpinnerText', "Saving...");
        me.set('showLoadingSpinner', true);

        Ember['default'].$.ajax({
          url: '/fusor/api/openstack/deployments/' + deploymentId + '/deployment_plans/' + plan.get('id') + '/update_role_count',
          type: 'PUT',
          data: JSON.stringify(data),
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token
          },
          success: function success(result) {
            console.log('SUCCESS');
            me.store.find('deployment-plan', deploymentId).then(function (result) {
              me.set('model.plan', result);
              me.set('showLoadingSpinner', false);
            });
          },
          error: function error(_error3) {
            console.log('ERROR');
            console.log(_error3);
            me.set('showLoadingSpinner', false);
          }
        });
      },

      cancelEditRole: function cancelEditRole() {
        this.closeEditDialog();
      },

      assignRoleType: function assignRoleType(profile, roleType) {
        var role = this.getRoleByType(roleType);
        this.doAssignRole(profile, role);
      },

      assignRole: function assignRole(plan, role, profile) {
        this.doAssignRole(plan, role, profile);
      },

      removeRole: function removeRole(profile, role) {
        var plan = this.get('model.plan');
        this.doAssignRole(plan, role, null);
      },

      unassignRole: function unassignRole(role) {
        var plan = this.get('model.plan');
        this.doAssignRole(plan, role, null);
      },

      showRoleSettings: 'active',
      showRoleConfig: 'inactive',

      doShowSettings: function doShowSettings() {
        this.set('showRoleSettings', 'active');
        this.set('showRoleConfig', 'inactive');
      },

      doShowConfig: function doShowConfig() {
        this.set('showRoleSettings', 'inactive');
        this.set('showRoleConfig', 'active');
      },

      editGlobalServiceConfig: function editGlobalServiceConfig() {
        var planParams = [];
        this.get('model.plan.parameters').forEach(function (param) {
          if (param.get('id').indexOf('::') === -1) {
            param.displayId = param.get('id').replace(/([a-z])([A-Z])/g, '$1 $2');
            /* Using boolean breaks saving...
                      if (param.get('parameter_type') === 'boolean') {
                        param.set('isBoolean', true);
                      }
            */
            if (param.get('hidden')) {
              param.set('inputType', 'password');
            } else {
              param.set('inputType', param.get('parameter_type'));
            }
            if (param.get('parameter_type') !== 'json') {
              planParams.pushObject(param);
            }
          }
        });
        this.set('edittedPlanParameters', planParams);

        this.openGlobalServiceConfigDialog();
      },

      saveGlobalServiceConfig: function saveGlobalServiceConfig() {
        var me = this;
        var plan = this.get('model.plan');

        var params = [];
        this.get('edittedPlanParameters').forEach(function (param) {
          params.push({ 'name': param.get('id'), 'value': param.get('value') });
        });
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');

        me.set('loadingSpinnerText', "Saving...");
        me.set('showLoadingSpinner', true);
        Ember['default'].$.ajax({
          url: '/fusor/api/openstack/deployments/' + this.get('deploymentId') + '/deployment_plans/' + plan.get('id') + '/update_parameters',
          type: 'PUT',
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token
          },
          data: JSON.stringify({ 'parameters': params }),
          success: function success() {
            console.log('SUCCESS');
            me.set('showLoadingSpinner', false);
          },
          error: function error(_error4) {
            console.log('ERROR');
            console.log(_error4);
            me.set('showLoadingSpinner', false);
          }
        });

        this.closeGlobalServiceConfigDialog();
      },

      cancelGlobalServiceConfig: function cancelGlobalServiceConfig() {
        this.closeGlobalServiceConfigDialog();
      }
    },

    disableAssignNodesNext: (function () {
      return false;
    }).property('profiles'),

    nextStepRouteNameAssignNodes: (function () {
      if (this.get('isCloudForms')) {
        return 'cloudforms';
      } else {
        return 'subscriptions';
      }
    }).property('isCloudForms')
  });

});
define('fusor-ember-cli/controllers/cloudforms', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['deployment'],
    stepNumberCloudForms: Ember['default'].computed.alias("controllers.deployment.stepNumberCloudForms"),

    hasInstallLocation: (function () {
      return Ember['default'].isPresent(this.get('controllers.deployment.model.cfme_install_loc'));
    }).property('controllers.deployment.model.cfme_install_loc'),
    hasNoInstallLocation: Ember['default'].computed.not("hasInstallLocation"),

    hasCFRootPassword: (function () {
      return Ember['default'].isPresent(this.get('controllers.deployment.model.cfme_root_password')) && this.get('controllers.deployment.model.cfme_root_password.length') > 7;
    }).property('controllers.deployment.model.cfme_root_password'),
    hasNoCFRootPassword: Ember['default'].computed.not("hasCFRootPassword"),

    hasCFAdminPassword: (function () {
      return Ember['default'].isPresent(this.get('controllers.deployment.model.cfme_admin_password')) && this.get('controllers.deployment.model.cfme_admin_password.length') > 7;
    }).property('controllers.deployment.model.cfme_admin_password'),
    hasNoCFAdminPassword: Ember['default'].computed.not("hasCFAdminPassword"),

    validCloudforms: (function () {
      return this.get('hasInstallLocation') && this.get('hasCFRootPassword') && this.get('hasCFAdminPassword');
    }).property('hasInstallLocation', 'hasCFRootPassword', 'hasCFAdminPassword'),
    notValidCloudforms: Ember['default'].computed.not("validCloudforms")

  });

});
define('fusor-ember-cli/controllers/cloudforms/cfme-configuration', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment', 'cloudforms'],

    cfmeRootPassword: Ember['default'].computed.alias("controllers.deployment.model.cfme_root_password"),
    cfmeAdminPassword: Ember['default'].computed.alias("controllers.deployment.model.cfme_admin_password"),
    isSubscriptions: Ember['default'].computed.alias("controllers.deployment.isSubscriptions"),

    nextRouteNameAfterCFME: (function () {
      if (this.get('isSubscriptions')) {
        return 'subscriptions';
      } else {
        return 'review';
      }
    }).property('isSubscriptions')
  });

});
define('fusor-ember-cli/controllers/configure-environment', ['exports', 'ember', 'fusor-ember-cli/mixins/configure-environment-mixin'], function (exports, Ember, ConfigureEnvironmentMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(ConfigureEnvironmentMixin['default'], {

    needs: ['deployment', 'application'],

    satelliteTabRouteName: Ember['default'].computed.alias("controllers.deployment.model.satelliteTabRouteName"),
    organizationTabRouteName: Ember['default'].computed.alias("controllers.deployment.model.organizationTabRouteName"),
    isStarted: Ember['default'].computed.alias("controllers.deployment.isStarted"),

    selectedOrganization: Ember['default'].computed.alias("controllers.deployment.model.organization"),

    step2RouteName: Ember['default'].computed.alias("controllers.deployment.step2RouteName"),

    nullifyLifecycleEnvIfSelected: (function () {
      this.set('showAlertMessage', false);
      if (this.get('useDefaultOrgViewForEnv')) {
        this.set('selectedEnvironment', null);
        return this.get('controllers.deployment.model').set('lifecycle_environment', null);
      }
    }).observes('useDefaultOrgViewForEnv'),

    hasLifecycleEnvironment: Ember['default'].computed.alias("controllers.deployment.hasLifecycleEnvironment"),
    hasNoLifecycleEnvironment: Ember['default'].computed.alias("controllers.deployment.hasNoLifecycleEnvironment"),
    disableNextOnLifecycleEnvironment: Ember['default'].computed.alias("controllers.deployment.disableNextOnLifecycleEnvironment"),

    deployment: Ember['default'].computed.alias("controllers.deployment.model"),

    actions: {
      selectEnvironment: function selectEnvironment(environment) {
        this.set('showAlertMessage', false);
        this.set('selectedEnvironment', environment);
        return this.get('controllers.deployment.model').set('lifecycle_environment', environment);
      },

      createEnvironment: function createEnvironment() {
        var self = this;
        var selectedOrganization = this.get('selectedOrganization');
        this.set('fields_env.name', this.get('name'));
        this.set('fields_env.label', this.get('label'));
        this.set('fields_env.description', this.get('description'));
        this.set('fields_env.organization', selectedOrganization);

        var library = this.get('libraryEnv');
        // assign library to prior db attribute
        this.set('fields_env.prior', library.get('id'));
        var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
        environment.save().then(function (result) {
          //success
          self.get('lifecycleEnvironments').addObject(result);
          self.set('selectedEnvironment', environment);
          self.get('controllers.deployment.model').set('lifecycle_environment', environment);
          return self.set('showAlertMessage', true);
        }, function (error) {
          self.get('controllers.deployment').set('errorMsg', 'error saving environment' + error);
        });
      }
    }

  });

});
define('fusor-ember-cli/controllers/configure-organization', ['exports', 'ember', 'fusor-ember-cli/mixins/configure-organization-mixin'], function (exports, Ember, ConfigureOrganizationMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(ConfigureOrganizationMixin['default'], {

    needs: ['deployment', 'application'],

    organization: Ember['default'].computed.alias("controllers.deployment.organization"),

    disableNextOnConfigureOrganization: Ember['default'].computed.alias("controllers.deployment.disableNextOnConfigureOrganization"),
    satelliteTabRouteName: Ember['default'].computed.alias("controllers.deployment.satelliteTabRouteName"),
    lifecycleEnvironmentTabRouteName: Ember['default'].computed.alias("controllers.deployment.lifecycleEnvironmentTabRouteName"),
    deploymentName: Ember['default'].computed.alias("controllers.deployment.name"),
    isStarted: Ember['default'].computed.alias("controllers.deployment.isStarted"),

    actions: {
      selectOrganization: function selectOrganization(organization) {
        this.set('showAlertMessage', false);
        this.set('selectedOrganization', organization);
        return this.get('controllers.deployment').set('organization', organization);
      }
    }

  });

});
define('fusor-ember-cli/controllers/deployment-new', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-controller-mixin', 'fusor-ember-cli/mixins/disable-tab-mixin'], function (exports, Ember, DeploymentControllerMixin, DisableTabMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(DeploymentControllerMixin['default'], DisableTabMixin['default'], {

    needs: ['deployment-new/satellite/configure-environment', 'application'],

    routeNameSatellite: 'deployment-new.satellite',

    useDefaultOrgViewForEnv: Ember['default'].computed.alias("controllers.deployment-new/satellite/configure-environment.useDefaultOrgViewForEnv"),
    selectedEnvironmentDeploymentNew: Ember['default'].computed.alias("controllers.deployment-new/satellite/configure-environment.selectedEnvironment"),

    // these tabs will always be disabled within deployment-new
    isDisabledRhev: true,
    isDisabledOpenstack: true,
    isDisabledCloudForms: true,
    isDisabledSubscriptions: true,
    isDisabledReview: true,

    // selectedEnvironmentDeploymentNew is set to 'Library' by routes/deployment-new/satellite/configure-environment.js if Library is only environment
    hasLifecycleEnvironment: (function () {
      return !!this.get('model.lifecycle_environment.id') || this.get('useDefaultOrgViewForEnv') || this.get('selectedEnvironmentDeploymentNew');
    }).property('lifecycle_environment', 'useDefaultOrgViewForEnv'),
    hasNoLifecycleEnvironment: Ember['default'].computed.not('hasLifecycleEnvironment')

  });

});
define('fusor-ember-cli/controllers/deployment-new/satellite', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment-new'],

    satelliteTabRouteName: Ember['default'].computed.alias("controllers.deployment-new.satelliteTabRouteName"),
    organizationTabRouteName: Ember['default'].computed.alias("controllers.deployment-new.organizationTabRouteName"),
    lifecycleEnvironmentTabRouteName: Ember['default'].computed.alias("controllers.deployment-new.lifecycleEnvironmentTabRouteName"),

    disableTabDeploymentName: Ember['default'].computed.alias("controllers.deployment-new.disableTabDeploymentName"),
    disableTabConfigureOrganization: Ember['default'].computed.alias("controllers.deployment-new.disableTabConfigureOrganization"),
    disableTabLifecycleEnvironment: Ember['default'].computed.alias("controllers.deployment-new.disableTabLifecycleEnvironment"),

    backRouteNameOnSatIndex: 'deployment-new.start'

  });

});
define('fusor-ember-cli/controllers/deployment-new/satellite/configure-environment', ['exports', 'ember', 'fusor-ember-cli/mixins/configure-environment-mixin'], function (exports, Ember, ConfigureEnvironmentMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(ConfigureEnvironmentMixin['default'], {

    needs: ['deployment-new', 'deployment', 'application'],

    organizationTabRouteName: Ember['default'].computed.alias("controllers.deployment-new.organizationTabRouteName"),

    selectedOrganization: Ember['default'].computed.alias("controllers.deployment-new.model.organization"),

    step2RouteName: Ember['default'].computed.alias("controllers.deployment-new.step2RouteName"),

    nullifyLifecycleEnvIfSelected: (function () {
      this.set('showAlertMessage', false);
      if (this.get('useDefaultOrgViewForEnv')) {
        this.set('selectedEnvironment', null);
        return this.get('controllers.deployment-new.model').set('lifecycle_environment', null);
      }
    }).observes('useDefaultOrgViewForEnv'),

    hasLifecycleEnvironment: Ember['default'].computed.alias("controllers.deployment-new.hasLifecycleEnvironment"),
    hasNoLifecycleEnvironment: Ember['default'].computed.alias("controllers.deployment-new.hasNoLifecycleEnvironment"),
    disableNextOnLifecycleEnvironment: Ember['default'].computed.alias("controllers.deployment-new.disableNextOnLifecycleEnvironment"),

    deployment: Ember['default'].computed.alias("controllers.deployment-new"),

    actions: {
      selectEnvironment: function selectEnvironment(environment) {
        this.set('showAlertMessage', false);
        this.set('selectedEnvironment', environment);
        return this.get('controllers.deployment-new.model').set('lifecycle_environment', environment);
      },

      createEnvironment: function createEnvironment() {
        var self = this;
        var selectedOrganization = this.get('selectedOrganization');
        this.set('fields_env.name', this.get('name'));
        this.set('fields_env.label', this.get('label'));
        this.set('fields_env.description', this.get('description'));
        this.set('fields_env.organization', selectedOrganization);

        var library = this.get('libraryEnv');
        // assign library to prior db attribute
        this.set('fields_env.prior', library.get('id'));
        var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
        environment.save().then(function (result) {
          //success
          self.get('lifecycleEnvironments').addObject(result);
          self.set('selectedEnvironment', environment);
          self.get('controllers.deployment-new.model').set('lifecycle_environment', environment);
          return self.set('showAlertMessage', true);
        }, function (error) {
          self.get('controllers.deployment').set('errorMsg', 'error saving environment' + error);
        });
      }
    }

  });

});
define('fusor-ember-cli/controllers/deployment-new/satellite/configure-organization', ['exports', 'ember', 'fusor-ember-cli/mixins/configure-organization-mixin'], function (exports, Ember, ConfigureOrganizationMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(ConfigureOrganizationMixin['default'], {

    needs: ['deployment-new', 'deployment', 'application'],

    organization: Ember['default'].computed.alias("controllers.deployment-new.model.organization"),

    disableNextOnConfigureOrganization: Ember['default'].computed.alias("controllers.deployment-new.disableNextOnConfigureOrganization"),
    satelliteTabRouteName: Ember['default'].computed.alias("controllers.deployment-new.satelliteTabRouteName"),
    lifecycleEnvironmentTabRouteName: Ember['default'].computed.alias("controllers.deployment-new.lifecycleEnvironmentTabRouteName"),
    deploymentName: Ember['default'].computed.alias("controllers.deployment-new.model.name"),

    actions: {
      selectOrganization: function selectOrganization(organization) {
        this.set('showAlertMessage', false);
        this.set('selectedOrganization', organization);
        return this.get('controllers.deployment-new.model').set('organization', organization);
      }
    }

  });

});
define('fusor-ember-cli/controllers/deployment-new/satellite/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment-new', 'deployment-new/satellite', 'deployment', 'application'],

    name: Ember['default'].computed.alias("controllers.deployment-new.name"),
    description: Ember['default'].computed.alias("controllers.deployment-new.description"),

    organizationTabRouteName: Ember['default'].computed.alias("controllers.deployment-new/satellite.organizationTabRouteName"),

    disableNextOnDeploymentName: Ember['default'].computed.alias("controllers.deployment-new.disableNextOnDeploymentName"),

    idSatName: 'deployment_new_sat_name',
    idSatDesc: 'deployment_new_sat_desc',

    backRouteNameOnSatIndex: 'deployment-new.start',

    deploymentNames: Ember['default'].computed.alias("controllers.application.deploymentNames")

  });

});
define('fusor-ember-cli/controllers/deployment-new/start', ['exports', 'ember', 'fusor-ember-cli/mixins/start-controller-mixin'], function (exports, Ember, StartControllerMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(StartControllerMixin['default'], {

    needs: ['deployment-new'],

    isRhev: Ember['default'].computed.alias("controllers.deployment-new.model.deploy_rhev"),
    isOpenStack: Ember['default'].computed.alias("controllers.deployment-new.model.deploy_openstack"),
    isCloudForms: Ember['default'].computed.alias("controllers.deployment-new.model.deploy_cfme"),
    isSubscriptions: Ember['default'].computed.alias("controllers.deployment-new.isSubscriptions")

  });

});
define('fusor-ember-cli/controllers/deployment-plan', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/deployment-role', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/deployment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-controller-mixin', 'fusor-ember-cli/mixins/disable-tab-mixin'], function (exports, Ember, DeploymentControllerMixin, DisableTabMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(DeploymentControllerMixin['default'], DisableTabMixin['default'], {

    needs: ['configure-environment', 'deployments', 'rhev', 'openstack', 'cloudforms', 'subscriptions/credentials', 'subscriptions/select-subscriptions'],

    routeNameSatellite: 'satellite',

    useDefaultOrgViewForEnv: Ember['default'].computed.alias("controllers.configure-environment.useDefaultOrgViewForEnv"),

    isOpenModal: Ember['default'].computed.alias("controllers.deployments.isOpenModal"),
    deploymentInModal: Ember['default'].computed.alias("controllers.deployments.deploymentInModal"),

    validRhev: Ember['default'].computed.alias("controllers.rhev.validRhev"),
    validOpenStack: Ember['default'].computed.alias("controllers.openstack.validOpenStack"),
    validCloudforms: Ember['default'].computed.alias("controllers.cloudforms.validCloudforms"),
    disableNextOnSelectSubscriptions: Ember['default'].computed.alias("controllers.subscriptions/select-subscriptions.disableNextOnSelectSubscriptions"),

    isDisabledRhev: Ember['default'].computed.alias("satelliteInvalid"),

    isDisabledOpenstack: (function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev');
    }).property("satelliteInvalid", 'isRhev', 'validRhev'),

    isDisabledCloudForms: (function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev') || this.get('isOpenStack') && !this.get('validOpenStack');
    }).property("satelliteInvalid", 'isRhev', 'isOpenStack', 'validRhev', 'validOpenStack'),

    isDisabledSubscriptions: (function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev') || this.get('isOpenStack') && !this.get('validOpenStack') || this.get('isCloudForms') && !this.get('validCloudforms');
    }).property("satelliteInvalid", 'isRhev', 'isOpenStack', 'validRhev', 'validOpenStack', 'isCloudForms', 'validCloudforms'),

    hasSubscriptionUUID: (function () {
      return Ember['default'].isPresent(this.get('organizationUpstreamConsumerUUID')) || Ember['default'].isPresent(this.get('model.upstream_consumer_uuid'));
    }).property('organizationUpstreamConsumerUUID', 'model.upstream_consumer_uuid'),

    isDisabledReview: (function () {
      return this.get('isDisabledSubscriptions') || !this.get("hasSubscriptionUUID") || this.get('disableNextOnSelectSubscriptions');
    }).property('isDisabledSubscriptions', 'hasSubscriptionUUID', 'disableNextOnSelectSubscriptions'),

    hasLifecycleEnvironment: (function () {
      return !!this.get('model.lifecycle_environment.id') || this.get('useDefaultOrgViewForEnv');
    }).property('model.lifecycle_environment', 'useDefaultOrgViewForEnv'),
    hasNoLifecycleEnvironment: Ember['default'].computed.not('hasLifecycleEnvironment'),

    satelliteInvalid: Ember['default'].computed.or('hasNoName', 'hasNoOrganization', 'hasNoLifecycleEnvironment'),

    skipContent: false,

    numSubscriptionsRequired: (function () {
      var num = 0;
      if (this.get('isRhev')) {
        num = num + 1 + this.get('model.discovered_hosts.length'); // 1 is for engine
      }
      if (this.get('isCloudForms')) {
        num = num + 1;
      }
      return num;
    }).property('isRhev', 'isOpenStack', 'isCloudForms', 'model.discovered_hosts.[]'),

    managementApplicationName: (function () {
      if (Ember['default'].isPresent(this.get('model.upstream_consumer_name'))) {
        return this.get('model.upstream_consumer_name');
      } else {
        return this.get('controllers.subscriptions/credentials.organizationUpstreamConsumerName');
      }
    }).property('model.upstream_consumer_name', 'controllers.subscriptions/credentials.organizationUpstreamConsumerName'),

    hasEngine: (function () {
      return Ember['default'].isPresent(this.get("model.discovered_host.id"));
    }).property('model.discovered_host.id'),
    hasNoEngine: Ember['default'].computed.not('hasEngine'),

    cntHypervisors: (function () {
      return this.get('model.discovered_hosts.length');
    }).property('model.discovered_hosts.[]'),

    hasHypervisors: (function () {
      return this.get('cntHypervisors') > 0;
    }).property('cntHypervisors'),
    hasNoHypervisors: Ember['default'].computed.not('hasHypervisors'),

    isStarted: (function () {
      return !!this.get('model.foreman_task_uuid');
    }).property('model.foreman_task_uuid'),
    isNotStarted: Ember['default'].computed.not('isStarted'),

    isFinished: (function () {
      return this.get('model.progress') === '1';
    }).property('model.progress'),
    isNotFinished: Ember['default'].computed.not('isFinished'),

    cntSubscriptions: (function () {
      return this.get('model.subscriptions.length');
    }).property('model.subscriptions.[]'),

    hasSubscriptions: (function () {
      return this.get('cntSubscriptions') > 0;
    }).property('cntSubscriptions'),
    hasNoSubscriptions: Ember['default'].computed.not('hasSubscriptions')

  });

});
define('fusor-ember-cli/controllers/deployment/start', ['exports', 'ember', 'fusor-ember-cli/mixins/start-controller-mixin'], function (exports, Ember, StartControllerMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(StartControllerMixin['default'], {

    needs: ['deployment'],

    isRhev: Ember['default'].computed.alias("controllers.deployment.model.deploy_rhev"),
    isOpenStack: Ember['default'].computed.alias("controllers.deployment.model.deploy_openstack"),
    isCloudForms: Ember['default'].computed.alias("controllers.deployment.model.deploy_cfme"),
    isSubscriptions: Ember['default'].computed.alias("controllers.deployment.model.isSubscriptions")

  });

});
define('fusor-ember-cli/controllers/deployments', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({

    sortProperties: ['name'],
    sortAscending: true,

    sortedDeployments: Ember['default'].computed.sort('model', 'sortProperties'),

    searchDeploymentString: '',

    filteredDeployments: (function () {
      var searchDeploymentString = this.get('searchDeploymentString');
      var rx = new RegExp(searchDeploymentString, 'gi');
      var sortedDeployments = this.get('sortedDeployments');

      if (sortedDeployments.get('length') > 1) {
        return sortedDeployments.filter(function (record) {
          if (Ember['default'].isPresent(record.get('name'))) {
            return record.get('name').match(rx);
          }
        });
      } else {
        return sortedDeployments;
      }
    }).property('sortedDeployments', 'searchDeploymentString', 'model.[]'),

    // related to deleted-deployment-modal
    isOpenModal: false,
    deploymentInModal: null,

    actions: {
      openDeploymentModal: function openDeploymentModal(item) {
        this.set('deploymentInModal', item);
        return this.set('isOpenModal', true);
      }
    }
  });

});
define('fusor-ember-cli/controllers/discovered-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment', 'hypervisor/discovered-host', 'engine/discovered-host']

  });

});
define('fusor-ember-cli/controllers/engine', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['rhev'],
    engineTabName: Ember['default'].computed.alias("controllers.rhev.engineTabName"),
    engineTabNameLowercase: (function () {
      return this.get('engineTabName').toLowerCase();
    }).property('engineTabName')
  });

});
define('fusor-ember-cli/controllers/engine/discovered-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment', 'hypervisor/discovered-host', 'rhev'],

    selectedRhevEngineHost: Ember['default'].computed.alias("model"),
    rhevIsSelfHosted: Ember['default'].computed.alias("controllers.deployment.model.rhev_is_self_hosted"),
    isStarted: Ember['default'].computed.alias("controllers.deployment.isStarted"),
    isNotStarted: Ember['default'].computed.alias("controllers.deployment.isNotStarted"),

    hypervisorModelIds: (function () {
      return this.get('controllers.deployment.model.discovered_hosts').getEach('id');
    }).property('controllers.deployment.model.discovered_hosts.[]'),

    engineNextRouteName: (function () {
      if (this.get('rhevIsSelfHosted')) {
        return 'rhev-options';
      } else {
        return 'hypervisor.discovered-host';
      }
    }).property('rhevIsSelfHosted'),

    // Filter out hosts selected as Hypervisor
    availableHosts: (function () {
      // TODO: Ember.computed.filter() caused problems. error item.get is not a function
      var self = this;
      var allDiscoveredHosts = this.get('allDiscoveredHosts');
      if (this.get('allDiscoveredHosts')) {
        return allDiscoveredHosts.filter(function (item) {
          if (self.get('hypervisorModelIds')) {
            //console.log(item.get('id'));
            //console.log(self.get('hypervisorModelIds'));
            return !self.get('hypervisorModelIds').contains(item.get('id'));
          }
        });
      }
    }).property('allDiscoveredHosts.[]', 'hypervisorModelIds.[]'),

    // same as Engine. TODO. put it mixin
    filteredHosts: (function () {
      var searchString = this.get('searchString');
      var rx = new RegExp(searchString, 'gi');
      var availableHosts = this.get('availableHosts');

      if (this.get('isStarted')) {
        return Ember['default'].A([this.get('model')]);
      } else if (availableHosts.get('length') > 0) {
        return availableHosts.filter(function (record) {
          return record.get('name').match(rx) || record.get('memory_human_size').match(rx) || record.get('disks_human_size').match(rx) || record.get('subnet_to_s').match(rx) || record.get('mac').match(rx);
        });
      } else {
        return availableHosts;
      }
    }).property('availableHosts.[]', 'searchString', 'isStarted'),

    numSelected: (function () {
      return this.get('model.id') ? 1 : 0;
    }).property('model.id'),

    actions: {
      setEngine: function setEngine(host) {
        var deployment = this.get('controllers.deployment');
        deployment.set('model.discovered_host', host);
      }
    }

  });

});
define('fusor-ember-cli/controllers/entitlements', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({

    showEntitlements: true,
    arrayQuantities: Ember['default'].computed.mapBy('model', 'quantity'),
    totalQuantity: Ember['default'].computed.sum('arrayQuantities')

  });

});
define('fusor-ember-cli/controllers/flavor', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/host', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/hypervisor', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['rhev', 'deployment'],

    hostNamingScheme: Ember['default'].computed.alias("controllers.deployment.model.host_naming_scheme"),
    customPreprendName: Ember['default'].computed.alias("controllers.deployment.model.custom_preprend_name"),

    namingOptions: ['Freeform', 'MAC address', 'hypervisorN', 'Custom scheme'],

    isFreeform: (function () {
      return this.get('hostNamingScheme') === 'Freeform';
    }).property('hostNamingScheme'),

    isMac: (function () {
      return this.get('hostNamingScheme') === 'MAC address';
    }).property('hostNamingScheme'),

    isCustomScheme: (function () {
      return this.get('hostNamingScheme') === 'Custom scheme';
    }).property('hostNamingScheme'),

    isHypervisorN: (function () {
      return this.get('hostNamingScheme') === 'hypervisorN';
    }).property('hostNamingScheme')

  });

});
define('fusor-ember-cli/controllers/hypervisor/discovered-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({
    needs: ['deployment', 'hypervisor', 'rhev'],

    selectedRhevEngine: Ember['default'].computed.alias("controllers.deployment.model.discovered_host"),
    rhevIsSelfHosted: Ember['default'].computed.alias("controllers.deployment.model.rhev_is_self_hosted"),
    isStarted: Ember['default'].computed.alias("controllers.deployment.isStarted"),
    isNotStarted: Ember['default'].computed.alias("controllers.deployment.isNotStarted"),

    isCustomScheme: Ember['default'].computed.alias("controllers.hypervisor.isCustomScheme"),
    isHypervisorN: Ember['default'].computed.alias("controllers.hypervisor.isHypervisorN"),
    customPreprendName: Ember['default'].computed.alias("controllers.hypervisor.model.custom_preprend_name"),
    isFreeform: Ember['default'].computed.alias("controllers.hypervisor.isFreeform"),
    isMac: Ember['default'].computed.alias("controllers.hypervisor.isMac"),

    // Filter out hosts selected as Engine
    availableHosts: (function () {
      // TODO: Ember.computed.filter() caused problems. error item.get is not a function
      var self = this;
      var allDiscoveredHosts = this.get('allDiscoveredHosts');
      if (this.get('allDiscoveredHosts')) {
        return allDiscoveredHosts.filter(function (item) {
          if (self.get('hypervisorModelIds')) {
            //console.log(item.get('id'));
            //console.log(self.get('hypervisorModelIds'));
            return item.get('id') !== self.get('selectedRhevEngine.id');
          }
        });
      }
    }).property('allDiscoveredHosts.[]', 'hypervisorModelIds.[]'),

    // same as Engine. TODO. put it mixin
    filteredHosts: (function () {
      var searchString = this.get('searchString');
      var rx = new RegExp(searchString, 'gi');
      var availableHosts = this.get('availableHosts');

      if (this.get('isStarted')) {
        return this.get('model');
      } else if (availableHosts.get('length') > 0) {
        return availableHosts.filter(function (record) {
          return record.get('name').match(rx) || record.get('memory_human_size').match(rx) || record.get('disks_human_size').match(rx) || record.get('subnet_to_s').match(rx) || record.get('mac').match(rx);
        });
      } else {
        return availableHosts;
      }
    }).property('availableHosts.[]', 'searchString', 'isStarted'),

    hypervisorModelIds: (function () {
      if (this.get('model')) {
        var allIds = this.get('model').getEach('id');
        return allIds.removeObject(this.get('selectedRhevEngine').get('id'));
      } else {
        return [];
      }
    }).property('model.[]', 'selectedRhevEngine'),

    cntSelectedHypervisorHosts: Ember['default'].computed.alias('hypervisorModelIds.length'),

    hostInflection: (function () {
      return this.get('cntSelectedHypervisorHosts') === 1 ? 'host' : 'hosts';
    }).property('cntSelectedHypervisorHosts'),

    isAllChecked: (function () {
      return this.get('cntSelectedHypervisorHosts') === this.get('availableHosts.length');
    }).property('availableHosts.@each', 'cntSelectedHypervisorHosts'),

    observeAllChecked: (function (row) {
      // TODO
      if (this.get('allChecked')) {
        return this.send('setCheckAll');
      } else {
        return this.send('setUncheckAll');
      }
    }).observes('allChecked'),

    hypervisorBackRouteName: (function () {
      if (this.get('rhevIsSelfHosted')) {
        return 'rhev-setup';
      } else {
        return 'engine.discovered-host';
      }
    }).property('rhevIsSelfHosted'),

    actions: {

      setCheckAll: function setCheckAll() {
        this.get('model').setObjects([]);
        return this.get('model').addObjects(this.get('availableHosts'));
      },

      setUncheckAll: function setUncheckAll() {
        this.get('model').setObjects([]);
      }

    }

  });

});
define('fusor-ember-cli/controllers/image', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/new-environment', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/new-organization', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/node', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/openstack-deployment', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/openstack', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['deployment', 'undercloud-deploy'],

    stepNumberOpenstack: Ember['default'].computed.alias("controllers.deployment.stepNumberOpenstack"),
    disableTabRegisterNodes: Ember['default'].computed.empty("model.openstack_undercloud_password"),
    disableTabAssignNodes: Ember['default'].computed.empty("model.openstack_undercloud_password"),
    validOpenStack: true //TODO
  });

});
define('fusor-ember-cli/controllers/register-nodes', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    deploymentId: Ember['default'].computed.alias("controllers.deployment.model.id"),
    init: function init() {
      this._super();
      this.Node = Ember['default'].Object.extend({
        name: (function () {
          var ipAddress = this.get('ipAddress');
          if (!Ember['default'].isEmpty(ipAddress)) {
            return ipAddress;
          } else {
            return 'Undefined node';
          }
        }).property('ipAddress'),
        driver: null,
        ipAddress: null,
        ipmiUsername: '',
        ipmiPassword: '',
        nicMacAddress: '',

        isSelected: false,
        isActiveClass: (function () {
          if (this.get('isSelected') === true) {
            return 'active';
          } else {
            return 'inactive';
          }
        }).property('isSelected'),
        isError: false,
        errorMessage: ''
      });
    },

    newNodes: Ember['default'].A(),
    errorNodes: Ember['default'].A(),
    edittedNodes: Ember['default'].A(),
    introspectionNodes: Ember['default'].A(),

    drivers: ['pxe_ipmitool', 'pxe_ssh'],
    selectedNode: null,

    registrationInProgress: false,
    initRegInProcess: false,
    introspectionInProgress: false,
    registerNodesModalOpened: false,
    registerNodesModalClosed: true,
    modalOpen: false,

    registrationError: (function () {
      return this.get('errorNodes.length') > 0;
    }).property('errorNodes.[]'),

    registrationErrorMessage: (function () {
      var count = this.get('errorNodes').length;
      if (count === 1) {
        return '1 node not registered';
      } else if (count > 1) {
        return count + ' nodes not registered';
      } else {
        return '';
      }
    }).property('errorNodes.[]'),

    registrationErrorTip: (function () {
      var tip = '';
      var errorNodes = this.get('errorNodes');

      errorNodes.forEach(function (item, index) {
        if (index > 0) {
          tip += '\n';
        }
        tip += item.errorMessage;
      });
      return tip;
    }).property('errorNodes.[]'),

    preRegistered: 0,

    successNodesLength: (function () {
      if (!this.get('introspectionInProgress')) {
        return 0;
      }
      return this.get('model.nodes.length') - this.get('preRegistered');
    }).property('model.nodes.[]', 'introspectionNodes.[]', 'preRegistered', 'introspectionInProgress'),

    nodeRegComplete: (function () {
      return this.get('successNodesLength') + this.get('errorNodes.length');
    }).property('successNodesLength', 'errorNodes.[]'),

    nodeRegTotal: (function () {
      var total = this.get('nodeRegComplete') + this.get('newNodes').length + this.get('introspectionNodes').length;

      // During the initial registration process there is a node in limbo...
      if (this.get('initRegInProcess')) {
        total++;
      }

      return total;
    }).property('nodeRegComplete', 'newNodes.[]', 'introspectionNodes.[]', 'registrationInProgress', 'introspectionInProgress'),

    nodeRegPercentComplete: (function () {
      var nodeRegTotal = this.get('nodeRegTotal');
      var nodeRegComplete = this.get('nodeRegComplete');
      var nodesIntrospection = this.get('introspectionNodes').length;

      var numSteps = nodeRegTotal * 4;
      var stepsComplete = nodeRegComplete * 4 + nodesIntrospection * 1;

      return Math.round(stepsComplete / numSteps * 100);
    }).property('nodeRegComplete', 'nodeRegTotal', 'newNodes', 'introspectionNodes'),

    noRegisteredNodes: (function () {
      return this.get('model.nodes.length') < 1;
    }).property('model.nodes.[]'),

    hasSelectedNode: (function () {
      return this.get('selectedNode') != null;
    }).property('selectedNode'),

    nodeFormStyle: (function () {
      if (this.get('edittedNodes.length') > 0 && this.get('hasSelectedNode')) {
        return 'visibility:visible;';
      } else {
        return 'visibility:hidden;';
      }
    }).property('edittedNodes.[]', 'hasSelectedNode'),

    updateNodeSelection: function updateNodeSelection(node) {
      var oldSelection = this.get('selectedNode');
      if (oldSelection) {
        oldSelection.set('isSelected', false);
      }

      if (node) {
        node.set('isSelected', true);
      }
      this.set('selectedNode', node);
    },

    handleOutsideClick: function handleOutsideClick() {
      // do nothing, this overrides the closing of the dialog when clicked outside of it
    },

    openRegDialog: function openRegDialog() {
      this.set('registerNodesModalOpened', true);
      this.set('registerNodesModalClosed', false);
      this.set('modalOpen', true);
    },

    closeRegDialog: function closeRegDialog() {
      this.set('registerNodesModalOpened', false);
      this.set('registerNodesModalClosed', true);
      this.set('modalOpen', false);
    },

    getCSVFileInput: function getCSVFileInput() {
      return $('#regNodesUploadFileInput')[0];
    },

    actions: {
      showNodeRegistrationModal: function showNodeRegistrationModal() {
        var newNodes = this.get('newNodes');
        var errorNodes = this.get('errorNodes');
        var edittedNodes = this.get('edittedNodes');

        edittedNodes.setObjects(newNodes);
        var savedErrors = Ember['default'].A();
        errorNodes.forEach(function (item) {
          if (!item.isIntrospectionError) {
            edittedNodes.pushObject(item);
          } else {
            savedErrors.push(item);
          }
        });
        this.set('errorNodes', savedErrors);

        // Always start with at least one profile
        if (edittedNodes.get('length') === 0) {
          var newNode = this.Node.create({});
          newNode.isDefault = true;
          edittedNodes.pushObject(newNode);
        }

        this.set('edittedNodes', edittedNodes);
        this.updateNodeSelection(edittedNodes[0]);
        this.openRegDialog();
      },

      registerNodes: function registerNodes() {
        this.closeRegDialog();
        var edittedNodes = this.get('edittedNodes');
        var errorNodes = this.get('errorNodes');
        var newNodes = this.get('newNodes');
        edittedNodes.forEach(function (item) {
          item.isError = false;
          item.errorMessage = '';
          errorNodes.removeObject(item);
        });

        newNodes.setObjects(edittedNodes);
        this.set('edittedNodes', Ember['default'].A());
        this.set('newNodes', newNodes);
        this.registerNewNodes();
      },

      cancelRegisterNodes: function cancelRegisterNodes() {
        this.closeRegDialog();
        this.set('edittedNodes', Ember['default'].A());
        // Unpause if necessary
        if (this.get('registrationPaused')) {
          this.doNextNodeRegistration();
        }
      },

      selectNode: function selectNode(node) {
        this.updateNodeSelection(node);
      },

      addNode: function addNode() {
        var edittedNodes = this.get('edittedNodes');
        var newNode = this.Node.create({});
        edittedNodes.insertAt(0, newNode);
        this.updateNodeSelection(newNode);
      },

      removeNode: function removeNode(node) {
        var nodes = this.get('edittedNodes');
        nodes.removeObject(node);
        this.set('edittedNodes', nodes);

        if (this.get('selectedNode') === node) {
          this.updateNodeSelection(nodes[0]);
        }
      },

      updloadCsvFile: function updloadCsvFile() {
        var uploadfile = this.getCSVFileInput();
        uploadfile.click();
      },

      csvFileChosen: function csvFileChosen() {
        var fileInput = this.getCSVFileInput();
        var file = fileInput.files[0];
        var me = this;
        if (file) {
          var reader = new FileReader();
          reader.onload = function () {
            var text = reader.result;
            var data = $.csv.toArrays(text);
            var edittedNodes = me.get('edittedNodes');
            // If the default added node is still listed, remove it
            if (edittedNodes.get('length') === 1 && edittedNodes[0].isDefault && Ember['default'].isEmpty(edittedNodes[0].get('ipAddress'))) {
              edittedNodes.removeObject(edittedNodes[0]);
            }

            for (var row in data) {
              var node_data = data[row];
              if (Array.isArray(node_data) && node_data.length >= 5) {
                var driver = node_data[0].trim();
                var ipmi_address = node_data[1].trim();
                var ipmi_username = node_data[2].trim();
                var ipmi_password = node_data[3].trim();
                var mac_address = node_data[4].trim();

                var newNode = me.Node.create({
                  driver: driver,
                  ipAddress: ipmi_address,
                  ipmiUsername: ipmi_username,
                  ipmiPassword: ipmi_password,
                  nicMacAddress: mac_address
                });
                edittedNodes.insertAt(0, newNode);
                me.updateNodeSelection(newNode);
              }
            }
          };
          reader.onloadend = function () {
            if (reader.error) {
              console.log(reader.error.message);
            }
          };

          reader.readAsText(file);
        }
      }
    },

    disableRegisterNodesNext: (function () {
      var nodeCount = this.get('model').nodes.get('length');
      return nodeCount < 2;
    }).property('model.nodes.length'),

    registerNewNodes: function registerNewNodes() {
      var newNodes = this.get('newNodes');
      if (newNodes && newNodes.get('length') > 0) {
        if (!this.get('registrationInProgress')) {
          this.set('introspectionNodes', Ember['default'].A());
          this.set('preRegistered', this.get('model.nodes.length'));
          this.doNextNodeRegistration();
        } else if (this.get('registrationPaused') || this.get('introspectionInProgress')) {
          this.doNextNodeRegistration();
        }
      }
    },

    updateAfterRegistration: function updateAfterRegistration(resolve) {
      var me = this;
      var deploymentId = this.get('deploymentId');
      me.get('model').nodes.store.find('node', { deployment_id: deploymentId, reload: true }).then(function () {
        me.get('model').profiles.store.find('flavor', { deployment_id: deploymentId, reload: true }).then(function () {
          if (resolve) {
            resolve();
          }
        });
      });
    },

    doNextNodeRegistration: function doNextNodeRegistration(lastNode) {
      if (this.get('modalOpen') === true) {
        this.set('registrationPaused', true);
      } else {
        this.set('registrationPaused', false);

        var remaining = this.get('newNodes');
        if (remaining && remaining.get('length') > 0) {
          this.set('registrationInProgress', true);
          var lastIndex = remaining.get('length') - 1;
          var nextNode = remaining.objectAt(lastIndex);
          this.set('newNodes', remaining.slice(0, lastIndex));
          this.registerNode(nextNode);
        } else {
          var me = this;
          if (!me.get('introspectionInProgress')) {
            me.startCheckingNodeIntrospection();
          } else if (lastNode !== undefined) {
            me.checkNodeIntrospection(lastNode);
          }
        }
      }
    },

    startCheckingNodeIntrospection: function startCheckingNodeIntrospection() {
      var me = this;
      var introspectionNodes = me.get('introspectionNodes');
      if (introspectionNodes.get('length') > 0) {
        me.set('introspectionInProgress', true);
        introspectionNodes.forEach(function (node) {
          me.checkNodeIntrospection(node);
        });
      } else {
        this.set('registrationInProgress', false);
      }
    },

    getImage: function getImage(imageName) {
      return Ember['default'].$.getJSON('/fusor/api/openstack/deployments/' + this.get('deploymentId') + '/images/show_by_name/' + imageName);
    },

    addIntrospectionNode: function addIntrospectionNode(node) {
      var introspectionNodes = this.get('introspectionNodes');
      introspectionNodes.pushObject(node);
      this.set('introspectionNodes', introspectionNodes);
    },

    registerNode: function registerNode(node) {
      var me = this;
      var driverInfo = {};
      if (node.driver === 'pxe_ssh') {
        driverInfo = {
          ssh_address: node.ipAddress,
          ssh_username: node.ipmiUsername,
          ssh_password: node.ipmiPassword,
          ssh_virt_type: 'virsh',
          deploy_kernel: this.get('model.bmDeployKernelImage.image.id'),
          deploy_ramdisk: this.get('model.bmDeployRamdiskImage.image.id')
        };
      } else if (node.driver === 'pxe_ipmitool') {
        driverInfo = {
          ipmi_address: node.ipAddress,
          ipmi_username: node.ipmiUsername,
          ipmi_password: node.ipmiPassword,
          deploy_kernel: this.get('model.bmDeployKernelImage.image.id'),
          deploy_ramdisk: this.get('model.bmDeployRamdiskImage.image.id')
        };
      }
      var createdNode = {
        driver: node.driver,
        driver_info: driverInfo,
        properties: {
          capabilities: 'boot_option:local'
        },
        address: node.nicMacAddress
      };
      var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');

      this.set('initRegInProcess', true);
      Ember['default'].$.ajax({
        url: '/fusor/api/openstack/deployments/' + this.get('deploymentId') + '/nodes',
        type: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": token
        },
        data: JSON.stringify({ 'node': createdNode }),
        success: function success(registeredNode) {
          me.set('initRegInProcess', false);
          me.addIntrospectionNode(registeredNode);
          me.doNextNodeRegistration(registeredNode);
        },
        error: function error(reason) {
          me.set('initRegInProcess', false);
          node.errorMessage = node.ipAddress + ": " + me.getErrorMessageFromReason(reason);
          me.get('errorNodes').pushObject(node);
          me.doNextNodeRegistration();
        }
      });
    },

    getErrorMessageFromReason: function getErrorMessageFromReason(reason) {
      try {
        var displayMessage = reason.responseJSON.displayMessage;
        if (displayMessage.indexOf('{') >= 0 && displayMessage.indexOf('}') >= 1) {
          displayMessage = displayMessage.substring(displayMessage.indexOf('{'), displayMessage.indexOf('}') + 1) + "}";
          displayMessage = displayMessage.replace(/\\/g, "");
          displayMessage = displayMessage.replace(/"\{/g, "{");

          var errorObj = JSON.parse(displayMessage);
          displayMessage = errorObj.error_message.faultstring;
        }

        return displayMessage;
      } catch (e) {
        return reason.statusText;
      }
    },

    checkNodeIntrospection: function checkNodeIntrospection(node) {
      var me = this;

      var promiseFunction = function promiseFunction(resolve) {
        var checkForDone = function checkForDone() {
          Ember['default'].$.ajax({
            url: '/fusor/api/openstack/deployments/' + me.get('deploymentId') + '/nodes/' + node.uuid + '/ready',
            type: 'GET',
            contentType: 'application/json',
            success: function success(results) {
              resolve({ done: results.node.ready });
            },
            error: function error(results) {
              if (results.status === 0) {
                // Known problem during introspection, return response is empty, keep trying
                resolve({ done: false });
              } else if (results.status === 500) {
                var error = me.getErrorMessageFromReason(results);
                if (error.indexOf('timeout') >= 0) {
                  resolve({ done: false });
                } else {
                  resolve({ done: true, errorResults: results });
                }
              } else {
                resolve({ done: true, errorResults: results });
              }
            }
          });
        };

        Ember['default'].run.later(checkForDone, 15 * 1000);
      };

      var fulfill = function fulfill(results) {
        if (results.done) {
          var introspectionNodes = me.get('introspectionNodes');
          introspectionNodes.removeObject(node);
          me.set('introspectionNodes', introspectionNodes);
          if (introspectionNodes.get('length') === 0 && me.get('newNodes.length') === 0) {
            me.set('registrationInProgress', false);
            me.set('introspectionInProgress', false);
          }

          if (results.errorResults) {
            var nodeID;
            if (node.driver === 'pxe_ssh') {
              nodeID = node.driver_info.ssh_address;
            } else if (node.driver === 'pxe_ipmitool') {
              nodeID = node.driver_info.ipmi_address;
            }
            node.errorMessage = nodeID + ": " + me.getErrorMessageFromReason(results.errorResults);
            node.isIntrospectionError = true;
            me.get('errorNodes').pushObject(node);
          }
          me.updateAfterRegistration();
        } else {
          var promise = new Ember['default'].RSVP.Promise(promiseFunction);
          promise.then(fulfill);
        }
      };

      var promise = new Ember['default'].RSVP.Promise(promiseFunction);
      promise.then(fulfill);
    }
  });

});
define('fusor-ember-cli/controllers/review', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['subscriptions', 'application', 'deployment', 'review/progress/overview'],

    isUpstream: Ember['default'].computed.alias("controllers.application.isUpstream"),
    disableNext: Ember['default'].computed.alias("controllers.subscriptions.disableNext"),

    nameSelectSubscriptions: Ember['default'].computed.alias("controllers.deployment.nameSelectSubscriptions"),

    stepNumberReview: Ember['default'].computed.alias("controllers.deployment.stepNumberReview"),

    deployTaskIsFinished: Ember['default'].computed.alias("controllers.review/progress/overview.deployTaskIsFinished"),

    disableTabInstallation: (function () {
      return this.get('disableNext') && !this.get('isUpstream');
    }).property('disableNext', 'isUpstream'),

    disableTabProgress: (function () {
      return !this.get('controllers.deployment.isStarted');
    }).property('controllers.deployment.isStarted'),

    disableTabSummary: Ember['default'].computed.not("deployTaskIsFinished")

  });

});
define('fusor-ember-cli/controllers/review/installation', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['application', 'deployment', 'satellite', 'configure-organization', 'configure-environment', 'rhev-setup', 'rhev', 'hypervisor', 'hypervisor/discovered-host', 'engine/discovered-host', 'storage', 'rhev-options', 'where-install', 'review', 'subscriptions/select-subscriptions'],

    isSelfHost: Ember['default'].computed.alias("controllers.rhev.isSelfHost"),

    rhevValidated: (function () {
      if (this.get('isRhev')) {
        return Ember['default'].isPresent(this.get('model.rhev_engine_admin_password')) && Ember['default'].isPresent(this.get('selectedRhevEngine')) && (this.get('isSelfHost') || Ember['default'].isPresent(this.get('selectedHypervisorHosts'))) && Ember['default'].isPresent(this.get('model.rhev_storage_type'));
      } else {
        return true;
      }
    }).property('model.rhev_engine_admin_password', 'model.rhev_storage_type', 'selectedRhevEngine', 'selectedHypervisorHosts', 'isSelfHost'),

    cfmeValidated: (function () {
      if (this.get('isCloudForms')) {
        return Ember['default'].isPresent(this.get('model.cfme_install_loc'));
      } else {
        return true;
      }
    }).property('model.cfme_install_loc'),

    buttonDeployTitle: (function () {
      if (this.get('controllers.deployment.isStarted')) {
        return 'Next';
      } else {
        return 'Deploy';
      }
    }).property('controllers.deployment.isStarted'),

    buttonDeployDisabled: (function () {
      return !this.get('rhevValidated') || !this.get('cfmeValidated');
    }).property('rhevValidated', 'cfmeValidated'),

    showErrorMessage: false,
    errorMsg: null,
    foremanTasksURL: null,
    skipContent: Ember['default'].computed.alias("controllers.deployment.skipContent"),

    showSpinner: false,
    spinnerTextMessage: null,
    hasSubscriptionsToAttach: Ember['default'].computed.alias("controllers.subscriptions/select-subscriptions.hasSubscriptionsToAttach"),

    isRhevOpen: true,
    isOpenStackOpen: true,
    isCloudFormsOpen: true,
    isSubscriptionsOpen: true,

    engineHostAddressDefault: 'ovirt-hypervisor.rhci.redhat.com',
    hostAddress: Ember['default'].computed.alias("controllers.rhev-options.hostAddress"),
    engineHostName: Ember['default'].computed.alias("controllers.rhev-options.engineHostName"),

    nameDeployment: Ember['default'].computed.alias("model.name"),
    selectedOrganization: Ember['default'].computed.alias("controllers.deployment.selectedOrganzation"),
    selectedEnvironment: Ember['default'].computed.alias("controllers.deployment.selectedEnvironment"),
    rhevSetup: Ember['default'].computed.alias("controllers.deployment.rhevSetup"),

    isRhev: Ember['default'].computed.alias("controllers.deployment.isRhev"),
    isOpenStack: Ember['default'].computed.alias("controllers.deployment.isOpenStack"),
    isCloudForms: Ember['default'].computed.alias("controllers.deployment.isCloudForms"),
    isSubscriptions: Ember['default'].computed.alias("controllers.deployment.isSubscriptions"),

    isSelfHosted: Ember['default'].computed.alias("model.rhev_is_self_hosted"),
    selectedHypervisorHosts: Ember['default'].computed.alias("model.discovered_hosts"),

    rhev_engine_host: Ember['default'].computed.alias("model.discovered_host"),
    selectedRhevEngine: Ember['default'].computed.alias("model.discovered_host"),
    isStarted: Ember['default'].computed.alias("controllers.deployment.isStarted"),
    subscriptions: Ember['default'].computed.alias("model.subscriptions"),
    undercloudUsername: 'admin',
    undercloudPassword: Ember['default'].computed.alias("model.openstack_undercloud_password"),

    undercloudUrl: (function () {
      return 'https://' + this.get('model.openstack_undercloud_ip_addr');
    }).property('model.openstack_undercloud_ip_addr'),

    engineNamePlusDomain: (function () {
      if (this.get("selectedRhevEngine.is_discovered")) {
        return this.get("selectedRhevEngine.name") + '.' + this.get('engineDomain');
      } else {
        // name is fqdn for managed host
        return this.get("selectedRhevEngine.name");
      }
    }).property('selectedRhevEngine', 'engineDomain'),

    nameRHCI: Ember['default'].computed.alias("controllers.deployment.nameRHCI"),
    nameRhev: Ember['default'].computed.alias("controllers.deployment.nameRhev"),
    nameOpenStack: Ember['default'].computed.alias("controllers.deployment.nameOpenStack"),
    nameCloudForms: Ember['default'].computed.alias("controllers.deployment.nameCloudForms"),
    nameSatellite: Ember['default'].computed.alias("controllers.deployment.nameSatellite"),

    backRouteNameonReviewInstallation: (function () {
      if (this.get('isSubscriptions')) {
        if (Ember['default'].isPresent(this.get('model.upstream_consumer_uuid'))) {
          return 'subscriptions.select-subscriptions';
        } else {
          return 'subscriptions.credentials';
        }
      } else {
        if (this.get('isCloudForms')) {
          return 'cloudforms/cfme-configuration';
        } else if (this.get('isOpenStack')) {
          // TODO
        } else if (this.get('isRhev')) {
            return 'storage';
          }
      }
    }).property('isSubscriptions', 'isRhev', 'isOpenStack', 'isCloudForms', 'model.upstream_consumer_uuid'),

    lifecycleEnvironmentName: (function () {
      var name = this.get('model.lifecycle_environment.name');
      if (name) {
        return name;
      } else {
        return "Default Organization View";
      }
    }).property('model.lifecycle_environment.name'),

    deploymentButtonAction: (function () {
      if (this.get('hasSubscriptionsToAttach')) {
        return "attachSubscriptions";
      } else {
        return "installDeployment";
      }
    }).property('hasSubscriptionsToAttach')

  });

});
define('fusor-ember-cli/controllers/review/progress', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment', 'review/progress/overview'],

    isRhevOpen: true,
    isOpenStackOpen: false,
    isCloudFormsOpen: false,
    isSubscriptionsOpen: false,
    foremanTasksURL: null,

    showErrorMessage: false,
    errorMsg: null, // this should be overwritten by API response

    deployTaskIsFinished: Ember['default'].computed.alias("controllers.review/progress/overview.deployTaskIsFinished"),
    deployTaskIsStopped: Ember['default'].computed.alias("controllers.review/progress/overview.deployTaskIsStopped"),

    deployButtonTitle: (function () {
      if (this.get('deployTaskIsStopped')) {
        return 'Deployment Stopped';
      } else {
        return 'Deploying ...';
      }
    }).property('deployTaskIsStopped')

  });

});
define('fusor-ember-cli/controllers/review/progress/details/task', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/review/progress/details/task/index', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/review/progress/overview', ['exports', 'ember', 'fusor-ember-cli/mixins/progress-bar-mixin'], function (exports, Ember, ProgressBarMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(ProgressBarMixin['default'], {
    needs: ['deployment'],

    isRhev: Ember['default'].computed.alias("controllers.deployment.isRhev"),
    isOpenStack: Ember['default'].computed.alias("controllers.deployment.isOpenStack"),
    isCloudForms: Ember['default'].computed.alias("controllers.deployment.isCloudForms"),

    nameRHCI: Ember['default'].computed.alias("controllers.deployment.nameRHCI"),
    nameRhev: Ember['default'].computed.alias("controllers.deployment.nameRhev"),
    nameOpenStack: Ember['default'].computed.alias("controllers.deployment.nameOpenStack"),
    nameCloudForms: Ember['default'].computed.alias("controllers.deployment.nameCloudForms"),
    nameSatellite: Ember['default'].computed.alias("controllers.deployment.nameSatellite"),
    progressDeployment: Ember['default'].computed.alias("deployTask.progress"),
    resultDeployment: Ember['default'].computed.alias("deployTask.result"),
    stateDeployment: Ember['default'].computed.alias("deployTask.state"),

    deployTaskIsStopped: (function () {
      return this.get('stateDeployment') === 'stopped' || this.get('stateDeployment') === 'paused';
    }).property('stateDeployment'),

    deployTaskIsFinished: (function () {
      return this.get('progressDeployment') === '1' && this.get('resultDeployment') === 'success';
    }).property('progressDeployment', 'resultDeployment')

  });

});
define('fusor-ember-cli/controllers/review/summary', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    isRhev: Ember['default'].computed.alias('controllers.deployment.isRhev'),
    isOpenStack: Ember['default'].computed.alias('controllers.deployment.isOpenStack'),
    isCloudForms: Ember['default'].computed.alias('controllers.deployment.isCloudForms'),

    isRhevOpen: true,
    isOpenStackOpen: true,
    isCloudFormsOpen: true,

    undercloudUsername: 'admin',
    undercloudPassword: Ember['default'].computed.alias("model.openstack_undercloud_password"),

    undercloudUrl: (function () {
      return 'https://' + this.get('model.openstack_undercloud_ip_addr');
    }).property('model.openstack_undercloud_ip_addr'),

    selectedRhevEngine: Ember['default'].computed.alias("controllers.deployment.model.discovered_host"),

    // TODO - make mixin, same method as installation
    engineNamePlusDomain: (function () {
      if (this.get("selectedRhevEngine.is_discovered")) {
        // need to add domain for discovered host to make fqdn
        // TODO - dynamically get domain name of hostgroup Fusor Base if is not example.com
        return this.get("selectedRhevEngine.name") + '.example.com';
      } else {
        // name is fqdn for managed host
        return this.get("selectedRhevEngine.name");
      }
    }).property('selectedRhevEngine'),

    rhevEngineUrl: (function () {
      return 'https://' + this.get('selectedRhevEngine.ip') + '/ovirt-engine/';
    }).property('selectedRhevEngine'),

    cfmeUrl: (function () {
      return 'https://' + this.get('model.cfme_address');
    }).property('model.cfme_address')

  });

});
define('fusor-ember-cli/controllers/rhev-options', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    rhev_root_password: Ember['default'].computed.alias("controllers.deployment.model.rhev_root_password"),
    rhev_engine_admin_password: Ember['default'].computed.alias("controllers.deployment.model.rhev_engine_admin_password"),
    rhev_database_name: Ember['default'].computed.alias("controllers.deployment.model.rhev_database_name"),
    rhev_cluster_name: Ember['default'].computed.alias("controllers.deployment.model.rhev_cluster_name"),
    rhev_cpu_type: Ember['default'].computed.alias("controllers.deployment.model.rhev_cpu_type"),
    rhev_is_self_hosted: Ember['default'].computed.alias("controllers.deployment.model.rhev_is_self_hosted"),

    cpuTypes: ['Intel Conroe Family', 'Intel Penryn Family', 'Intel Nehalem Family', 'Intel Westmere Family', 'Intel SandyBridge Family', 'Intel Haswell', 'AMD Opteron G1', 'AMD Opteron G2', 'AMD Opteron G3', 'AMD Opteron G4', 'AMD Opteron G5', 'IBM POWER 8'],

    optionsBackRouteName: (function () {
      if (this.get('rhev_is_self_hosted')) {
        return 'engine.discovered-host';
      } else {
        return 'hypervisor.discovered-host';
      }
    }).property('rhev_is_self_hosted'),

    applicationModes: ['Both', 'Virt', 'Gluster'],
    engineLocation: ['Local', 'Remote'],
    dbSetup: ['Automatic', 'Manual'],
    yesNo: ['Yes', 'No'],
    applicationModes2: [{
      id: 1,
      name: 'Both'
    }, {
      id: 2,
      name: 'Virt'
    }, {
      id: 3,
      name: 'Gluster'
    }],

    invalidIsAlphaNumericRhevDatabase: (function () {
      var rx = new RegExp(/^[A-Za-z0-9_-]+$/);
      if (Ember['default'].isPresent(this.get('rhev_database_name'))) {
        return !this.get('rhev_database_name').match(rx);
      }
    }).property('rhev_database_name'),

    invalidIsAlphaNumericRhevCluster: (function () {
      var rx = new RegExp(/^[A-Za-z0-9_-]+$/);
      if (Ember['default'].isPresent(this.get('rhev_cluster_name'))) {
        return !this.get('rhev_cluster_name').match(rx);
      }
    }).property('rhev_cluster_name'),

    disableNextRhevOptions: (function () {
      return Ember['default'].isBlank(this.get('rhev_root_password')) || Ember['default'].isBlank(this.get('rhev_engine_admin_password')) || this.get('rhev_root_password.length') < 8 || this.get('rhev_engine_admin_password.length') < 8 || this.get('invalidIsAlphaNumericRhevDatabase') || this.get('invalidIsAlphaNumericRhevCluster');
    }).property('rhev_root_password', 'rhev_engine_admin_password', 'invalidIsAlphaNumericRhevDatabase', 'invalidIsAlphaNumericRhevCluster'),

    validRhevOptions: Ember['default'].computed.not('disableNextRhevOptions')

  });

});
define('fusor-ember-cli/controllers/rhev-setup', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    rhevIsSelfHosted: Ember['default'].computed.alias("controllers.deployment.model.rhev_is_self_hosted"),

    rhevSetup: (function () {
      return this.get('rhevIsSelfHosted') ? "selfhost" : "rhevhost";
    }).property('rhevIsSelfHosted'),

    rhevSetupTitle: (function () {
      return this.get('rhevIsSelfHosted') ? "Self Hosted" : "Host + Engine";
    }).property('rhevIsSelfHosted'),

    isSelfHosted: (function () {
      return this.get('rhevSetup') === 'selfhost';
    }).property('rhevSetup'),

    actions: {
      rhevSetupChanged: function rhevSetupChanged() {
        return this.get('controllers.deployment').set('model.rhev_is_self_hosted', this.get('isSelfHosted'));
      }
    }

  });

});
define('fusor-ember-cli/controllers/rhev', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['application', 'rhev-setup', 'deployment', 'storage', 'rhev-options'],

    rhevSetup: Ember['default'].computed.alias("controllers.rhev-setup.rhevSetup"),

    isSelfHost: (function () {
      return this.get('rhevSetup') === 'selfhost';
    }).property('rhevSetup'),

    engineTabName: (function () {
      if (this.get('isSelfHost')) {
        return 'Engine/Hypervisor';
      } else {
        return 'Engine';
      }
    }).property('isSelfHost'),

    disableTabRhevSetupType: false,
    disableTabRhevEngine: false,

    hasEngine: Ember['default'].computed.alias('controllers.deployment.hasEngine'),
    hasNoEngine: Ember['default'].computed.not('hasEngine'),

    hasHypervisor: (function () {
      return this.get('controllers.deployment.model.discovered_hosts.length') > 0;
    }).property('controllers.deployment.model.discovered_hosts.[]'),
    hasNoHypervisor: Ember['default'].computed.not('hasHypervisor'),

    disableTabRhevHypervisors: (function () {
      return !this.get('controllers.deployment.model.rhev_is_self_hosted') && this.get('hasNoEngine');
    }).property('controllers.deployment.model.rhev_is_self_hosted', 'hasNoEngine'),

    disableTabRhevConfiguration: (function () {
      return this.get('controllers.deployment.model.rhev_is_self_hosted') && this.get('hasNoEngine') || !this.get('controllers.deployment.model.rhev_is_self_hosted') && this.get('hasNoHypervisor');
    }).property('controllers.deployment.model.rhev_is_self_hosted', 'hasNoEngine', 'hasNoHypervisor'),

    disableTabRhevStorage: (function () {
      return Ember['default'].isBlank(this.get('controllers.deployment.model.rhev_root_password')) || Ember['default'].isBlank(this.get('controllers.deployment.model.rhev_engine_admin_password')) || this.get('controllers.deployment.model.rhev_root_password.length') < 8 || this.get('controllers.deployment.model.rhev_engine_admin_password.length') < 8;
    }).property('controllers.deployment.model.rhev_root_password', 'controllers.deployment.model.rhev_engine_admin_password'),

    validRhevSetup: true,
    validRhevEngine: Ember['default'].computed.alias("hasEngine"),
    validRhevHypervisor: Ember['default'].computed.not("disableTabRhevConfiguration"),
    validRhevOptions: Ember['default'].computed.alias("controllers.rhev-options.validRhevOptions"),
    validRhevStorage: Ember['default'].computed.alias("controllers.storage.validRhevStorage"),

    validRhev: (function () {
      return this.get('validRhevSetup') && this.get('validRhevEngine') && this.get('validRhevHypervisor') && this.get('validRhevOptions') && this.get('validRhevStorage');
    }).property('validRhevSetup', 'validRhevEngine', 'validRhevHypervisor', 'validRhevOptions', 'validRhevStorage')
  });

});
define('fusor-ember-cli/controllers/satellite', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    satelliteTabRouteName: Ember['default'].computed.alias("controllers.deployment.satelliteTabRouteName"),
    organizationTabRouteName: Ember['default'].computed.alias("controllers.deployment.organizationTabRouteName"),
    lifecycleEnvironmentTabRouteName: Ember['default'].computed.alias("controllers.deployment.lifecycleEnvironmentTabRouteName"),

    disableTabDeploymentName: Ember['default'].computed.alias("controllers.deployment.disableTabDeploymentName"),
    disableTabConfigureOrganization: Ember['default'].computed.alias("controllers.deployment.disableTabConfigureOrganization"),
    disableTabLifecycleEnvironment: Ember['default'].computed.alias("controllers.deployment.disableTabLifecycleEnvironment")

  });

});
define('fusor-ember-cli/controllers/satellite/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['satellite', 'deployment', 'application'],

    name: Ember['default'].computed.alias("controllers.deployment.name"),
    description: Ember['default'].computed.alias("controllers.deployment.description"),
    isStarted: Ember['default'].computed.alias("controllers.deployment.isStarted"),

    organizationTabRouteName: Ember['default'].computed.alias("controllers.deployment.organizationTabRouteName"),

    disableNextOnDeploymentName: Ember['default'].computed.alias("controllers.deployment.disableNextOnDeploymentName"),

    idSatName: 'deployment_sat_name',
    idSatDesc: 'deployment_sat_desc',

    backRouteNameOnSatIndex: 'deployment.start',

    deploymentNames: Ember['default'].computed.alias("controllers.application.deploymentNames")

  });

});
define('fusor-ember-cli/controllers/storage', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    rhev_storage_type: Ember['default'].computed.alias("controllers.deployment.model.rhev_storage_type"),
    rhev_storage_name: Ember['default'].computed.alias("controllers.deployment.model.rhev_storage_name"),
    rhev_storage_address: Ember['default'].computed.alias("controllers.deployment.model.rhev_storage_address"),
    rhev_share_path: Ember['default'].computed.alias("controllers.deployment.model.rhev_share_path"),

    rhev_export_domain_name: Ember['default'].computed.alias("controllers.deployment.model.rhev_export_domain_name"),
    rhev_export_domain_address: Ember['default'].computed.alias("controllers.deployment.model.rhev_export_domain_address"),
    rhev_export_domain_path: Ember['default'].computed.alias("controllers.deployment.model.rhev_export_domain_path"),

    step3RouteName: Ember['default'].computed.alias("controllers.deployment.step3RouteName"),
    isCloudForms: Ember['default'].computed.alias("controllers.deployment.isCloudForms"),

    hasEndingSlashInSharePath: (function () {
      if (Ember['default'].isPresent(this.get('rhev_share_path'))) {
        return this.get('rhev_share_path').slice('-1') === '/';
      }
    }).property('rhev_share_path'),

    hasEndingSlashInExportPath: (function () {
      if (Ember['default'].isPresent(this.get('rhev_export_domain_path'))) {
        return this.get('rhev_export_domain_path').slice('-1') === '/';
      }
    }).property('rhev_export_domain_path'),

    hasNoLeadingSlashInSharePath: (function () {
      if (Ember['default'].isPresent(this.get('rhev_share_path'))) {
        return this.get('rhev_share_path').charAt(0) !== '/';
      }
    }).property('rhev_share_path'),

    hasNoLeadingSlashInExportPath: (function () {
      if (Ember['default'].isPresent(this.get('rhev_export_domain_path'))) {
        return this.get('rhev_export_domain_path').charAt(0) !== '/';
      }
    }).property('rhev_export_domain_path'),

    errorsHashSharePath: (function () {
      if (this.get('hasNoLeadingSlashInSharePath')) {
        return { "name": 'You must have a leading slash' };
      } else if (this.get('hasEndingSlashInSharePath')) {
        return { "name": 'You cannot have a trailing slash' };
      } else {
        return {};
      }
    }).property('hasEndingSlashInSharePath', 'rhev_share_path'),

    errorsHashExportPath: (function () {
      if (this.get('hasNoLeadingSlashInExportPath')) {
        return { "name": 'You must have a leading slash' };
      } else if (this.get('hasEndingSlashInExportPath')) {
        return { "name": 'You cannot have a trailing slash' };
      } else {
        return {};
      }
    }).property('hasEndingSlashInExportPath', 'rhev_export_domain_path'),

    isNFS: (function () {
      return this.get('rhev_storage_type') === 'NFS';
    }).property('rhev_storage_type'),

    isLocal: (function () {
      return this.get('rhev_storage_type') === 'Local';
    }).property('rhev_storage_type'),

    isGluster: (function () {
      return this.get('rhev_storage_type') === 'Gluster';
    }).property('rhev_storage_type'),

    isInvalidStorageFields: (function () {
      return Ember['default'].isBlank(this.get('rhev_storage_type')) || Ember['default'].isBlank(this.get('rhev_storage_name')) || Ember['default'].isBlank(this.get('rhev_storage_address')) || Ember['default'].isBlank(this.get('rhev_share_path')) || this.get('hasEndingSlashInSharePath') || this.get('hasNoLeadingSlashInSharePath');
    }).property('rhev_storage_type', 'rhev_storage_name', 'rhev_storage_address', 'rhev_share_path', 'hasEndingSlashInSharePath', 'hasNoLeadingSlashInSharePath'),

    isInvalidExportDomainFields: (function () {
      return Ember['default'].isBlank(this.get('rhev_export_domain_name')) || Ember['default'].isBlank(this.get('rhev_export_domain_address')) || Ember['default'].isBlank(this.get('rhev_export_domain_path')) || this.get('hasEndingSlashInExportPath') || this.get('hasNoLeadingSlashInExportPath');
    }).property('rhev_export_domain_name', 'rhev_export_domain_address', 'rhev_export_domain_path', 'hasEndingSlashInExportPath', 'hasNoLeadingSlashInExportPath'),

    invalidStorageName: (function () {
      var validAlphaNumbericRegex = new RegExp(/^[A-Za-z0-9_-]+$/);
      if (Ember['default'].isPresent(this.get('rhev_storage_name'))) {
        return !this.get('rhev_storage_name').match(validAlphaNumbericRegex);
      }
    }).property('rhev_storage_name'),

    invalidStorageAddress: (function () {
      var validHostnameRegex = "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$";
      if (Ember['default'].isPresent(this.get('rhev_storage_address'))) {
        return !this.get('rhev_storage_address').match(validHostnameRegex);
      }
    }).property('rhev_storage_address'),

    invalidExportDomainName: (function () {
      var validAlphaNumbericRegex = new RegExp(/^[A-Za-z0-9_-]+$/);
      if (Ember['default'].isPresent(this.get('rhev_export_domain_name'))) {
        return !this.get('rhev_export_domain_name').match(validAlphaNumbericRegex);
      }
    }).property('rhev_export_domain_name'),

    invalidExportAddress: (function () {
      var validHostnameRegex = "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$";
      if (Ember['default'].isPresent(this.get('rhev_export_domain_address'))) {
        return !this.get('rhev_export_domain_address').match(validHostnameRegex);
      }
    }).property('rhev_export_domain_address'),

    disableNextStorage: (function () {
      if (this.get('isCloudForms')) {
        return this.get('isInvalidStorageFields') || this.get('isInvalidExportDomainFields') || this.get('invalidStorageName') || this.get('invalidStorageAddress') || this.get('invalidExportDomainName') || this.get('invalidExportAddress');
      } else {
        return this.get('isInvalidStorageFields') || this.get('invalidStorageName') || this.get('invalidStorageAddress');
      }
    }).property('isInvalidStorageFields', 'isInvalidExportDomainFields', 'invalidStorageName', 'invalidStorageAddress', 'invalidExportDomainName', 'invalidExportAddress'),

    validRhevStorage: Ember['default'].computed.not('disableNextStorage')

  });

});
define('fusor-ember-cli/controllers/subscriptions', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['deployment', 'subscriptions/credentials', 'subscriptions/management-application'],

    stepNumberSubscriptions: Ember['default'].computed.alias("controllers.deployment.stepNumberSubscriptions"),
    isStarted: Ember['default'].computed.alias("controllers.deployment.isStarted"),

    disableTabManagementApplication: (function () {
      return !this.get('isStarted') && !this.get('model.isAuthenticated');
    }).property('model.isAuthenticated', 'isStarted'),

    upstreamConsumerUuid: Ember['default'].computed.alias("controllers.deployment.model.upstream_consumer_uuid"),

    disableTabSelectSubsciptions: (function () {
      return Ember['default'].isBlank(this.get('upstreamConsumerUuid')) || !this.get('model.isAuthenticated');
    }).property('model.isAuthenticated', 'upstreamConsumerUuid')

  });

});
define('fusor-ember-cli/controllers/subscriptions/credentials', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    upstreamConsumerUuid: Ember['default'].computed.alias("controllers.deployment.model.upstream_consumer_uuid"),
    upstreamConsumerName: Ember['default'].computed.alias("controllers.deployment.model.upstream_consumer_name"),

    isRhev: Ember['default'].computed.alias("controllers.deployment.deploy_rhev"),
    isOpenStack: Ember['default'].computed.alias("controllers.deployment.deploy_openstack"),
    isCloudForms: Ember['default'].computed.alias("controllers.deployment.deploy_cfme"),

    //overwritten by setupController
    organizationUpstreamConsumerUUID: null,
    organizationUpstreamConsumerName: null,

    validCredentials: (function () {
      // password is not saved in the model
      return Ember['default'].isPresent(this.get('model.identification')) && Ember['default'].isPresent(this.get('password'));
    }).property('model.identification', 'password'),

    enableCredentialsNext: (function () {
      return this.get('validCredentials') || this.get('model.isAuthenticated');
    }).property('validCredentials', 'model.isAuthenticated'),
    disableCredentialsNext: Ember['default'].computed.not('enableCredentialsNext'),

    hasUpstreamConsumerUuid: (function () {
      return Ember['default'].isPresent(this.get('upstreamConsumerUuid'));
    }).property('upstreamConsumerUuid'),

    hasOrganizationUpstreamConsumerUUID: (function () {
      return Ember['default'].isPresent(this.get('organizationUpstreamConsumerUUID'));
    }).property('organizationUpstreamConsumerUUID'),

    backRouteNameonCredentials: (function () {
      if (this.get('isCloudForms')) {
        return 'cloudforms.cfme-configuration';
      } else if (this.get('isOpenStack')) {
        return 'assign-nodes';
      } else if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'configure-environment';
      }
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    nextButtonTitle: 'Next',

    actionCredentialsNext: (function () {
      if (this.get('model.isAuthenticated')) {
        return 'redirectToManagementApplication';
      } else {
        return 'loginPortal';
      }
    }).property('model.isAuthenticated')

  });

});
define('fusor-ember-cli/controllers/subscriptions/management-application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['subscriptions', 'deployment'],

    showManagementApplications: true,

    sessionPortal: Ember['default'].computed.alias('controllers.subscriptions.model'),
    upstreamConsumerUuid: Ember['default'].computed.alias("controllers.deployment.model.upstream_consumer_uuid"),
    upstreamConsumerName: Ember['default'].computed.alias("controllers.deployment.model.upstream_consumer_name"),

    showAlertMessage: false,

    disableNextOnManagementApp: (function () {
      return Ember['default'].isBlank(this.get('upstreamConsumerUuid'));
    }).property('upstreamConsumerUuid'),

    actions: {
      selectManagementApp: function selectManagementApp(managementApp) {
        this.set('showAlertMessage', false);
        this.get('sessionPortal').set('consumerUUID', managementApp.get('id'));
        this.get('sessionPortal').save();
        this.set('upstreamConsumerUuid', managementApp.get('id'));
        this.set('upstreamConsumerName', managementApp.get('name'));
        // show selected UUID in url
        return this.transitionTo('subscriptions.management-application.consumer', managementApp.get('id'));
      },

      createSatellite: function createSatellite() {
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');
        var newSatelliteName = this.get('newSatelliteName');
        var ownerKey = this.get('sessionPortal').get('ownerKey');
        var self = this;

        //POST /customer_portal/consumers?owner=#{OWNER['key']}, {"name":"#{RHCI_DISTRIBUTOR_NAME}","type":"satellite","facts":{"distributor_version":"sat-6.0","system.certificate_version":"3.2"}}
        var url = '/customer_portal/consumers?=' + ownerKey;

        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: url,
            type: "POST",
            data: JSON.stringify({ name: newSatelliteName,
              type: "satellite",
              facts: { "distributor_version": "sat-6.0", "system.certificate_version": "3.2" } }),
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            },
            success: function success(response) {
              self.get('model').pushObject(response);
              self.get('sessionPortal').set('consumerUUID', response.uuid);
              self.get('sessionPortal').save();
              self.set('showAlertMessage', true);
              console.log(response);
              resolve(response);
            },
            error: function error() {
              console.log('error on createSatellite');
              return self.send('error');
            }
          });
        });
      }

    }

  });

});
define('fusor-ember-cli/controllers/subscriptions/management-application/consumer', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    //  queryParams: ['cuuid'],

    cuuid: Ember['default'].computed.alias("controllers.deployment.upstream_consumer_uuid")

  });

});
define('fusor-ember-cli/controllers/subscriptions/management-application/consumer/entitlements', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({

    needs: ['deployment'],

    arrayQuantities: Ember['default'].computed.mapBy('model', 'quantity'),
    totalQuantity: Ember['default'].computed.sum('arrayQuantities'),

    upstream_consumer_uuid: Ember['default'].computed.alias("controllers.deployment.upstream_consumer_uuid")

  });

});
define('fusor-ember-cli/controllers/subscriptions/management-application/consumer/pools', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({

    needs: ['application', 'deployment'],

    isUpstream: Ember['default'].computed.alias("controllers.application.isUpstream"),
    stepNumberSubscriptions: Ember['default'].computed.alias("controllers.deployment.stepNumberSubscriptions"),
    enableAccessInsights: Ember['default'].computed.alias("controllers.deployment.model.enable_access_insights"),
    numSubscriptionsRequired: Ember['default'].computed.alias("controllers.deployment.numSubscriptionsRequired"),

    enableAnalytics: (function () {
      if (this.get('enableAccessInsights')) {
        return 'Enabled';
      } else {
        return 'Disabled';
      }
    }).property('enableAccessInsights'),

    analyticsColor: (function () {
      if (this.get('enableAccessInsights')) {
        return '';
      } else {
        return 'disabled';
      }
    }).property('enableAccessInsights'),

    totalCountSubscriptions: Ember['default'].computed.alias('model.length'),

    totalSelectedCount: (function () {
      return this.get('model').filterBy('isSelectedSubscription', true).get('length');
    }).property('model.@each.isSelectedSubscription'),

    selectedSubscriptions: (function () {
      return this.get('model').filterBy('isSelectedSubscription', true);
    }).property('model.@each.isSelectedSubscription'),

    hasSubscriptionsToAttach: (function () {
      var model = this.get('model');
      return model && model.isAny('isSelectedSubscription');
    }).property('model.@each.isSelectedSubscription'),

    allQuantitiesValid: (function () {
      var allValid = true;
      this.get('selectedSubscriptions').forEach(function (item) {
        if (item.qtyAvailable > 0 && item.qtyToAttach > 0 && allValid) {
          if (item.qtyToAttach > item.qtyAvailable) {
            allValid = false;
          }
        } else {
          allValid = false;
        }
      });
      return allValid;
    }).property('model.@each.qtyToAttach', 'model.@each.isSelectedSubscription'),

    showErrorMessage: Ember['default'].computed.not('allQuantitiesValid'),
    disableNextOnSelectSubscriptions: Ember['default'].computed.not('allQuantitiesValid')

  });

});
define('fusor-ember-cli/controllers/subscriptions/select-subscriptions', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({
    needs: ['application', 'deployment'],

    isUpstream: Ember['default'].computed.alias("controllers.application.isUpstream"),
    stepNumberSubscriptions: Ember['default'].computed.alias("controllers.deployment.stepNumberSubscriptions"),
    enableAccessInsights: Ember['default'].computed.alias("controllers.deployment.model.enable_access_insights"),
    numSubscriptionsRequired: Ember['default'].computed.alias("controllers.deployment.numSubscriptionsRequired"),
    isStarted: Ember['default'].computed.alias("controllers.deployment.isStarted"),

    hasSubscriptionPools: (function () {
      return this.get('subscriptionPools.length') > 0;
    }).property('subscriptionPools.[]'),

    hasSubscriptionSavedInModel: (function () {
      return this.get('model.length') > 0;
    }).property('model.[]'),

    contractNumbersInPool: (function () {
      if (this.get('hasSubscriptionPools')) {
        return this.get('subscriptionPools').getEach("contractNumber");
      }
    }).property('subscriptionPools.[]', 'hasSubscriptionPools'),

    contractNumbersInModel: (function () {
      if (this.get('hasSubscriptionSavedInModel')) {
        return this.get('model').getEach("contract_number");
      }
    }).property('model.[]', 'hasSubscriptionSavedInModel'),

    contractNumbersInModelNotInPool: (function () {
      if (this.get('hasSubscriptionSavedInModel')) {
        return this.get('contractNumbersInModel').removeObjects(Ember['default'].A(this.get('contractNumbersInPool')));
      } else {
        return Ember['default'].A([]);
      }
    }).property('contractNumbersInPool', 'contractNumbersInModel', 'hasSubscriptionSavedInModel'),

    hasContractNumbersInModelNotInPool: (function () {
      return this.get('contractNumbersInModelNotInPool.length') > 0;
    }).property('contractNumbersInModelNotInPool'),

    hasSubscriptionsToAttach: (function () {
      return this.get('model.length') > 0;
    }).property('model.[]'),

    enableAnalytics: (function () {
      if (this.get('enableAccessInsights')) {
        return 'Enabled';
      } else {
        return 'Disabled';
      }
    }).property('enableAccessInsights'),

    analyticsColor: (function () {
      if (this.get('enableAnalytics')) {
        return '';
      } else {
        return 'disabled';
      }
    }).property('enableAccessInsights')

  });

});
define('fusor-ember-cli/controllers/undercloud-deploy', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    deploymentId: Ember['default'].computed.alias("model.id"),
    undercloudPassword: Ember['default'].computed.alias("model.openstack_undercloud_password"),

    // these 3 attributes are not persisted by UI.
    // backend controller will persist these
    undercloudIP: null,
    sshUser: null,
    sshPassword: null,

    isRhev: Ember['default'].computed.alias("controllers.deployment.isRhev"),

    undercloudIPHelp: "The IP address that the already-installed Red Hat Enterprise Linux OpenStack Platform undercloud is running on.",

    deployed: Ember['default'].computed.notEmpty("model.openstack_undercloud_password"),

    deployDisabled: (function () {
      return this.get('deployed') && !this.get('isDirty');
    }).property('deployed', 'isDirty'),

    disableDeployUndercloudNext: (function () {
      return !this.get('deployed');
    }).property('deployed'),

    disableTabRegisterNodes: (function () {
      return !this.get('deployed');
    }).property('deployed'),

    disableTabAssignNodes: (function () {
      return !this.get('deployed');
    }).property('deployed'),

    isDirty: false,

    watchModel: (function () {
      this.set('isDirty', true);
    }).observes('model.openstack_undercloud_ip_addr', 'model.openstack_undercloud_user', 'model.openstack_undercloud_user_password'),

    backRouteNameUndercloud: (function () {
      if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'configure-environment';
      }
    }).property('isRhev'),

    actions: {
      resetCredentials: function resetCredentials() {
        this.set('model.openstack_undercloud_password', null);
        return this.get('model').save();
      },

      deployUndercloud: function deployUndercloud() {
        var self = this;
        var model = this.get('model');
        console.log('detectUndercloud');
        console.log("host " + this.get('undercloudIP'));
        console.log("user " + this.get('sshUser'));
        var data = { 'underhost': this.get('undercloudIP'),
          'underuser': this.get('sshUser'),
          'underpass': this.get('sshPassword'),
          'deployment_id': this.get('deploymentId') };

        var promiseFunction = function promiseFunction(resolve) {
          self.set('deploymentError', null);
          var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');
          Ember['default'].$.ajax({
            url: '/fusor/api/openstack/deployments/' + self.get('deploymentId') + '/underclouds',
            type: 'POST',
            data: JSON.stringify(data),
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            },
            success: function success(response) {
              promise.then(fulfill);
              console.log('create success');
              console.log(response);
              Ember['default'].run.later(checkForDone, 3000);
            },
            error: function error(_error) {
              self.set('deploymentError', _error.responseJSON.errors);
              self.set('showLoadingSpinner', false);
              console.log('create failed');
              console.log(_error);
            }
          });

          var checkForDone = function checkForDone() {
            console.log("running check for done for id " + self.get('deploymentId'));
            Ember['default'].$.ajax({
              url: '/fusor/api/openstack/deployments/' + self.get('deploymentId') + '/underclouds/' + self.get('deploymentId'),
              type: 'GET',
              contentType: 'application/json',
              success: function success(response) {
                console.log('api check success');
                console.log(response);
                if (response['deployed'] || response['failed']) {
                  console.log('detection finished');
                  if (response['failed']) {
                    console.log('detection failed');
                    self.set('deploymentError', 'Please check foreman logs.');
                    self.set('showLoadingSpinner', false);
                  } else {
                    console.log('detection success');
                    self.set('deploymentError', null);
                    resolve(true);
                  }
                } else {
                  console.log('detection ongoing');
                  Ember['default'].run.later(checkForDone, 3000);
                }
              },
              error: function error(_error2) {
                console.log('api check error');
                console.log(_error2);
                self.set('deploymentError', 'Status check failed');
                self.set('showLoadingSpinner', false);
              }
            });
          };
        };

        var fulfill = function fulfill(isDone) {
          if (isDone) {
            console.log("fulfill");
            self.set('showLoadingSpinner', false);
            self.set('deployed', true);
            self.set('isDirty', false);
          }
        };

        var promise = new Ember['default'].RSVP.Promise(promiseFunction);
        self.set('loadingSpinnerText', "Detecting Undercloud...");
        self.set('showLoadingSpinner', true);
      }
    }
  });

});
define('fusor-ember-cli/controllers/where-install', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment', 'cloudforms'],

    cfmeInstallLoc: Ember['default'].computed.alias("controllers.deployment.model.cfme_install_loc"),
    isRhev: Ember['default'].computed.alias("controllers.deployment.isRhev"),
    isNotRhev: Ember['default'].computed.not("isRhev"),
    isOpenStack: Ember['default'].computed.alias("controllers.deployment.isOpenStack"),
    isNotOpenStack: Ember['default'].computed.not("isOpenStack"),
    satelliteTabRouteName: Ember['default'].computed.alias("controllers.deployment.satelliteTabRouteName"),
    organizationTabRouteName: Ember['default'].computed.alias("controllers.deployment.organizationTabRouteName"),
    lifecycleEnvironmentTabRouteName: Ember['default'].computed.alias("controllers.deployment.lifecycleEnvironmentTabRouteName"),
    isStarted: Ember['default'].computed.alias("controllers.deployment.isStarted"),

    setupController: function setupController(controller, model) {
      controller.set('model', model);

      var isRhev = this.controllerFor('deployment').get('isRhev');
      var isOpenStack = this.controllerFor('deployment').get('isOpenStack');
      if (isRhev && !isOpenStack) {
        this.controllerFor('where-install').set('disableRHEV', false);
        this.controllerFor('where-install').set('disableOpenStack', true);
        return this.controllerFor('deployment').set('model.cfme_install_loc', 'RHEV');
      } else if (!isRhev && isOpenStack) {
        this.controllerFor('where-install').set('disableRHEV', true);
        this.controllerFor('where-install').set('disableOpenStack', false);
        return this.controllerFor('deployment').set('model.cfme_install_loc', 'OpenStack');
      } else {
        this.controllerFor('where-install').set('disableRHEV', false);
        this.controllerFor('where-install').set('disableOpenStack', false);
      }
    },

    disableRHEV: (function () {
      return this.get('isStarted') || this.get('isNotRhev');
    }).property('isStarted', 'isNotRhev'),

    disableOpenStack: (function () {
      return this.get('isStarted') || this.get('isNotOpenStack');
    }).property('isStarted', 'isNotOpenStack'),

    disableRHEVradio: (function () {
      return this.get('disableRHEV') || this.get('controllers.deployment.isStarted');
    }).property('disableRHEV', 'controllers.deployment.isStarted'),

    disableOpenstackradio: (function () {
      return this.get('disableOpenStack') || this.get('controllers.deployment.isStarted');
    }).property('disableOpenStack', 'controllers.deployment.isStarted'),

    backRouteName: (function () {
      if (this.get('isOpenStack')) {
        return 'assign-nodes';
      } else if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'satellite.configure-environment';
      }
    }).property('isOpenStack', 'isRhev'),

    actions: {
      cfmeLocationChanged: function cfmeLocationChanged() {}
    }

  });

});
define('fusor-ember-cli/helpers/fa-icon', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var FA_PREFIX = /^fa\-.+/;

  var warn = Ember['default'].Logger.warn;

  /**
   * Handlebars helper for generating HTML that renders a FontAwesome icon.
   *
   * @param  {String} name    The icon name. Note that the `fa-` prefix is optional.
   *                          For example, you can pass in either `fa-camera` or just `camera`.
   * @param  {Object} options Options passed to helper.
   * @return {Ember.Handlebars.SafeString} The HTML markup.
   */
  var faIcon = function faIcon(name, options) {
    if (Ember['default'].typeOf(name) !== 'string') {
      var message = "fa-icon: no icon specified";
      warn(message);
      return Ember['default'].String.htmlSafe(message);
    }

    var params = options.hash,
        classNames = [],
        html = "";

    classNames.push("fa");
    if (!name.match(FA_PREFIX)) {
      name = "fa-" + name;
    }
    classNames.push(name);
    if (params.spin) {
      classNames.push("fa-spin");
    }
    if (params.flip) {
      classNames.push("fa-flip-" + params.flip);
    }
    if (params.rotate) {
      classNames.push("fa-rotate-" + params.rotate);
    }
    if (params.lg) {
      warn("fa-icon: the 'lg' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\"lg\"}}");
      classNames.push("fa-lg");
    }
    if (params.x) {
      warn("fa-icon: the 'x' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\"" + params.x + "\"}}");
      classNames.push("fa-" + params.x + "x");
    }
    if (params.size) {
      if (Ember['default'].typeOf(params.size) === "string" && params.size.match(/\d+/)) {
        params.size = Number(params.size);
      }
      if (Ember['default'].typeOf(params.size) === "number") {
        classNames.push("fa-" + params.size + "x");
      } else {
        classNames.push("fa-" + params.size);
      }
    }
    if (params.fixedWidth) {
      classNames.push("fa-fw");
    }
    if (params.listItem) {
      classNames.push("fa-li");
    }
    if (params.pull) {
      classNames.push("pull-" + params.pull);
    }
    if (params.border) {
      classNames.push("fa-border");
    }
    if (params.classNames && !Ember['default'].isArray(params.classNames)) {
      params.classNames = [params.classNames];
    }
    if (!Ember['default'].isEmpty(params.classNames)) {
      Array.prototype.push.apply(classNames, params.classNames);
    }

    html += "<";
    var tagName = params.tagName || 'i';
    html += tagName;
    html += " class='" + classNames.join(" ") + "'";
    if (params.title) {
      html += " title='" + params.title + "'";
    }
    if (params.ariaHidden === undefined || params.ariaHidden) {
      html += " aria-hidden=\"true\"";
    }
    html += "></" + tagName + ">";
    return Ember['default'].String.htmlSafe(html);
  };

  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(faIcon);

  exports.faIcon = faIcon;

});
define('fusor-ember-cli/helpers/host-type', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports.hostType = hostType;

  function hostType(host) {
    if (this.get('host.is_virtual')) {
      return new Ember['default'].Handlebars.SafeString('<center><img src="/assets/r/vm-icon-16.png" class="img-responsive" style="margin-top: 3px"></center>');
    } else {
      return new Ember['default'].Handlebars.SafeString('<span class="pficon pficon-screen" style="font-size: 16px; margin-top: 3px"></span>');
    }
  }

  exports['default'] = Ember['default'].HTMLBars.makeBoundHelper(hostType);

});
define('fusor-ember-cli/helpers/log', ['exports'], function (exports) {

  'use strict';

  exports['default'] = function () {
    //console.debug(str);
  };

});
define('fusor-ember-cli/initialize', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, Em, IdxConfig) {

  'use strict';

  exports['default'] = {
    name: 'ember-idx-utils',
    initialize: function initialize() {
      if (!Em['default'].IdxConfig) {
        Em['default'].IdxConfig = IdxConfig['default'].create();
      }
    }
  };

});
define('fusor-ember-cli/initializers/app-version', ['exports', 'fusor-ember-cli/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;
  var registered = false;

  exports['default'] = {
    name: 'App Version',
    initialize: function initialize(container, application) {
      if (!registered) {
        var appName = classify(application.toString());
        Ember['default'].libraries.register(appName, config['default'].APP.version);
        registered = true;
      }
    }
  };

});
define('fusor-ember-cli/initializers/coordinator-setup', ['exports', 'fusor-ember-cli/models/coordinator'], function (exports, Coordinator) {

  'use strict';

  exports['default'] = {
    name: "setup coordinator",

    initialize: function initialize(container, app) {
      app.register("drag:coordinator", Coordinator['default']);
      app.inject("component", "coordinator", "drag:coordinator");
    }
  };

});
define('fusor-ember-cli/initializers/ember-devtools', ['exports', 'fusor-ember-cli/services/ember-devtools', 'fusor-ember-cli/config/environment'], function (exports, Devtools, config) {

  'use strict';

  /* global DS */
  exports['default'] = {
    name: 'ember-devtools',
    after: DS !== undefined ? 'store' : null,
    initialize: function initialize(container, app) {
      Ember.deprecate("ember-devtools: 'config.APP.emberDevTools' is deprecated. Please configure ember-devtools using config['ember-devtools'].", !app.emberDevTools, { url: 'https://github.com/aexmachina/ember-devtools' });

      var devToolsConfig = app.emberDevTools || config['default']['ember-devtools'] || {};

      app.devTools = Devtools['default'].create({
        container: container
      });
      container.register('service:devtools', app.devTools);
      if (devToolsConfig.global === true) {
        app.devTools.globalize();
      } else if (devToolsConfig.global) {
        window[devToolsConfig.global] = app.devTools;
      }
    }
  };

});
define('fusor-ember-cli/initializers/ember-idx-modal', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, Em, IdxConfig) {

    'use strict';

    exports['default'] = {
        name: 'ember-idx-modal',
        initialize: function initialize() {
            var Config = Em['default'].IdxConfig = Em['default'].IdxConfig ? Em['default'].IdxConfig : IdxConfig['default'].create();

            var defaultConfig = Config.getConfig('bs');
            if (!defaultConfig) {
                Config.addConfig('bs');
                defaultConfig = Config.getConfig('bs');
            }

            defaultConfig['modal'] = {
                classes: ['em-modal', 'modal', 'fade'],
                bodyClasses: ['modal-body'],
                titleClasses: ['modal-header'],
                footerClasses: ['modal-footer']
            };
        }
    };

});
define('fusor-ember-cli/initializers/ember-moment', ['exports', 'ember-moment/helpers/moment', 'ember-moment/helpers/ago', 'ember-moment/helpers/duration', 'ember'], function (exports, moment, ago, duration, Ember) {

  'use strict';

  var initialize = function initialize() /* container, app */{
    var registerHelper;

    if (Ember['default'].HTMLBars) {
      registerHelper = function (helperName, fn) {
        Ember['default'].HTMLBars._registerHelper(helperName, Ember['default'].HTMLBars.makeBoundHelper(fn));
      };
    } else {
      registerHelper = Ember['default'].Handlebars.helper;
    };

    registerHelper('moment', moment['default']);
    registerHelper('ago', ago['default']);
    registerHelper('duration', duration['default']);
  };

  exports['default'] = {
    name: 'ember-moment',

    initialize: initialize
  };

  exports.initialize = initialize;

});
define('fusor-ember-cli/initializers/export-application-global', ['exports', 'ember', 'fusor-ember-cli/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (config['default'].exportApplicationGlobal !== false) {
      var value = config['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember['default'].String.classify(config['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  ;

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('fusor-ember-cli/mixins/configure-environment-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    selectedEnvironment: Ember['default'].computed.alias("model"),

    useDefaultOrgViewForEnv: (function () {
      return Ember['default'].isBlank(this.get('model'));
    }).property('model'),

    nonLibraryEnvironments: Ember['default'].computed.filterBy('lifecycleEnvironments', 'library', false),
    libraryEnvironments: Ember['default'].computed.filterBy('lifecycleEnvironments', 'library', true),
    libraryEnv: (function () {
      return this.get('libraryEnvironments').get('firstObject');
    }).property('libraryEnvironments'),

    priorLibraryEnvironments: Ember['default'].computed.filter('lifecycleEnvironments', function (item) {
      return item.get('prior_id') === 1;
    }).property('lifecycleEnvironments.@each.[]', 'libraryEnv'),

    fields_env: {},

    showAlertMessage: false,

    envLabelName: (function () {
      if (this.get('name')) {
        var label = this.get('name').underscore();
        return label.replace(/[^A-Z0-9]/ig, "_");
      }
    }).property('name'),
    label: Ember['default'].computed.alias("envLabelName"),

    hasNoEnvironments: (function () {
      return Ember['default'].isEmpty(this.get('lifecycleEnvironments'));
    }).property('lifecycleEnvironments.@each.[]'),

    hasOnlyLibraryEnvironment: (function () {
      return this.get('lifecycleEnvironments.length') === 1;
    }).property('lifecycleEnvironments.@each.[]')

  });

});
define('fusor-ember-cli/mixins/configure-organization-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    needs: ['application', 'deployment'],

    selectedOrganization: Ember['default'].computed.alias("model"),

    fields_org: {},

    showAlertMessage: false,

    // default Organization name for New Organizations
    defaultOrgName: (function () {
      return this.getWithDefault('defaultOrg', this.get('deploymentName'));
    }).property(),

    orgLabelName: (function () {
      if (this.get('fields_org.name')) {
        return this.get('defaultOrgName').underscore();
      }
    }).property('defaultOrgName'),

    actions: {
      createOrganization: function createOrganization() {
        var self = this;
        this.set('fields_org.name', this.get('defaultOrgName'));
        var organization = this.store.createRecord('organization', this.get('fields_org'));
        self.set('fields_org', {});
        self.set('defaultOrgName', null);
        self.set('selectedOrganization', organization);
        organization.save().then(function (org) {
          //success
          self.set('organization', org);
          return self.set('showAlertMessage', true);
        }, function (error) {
          self.get('controllers.deployment').set('errorMsg', 'error saving organization' + error);
        });
      }
    }

  });

});
define('fusor-ember-cli/mixins/deployment-controller-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    needs: ['application', 'subscriptions', 'configure-organization', 'configure-environment', 'subscriptions/select-subscriptions'],

    isRhev: Ember['default'].computed.alias("model.deploy_rhev"),
    isOpenStack: Ember['default'].computed.alias("model.deploy_openstack"),
    isCloudForms: Ember['default'].computed.alias("model.deploy_cfme"),

    // default is downstream
    isUpstream: false,
    hideSubscriptions: false,
    isSubscriptions: (function () {
      return !(this.get('hideSubscriptions') && !this.get('isUpstream'));
    }).property('isUpstream', 'hideSubscriptions'),

    // will be overwritten be routes
    isHideWizard: null,

    // declared in controllers, and not in mixin
    // isRhev
    // isOpenStack
    // isCloudForms

    // route names will be overwrriten by active hook in routes/deployment.js
    // and routes/deployment-new.js and routes/start.js and routes/deployment-new/start.js
    satelliteTabRouteName: null,
    organizationTabRouteName: null,
    lifecycleEnvironmentTabRouteName: null,

    disableNextOnStart: (function () {
      return !(this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms'));
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    // names
    nameRHCI: (function () {
      if (this.get('isUpstream')) {
        return "Fusor";
      } else {
        return "RHCI";
      }
    }).property('isUpstream'),

    nameRedHat: (function () {
      if (this.get('isUpstream')) {
        return "";
      } else {
        return "Red Hat";
      }
    }).property('isUpstream'),

    nameSatellite: (function () {
      if (this.get('isUpstream')) {
        return "Foreman";
      } else {
        return "Satellite";
      }
    }).property('isUpstream'),

    nameRhev: (function () {
      if (this.get('isUpstream')) {
        return "oVirt";
      } else {
        return "RHEV";
      }
    }).property('isUpstream'),

    nameOpenStack: (function () {
      if (this.get('isUpstream')) {
        return "RDO";
      } else {
        return "RHELOSP";
      }
    }).property('isUpstream'),

    nameCloudForms: (function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "CloudForms";
      }
    }).property('isUpstream'),

    fullnameRhev: (function () {
      if (this.get('isUpstream')) {
        return "oVirt Project";
      } else {
        return "Red Hat Enterprise Virtualization";
      }
    }).property('isUpstream'),

    fullnameOpenStack: (function () {
      if (this.get('isUpstream')) {
        return "RDO Project";
      } else {
        return "Red Hat Enterprise Linux OpenStack Platform";
      }
    }).property('isUpstream'),

    fullnameCloudForms: (function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "Red Hat Cloud Forms Management Engine";
      }
    }).property('isUpstream'),

    // logo
    logoPath: (function () {
      if (this.get('isUpstream')) {
        return "assets/foreman.png";
      } else {
        return "assets/Header-logotype.png";
      }
    }).property('isUpstream'),

    currentStepNumber: null, //set by setupController,

    // steps
    stepNumberRhev: 2,

    stepNumberOpenstack: (function () {
      if (this.get('isRhev')) {
        return 3;
      } else {
        return 2;
      }
    }).property('isRhev'),

    stepNumberCloudForms: (function () {
      if (this.get('isRhev') && this.get('isOpenStack')) {
        return 4;
      } else if (this.get('isRhev') || this.get('isOpenStack')) {
        return 3;
      } else {
        return 2;
      }
    }).property('isRhev', 'isOpenStack'),

    stepNumberSubscriptions: (function () {
      if (this.get('isRhev') && this.get('isOpenStack') && this.get('isCloudForms')) {
        return 5;
      } else if (this.get('isRhev') && this.get('isOpenStack') || this.get('isRhev') && this.get('isCloudForms') || this.get('isOpenStack') && this.get('isCloudForms')) {
        return 4;
      } else if (this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms')) {
        return 3;
      } else {
        return 2;
      }
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    // calculate temporary without isSubscriptions
    stepNumberReviewTemp: (function () {
      if (this.get('isRhev') && this.get('isOpenStack') && this.get('isCloudForms')) {
        return 6;
      } else if (this.get('isRhev') && this.get('isOpenStack') || this.get('isRhev') && this.get('isCloudForms') || this.get('isOpenStack') && this.get('isCloudForms')) {
        return 5;
      } else if (this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms')) {
        return 4;
      } else {
        return 3;
      }
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    stepNumberReview: (function () {
      if (this.get('isSubscriptions')) {
        return this.get('stepNumberReviewTemp');
      } else {
        return this.get('stepNumberReviewTemp') - 1;
      }
    }).property('stepNumberReviewTemp', 'isSubscriptions'),

    step2RouteName: (function () {
      if (this.get('isRhev')) {
        return 'rhev';
      } else if (this.get('isOpenStack')) {
        return 'openstack';
      } else if (this.get('isCloudForms')) {
        return 'cloudforms';
      }
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    step3RouteName: (function () {
      if (this.get('step2RouteName') === 'rhev') {
        if (this.get('isOpenStack')) {
          return 'openstack';
        } else if (this.get('isCloudForms')) {
          return 'cloudforms';
        } else if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      } else if (this.get('step2RouteName') === 'openstack') {
        if (this.get('isCloudForms')) {
          return 'cloudforms';
        } else if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      } else if (this.get('step2RouteName') === 'cloudforms') {
        if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      }
    }).property('step2RouteName', 'isOpenStack', 'isCloudForms', 'isSubscriptions')

  });

});
define('fusor-ember-cli/mixins/deployment-new-controller-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    beforeModel: function beforeModel() {
      if (this.controllerFor('deployment-new').get('disableNextOnStart')) {
        return this.transitionTo('deployment-new.start');
      }
    }

  });

});
define('fusor-ember-cli/mixins/deployment-new-satellite-route-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    beforeModel: function beforeModel() {
      if (this.controllerFor('deployment-new').get('disableNextOnStart')) {
        return this.transitionTo('deployment-new.start');
      }
    }

  });

});
define('fusor-ember-cli/mixins/deployment-route-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    actions: {
      saveDeployment: function saveDeployment(routeNameForTransition) {
        var deployment = this.get('controller.model');
        var self = this;
        deployment.save().then(function (result) {
          if (routeNameForTransition) {
            if (routeNameForTransition === 'deployments') {
              return self.transitionTo('deployments');
            } else {
              return self.transitionTo(routeNameForTransition, result);
            }
          }
        }, function (error) {
          self.set('errorMsg', 'error saving organization' + error);
        });
      }
    }

  });

});
define('fusor-ember-cli/mixins/disable-tab-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    needs: ['deployment', 'configure-organization', 'configure-environment', 'application'],

    hasName: (function () {
      return this.get('model.name.length') > 0;
    }).property('model.name'),
    hasNoName: Ember['default'].computed.not('hasName'),

    hasOrganization: (function () {
      return !!this.get('model.organization.id');
    }).property('model.organization.id'),
    hasNoOrganization: Ember['default'].computed.not('hasOrganization'),

    deploymentNames: Ember['default'].computed.alias("controllers.application.deploymentNames"),

    isDuplicateName: (function () {
      if (this.get('model').get('isNew')) {
        return this.get('deploymentNames').contains(this.get('model.name'));
      } else {
        var attrs = this.get('model').changedAttributes();
        if (attrs.name) {
          var origValue = attrs.name[0];
          var dirtyValue = attrs.name[1];
          if (origValue !== dirtyValue) {
            return this.get('deploymentNames').contains(dirtyValue);
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
    }).property('model.name'),

    // disable All if there is no deployment name
    disableAll: Ember['default'].computed.alias("hasNoName"),

    // disable Next on Deployment Name if there is no deployment name
    disableNextOnDeploymentName: Ember['default'].computed.or("hasNoName", 'isDuplicateName'),

    // disable Next on Configure Organization if no organization is selected
    disableNextOnConfigureOrganization: Ember['default'].computed.or('hasNoOrganization', 'disableAll'),

    // disable Next on Lifecycle Environment if no lifecycle environment is selected
    // note: hasNoLifecycleEnvironment and hasNoLifecycleEnvironment is defined in /app/controllers/deployment.js
    //       and app/controllers/deployment-new.js rather than in this mixin
    disableNextOnLifecycleEnvironment: Ember['default'].computed.or('hasNoLifecycleEnvironment', 'disableAll', 'model.isSaving'),

    // Satellite Tabs Only
    disableTabDeploymentName: false, // always enable tab for entering deployment name
    disableTabConfigureOrganization: Ember['default'].computed.alias('disableNextOnDeploymentName'),
    disableTabLifecycleEnvironment: Ember['default'].computed.alias("disableNextOnConfigureOrganization")

  });

});
define('fusor-ember-cli/mixins/discovered-host-route-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      if (this.modelFor('deployment').get('isNotStarted')) {
        controller.set('isLoadingHosts', true);
        this.store.find('discovered-host').then(function (results) {
          controller.set('allDiscoveredHosts', results.filterBy('is_discovered', true));
          controller.set('isLoadingHosts', false);
        });
      }
    },

    actions: {
      refreshDiscoveredHosts: function refreshDiscoveredHosts() {
        console.log('refresh allDiscoveredHosts');
        var controller = this.get('controller');
        controller.set('isLoadingHosts', true);
        this.store.find('discovered-host').then(function (results) {
          controller.set('allDiscoveredHosts', results.filterBy('is_discovered', true));
          controller.set('isLoadingHosts', false);
        });
      }
    }

  });

});
define('fusor-ember-cli/mixins/progress-bar-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    intervalPolling: (function () {
      return 5000; // Time between refreshing (in ms)
    }).property().readOnly(),

    scheduleNextRefresh: function scheduleNextRefresh(f) {
      return Ember['default'].run.later(this, function () {
        f.apply(this);
        this.set('timer', this.scheduleNextRefresh(f));
      }, this.get('intervalPolling'));
    },

    // executes `refreshModelOnRoute` for every intervalPolling.
    startPolling: function startPolling() {
      this.set('timer', this.scheduleNextRefresh(this.get('refreshModelOnRoute'))); //and then repeats
    },

    stopPolling: function stopPolling() {
      Ember['default'].run.cancel(this.get('timer'));
    },

    refreshModelOnRoute: function refreshModelOnRoute() {
      return this.send('refreshModelOnOverviewRoute');
    }

  });

});
define('fusor-ember-cli/mixins/start-controller-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    isUpstream: false,

    // declared in controllers, and not in mixin
    // isRhev
    // isOpenStack
    // isCloudForms

    // route of Next button. It will be overwrriten by active hook in routes/start.js and routes/deployment-new/start.js
    satelliteTabRouteName: null,

    // disable Next button if none selected
    disableNextOnStart: (function () {
      return !(this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms'));
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    // names
    nameRHCI: (function () {
      if (this.get('isUpstream')) {
        return "Fusor";
      } else {
        return "RHCI";
      }
    }).property('isUpstream'),

    nameRedHat: (function () {
      if (this.get('isUpstream')) {
        return "";
      } else {
        return "Red Hat";
      }
    }).property('isUpstream'),

    nameSatellite: (function () {
      if (this.get('isUpstream')) {
        return "Foreman";
      } else {
        return "Satellite";
      }
    }).property('isUpstream'),

    nameRhev: (function () {
      if (this.get('isUpstream')) {
        return "oVirt";
      } else {
        return "RHEV";
      }
    }).property('isUpstream'),

    nameOpenStack: (function () {
      if (this.get('isUpstream')) {
        return "RDO";
      } else {
        return "RHELOSP";
      }
    }).property('isUpstream'),

    nameCloudForms: (function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "CloudForms";
      }
    }).property('isUpstream'),

    // images
    imgRhev: (function () {
      if (this.get('isUpstream')) {
        return "/assets/r/ovirt-640-210.png";
      } else {
        return "/assets/r/rhci-rhev-640-210.png";
      }
    }).property('isUpstream'),

    imgOpenStack: (function () {
      if (this.get('isUpstream')) {
        return "/assets/r/rdo-640-210.png";
      } else {
        return "/assets/r/rhci-openstack-640-210.png";
      }
    }).property('isUpstream'),

    imgCloudForms: (function () {
      if (this.get('isUpstream')) {
        return "/assets/r/manageiq-640-210.png";
      } else {
        return "/assets/r/rhci-cloudforms-640-210.png";
      }
    }).property('isUpstream')

  });

});
define('fusor-ember-cli/mixins/tr-engine-hypervisor-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    bgColor: (function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }).property('isChecked'),

    cssHostHostId: (function () {
      return 'host_' + this.get('host.id');
    }).property('host.id'),

    cssIdHostId: (function () {
      return 'id_' + this.get('host.id');
    }).property('host.id'),

    selectedIds: (function () {
      return this.get('model').getEach("id");
    }).property('model.[]'),

    actions: {
      saveHostname: function saveHostname() {
        var host = this.get('host');
        var self = this;
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');

        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: '/api/v21/discovered_hosts/' + host.get('id') + '/rename',
            type: "PUT",
            data: JSON.stringify({ 'discovered_host': { 'name': host.get('name') } }),
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token,
              "Authorization": "Basic " + self.get('session.basicAuthToken')
            },
            success: function success(response) {
              resolve(response);
            },

            error: function error(response) {
              reject(response);
            }
          });
        });
      }
    }

  });

});
define('fusor-ember-cli/models/consumer', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    type: DS['default'].attr('string'),
    entitlementCount: DS['default'].attr('number'),
    uuid: DS['default'].attr('string')
  });

});
define('fusor-ember-cli/models/coordinator', ['exports', 'ember', 'fusor-ember-cli/models/obj-hash'], function (exports, Ember, ObjHash) {

  'use strict';

  exports['default'] = Ember['default'].Object.extend(Ember['default'].Evented, {
    objectMap: (function () {
      return ObjHash['default'].create();
    }).property(),

    getObject: function getObject(id, ops) {
      ops = ops || {};
      var payload = this.get('objectMap').getObj(id);

      if (payload.ops.source) {
        payload.ops.source.sendAction('action', payload.obj);
      }

      if (payload.ops.target) {
        payload.ops.target.sendAction('action', payload.obj);
      }

      this.trigger("objectMoved", { obj: payload.obj, source: payload.ops.source, target: ops.target });

      return payload.obj;
    },

    setObject: function setObject(obj, ops) {
      ops = ops || {};
      return this.get('objectMap').add({ obj: obj, ops: ops });
    }
  });

});
define('fusor-ember-cli/models/deployment-plan-parameter', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].Model.extend({
        description: DS['default'].attr('string'),
        value: DS['default'].attr('string'),
        hidden: DS['default'].attr('boolean'),
        parameter_type: DS['default'].attr('string')
    });

});
define('fusor-ember-cli/models/deployment-plan', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].Model.extend({
        name: DS['default'].attr('string'),
        uuid: DS['default'].attr('string'),
        roles: DS['default'].hasMany('deployment-role', { inverse: null }),
        parameters: DS['default'].hasMany('deployment-plan-parameter', { inverse: null })
    });

});
define('fusor-ember-cli/models/deployment-role', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    version: DS['default'].attr('number'),

    parameterPrefix: (function () {
      return this.get('name') + '-' + this.get('version') + '::';
    }).property('name', 'version'),

    countParameterName: (function () {
      return this.get('parameterPrefix') + 'count';
    }).property('name', 'version'),

    flavorParameterName: (function () {
      return this.get('parameterPrefix') + 'Flavor';
    }).property('name', 'version'),

    imageParameterName: (function () {
      return this.get('parameterPrefix') + 'Image';
    }).property('name', 'version'),

    roleType: (function () {
      var name = this.get('name').toLowerCase();
      if (name.indexOf('controller') >= 0) {
        return 'controller';
      } else if (name.indexOf('compute') >= 0) {
        return 'compute';
      } else if (name.indexOf('cinder') >= 0) {
        return 'cinder';
      } else if (name.indexOf('swift') >= 0) {
        return 'swift';
      } else if (name.indexOf('ceph') >= 0) {
        return 'ceph';
      }

      return name;
    }).property('name')
  });

});
define('fusor-ember-cli/models/deployment', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    organization: DS['default'].belongsTo('organization', { async: true }),
    lifecycle_environment: DS['default'].belongsTo('lifecycle-environment', { async: true }),

    deploy_rhev: DS['default'].attr('boolean'),
    deploy_cfme: DS['default'].attr('boolean'),
    deploy_openstack: DS['default'].attr('boolean'),

    rhev_is_self_hosted: DS['default'].attr('boolean'),

    rhev_engine_admin_password: DS['default'].attr('string'),
    rhev_database_name: DS['default'].attr('string'),
    rhev_cluster_name: DS['default'].attr('string'),
    rhev_storage_name: DS['default'].attr('string'),
    rhev_storage_type: DS['default'].attr('string'),
    rhev_storage_address: DS['default'].attr('string'),
    rhev_cpu_type: DS['default'].attr('string'),
    rhev_share_path: DS['default'].attr('string'),

    cfme_install_loc: DS['default'].attr('string'),

    rhev_root_password: DS['default'].attr('string'),
    cfme_root_password: DS['default'].attr('string'),
    cfme_admin_password: DS['default'].attr('string'),

    foreman_task_uuid: DS['default'].attr('string'),
    upstream_consumer_uuid: DS['default'].attr('string'),
    upstream_consumer_name: DS['default'].attr('string'),

    rhev_export_domain_name: DS['default'].attr('string'),
    rhev_export_domain_address: DS['default'].attr('string'),
    rhev_export_domain_path: DS['default'].attr('string'),

    rhev_local_storage_path: DS['default'].attr('string'),
    rhev_gluster_node_name: DS['default'].attr('string'),
    rhev_gluster_node_address: DS['default'].attr('string'),
    rhev_gluster_ssh_port: DS['default'].attr('string'),
    rhev_gluster_root_password: DS['default'].attr('string'),

    host_naming_scheme: DS['default'].attr('string'),
    custom_preprend_name: DS['default'].attr('string'),
    enable_access_insights: DS['default'].attr('boolean'),
    cfme_address: DS['default'].attr('string'),

    openstack_undercloud_password: DS['default'].attr('string'),
    openstack_undercloud_ip_addr: DS['default'].attr('string'),
    openstack_undercloud_user: DS['default'].attr('string'),
    openstack_undercloud_user_password: DS['default'].attr('string'),

    created_at: DS['default'].attr('date'),
    updated_at: DS['default'].attr('date'),

    // has one Engine - discovered_host is an alias for rhev_engine_host_id
    discovered_host: DS['default'].belongsTo('discovered-host', { async: true }),
    rhev_engine_host_id: DS['default'].attr('number'),

    // has many Hypervisors
    discovered_hosts: DS['default'].hasMany('discovered-host', { async: true }),

    // has many Subscriptions
    subscriptions: DS['default'].hasMany('subscription', { inverse: 'deployment', async: true }),

    // Ember Data doesn't have DS.attr('array') so I did this
    rhev_hypervisor_host_ids: (function () {
      var discovered_hosts = this.get('discovered_hosts');
      if (Ember['default'].isPresent(discovered_hosts)) {
        return discovered_hosts.getEach('id');
      } else {
        return [];
      }
    }).property('discovered_hosts'),

    // controller.deployment.isStarted returns false if refreshing child route,
    // so best to have it on model as well
    isStarted: (function () {
      return !!this.get('foreman_task_uuid');
    }).property('foreman_task_uuid'),
    isNotStarted: Ember['default'].computed.not('isStarted'),

    // also put these in model rather than controller so it is accessible
    progress: null,
    state: null,

    foremanTask: (function () {
      if (this.get('isStarted')) {
        return this.store.find('foreman-task', this.get('foreman_task_uuid'));
      }
    }).property('foreman_task_uuid', 'isStarted'),

    setProgress: (function () {
      if (this.get('foremanTask')) {
        this.get('foremanTask').then((function (result) {
          this.set('progress', result.get('progress'));
          this.set('state', result.get('state'));
        }).bind(this));
      }
    }).observes('foremanTask', 'foreman_task_uuid'),

    progressPercent: (function () {
      if (this.get('progress')) {
        return (this.get('progress') * 100).toFixed(1) + '%';
      }
    }).property('progress')

  });

});
define('fusor-ember-cli/models/discovered-host', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    ip: DS['default'].attr('string'),
    mac: DS['default'].attr('string'),
    memory: DS['default'].attr('number'),
    disk_count: DS['default'].attr('number'),
    disks_size: DS['default'].attr('number'),
    cpus: DS['default'].attr('number'),
    memory_human_size: DS['default'].attr('string'),
    disks_human_size: DS['default'].attr('string'),
    subnet_to_s: DS['default'].attr('string'),
    is_virtual: DS['default'].attr('boolean'),

    type: DS['default'].attr('string'),
    is_managed: DS['default'].attr('boolean'),
    is_discovered: DS['default'].attr('boolean'),

    created_at: DS['default'].attr('date'),
    updated_at: DS['default'].attr('date'),

    environment_name: DS['default'].attr('string'),
    hostgroup_name: DS['default'].attr('string'),
    compute_resource_name: DS['default'].attr('string'),
    domain_name: DS['default'].attr('string')

  });

});
define('fusor-ember-cli/models/domain', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].Model.extend({
        name: DS['default'].attr('string'),
        fullname: DS['default'].attr('string'),
        dns_id: DS['default'].attr('number'),
        hosts_count: DS['default'].attr('number'),
        hostgroups_count: DS['default'].attr('number'),
        created_at: DS['default'].attr('date'),
        updated_at: DS['default'].attr('date'),
        hostgroups: DS['default'].hasMany('hostgroup', { async: true })

    });

});
define('fusor-ember-cli/models/entitlement', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({

    //pool node attributes
    poolId: DS['default'].attr('string'),
    poolType: DS['default'].attr('string'),
    poolQuantity: DS['default'].attr('number'),
    subscriptionId: DS['default'].attr('string'),
    activeSubscription: DS['default'].attr('boolean'),
    contractNumber: DS['default'].attr('string'),
    accountNumber: DS['default'].attr('string'),
    consumed: DS['default'].attr('number'),
    exported: DS['default'].attr('number'),
    productName: DS['default'].attr('string'),

    //attributes not returned in 'pool' node
    quantity: DS['default'].attr('number'),
    startDate: DS['default'].attr('date'),
    endDate: DS['default'].attr('date'),
    href: DS['default'].attr('string'),
    created: DS['default'].attr('date'),
    updated: DS['default'].attr('date')

  });

});
define('fusor-ember-cli/models/environment', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string')
    //  organization: DS.belongsTo('organization')
  });

});
define('fusor-ember-cli/models/flavor', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    ram: DS['default'].attr('number'),
    vcpus: DS['default'].attr('number'),
    disk: DS['default'].attr('number'),
    extra_specs: DS['default'].attr()
  });

});
define('fusor-ember-cli/models/foreman-task', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    label: DS['default'].attr('string'),
    pending: DS['default'].attr('boolean'),
    humanized_name: DS['default'].attr('string'),
    username: DS['default'].attr('string'),
    started_at: DS['default'].attr('string'),
    ended_at: DS['default'].attr('string'),
    state: DS['default'].attr('string'),
    result: DS['default'].attr('string'),
    external_id: DS['default'].attr('string'),
    progress: DS['default'].attr('string'),
    humanized_errors: DS['default'].attr('string'),
    humanized_output: DS['default'].attr('string'),
    humanized_input: DS['default'].attr('string'),
    repository: DS['default'].attr('string'),
    taskUrl: (function () {
      return '/foreman_tasks/tasks/' + this.get('id');
    }).property('id')
  });

});
define('fusor-ember-cli/models/host', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    hostgroup: DS['default'].attr('string'),
    mac: DS['default'].attr('string'),
    domain: DS['default'].attr('string'),
    subnet: DS['default'].attr('string'),
    operatingsystem: DS['default'].attr('string'),
    environment: DS['default'].attr('string'),
    model: DS['default'].attr('string'),
    location: DS['default'].attr('string'),
    organization: DS['default'].attr('string'),
    cpu: DS['default'].attr('string'),
    memory: DS['default'].attr('string'),
    vendor: DS['default'].attr('string')
  });

});
define('fusor-ember-cli/models/hostgroup', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].Model.extend({
        name: DS['default'].attr('string'),
        title: DS['default'].attr('string'),
        parent_id: DS['default'].attr('number'),
        created_at: DS['default'].attr('date'),
        updated_at: DS['default'].attr('date'),
        domain: DS['default'].belongsTo('domain', { async: true })
    });

});
define('fusor-ember-cli/models/image', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string')
  });

});
define('fusor-ember-cli/models/lifecycle-environment', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    label: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    library: DS['default'].attr('boolean'),
    prior: DS['default'].attr('number'),
    prior_id: DS['default'].attr('number'),
    created_at: DS['default'].attr('date'),
    updated_at: DS['default'].attr('date'),
    organization: DS['default'].belongsTo('organization', { async: true })
  });

});
define('fusor-ember-cli/models/management-application', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    // uuid is not listed here since serializer defines it as primaryKey so it's retreived as id
    name: DS['default'].attr('string'),
    releaseVer: DS['default'].attr('string'),
    username: DS['default'].attr('string'),
    entitlementStatus: DS['default'].attr('string'),
    serviceLevel: DS['default'].attr('string'),
    environment: DS['default'].attr('string'),
    entitlementCount: DS['default'].attr('number'),
    lastCheckin: DS['default'].attr('date'),
    canActivate: DS['default'].attr('boolean'),
    hypervisorId: DS['default'].attr('string'),
    autoheal: DS['default'].attr('boolean'),
    href: DS['default'].attr('string'),
    created: DS['default'].attr('date'),
    updated: DS['default'].attr('date')

  });

  // These objects are in the JSON response but removed in the serializer
  // and not saved in the store
  //
  // "releaseVer": {
  //     "releaseVer": null
  // },
  // "type": {
  //     "id": "9",
  //     "label": "satellite",
  //     "manifest": true
  // },
  // "owner": {
  //     "id": "8a85f9814a192108014a1adef5826b38",
  //     "key": "7473998",
  //     "displayName": "7473998",
  //     "href": "/owners/7473998"
  // },
  // "installedProducts": [],
  // "guestIds": [],
  // "capabilities": [],

});
define('fusor-ember-cli/models/node', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].Model.extend({
        uuid: DS['default'].attr('string'),
        driver: DS['default'].attr('string'),
        provision_state: DS['default'].attr('string'),
        driver_info: DS['default'].attr(),
        properties: DS['default'].attr(),
        address: DS['default'].attr('string')
    });

});
define('fusor-ember-cli/models/obj-hash', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Object.extend({
    content: {},
    contentLength: 0,

    add: function add(obj) {
      var id = this.generateId();
      this.get('content')[id] = obj;
      this.incrementProperty("contentLength");
      return id;
    },

    getObj: function getObj(key) {
      var res = this.get('content')[key];
      if (!res) {
        throw "no obj for key " + key;
      }
      return res;
    },

    generateId: function generateId() {
      var num = Math.random() * 1000000000000.0;
      num = parseInt(num);
      num = "" + num;
      return num;
    },

    keys: function keys() {
      var res = [];
      for (var key in this.get('content')) {
        res.push(key);
      }
      return Ember['default'].A(res);
    },

    lengthBinding: "contentLength"
  });

});
define('fusor-ember-cli/models/openstack-deployment', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].Model.extend({
        stack_status: DS['default'].attr('string'),
        stack_status_reason: DS['default'].attr('string')
    });

});
define('fusor-ember-cli/models/organization', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    title: DS['default'].attr('string'),
    label: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    lifecycle_environments: DS['default'].hasMany('lifecycle-environment', { async: true })
    //  subnets: DS.hasMany('subnet', { async: true })
  });

});
define('fusor-ember-cli/models/pool', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({

    type: DS['default'].attr('string'),
    subscriptionId: DS['default'].attr('string'),
    activeSubscription: DS['default'].attr('boolean'),
    contractNumber: DS['default'].attr('string'),
    accountNumber: DS['default'].attr('string'),
    consumed: DS['default'].attr('number'),
    exported: DS['default'].attr('number'),
    productName: DS['default'].attr('string'),

    quantity: DS['default'].attr('number'),
    startDate: DS['default'].attr('date'),
    endDate: DS['default'].attr('date'),
    href: DS['default'].attr('string'),
    created: DS['default'].attr('date'),
    updated: DS['default'].attr('date'),

    qtyAvailable: (function () {
      return this.get('quantity') - this.get('consumed');
    }).property('quantity', 'consumed'),

    qtyAvailableOfTotal: (function () {
      return this.get('qtyAvailable') + ' of ' + this.get('quantity');
    }).property('qtyAvailable', 'quantity')

  });

});
define('fusor-ember-cli/models/session-portal', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    identification: DS['default'].attr('string'),
    ownerKey: DS['default'].attr('string'),
    consumerUUID: DS['default'].attr('string'),
    isAuthenticated: DS['default'].attr('boolean')
  });

});
define('fusor-ember-cli/models/subnet', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    network: DS['default'].attr('string'),
    mask: DS['default'].attr('string'),
    priority: DS['default'].attr('number'),
    name: DS['default'].attr('string'),
    vlanid: DS['default'].attr('string'),
    created_at: DS['default'].attr('date'),
    updated_at: DS['default'].attr('date'),
    dhcp_id: DS['default'].attr('number'),
    tftp_id: DS['default'].attr('number'),
    from: DS['default'].attr('string'),
    to: DS['default'].attr('string'),
    gateway: DS['default'].attr('string'),
    dns_primary: DS['default'].attr('string'),
    dns_secondary: DS['default'].attr('string'),
    dns_id: DS['default'].attr('number'),
    sort_network_id: DS['default'].attr('number'),
    boot_mode: DS['default'].attr('string'),
    ipam: DS['default'].attr('string'),
    organization: DS['default'].belongsTo('organization')
  });

});
define('fusor-ember-cli/models/subscription', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({

    contract_number: DS['default'].attr('string'),
    product_name: DS['default'].attr('string'),
    quantity_attached: DS['default'].attr('number'),
    deployment: DS['default'].belongsTo('deployment', { inverse: 'subscriptions', async: true })

  });

});
define('fusor-ember-cli/router', ['exports', 'ember', 'fusor-ember-cli/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType,
    // log when Ember generates a controller or a route from a generic class
    LOG_ACTIVE_GENERATION: true,
    // log when Ember looks up a template or a view
    LOG_VIEW_LOOKUPS: true
  });

  exports['default'] = Router.map(function () {
    this.route('login');
    this.route('loggedin');

    this.resource('rhci', { path: '/old-deployments/new-old' }, function () {
      this.route('satellite', function () {
        this.route('configure-organization');
        this.route('configure-environment');
      });
    });

    this.resource('deployments');

    this.resource("deployment-new", { path: '/deployments/new' }, function () {
      this.route("start");
      this.route('satellite', function () {
        this.route('configure-environment');
        this.route("configure-organization");
      });
    });

    this.resource('deployment', { path: '/deployments/:deployment_id' }, function () {

      this.route("start");

      this.resource('satellite', function () {
        this.resource('configure-organization');
        this.resource('configure-environment');
      });

      this.resource('rhev', function () {
        this.resource('rhev-setup', { path: 'setup' });
        this.resource('engine', function () {
          this.route('discovered-host');
        });
        this.resource('hypervisor', function () {
          this.route('discovered-host');
        });
        this.resource('rhev-options', { path: 'configuration' });
        this.resource('storage');
      });

      this.resource('openstack', function () {
        this.resource('undercloud-deploy');
        this.resource('register-nodes');
        this.resource('assign-nodes');
      });
      this.resource('cloudforms', function () {
        this.resource('where-install');
        this.route('cfme-configuration', { path: 'configuration' });
      });
      this.resource('subscriptions', function () {
        this.route('credentials');
        this.route('management-application', function () {
          this.route('consumer', { path: '/:management_application_uuid' }, function () {
            this.route('pools');
            this.route('entitlements');
          });
        });
        this.route('select-subscriptions', { path: 'select' });
      });
      this.resource('review', function () {
        this.route('installation');
        this.route('progress', function () {
          this.route('overview');
          this.route('details', function () {
            this.route('task', { path: '/:task_id' }, function () {
              this.route('running_steps');
              this.route('task_errors');
              this.route('task_locks');
              this.route('task_raw');
            });
          });
        });
        this.route('summary');
      });
    });
  });

});
define('fusor-ember-cli/routes/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  // app/routes/application.js
  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var deploymentNames = [];
      controller.set('deploymentNames', []);
      this.store.find('deployment').then(function (results) {
        deploymentNames = results.getEach('name');
        console.log(deploymentNames);
        return controller.set('deploymentNames', deploymentNames);
      });
    },

    actions: {
      invalidateSession: function invalidateSession() {
        return this.transitionTo('login');
      }
    }
  });

});
define('fusor-ember-cli/routes/assign-nodes', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-route-mixin'], function (exports, Ember, DeploymentRouteMixin) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(DeploymentRouteMixin['default'], {

        model: function model() {
            var deploymentId = this.modelFor('deployment').get('id');
            return Ember['default'].RSVP.hash({
                plan: this.store.find('deployment-plan', deploymentId),
                images: this.store.find('image', { deployment_id: deploymentId }),
                nodes: this.store.find('node', { deployment_id: deploymentId }),
                profiles: this.store.find('flavor', { deployment_id: deploymentId })
            });
        },

        setupController: function setupController(controller, model) {
            controller.set('model', model);
        }
    });

});
define('fusor-ember-cli/routes/cloudforms', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberCloudForms = this.controllerFor('deployment').get('stepNumberCloudForms');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberCloudForms);
    }

  });

});
define('fusor-ember-cli/routes/cloudforms/cfme-configuration', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/cloudforms/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('where-install');
    }
  });

});
define('fusor-ember-cli/routes/configure-environment', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment').get('lifecycle_environment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var self = this;
      var organization = this.modelFor('deployment').get('organization');
      var lifecycleEnvironments = this.store.find('lifecycle-environment', { organization_id: organization.get('id') });
      lifecycleEnvironments.then(function (results) {
        controller.set('lifecycleEnvironments', results);
        // nullify environment if organization has no environments
        if (results.get('length') === 0) {
          return controller.set('selectedEnvironment', null);
        } else {
          return controller.set('selectedEnvironment', model);
        }
      });
    },

    deactivate: function deactivate() {
      this.get('controller').set('showAlertMessage', false);
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/configure-organization', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment').get('organization');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showAlertMessage', false);
      var organizations = this.store.find('organization');
      controller.set('organizations', organizations);
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/consumer', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model(params) {
      return this.store.find('consumer', params.uuid);
    },

    serialize: function serialize(model) {
      // this will make the URL `/consumers/:uuid`
      return { consumer_slug: model.get('uuid') };
    }

  });

});
define('fusor-ember-cli/routes/consumers', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/deployment-new', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-route-mixin'], function (exports, Ember, DeploymentRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DeploymentRouteMixin['default'], {

    model: function model() {
      return this.store.createRecord('deployment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'deployment-new.satellite.index');
      controller.set('organizationTabRouteName', 'deployment-new.satellite.configure-organization');
      controller.set('lifecycleEnvironmentTabRouteName', 'deployment-new.satellite.configure-environment');
      controller.set('model.enable_access_insights', true);
      controller.set('model.rhev_cluster_name', 'Default');
      controller.set('model.rhev_storage_name', 'my_storage');
      controller.set('model.rhev_export_domain_name', 'my_export');
      controller.set('model.rhev_database_name', 'Default');
      this.controllerFor('application').set('isNewDeployment', true);
    },

    // rollback if new deployment not saved
    // TODO modal confirm/cancel
    deactivate: function deactivate() {
      var deployment = this.modelFor('deployment-new');
      if (deployment.get('isNew')) {
        return deployment.rollback();
      }
    }

  });

});
define('fusor-ember-cli/routes/deployment-new/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    // if user manually hits this route (deployments/news), then redirecto to deployments/news/start
    beforeModel: function beforeModel() {
      return this.transitionTo('deployment-new.start');
    }

  });

});
define('fusor-ember-cli/routes/deployment-new/satellite', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/deployment-new/satellite/configure-environment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, Ember, DeploymentNewSatelliteRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DeploymentNewSatelliteRouteMixin['default'], {

    model: function model() {
      return this.modelFor('deployment-new').get('lifecycle_environment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var self = this;
      var organization = this.modelFor('deployment-new').get('organization');
      var lifecycleEnvironments = this.store.find('lifecycle-environment', { organization_id: organization.get('id') });
      lifecycleEnvironments.then(function (results) {
        controller.set('lifecycleEnvironments', results);
        // nullify environment if organization has no environments
        if (results.get('length') === 0) {
          return controller.set('selectedEnvironment', null);
          // default to Library if it is only env that exists
        } else if (results.get('length') === 1) {
            var libraryEnv = results.get('firstObject');
            self.controllerFor('deployment-new').set('lifecycle_environment', libraryEnv);
            return controller.set('selectedEnvironment', libraryEnv);
          } else {
            return controller.set('useDefaultOrgViewForEnv', false);
          }
      });
    },

    deactivate: function deactivate() {
      this.get('controller').set('showAlertMessage', false);
    }

  });

});
define('fusor-ember-cli/routes/deployment-new/satellite/configure-organization', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, Ember, DeploymentNewSatelliteRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DeploymentNewSatelliteRouteMixin['default'], {

    model: function model() {
      return this.modelFor('deployment-new').get('organization');
    },

    setupController: function setupController(controller, model) {
      var self = this;
      controller.set('model', model);
      controller.set('showAlertMessage', false);
      this.store.find('organization').then(function (results) {
        controller.set('organizations', results);
        if (results.get('length') === 1) {
          var defaultOrg = results.get('firstObject');
          controller.set('model', defaultOrg);
          controller.set('selectedOrganization', defaultOrg);
          self.modelFor('deployment-new').set('organization', defaultOrg);
        }
      });
    }

  });

});
define('fusor-ember-cli/routes/deployment-new/satellite/index', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, Ember, DeploymentNewSatelliteRouteMixin) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend(DeploymentNewSatelliteRouteMixin['default'], {});

});
define('fusor-ember-cli/routes/deployment-new/start', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'deployment-new.satellite.index');
      controller.set('model.deploy_rhev', true);
      controller.set('model.deploy_cfme', true);
    },

    activate: function activate() {
      this.controllerFor('deployment-new').set('isHideWizard', true);
    },

    deactivate: function deactivate() {
      this.controllerFor('deployment-new').set('isHideWizard', false);
    }

  });

});
define('fusor-ember-cli/routes/deployment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-route-mixin'], function (exports, Ember, DeploymentRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DeploymentRouteMixin['default'], {

    model: function model(params) {
      return this.store.find('deployment', params.deployment_id);
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'satellite.index');
      controller.set('organizationTabRouteName', 'configure-organization');
      controller.set('lifecycleEnvironmentTabRouteName', 'configure-environment');

      // copied from setupController in app/routes/subscriptions/credentials.js
      // to fix bug of Review Tab being disabled on refresh and needing to click
      // on subscriptions to enable it
      // check if org has upstream UUID using Katello V2 API
      var orgID = model.get('organization.id');
      var url = '/katello/api/v2/organizations/' + orgID;
      Ember['default'].$.getJSON(url).then(function (results) {
        if (Ember['default'].isPresent(results.owner_details.upstreamConsumer)) {
          controller.set('organizationUpstreamConsumerUUID', results.owner_details.upstreamConsumer.uuid);
          controller.set('organizationUpstreamConsumerName', results.owner_details.upstreamConsumer.name);
          // if no UUID for deployment, assign it from org UUID
          if (Ember['default'].isBlank(controller.get('model.upstream_consumer_uuid'))) {
            controller.set('model.upstream_consumer_uuid', results.owner_details.upstreamConsumer.uuid);
            controller.set('model.upstream_consumer_name', results.owner_details.upstreamConsumer.name);
          }
        } else {
          controller.set('organizationUpstreamConsumerUUID', null);
          controller.set('organizationUpstreamConsumerName', null);
        }
      });
    },

    actions: {
      installDeployment: function installDeployment() {
        var self = this;
        var deployment = self.modelFor('deployment');
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');

        var controller = this.controllerFor('review/installation');

        controller.set('spinnerTextMessage', 'Building task list');
        controller.set('showSpinner', true);

        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: '/fusor/api/v21/deployments/' + deployment.get('id') + '/deploy',
            type: "PUT",
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token,
              "Authorization": "Basic " + self.get('session.basicAuthToken')
            },
            success: function success(response) {
              resolve(response);
              var uuid = response.id;
              deployment.set('foreman_task_uuid', uuid);
              deployment.save().then(function () {
                return self.transitionTo('review.progress.overview');
              }, function () {
                controller.set('errorMsg', 'Error in saving UUID of deployment task.');
                controller.set('showErrorMessage', true);
              });
            },

            error: function error(response) {
              controller.set('showSpinner', false);
              console.log(response);
              var errorMsg = response.responseText;
              controller.set('errorMsg', errorMsg);
              controller.set('showErrorMessage', true);
              reject(response);
            }
          });
        });
      },

      attachSubscriptions: function attachSubscriptions() {
        var self = this;
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');
        var sessionPortal = this.modelFor('subscriptions');
        var consumerUUID = sessionPortal.get('consumerUUID');
        var subscriptions = this.controllerFor('subscriptions/select-subscriptions').get('subscriptionPools');

        var controller = this.controllerFor('review/installation');

        controller.set('buttonDeployDisabled', true);
        controller.set('spinnerTextMessage', 'Attaching Subscriptions in Red Hat Customer Portal');
        controller.set('showSpinner', true);

        subscriptions.forEach(function (item) {
          console.log(item);
          console.log('qtyToAttach is');
          console.log(item.get('qtyToAttach'));
          console.log('pool ID is');
          console.log(item.get('id'));
          console.log('isSelectedSubscription is');
          console.log(item.get('isSelectedSubscription'));

          if (item.get('isSelectedSubscription')) {

            // POST /customer_portal/consumers/#{CONSUMER['uuid']}/entitlements?pool=#{POOL['id']}&quantity=#{QUANTITY}
            var url = '/customer_portal/consumers/' + consumerUUID + "/entitlements?pool=" + item.get('id') + "&quantity=" + item.get('qtyToAttach');

            return new Ember['default'].RSVP.Promise(function (resolve, reject) {
              Ember['default'].$.ajax({
                url: url,
                type: "POST",
                headers: {
                  "Accept": "application/json",
                  "Content-Type": "application/json",
                  "X-CSRF-Token": token
                },

                success: function success() {
                  console.log('successfully attached ' + item.qtyToAttach + ' subscription for pool ' + item.id);
                  self.send('installDeployment');
                },

                error: function error() {
                  console.log('error on attachSubscriptions');
                  return self.send('error');
                }
              });
            });
          }
        });
      },

      saveAndCancelDeployment: function saveAndCancelDeployment() {
        return this.send('saveDeployment', 'deployments');
      },

      cancelAndDeleteDeployment: function cancelAndDeleteDeployment() {
        var deployment = this.get('controller.model');
        var self = this;
        deployment.destroyRecord().then(function () {
          return self.transitionTo('deployments');
        });
      },

      error: function error(reason) {
        console.log(reason);
        var controller = this.controllerFor('deployment');
        controller.set('errorMsg', reason.responseJSON.error.message);
      },

      refreshModel: function refreshModel() {
        console.log('refreshModelOnDeploymentRoute');
        return this.refresh();
      }

    }

  });

});
define('fusor-ember-cli/routes/deployment/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    afterModel: function afterModel() {
      this.transitionTo('satellite');
    }
  });

});
define('fusor-ember-cli/routes/deployment/start', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'satellite.index');
    },

    activate: function activate() {
      this.controllerFor('deployment').set('isHideWizard', true);
    },

    deactivate: function deactivate() {
      this.controllerFor('deployment').set('isHideWizard', false);
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/deployments', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find('deployment');
    },

    actions: {
      deleteDeployment: function deleteDeployment(item) {
        this.controllerFor('deployments').set('isCloseModal', true);
        return this.store.find('deployment', item.get('id')).then(function (deployment) {
          deployment.deleteRecord();
          return deployment.save();
        });
      }
    }

  });

});
define('fusor-ember-cli/routes/engine', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('engine.discovered-host');
    }
  });

});
define('fusor-ember-cli/routes/engine/discovered-host', ['exports', 'ember', 'fusor-ember-cli/mixins/discovered-host-route-mixin'], function (exports, Ember, DiscoveredHostRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DiscoveredHostRouteMixin['default'], {
    model: function model() {
      return this.modelFor('deployment').get('discovered_host').then(function (results) {
        return results;
      });
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/hypervisor', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('hypervisor.discovered-host');
    }
  });

});
define('fusor-ember-cli/routes/hypervisor/discovered-host', ['exports', 'ember', 'fusor-ember-cli/mixins/discovered-host-route-mixin'], function (exports, Ember, DiscoveredHostRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DiscoveredHostRouteMixin['default'], {
    model: function model() {
      return this.modelFor('deployment').get('discovered_hosts');
    },

    deactivate: function deactivate() {
      return this.send('saveHyperVisors', null);
    },

    actions: {
      saveHyperVisors: function saveHyperVisors(redirectPath) {
        var self = this;
        var deployment = this.modelFor('deployment');
        var hypervisorModelIds = this.controllerFor('hypervisor/discovered-host').get('hypervisorModelIds');
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');

        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: '/fusor/api/v21/deployments/' + deployment.get('id'),
            type: "PUT",
            data: JSON.stringify({ 'deployment': { 'discovered_host_ids': hypervisorModelIds } }),
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token,
              "Authorization": "Basic " + self.get('session.basicAuthToken')
            },
            success: function success(response) {
              resolve(response);
              if (redirectPath) {
                self.transitionTo('rhev-options');
              }
            },

            error: function error(response) {
              reject(response);
            }
          });
        });
      }
    }

  });

});
define('fusor-ember-cli/routes/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      return this.transitionTo('deployment-new');
    }

  });

});
define('fusor-ember-cli/routes/new-environment', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/new-node-registration', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('fields', {});
    }
  });

});
define('fusor-ember-cli/routes/new-organization', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('fields', {});
    }
  });

});
define('fusor-ember-cli/routes/openstack', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberOpenstack = this.controllerFor('deployment').get('stepNumberOpenstack');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberOpenstack);
    }

  });

});
define('fusor-ember-cli/routes/openstack/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('undercloud-deploy');
    }
  });

});
define('fusor-ember-cli/routes/register-nodes', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      var deploymentId = this.modelFor('deployment').get('id');
      return Ember['default'].RSVP.hash({
        nodes: this.store.find('node', { deployment_id: deploymentId }),
        profiles: this.store.find('flavor', { deployment_id: deploymentId }),
        bmDeployKernelImage: Ember['default'].$.getJSON('/fusor/api/openstack/deployments/' + deploymentId + '/images/show_by_name/bm-deploy-kernel'),
        bmDeployRamdiskImage: Ember['default'].$.getJSON('/fusor/api/openstack/deployments/' + deploymentId + '/images/show_by_name/bm-deploy-ramdisk')
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showAlertMessage', false);
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/review', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberReview = this.controllerFor('deployment').get('stepNumberReview');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberReview);
    }

  });

});
define('fusor-ember-cli/routes/review/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('review.installation');
    }
  });

});
define('fusor-ember-cli/routes/review/installation', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        model: function model() {
            return this.modelFor('deployment');
        },

        setupController: function setupController(controller, model) {
            controller.set('model', model);
            controller.set('showSpinner', false);
            controller.set('showErrorMessage', false);
            if (model.get('deploy_rhev')) {
                this.store.find('hostgroup').then(function (results) {
                    var fusorBaseDomain = results.filterBy('name', 'Fusor Base').get('firstObject').get('domain.name');
                    controller.set('engineDomain', fusorBaseDomain);
                    controller.set('hypervisorDomain', fusorBaseDomain);
                });
            }
            if (model.get('deploy_openstack')) {
                this.store.find('deployment-plan', model.get('id')).then(function (plan) {
                    controller.set('openstackPlan', plan);
                });
                this.store.find('node', { deployment_id: model.get('id') }).then(function (nodes) {
                    controller.set('openstackNodes', nodes);
                });
                this.store.find('flavor', { deployment_id: model.get('id') }).then(function (flavors) {
                    controller.set('openstackProfiles', flavors);
                });
            }
        }

    });

});
define('fusor-ember-cli/routes/review/progress', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      return this.transitionTo('review.progress.overview');
    }

  });

});
define('fusor-ember-cli/routes/review/progress/details', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      if (Ember['default'].isBlank(this.modelFor('review.progress.overview'))) {
        this.transitionTo('review.progress.overview');
      }
    },

    model: function model() {
      return this.modelFor('review.progress.overview');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('isLoadingMoreTasks', true);

      if (model.manageContentTask) {
        var manageContentTaskUuid = model.manageContentTask.get('id');
        console.log(manageContentTaskUuid);
        return this.store.find('foreman-task', { search: "parent_task_id=" + manageContentTaskUuid }).then(function (synctasks) {
          controller.set('synctasks', synctasks);
          return controller.set('isLoadingMoreTasks', false);
        });
      } else {
        return controller.set('isLoadingMoreTasks', false);
      }
    }

  });

});
define('fusor-ember-cli/routes/review/progress/details/task', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model(params) {
      return this.store.find('foreman-task', params.task_id);
    }
  });

});
define('fusor-ember-cli/routes/review/progress/details/task/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      var deployment = this.modelFor('deployment');
      return this.store.find('foreman-task', deployment.get('foreman_task_uuid'));
    }

  });

});
define('fusor-ember-cli/routes/review/progress/details/task/running-steps', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/progress/details/task/task-errors', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/progress/details/task/task-locks', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/progress/details/task/task-raw', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/progress/overview', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      var deployment = this.modelFor('deployment');
      var deployTaskPromise = this.store.find('foreman-task', { search: "id = " + deployment.get('foreman_task_uuid') });
      var subtasksOfDeployPromise = this.store.find('foreman-task', { search: "parent_task_id = " + deployment.get('foreman_task_uuid') });
      var self = this;
      return Ember['default'].RSVP.Promise.all([deployTaskPromise, subtasksOfDeployPromise]).then(function (results) {
        var deployTask = results[0].get('firstObject');
        var subtasksOfDeploy = results[1];
        var manageContentTask = subtasksOfDeploy.findBy('humanized_name', 'Manage Content');
        var rhevTask = subtasksOfDeploy.findBy('humanized_name', 'Deploy Red Hat Enterprise Virtualization');
        var openstackTask = subtasksOfDeploy.findBy('humanized_name', 'Deploy Red Hat OpenStack Platform overcloud');
        var cfmeTask = subtasksOfDeploy.findBy('humanized_name', 'Deploy CloudForms Management Engine');

        return Ember['default'].RSVP.hash({
          deployTask: deployTask,
          manageContentTask: manageContentTask,
          rhevTask: rhevTask,
          openstackTask: openstackTask,
          cfmeTask: cfmeTask
        });
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('deployTask', model.deployTask);
      controller.set('manageContentTask', model.manageContentTask);
      controller.set('rhevTask', model.rhevTask);
      controller.set('openstackTask', model.openstackTask);
      controller.set('cfmeTask', model.cfmeTask);
      controller.stopPolling();
      controller.startPolling();
    },

    deactivate: function deactivate() {
      this.get('controller').stopPolling();
    },

    actions: {
      refreshModelOnOverviewRoute: function refreshModelOnOverviewRoute() {
        return this.refresh();
      }
    }

  });

});
define('fusor-ember-cli/routes/review/summary', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      var deployment_id = this.modelFor('deployment').get('id');
      return this.store.find('deployment', { search: "id = " + deployment_id }).then(function (results) {
        return results.get('firstObject');
      });
    }

  });

});
define('fusor-ember-cli/routes/rhci', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/rhev-options', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });

});
define('fusor-ember-cli/routes/rhev-setup', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });

});
define('fusor-ember-cli/routes/rhev', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      return this.controllerFor('deployment').set('currentStepNumber', 2);
    }

  });

});
define('fusor-ember-cli/routes/rhev/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      return this.transitionTo('rhev-setup');
    }
  });

});
define('fusor-ember-cli/routes/satellite', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      return this.controllerFor('deployment').set('currentStepNumber', 1);
    },

    deactivate: function deactivate() {
      var deployment = this.modelFor('deployment');
      deployment.save().then(function () {
        return console.log('saved deployment successfully');
      });
    }

  });

});
define('fusor-ember-cli/routes/satellite/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/storage', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('rhev_storage_type', 'NFS');
      controller.set('rhev_gluster_ssh_port', 22);
    }

  });

});
define('fusor-ember-cli/routes/subscriptions', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      var self = this;
      return this.store.find('session-portal').then(function (results) {
        if (Ember['default'].isBlank(results)) {
          return self.store.createRecord('session-portal');
        } else {
          return results.get('firstObject');
        }
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberSubscriptions = this.controllerFor('deployment').get('stepNumberSubscriptions');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberSubscriptions);
    },

    actions: {
      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      }
    }
  });

});
define('fusor-ember-cli/routes/subscriptions/credentials', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showErrorMessage', false);

      // check if org has upstream UUID using Katello V2 API
      var orgID = this.modelFor('deployment').get('organization.id');
      var url = '/katello/api/v2/organizations/' + orgID;
      Ember['default'].$.getJSON(url).then(function (results) {
        if (Ember['default'].isPresent(results.owner_details.upstreamConsumer)) {
          controller.set('organizationUpstreamConsumerUUID', results.owner_details.upstreamConsumer.uuid);
          controller.set('organizationUpstreamConsumerName', results.owner_details.upstreamConsumer.name);
          // if no UUID for deployment, assign it from org UUID
          if (Ember['default'].isBlank(controller.get('model.upstream_consumer_uuid'))) {
            controller.set('upstreamConsumerUuid', results.owner_details.upstreamConsumer.uuid);
            controller.set('upstreamConsumerName', results.owner_details.upstreamConsumer.name);
          }
        } else {
          controller.set('organizationUpstreamConsumerUUID', null);
          controller.set('organizationUpstreamConsumerName', null);
        }
      });

      if (model.get('isAuthenticated')) {
        // verify isAuthenticated: true is accurate, since Satellite session may have changed.
        var urlVerify = '/customer_portal/users/' + model.get('identification') + "/owners";
        Ember['default'].$.getJSON(urlVerify).then(function (results) {
          //do nothing
        }, function (results) {
          model.set('isAuthenticated', false);
          model.save();
        });
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    },

    actions: {
      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      },

      loginPortal: function loginPortal() {
        var self = this;
        var controller = this.controllerFor('subscriptions/credentials');
        var identification = controller.get('model.identification');
        var password = controller.get('password');
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');
        controller.set('nextButtonTitle', "Logging in ...");
        controller.set('disableCredentialsNext', true);
        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: '/customer_portal/login/',
            type: "POST",
            data: JSON.stringify({ username: identification, password: password }),
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            },
            success: function success(response) {
              //show always be {} empty successful 200 response
              self.send('saveCredentials');
            },
            error: function error(response) {
              console.log('error on loginPortal');
              controller.set('nextButtonTitle', "Next");
              controller.set('disableCredentialsNext', false);
              return self.send('error');
            }
          });
        });
      },

      logoutPortal: function logoutPortal() {
        var self = this;
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');

        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: '/customer_portal/logout/',
            type: "POST",
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            },
            success: function success(response) {
              //show always be {} empty successful 200 response
              self.modelFor('subscriptions').setProperties({ 'isAuthenticated': false,
                'identification': null,
                'ownerKey': null,
                'consumerUUID': null });
              self.modelFor('subscriptions').save();
            },
            error: function error(response) {
              console.log('error on loginPortal');
              return self.send('error');
            }
          });
        });
      },

      saveCredentials: function saveCredentials() {
        var self = this;
        var controller = this.controllerFor('subscriptions/credentials');
        var identification = controller.get('model.identification');
        var sessionPortal = this.modelFor('subscriptions');
        if (sessionPortal) {
          sessionPortal.set('identification', identification);
        } else {
          sessionPortal = self.store.createRecord('session-portal', { identification: identification });
        }
        sessionPortal.save().then(function (result) {
          console.log('saved session-portal');
          controller.set('showErrorMessage', false);
          return self.send('authenticatePortal');
        }, function (response) {
          console.log('error saving session-portal');
          controller.set('nextButtonTitle', "Next");
          controller.set('disableCredentialsNext', false);
          return self.send('error');
        });
      },

      authenticatePortal: function authenticatePortal() {

        var controller = this.controllerFor('subscriptions/credentials');
        var identification = controller.get('model.identification');
        var token = Ember['default'].$('meta[name="csrf-token"]').attr('content');
        var self = this;
        var url = '/customer_portal/users/' + identification + "/owners";

        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: url,
            type: "GET",
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            },

            success: function success(response) {
              var ownerKey = response[0]['key'];
              console.log('owner key is ' + ownerKey);
              var sessionPortal = self.modelFor('subscriptions');
              sessionPortal.set('ownerKey', ownerKey);
              sessionPortal.set('isAuthenticated', true);
              sessionPortal.save().then(function (result) {
                console.log('saved ownerKey in session-portal');
                controller.set('nextButtonTitle', "Next");
                controller.set('disableCredentialsNext', false);
                return self.transitionTo('subscriptions.management-application');
              }, function (response) {
                controller.set('nextButtonTitle', "Next");
                controller.set('disableCredentialsNext', false);
                console.log('error saving ownerKey session-portal');
              });
            },

            error: function error(response) {
              console.log('error on authenticatePortal');
              controller.set('nextButtonTitle', "Next");
              controller.set('disableCredentialsNext', false);
              controller.setProperties({ 'showErrorMessage': true,
                'errorMsg': 'Your username or password is incorrect. Please try again.'
              });
            }
          });
        });
      },

      redirectToManagementApplication: function redirectToManagementApplication() {
        return this.transitionTo('subscriptions.management-application');
      }

    }

  });

});
define('fusor-ember-cli/routes/subscriptions/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('subscriptions.credentials');
    }
  });

});
define('fusor-ember-cli/routes/subscriptions/management-application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      var self = this;
      var deployment = this.modelFor('deployment');
      var sessionPortal = this.modelFor('subscriptions');
      var ownerKey = sessionPortal.get('ownerKey');
      // Use owner key to get consumers (subscription application manangers)
      // GET /customer_portal/owners/#{OWNER['key']}/consumers?type=satellite
      if (deployment.get('isStarted') && deployment.get('upstream_consumer_uuid') && deployment.get('upstream_consumer_name')) {
        var managementApp = Ember['default'].Object.create({ id: deployment.get('upstream_consumer_uuid'),
          name: deployment.get('upstream_consumer_name') });
        return Ember['default'].A([managementApp]);
      } else {
        return this.store.find('management-application', { owner_key: ownerKey }).then(function (results) {
          sessionPortal.set('isAuthenticated', true); // in case go to this route from URL
          sessionPortal.save();
          return results;
        }, function (results) {
          console.log(results);
          sessionPortal.set('isAuthenticated', false);
          sessionPortal.save().then(function () {
            self.controllerFor('subscriptions.credentials').setProperties({
              'showErrorMessage': true,
              'errorMsg': 'You are not currently logged in. Please log in below.'
            });
            return self.transitionTo('subscriptions.credentials');
          });
        });
      }
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showManagementApplications', true);

      var sessionPortal = this.modelFor('subscriptions');
      var deployment = this.modelFor('deployment');
      var upstream_consumer_uuid = deployment.get('upstream_consumer_uuid');

      if (deployment.get('isStarted')) {
        sessionPortal.set('consumerUUID', upstream_consumer_uuid);
        controller.set('sessionPortal', sessionPortal);
      } else {
        // check if org has upstream UUID using Katello V2 API
        var orgID = this.modelFor('deployment').get('organization.id');
        var url = '/katello/api/v2/organizations/' + orgID;
        Ember['default'].$.getJSON(url).then(function (results) {
          if (Ember['default'].isPresent(results.owner_details.upstreamConsumer)) {
            sessionPortal.set('consumerUUID', results.owner_details.upstreamConsumer.uuid);
            sessionPortal.save();
            controller.set('sessionPortal', sessionPortal);
            deployment.set('upstream_consumer_uuid', results.owner_details.upstreamConsumer.uuid);
            deployment.set('upstream_consumer_name', results.owner_details.upstreamConsumer.name);
          } else {
            // nullify sessionPortal.consumerUUID since it's probably a different deployment
            sessionPortal.set('consumerUUID', null);
          }
        }, function (results) {
          // also nullify sessionPortal.consumerUUID in case there was an error
          sessionPortal.set('consumerUUID', null);
        });
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    },

    actions: {
      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      }
    }

  });

});
define('fusor-ember-cli/routes/subscriptions/management-application/consumer', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model(params) {
      return this.store.find('management-application', params.management_application_uuid);
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var sessionPortal = this.modelFor('subscriptions');
      sessionPortal.set('consumerUUID', model.get('id'));
      sessionPortal.save();
      return this.controllerFor('deployment').set('upstream_consumer_uuid', model.get('id'));
    }

  });

});
define('fusor-ember-cli/routes/subscriptions/management-application/consumer/entitlements', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      return this.store.unloadAll('entitlement');
    },

    model: function model(params) {
      var uuid = this.modelFor('deployment').get('upstream_consumer_uuid');
      console.log('uuid is ' + uuid);
      return this.store.find('entitlement', { uuid: uuid });
    },

    // setupController: function(controller, model) {
    //   controller.set('model', model);
    //   this.controllerFor('subscriptions/management-application').set('showEntitlements', true);
    // }

    activate: function activate() {
      this.controllerFor('subscriptions/management-application').set('showManagementApplications', false);
    },

    deactivate: function deactivate() {
      this.controllerFor('subscriptions/management-application').set('showManagementApplications', true);
    }

  });

});
define('fusor-ember-cli/routes/subscriptions/management-application/consumer/pools', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model(params) {
      var uuid = this.modelFor('deployment').get('upstream_consumer_uuid');
      return this.store.find('pool', { uuid: uuid });
    },

    activate: function activate() {
      this.controllerFor('subscriptions/management-application').set('showManagementApplications', false);
    },

    deactivate: function deactivate() {
      this.controllerFor('subscriptions/management-application').set('showManagementApplications', true);
    }

  });

});
define('fusor-ember-cli/routes/subscriptions/select-subscriptions', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment').get('subscriptions');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var self = this;

      if (!this.controllerFor('deployment').get('isStarted')) {
        controller.set('isLoading', true);

        var consumerUUID = this.modelFor('deployment').get('upstream_consumer_uuid');

        var entitlements = this.store.find('entitlement', { uuid: consumerUUID });
        var pools = this.store.find('pool', { uuid: consumerUUID });

        return Ember['default'].RSVP.Promise.all([entitlements, pools]).then(function (results) {
          var entitlementsResults = results[0];
          var allPoolsResults = results[1];
          self.modelFor('subscriptions').set('isAuthenticated', true); // in case go to this route from URL
          allPoolsResults.forEach(function (pool) {
            pool.set('qtyAttached', 0); //default for loop
            entitlementsResults.forEach(function (entitlement) {
              if (entitlement.get('poolId') === pool.get('id')) {
                pool.incrementProperty('qtyAttached', entitlement.get('quantity'));
              }
            });
          });
          controller.set('subscriptionEntitlements', Ember['default'].A(results[0]));
          controller.set('subscriptionPools', Ember['default'].A(results[1]));
          return controller.set('isLoading', false);
        }, function () {
          self.modelFor('subscriptions').set('isAuthenticated');
          self.modelFor('subscriptions').save().then(function () {
            self.controllerFor('subscriptions.credentials').setProperties({
              'showErrorMessage': true,
              'errorMsg': 'You are not currently logged in. Please log in below.'
            });
            return self.transitionTo('subscriptions.credentials');
          });
        });
      }
    },

    deactivate: function deactivate() {
      // uncommeting causes inFlight issues
      // return this.send('saveSubscriptions', null);
    },

    actions: {

      saveSubscriptions: function saveSubscriptions(redirectPath) {
        var self = this;
        var deployment = this.modelFor('deployment');
        var subscriptionPools = this.controllerFor('subscriptions/select-subscriptions').get('subscriptionPools');
        var hasSubscriptionPools = this.controllerFor('subscriptions/select-subscriptions').get('hasSubscriptionPools');

        if (hasSubscriptionPools) {
          // remove existing subscriptions
          deployment.get('subscriptions').then(function (results) {
            results.forEach(function (sub) {
              sub.deleteRecord();
              sub.save();
            });

            deployment.save().then(function () {

              // add subscriptions to deployment
              subscriptionPools.forEach(function (pool) {
                if (pool.get('isSelectedSubscription')) {
                  var sub = self.store.createRecord('subscription', { 'contract_number': pool.get('contractNumber'),
                    'product_name': pool.get('productName'),
                    'quantity_attached': pool.get('qtyToAttach'),
                    'deployment': deployment
                  });
                  sub.save();
                }
              });

              if (redirectPath) {
                return self.transitionTo(redirectPath);
              }
            });
          });
        } else {
          return self.transitionTo(redirectPath);
        }
      },

      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      }
    }

  });

});
define('fusor-ember-cli/routes/undercloud-deploy', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.modelFor('deployment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showAlertMessage', false);
    }

  });

});
define('fusor-ember-cli/routes/where-install', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);

      var isRhev = this.controllerFor('deployment').get('isRhev');
      var isOpenStack = this.controllerFor('deployment').get('isOpenStack');
      if (isRhev && !isOpenStack) {
        return this.controllerFor('deployment').set('model.cfme_install_loc', 'RHEV');
      } else if (!isRhev && isOpenStack) {
        return this.controllerFor('deployment').set('model.cfme_install_loc', 'OpenStack');
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/serializers/deployment-plan-parameter', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].RESTSerializer.extend({
        primaryKey: 'name'
    });

});
define('fusor-ember-cli/serializers/deployment-plan', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].RESTSerializer.extend(DS['default'].EmbeddedRecordsMixin, {
        primaryKey: 'name',
        attrs: {
            parameters: { embedded: 'always' },
            roles: { embedded: 'always' }
        }
    });

});
define('fusor-ember-cli/serializers/deployment-role', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].RESTSerializer.extend({
        primaryKey: 'uuid'
    });

});
define('fusor-ember-cli/serializers/entitlement', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].RESTSerializer.extend({

    // add root node 'entitlements' that customer protal JSON response doesn't return
    extractArray: function extractArray(store, type, payload) {
      payload = { entitlements: payload };
      return this._super(store, type, payload);
    },

    // remove attribute keys in the json response that aren't in the model management application
    normalizeHash: {
      entitlements: function entitlements(hash) {
        delete hash.consumer;
        delete hash.certificates;
        // move attributes within the 'pool' node to main level
        hash.poolId = hash.pool.id;
        hash.poolType = hash.pool.type;
        hash.poolQuantity = hash.pool.quantity;
        hash.subscriptionId = hash.pool.subscriptionId;
        hash.activeSubscription = hash.pool.activeSubscription;
        hash.contractNumber = hash.pool.contractNumber;
        hash.accountNumber = hash.pool.accountNumber;
        hash.consumed = hash.pool.consumed;
        hash.exported = hash.pool.exported;
        hash.consumed = hash.pool.consumed;
        hash.productName = hash.pool.productName;
        delete hash.pool;
        return hash;
      }
    }

  });

});
define('fusor-ember-cli/serializers/foreman-task', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].RESTSerializer.extend({
    attrs: {
      humanized: { embedded: 'always' }
    }
  });

});
define('fusor-ember-cli/serializers/management-application', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].RESTSerializer.extend({

    primaryKey: 'uuid',

    // add root node 'management_applications' that customer protal JSON response doesn't return
    extractArray: function extractArray(store, type, payload) {
      payload = { management_applications: payload };
      return this._super(store, type, payload);
    },

    // remove attribute keys in the json response that aren't in the model management application
    normalizeHash: {
      management_applications: function management_applications(hash) {
        delete hash.releaseVer;
        delete hash.type;
        delete hash.owner;
        delete hash.installedProducts;
        delete hash.guestIds;
        delete hash.capabilities;
        return hash;
      }
    }

  });

  // These objects are in the JSON response but removed in the serializer
  // and not saved in the store
  //
  // "releaseVer": {
  //     "releaseVer": null
  // },
  // "type": {
  //     "id": "9",
  //     "label": "satellite",
  //     "manifest": true
  // },
  // "owner": {
  //     "id": "8a85f9814a192108014a1adef5826b38",
  //     "key": "7473998",
  //     "displayName": "7473998",
  //     "href": "/owners/7473998"
  // },
  // "installedProducts": [],
  // "guestIds": [],
  // "capabilities": [],

});
define('fusor-ember-cli/serializers/node', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].RESTSerializer.extend({
        primaryKey: 'uuid'
    });

});
define('fusor-ember-cli/serializers/openstack-deployment', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].RESTSerializer.extend(DS['default'].EmbeddedRecordsMixin, {
        primaryKey: 'stack_name'
    });

});
define('fusor-ember-cli/serializers/pool', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].RESTSerializer.extend({

    // add root node 'entitlements' that customer protal JSON response doesn't return
    extractArray: function extractArray(store, type, payload) {
      payload = { pools: payload };
      return this._super(store, type, payload);
    },

    // remove attribute keys in the json response that aren't in the model management application
    normalizeHash: {
      management_applications: function management_applications(hash) {
        delete hash.releaseVer;
        delete hash.type;
        delete hash.owner;
        delete hash.installedProducts;
        delete hash.guestIds;
        delete hash.capabilities;
        return hash;
      }
    }

  });

});
define('fusor-ember-cli/service-tests/ember-devtools', ['exports', 'ember-devtools/service-tests/ember-devtools'], function (exports, ember_devtools) {

	'use strict';



	exports.default = ember_devtools.default;

});
define('fusor-ember-cli/services/ember-devtools', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /* global DS */
  var map = Ember['default'].ArrayPolyfills.map;
  var $ = Ember['default'].$;

  exports['default'] = Ember['default'].Object.extend({
    init: function init() {
      this.global = this.global || window;
      this.console = this.console || window.console;
      this.registry = this._registry();
      if (DS !== undefined) {
        this.store = this.container.lookup('store:main');
        this.typeMaps = this.store.typeMaps;
      }
    },
    consoleLog: function consoleLog() {
      this.console.log.apply(this.console, arguments);
    },
    app: function app(name) {
      name = name || 'main';
      return this.container.lookup('application:' + name);
    },
    route: function route(name) {
      name = name || this.currentRouteName();
      return this.container.lookup('route:' + name);
    },
    controller: function controller(name) {
      name = name || this.currentRouteName();
      return this.container.lookup('controller:' + name);
    },
    model: function model(name) {
      var controller = this.controller(name);
      return controller && controller.get('model');
    },
    service: function service(name) {
      return this.lookup('service:' + name);
    },
    router: function router(name) {
      name = name || 'main';
      return this.container.lookup('router:' + name).get('router');
    },
    routes: function routes() {
      return Ember['default'].keys(this.router().recognizer.names);
    },
    view: function view(idDomElementOrSelector) {
      if (typeof idDomElementOrSelector === 'object') {
        idDomElementOrSelector = idDomElementOrSelector.id;
      }
      return Ember['default'].View.views[idDomElementOrSelector] || this.views(idDomElementOrSelector)[0];
    },
    views: function views(selectorOrName) {
      var views = Ember['default'].View.views;
      var viewClass = this.lookupFactory('component:' + selectorOrName) || this.lookupFactory('view:' + selectorOrName);

      if (viewClass) {
        return Object.keys(views).map(function (id) {
          return views[id];
        }).filter(function (view) {
          return view instanceof viewClass;
        });
      }

      return map.call($(selectorOrName), function (element) {
        return views[element.id];
      });
    },
    component: function component() {
      return this.view.apply(this, arguments);
    },
    components: function components() {
      return this.views.apply(this, arguments);
    },
    currentRouteName: function currentRouteName() {
      return this.controller('application').get('currentRouteName');
    },
    currentPath: function currentPath() {
      return this.controller('application').get('currentPath');
    },
    log: function log(promise, property, getEach) {
      var self = this;
      return promise.then(function (value) {
        self.global.$E = value;
        if (property) {
          value = value[getEach ? 'getEach' : 'get'].call(value, property);
        }
        self.consoleLog(value);
      }, function (err) {
        self.console.error(err);
      });
    },
    lookup: function lookup(name) {
      return this.container.lookup(name);
    },
    lookupFactory: function lookupFactory(name) {
      return this.container.lookupFactory(name);
    },
    containerNameFor: function containerNameFor(object) {
      var cache = this.container.cache || this.container._defaultContainer.cache;
      var keys = Object.keys(cache);
      for (var i = 0; i < keys.length; i++) {
        if (cache[keys[i]] === object) return keys[i];
      }
    },
    inspect: Ember['default'].inspect,
    logResolver: function logResolver(bool) {
      bool = typeof bool === 'undefined' ? true : bool;
      Ember['default'].ENV.LOG_MODULE_RESOLVER = bool;
    },
    logAll: function logAll(bool) {
      bool = typeof bool === 'undefined' ? true : bool;
      var app = this.app();
      app.LOG_ACTIVE_GENERATION = bool;
      app.LOG_VIEW_LOOKUPS = bool;
      app.LOG_TRANSITIONS = bool;
      app.LOG_TRANSITIONS_INTERNAL = bool;
      this.logResolver(bool);
    },
    globalize: function globalize() {
      var self = this;
      var props = ['app', 'container', 'registry', 'store', 'typeMaps', 'route', 'controller', 'model', 'service', 'routes', 'view', 'currentRouteName', 'currentPath', 'log', 'lookup', 'lookupFactory', 'containerNameFor', 'inspect', 'logResolver', 'logAll'];
      // don't stomp on pre-existing global vars
      var skipGlobalize = this.constructor.skipGlobalize;
      if (skipGlobalize === null) {
        skipGlobalize = this.constructor.skipGlobalize = props.filter(function (prop) {
          return !Ember['default'].isNone(self.global[prop]);
        });
      }
      props.map(function (name) {
        if (skipGlobalize.indexOf(name) !== -1) return;
        var prop = self[name];
        if (typeof prop === 'function') {
          prop = function () {
            return self[name].apply(self, arguments);
          };
        }
        self.global[name] = prop;
      });
    },
    _registry: function _registry() {
      var registry;
      if (this.container._registry) {
        registry = this.container._registry.registrations;
      }
      return registry || this.container.registrations || this.container.registry.dict || this.container.registry;
    }
  }).reopenClass({
    skipGlobalize: null
  });

});
define('fusor-ember-cli/services/validations', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var set = Ember['default'].set;

  exports['default'] = Ember['default'].Service.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });

});
define('fusor-ember-cli/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "partial", ["mainmenu"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(element0,1,1);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isEmberCliMode")], {}, child0, null);
        attribute(env, attrMorph0, element0, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isContainer"), "container", "container-fluid"], {})]));
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/assign-nodes', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "deployment-role", [], {"role": get(env, context, "role"), "edit": "editRole"});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "draggable-object", [], {"content": get(env, context, "role")}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","deployment-roles-all-assigned");
            var el2 = dom.createTextNode("All deployment roles have been assigned.");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          var morph1 = dom.createMorphAt(element0,2,2);
          var attrMorph0 = dom.createAttrMorph(element0, 'class');
          attribute(env, attrMorph0, element0, "class", concat(env, ["row col-md-12 deployment-roles deployment-roles-unassigned deployment-roles-assignable ", get(env, context, "droppableClass")]));
          block(env, morph0, context, "each", [get(env, context, "unassignedRoles")], {"keyword": "role"}, child0, null);
          block(env, morph1, context, "if", [get(env, context, "allRolesAssigned")], {}, child1, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "node-profile", [], {"profile": get(env, context, "profile"), "nodes": get(env, context, "nodes"), "plan": get(env, context, "model.plan"), "doAssign": true, "assignRole": "assignRole", "unassignRole": "unassignRole", "editRole": "editRole", "setRoleCount": "setRoleCount", "removeRole": "removeRole"});
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "node-profile", [], {"profile": get(env, context, "profile"), "plan": get(env, context, "model.plan"), "doAssign": true, "assignRole": "assignRole", "unassignRole": "unassignRole", "editRole": "editRole", "setRoleCount": "setRoleCount", "removeRole": "removeRole"});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-7");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          block(env, morph0, context, "if", [get(env, context, "nodes")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        dom.setAttribute(el2,"style","float: left;");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        dom.setAttribute(el4,"style","vertical-align: bottom;display:inline-block;");
        var el5 = dom.createTextNode("Available Deployment Roles");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"class","edit-global-config");
        var el5 = dom.createTextNode(" Edit Global Configuration");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" /col ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment(" /row ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Node Profiles");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-sm-6 col-md-5");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment(" a network topology is planned for this space ");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element, block = hooks.block, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0, 1]);
        var element2 = dom.childAt(element1, [1, 3]);
        var morph0 = dom.createMorphAt(element1,3,3);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [3, 1]),3,3);
        var morph2 = dom.createMorphAt(fragment,7,7,contextualElement);
        var morph3 = dom.createMorphAt(fragment,9,9,contextualElement);
        var morph4 = dom.createMorphAt(fragment,11,11,contextualElement);
        var morph5 = dom.createMorphAt(fragment,13,13,contextualElement);
        element(env, element2, context, "action", ["editGlobalServiceConfig"], {});
        block(env, morph0, context, "draggable-object-target", [], {"action": "unassignRole"}, child0, null);
        block(env, morph1, context, "each", [get(env, context, "profiles")], {"keyword": "profile"}, child1, null);
        inline(env, morph2, context, "cancel-back-next", [], {"backRouteName": "register-nodes", "disableBack": false, "nextRouteName": get(env, context, "nextStepRouteNameAssignNodes"), "disableNext": get(env, context, "disableAssignNodesNext"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")});
        inline(env, morph3, context, "partial", ["edit-deployment-role"], {});
        inline(env, morph4, context, "partial", ["edit-global-service-config"], {});
        inline(env, morph5, context, "loading-spinner", [], {"show": get(env, context, "showLoadingSpinner"), "text": get(env, context, "loadingSpinnerText")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cancel-deployment-modal', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Cancel RHCI Deployment - ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            content(env, morph1, context, "parentController.name");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        What would you like to do with this deployment?\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          Continue Working\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-default");
            var el2 = dom.createTextNode("\n          Exit and Delete\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-default");
            var el2 = dom.createTextNode("\n          Exit and Save\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, element = hooks.element, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morph0 = dom.createMorphAt(fragment,5,5,contextualElement);
            dom.insertBoundary(fragment, null);
            element(env, element0, context, "action", ["cancelAndDeleteDeployment"], {});
            element(env, element1, context, "action", ["saveAndCancelDeployment"], {});
            block(env, morph0, context, "em-modal-toggler", [], {"class": "btn btn-primary"}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
          var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
          var morph3 = dom.createMorphAt(fragment,6,6,contextualElement);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          content(env, morph3, context, "isNew");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal", [], {"configName": "bs", "id": "cancelDeploymentModal", "close-if": get(env, context, "closeModal")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cloudforms', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("A. Installation Location");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberCloudForms");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("B. Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberCloudForms");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          block(env, morph0, context, "link-to", ["where-install"], {"tagName": "li", "disabled": get(env, context, "disableTabCFWhere")}, child0, null);
          block(env, morph1, context, "link-to", ["cloudforms.cfme-configuration"], {"tagName": "li", "disabled": get(env, context, "disableTabCFConfiguration")}, child1, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "wizard-step", [], {"outlet": get(env, context, "outlet")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cloudforms/cfme-configuration', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form form-horizontal");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(fragment,2,2,contextualElement);
        inline(env, morph0, context, "text-f", [], {"label": "CFME Root password", "type": "password", "value": get(env, context, "cfmeRootPassword"), "cssId": "cfme_root_password", "isRequired": true, "disabled": get(env, context, "controllers.deployment.isStarted"), "minChars": 8, "help-inline": "must be 8 or more characters", "placeholder": "must be 8 or more characters"});
        inline(env, morph1, context, "text-f", [], {"label": "CFME Admin password", "type": "password", "value": get(env, context, "cfmeAdminPassword"), "cssId": "cfme_admin_password", "isRequired": true, "disabled": get(env, context, "controllers.deployment.isStarted"), "minChars": 8, "help-inline": "must be 8 or more characters", "placeholder": "must be 8 or more characters"});
        inline(env, morph2, context, "cancel-back-next", [], {"backRouteName": "where-install", "disableBack": false, "nextRouteName": get(env, context, "nextRouteNameAfterCFME"), "disableNext": get(env, context, "controllers.cloudforms.notValidCloudforms"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cloudforms/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/accordion-item', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var attrMorph0 = dom.createAttrMorph(element2, 'class');
        var morph0 = dom.createMorphAt(element1,3,3);
        var morph1 = dom.createMorphAt(element0,3,3);
        element(env, element1, context, "action", ["openItem"], {});
        attribute(env, attrMorph0, element2, "class", concat(env, ["fa ", subexpr(env, context, "if", [get(env, context, "isOpen"), "fa-angle-down", "fa-angle-right"], {})]));
        content(env, morph0, context, "name");
        block(env, morph1, context, "if", [get(env, context, "isOpen")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/base-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","errorForValidation");
          var el2 = dom.createTextNode("*");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"class","pficon fa fa-info-circle rhci-popover-button");
          dom.setAttribute(el1,"data-toggle","popover");
          dom.setAttribute(el1,"data-trigger","focus");
          dom.setAttribute(el1,"data-html","true");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element1, 'data-original-title');
          var attrMorph1 = dom.createAttrMorph(element1, 'data-content');
          attribute(env, attrMorph0, element1, "data-original-title", get(env, context, "label"));
          attribute(env, attrMorph1, element1, "data-content", get(env, context, "helpText"));
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("         ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n         ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          var attrMorph0 = dom.createAttrMorph(element0, 'class');
          attribute(env, attrMorph0, element0, "class", concat(env, [get(env, context, "unitsClassSize")]));
          content(env, morph0, context, "unitsLabel");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","clearfix");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4,"class","class");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","help-block");
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var attrMorph0 = dom.createAttrMorph(element2, 'class');
        var morph0 = dom.createMorphAt(element3,1,1);
        var attrMorph1 = dom.createAttrMorph(element3, 'class');
        var morph1 = dom.createMorphAt(dom.childAt(element3, [3]),1,1);
        var morph2 = dom.createMorphAt(element3,5,5);
        var morph3 = dom.createMorphAt(element4,1,1);
        var attrMorph2 = dom.createAttrMorph(element4, 'class');
        var morph4 = dom.createMorphAt(element2,5,5);
        var morph5 = dom.createMorphAt(dom.childAt(element2, [7]),1,1);
        attribute(env, attrMorph0, element2, "class", concat(env, ["form-group ", subexpr(env, context, "if", [get(env, context, "hasError"), "has-error"], {})]));
        attribute(env, attrMorph1, element3, "class", concat(env, ["control-label ", get(env, context, "labelClassSize"), " ", get(env, context, "class")]));
        block(env, morph0, context, "if", [get(env, context, "isRequired")], {}, child0, null);
        content(env, morph1, context, "label");
        block(env, morph2, context, "if", [get(env, context, "showHelpPopover")], {}, child1, null);
        attribute(env, attrMorph2, element4, "class", concat(env, [get(env, context, "inputClassSize")]));
        content(env, morph3, context, "yield");
        block(env, morph4, context, "if", [get(env, context, "showUnits")], {}, child2, null);
        content(env, morph5, context, "help-inline");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/base-popover', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/button-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "title");
        content(env, morph1, context, "yield");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/cancel-back-next', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Cancel\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-angle-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Back\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          Next ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-angle-right");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "link-to", [get(env, context, "nextRouteName")], {"disabled": get(env, context, "disableNext"), "role": "button", "class": "btn btn-primary"}, child0, null);
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-md-9 rhci-steps-buttons");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,2,2);
        var morph2 = dom.createMorphAt(element0,3,3);
        var morph3 = dom.createMorphAt(fragment,2,2,contextualElement);
        block(env, morph0, context, "em-modal-toggler", [], {"modal-id": "cancelDeploymentModal", "class": "btn btn-default", "disabled": get(env, context, "disableCancel")}, child0, null);
        block(env, morph1, context, "link-to", [get(env, context, "backRouteName")], {"disabled": get(env, context, "disableBack"), "role": "button", "class": "btn btn-default"}, child1, null);
        block(env, morph2, context, "if", [get(env, context, "nextRouteName")], {}, child2, child3);
        inline(env, morph3, context, "partial", ["cancel-deployment-modal"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/check-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "input", [], {"checked": get(env, context, "checked"), "placeholder": get(env, context, "placeholder"), "type": "checkbox", "id": get(env, context, "cssId")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "inputSize"), "unitsSize": get(env, context, "unitsSize"), "unitsLabel": get(env, context, "unitsLabel"), "help-inline": get(env, context, "help-inline"), "errors": get(env, context, "errors"), "isRequired": get(env, context, "isRequired"), "helpText": get(env, context, "helpText")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/debug-info', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    .\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isOpen")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/delete-deployment-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1,"class","btn btn-sm btn-danger");
        var el2 = dom.createTextNode("Delete");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/deployment-role', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Nodes");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Node");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"style","padding-left: 15px;");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element4 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element4,1,1);
            var morph1 = dom.createMorphAt(element4,3,3);
            var morph2 = dom.createMorphAt(element4,5,5);
            content(env, morph0, context, "roleNodeCount");
            content(env, morph1, context, "role.name");
            block(env, morph2, context, "if", [get(env, context, "multipleAssignedNodes")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "hasAssignedNodes")], {}, child0, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                     ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                dom.setAttribute(el1,"selected","");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
                content(env, morph0, context, "option.label");
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                     ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
                content(env, morph0, context, "option.label");
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "option.selected")], {}, child0, child1);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("         ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("select");
            dom.setAttribute(el1,"class","selectpicker");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, element = hooks.element, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element2 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element2,1,1);
            element(env, element2, context, "action", ["updateNodeCount", get(env, context, "this")], {"on": "change"});
            block(env, morph0, context, "each", [get(env, context, "availableOptions")], {"keyword": "option"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","role-option delete");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","fa fa-times");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","role-option edit");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","fa fa-pencil");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1, 1]);
            var element1 = dom.childAt(fragment, [3, 1]);
            element(env, element0, context, "action", ["removeRole"], {});
            element(env, element1, context, "action", ["editRole"], {});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","deployment-role-label");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element3, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
          var morph1 = dom.createMorphAt(element3,3,3);
          var morph2 = dom.createMorphAt(element3,4,4);
          attribute(env, attrMorph0, element3, "class", concat(env, ["role role-", get(env, context, "role.roleType"), " ", get(env, context, "assignedClass")]));
          content(env, morph0, context, "role.name");
          block(env, morph1, context, "if", [get(env, context, "roleAssigned")], {}, child0, null);
          block(env, morph2, context, "unless", [get(env, context, "readOnly")], {}, child1, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "readOnly")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/draggable-object-target', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, element = hooks.element, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          element(env, element0, context, "action", ["acceptForDrop"], {});
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "enableClicking")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/draggable-object', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, element = hooks.element, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          element(env, element0, context, "action", ["selectForDrag"], {});
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "enableClicking")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          element(env, element0, context, "bind-attr", [], {"class": "icon-classes"});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "icon-classes")], {}, child0, null);
        content(env, morph1, context, "label");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form-control-help', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "helpText");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form-group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          element(env, element0, context, "bind-attr", [], {"class": get(env, context, "wrapperClass")});
          inline(env, morph0, context, "partial", ["components/formgroup/form-group"], {});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "partial", ["components/formgroup/form-group"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "wrapperClass")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form-label', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "yield");
        content(env, morph1, context, "text");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form-submit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morph0 = dom.createMorphAt(element2,0,0);
          element(env, element1, context, "bind-attr", [], {"class": get(env, context, "horiClass")});
          element(env, element2, context, "bind-attr", [], {"class": get(env, context, "classes")});
          element(env, element2, context, "bind-attr", [], {"disabled": get(env, context, "disabled")});
          content(env, morph0, context, "text");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,0,0);
          element(env, element0, context, "bind-attr", [], {"class": get(env, context, "classes")});
          element(env, element0, context, "bind-attr", [], {"disabled": get(env, context, "disabled")});
          content(env, morph0, context, "text");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "form.isHorizontal")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "em-form-submit");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "yield");
        block(env, morph1, context, "if", [get(env, context, "submit_button")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-modal-confirm', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            content(env, morph1, context, "title");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "view", [get(env, context, "Ember.Select")], {"valueBinding": "message", "contentBinding": "messages", "optionValuePath": "id", "optionLabelPath": "content.msg"});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("Confirmation with a reason");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            var morph2 = dom.createMorphAt(fragment,7,7,contextualElement);
            dom.insertBoundary(fragment, null);
            content(env, morph0, context, "message");
            content(env, morph1, context, "yield");
            block(env, morph2, context, "if", [get(env, context, "reasonModal")], {}, child0, null);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-thumbs-o-down");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);
              content(env, morph0, context, "cancel-button-title");
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            inline(env, morph0, context, "em-button", [], {"class": get(env, context, "cancel-button-classes"), "on-click": "confirmPressed", "default": get(env, context, "submit-button-title"), "icon-default": get(env, context, "submit-button-default-icons"), "icon-executing": get(env, context, "submit-button-execute-icons"), "executing": get(env, context, "submit-button-submitting-title")});
            block(env, morph1, context, "em-modal-toggler", [], {"class": get(env, context, "submit-button-classes")}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph2 = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "em-modal-title", [], {"classes": get(env, context, "modal-title-classes")}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal", [], {"id": get(env, context, "confirm-id"), "configName": get(env, context, "configName"), "model-id": get(env, context, "model-id"), "open-if": get(env, context, "open-if"), "close-if": get(env, context, "close-if"), "on-hide": get(env, context, "on-hide")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-modal', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","modal-dialog");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","modal-content");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "is-open")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/env-path-list-item', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        var morph0 = dom.createMorphAt(element1,1,1);
        var attrMorph1 = dom.createAttrMorph(element1, 'id');
        attribute(env, attrMorph0, element0, "class", concat(env, [get(env, context, "bgColor")]));
        attribute(env, attrMorph1, element1, "id", concat(env, [get(env, context, "envCssId")]));
        content(env, morph0, context, "env.name");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/error-message', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","pull-right");
          var el5 = dom.createTextNode("\n            X\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
          content(env, morph0, context, "errorMsg");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "errorMsg")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/file-upload-form', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","form-group required");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("input");
        dom.setAttribute(el3,"value","selectedFile");
        dom.setAttribute(el3,"type","file");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","form-group");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","button");
        dom.setAttribute(el3,"class","btn btn-sm btn-default");
        var el4 = dom.createTextNode("Cancel");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","button");
        dom.setAttribute(el3,"class","btn btn-sm btn-primary");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var attrMorph0 = dom.createAttrMorph(element0, 'id');
        var attrMorph1 = dom.createAttrMorph(element1, 'id');
        var attrMorph2 = dom.createAttrMorph(element1, 'accept');
        var morph0 = dom.createMorphAt(element4,0,0);
        attribute(env, attrMorph0, element0, "id", concat(env, [get(env, context, "formId")]));
        attribute(env, attrMorph1, element1, "id", concat(env, [get(env, context, "inputId")]));
        attribute(env, attrMorph2, element1, "accept", get(env, context, "acceptValue"));
        element(env, element1, context, "action", ["fileChosen"], {"on": "change"});
        element(env, element3, context, "action", ["doCancel"], {});
        element(env, element4, context, "action", ["doUpload"], {});
        content(env, morph0, context, "uploadButtonTitle");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/formgroup/control-within-label', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "partial", ["components/formgroup/form-group-control"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-form-label", [], {"text": get(env, context, "label"), "horiClass": "", "inlineClass": "", "viewName": get(env, context, "labelViewName")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/formgroup/form-group-control', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          element(env, element0, context, "bind-attr", [], {"class": get(env, context, "controlWrapper")});
          inline(env, morph0, context, "view", [get(env, context, "controlView")], {"viewName": get(env, context, "controlViewName"), "property": get(env, context, "propertyName"), "id": get(env, context, "cid")});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "view", [get(env, context, "controlView")], {"viewName": get(env, context, "controlViewName"), "property": get(env, context, "propertyName"), "id": get(env, context, "cid")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "controlWrapper")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/formgroup/form-group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element2 = dom.childAt(fragment, [1]);
                var morph0 = dom.createMorphAt(element2,1,1);
                element(env, element2, context, "bind-attr", [], {"class": get(env, context, "labelWrapperClass")});
                inline(env, morph0, context, "partial", ["components/formgroup/control-within-label"], {});
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                inline(env, morph0, context, "partial", ["components/formgroup/control-within-label"], {});
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "labelWrapperClass")], {}, child0, child1);
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element1 = dom.childAt(fragment, [1]);
                var morph0 = dom.createMorphAt(element1,1,1);
                var morph1 = dom.createMorphAt(element1,3,3);
                element(env, element1, context, "bind-attr", [], {"class": get(env, context, "labelWrapperClass")});
                inline(env, morph0, context, "em-form-label", [], {"text": get(env, context, "label"), "viewName": get(env, context, "labelViewName")});
                inline(env, morph1, context, "partial", ["components/formgroup/form-group-control"], {});
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
                inline(env, morph0, context, "em-form-label", [], {"text": get(env, context, "label"), "viewName": get(env, context, "labelViewName")});
                inline(env, morph1, context, "partial", ["components/formgroup/form-group-control"], {});
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "labelWrapperClass")], {}, child0, child1);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "yieldInLabel")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "partial", ["components/formgroup/form-group-control"], {});
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","form-control-feedback");
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1, 0]);
            element(env, element0, context, "bind-attr", [], {"class": get(env, context, "v_icon")});
            return fragment;
          }
        };
      }());
      var child3 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "em-form-control-help", [], {"text": get(env, context, "help"), "viewName": get(env, context, "helpViewName")});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "canShowErrors")], {}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
          var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "label")], {}, child0, child1);
          block(env, morph1, context, "if", [get(env, context, "v_icons")], {}, child2, null);
          block(env, morph2, context, "unless", [get(env, context, "form.isInline")], {}, child3, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "unless", [get(env, context, "template")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/hypervisor-name', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "namePlusDomain");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "link-to", ["hypervisor.discovered-host"], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/labeled-radio-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "radio-button", [], {"radioClass": get(env, context, "radioClass"), "radioId": get(env, context, "radioId"), "changed": "innerRadioChanged", "disabled": get(env, context, "disabled"), "groupValue": get(env, context, "groupValue"), "name": get(env, context, "name"), "required": get(env, context, "required"), "value": get(env, context, "value")});
        content(env, morph1, context, "yield");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/loading-spinner', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","modal fade in");
          dom.setAttribute(el1,"style","display:block");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","modal-dialog loading-spinner");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","loading-spinner-content modal-content");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","spinner spinner-xs spinner-inline");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]),0,0);
          content(env, morph0, context, "text");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "show")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/markdown-to-html', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "html");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/node-profile', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "deployment-role", [], {"role": get(env, context, "role"), "profile": get(env, context, "profile"), "plan": get(env, context, "plan"), "readOnly": true});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(":\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          dom.insertBoundary(fragment, null);
          content(env, morph0, context, "profile.name");
          block(env, morph1, context, "each", [get(env, context, "assignedRoles")], {"keyword": "role"}, child0, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                inline(env, morph0, context, "deployment-role", [], {"role": get(env, context, "role"), "profile": get(env, context, "profile"), "nodeCount": get(env, context, "matchingNodeCount"), "plan": get(env, context, "plan"), "edit": "editRole", "setRoleCount": "setRoleCount", "remove": "removeRole", "readOnly": false});
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "draggable-object", [], {"content": get(env, context, "role")}, child0, null);
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var element0 = dom.childAt(fragment, [1]);
                  var morph0 = dom.createMorphAt(element0,0,0);
                  var attrMorph0 = dom.createAttrMorph(element0, 'class');
                  attribute(env, attrMorph0, element0, "class", concat(env, ["roles-menu-item role-", get(env, context, "role.roleType")]));
                  element(env, element0, context, "action", ["assignRole", get(env, context, "role")], {});
                  content(env, morph0, context, "role.name");
                  return fragment;
                }
              };
            }());
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createTextNode("\n                                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("a");
                dom.setAttribute(el2,"id","role-target-dropdown-1");
                dom.setAttribute(el2,"data-toggle","dropdown");
                dom.setAttribute(el2,"aria-haspopup","true");
                dom.setAttribute(el2,"aria-expanded","false");
                var el3 = dom.createTextNode("\n                                      ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("i");
                dom.setAttribute(el3,"class","fa fa-plus");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" Assign Role\n                                  ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("ul");
                dom.setAttribute(el2,"class","dropdown-menu");
                dom.setAttribute(el2,"role","menu");
                dom.setAttribute(el2,"aria-labelledby","role-target-dropdown-1");
                dom.setAttribute(el2,"style","left: -2px;");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("                                  ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element1 = dom.childAt(fragment, [1]);
                var element2 = dom.childAt(element1, [1]);
                var attrMorph0 = dom.createAttrMorph(element1, 'class');
                var morph0 = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
                attribute(env, attrMorph0, element1, "class", concat(env, ["role-target ", get(env, context, "assignMenuOpenClass"), "  dropdown"]));
                element(env, element2, context, "action", ["showAssignMenu", get(env, context, "profile")], {"bubbles": false});
                block(env, morph0, context, "each", [get(env, context, "unassignedRoles")], {"keyword": "role"}, child0, null);
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "draggable-object-target", [], {"action": "assignDroppedRole"}, child0, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","col-sm-7 col-md-8");
            var el2 = dom.createTextNode("\n                      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            dom.setAttribute(el2,"class","h5");
            var el3 = dom.createTextNode("Assigned Nodes");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2,"class","deployment-roles deployment-roles-assigned");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element3 = dom.childAt(fragment, [1, 3]);
            var morph0 = dom.createMorphAt(element3,1,1);
            var morph1 = dom.createMorphAt(element3,2,2);
            block(env, morph0, context, "each", [get(env, context, "assignedRoles")], {"keyword": "role"}, child0, null);
            block(env, morph1, context, "unless", [get(env, context, "allRolesAssigned")], {}, child1, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","col-sm-7 col-md-8");
            var el2 = dom.createTextNode("\n                      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("em");
            var el3 = dom.createTextNode("Assigning nodes to roles will occur in step ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("C.");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
            content(env, morph0, context, "stepNumberOpenstack");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","panel-heading");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","row");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","col-sm-7 col-md-8");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h3");
          dom.setAttribute(el5,"class","node-profile-label h5");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","col-sm-5 col-md-4");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h4");
          dom.setAttribute(el5,"class","node-profile-free-nodes h5");
          var el6 = dom.createTextNode("Node Count: ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","panel-body");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","row");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","col-sm-5 col-md-4");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h4");
          dom.setAttribute(el5,"class","h5");
          var el6 = dom.createTextNode("Each node has:");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("table");
          dom.setAttribute(el5,"class","table node-specs");
          var el6 = dom.createTextNode("\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("tbody");
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("tr");
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("th");
          var el9 = dom.createTextNode("CPU");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("td");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                        ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("tr");
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("th");
          var el9 = dom.createTextNode("RAM");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("td");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          var el9 = dom.createTextNode(" MB");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                        ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("tr");
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("th");
          var el9 = dom.createTextNode("Disk");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("td");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          var el9 = dom.createTextNode(" GB");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                        ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1, 1]);
          var element6 = dom.childAt(element4, [3, 1]);
          var element7 = dom.childAt(element6, [1, 3, 1]);
          var attrMorph0 = dom.createAttrMorph(element4, 'class');
          var morph0 = dom.createMorphAt(dom.childAt(element5, [1, 1]),0,0);
          var morph1 = dom.createMorphAt(dom.childAt(element5, [3, 1]),1,1);
          var morph2 = dom.createMorphAt(dom.childAt(element7, [1, 3]),0,0);
          var morph3 = dom.createMorphAt(dom.childAt(element7, [3, 3]),0,0);
          var morph4 = dom.createMorphAt(dom.childAt(element7, [5, 3]),0,0);
          var morph5 = dom.createMorphAt(element6,3,3);
          attribute(env, attrMorph0, element4, "class", concat(env, ["panel panel-default node-profile ", get(env, context, "assignClass")]));
          content(env, morph0, context, "profile.name");
          content(env, morph1, context, "matchingNodeCount");
          content(env, morph2, context, "profile.vcpus");
          content(env, morph3, context, "profile.ram");
          content(env, morph4, context, "profile.disk");
          block(env, morph5, context, "if", [get(env, context, "doAssign")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "readOnly")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/object-bin', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                content(env, morph0, context, "yield");
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "with", [get(env, context, "obj")], {}, child0, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "draggable-object", [], {"content": get(env, context, "obj"), "action": "handleObjectDragged"}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","object-bin-title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          var morph1 = dom.createMorphAt(fragment,5,5,contextualElement);
          dom.insertBoundary(fragment, null);
          content(env, morph0, context, "name");
          block(env, morph1, context, "each", [get(env, context, "model")], {"keyword": "obj"}, child0, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "draggable-object-target", [], {"action": "handleObjectDropped"}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/progress-bar', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-check-circle-o green-circle");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" \n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-exclamation-triangle errorForValidation");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","spinner spinner-xs spinner-inline");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","spinner spinner-xs spinner-inline");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n    ");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "isStarted")], {}, child0, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "isSatelliteProgressBar")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isError")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","no-bold");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","/katello/sync_management#!=");
          dom.setAttribute(el2,"target","_blank");
          var el3 = dom.createTextNode(" View Content Sync Status");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            content(env, morph0, context, "model.humanized_errors");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","errorForValidation");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          block(env, morph0, context, "link-to", ["review.progress.details"], {}, child0, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-lg-2 col-md-2 col-sm-3 rhci-review-product-name");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-lg-8 col-md-7 col-sm-6");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","progress-bar-label");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","pull-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("%\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","progress");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"role","progressbar");
        dom.setAttribute(el3,"aria-valuemin","0");
        dom.setAttribute(el3,"aria-valuemax","100");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block, attribute = hooks.attribute, concat = hooks.concat;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        var morph1 = dom.createMorphAt(element1,1,1);
        var morph2 = dom.createMorphAt(element1,3,3);
        var morph3 = dom.createMorphAt(element1,5,5);
        var morph4 = dom.createMorphAt(element1,7,7);
        var morph5 = dom.createMorphAt(dom.childAt(element1, [9]),1,1);
        var attrMorph0 = dom.createAttrMorph(element2, 'class');
        var attrMorph1 = dom.createAttrMorph(element2, 'aria-valuenow');
        var attrMorph2 = dom.createAttrMorph(element2, 'style');
        content(env, morph0, context, "name");
        block(env, morph1, context, "if", [get(env, context, "isFinished")], {}, child0, child1);
        content(env, morph2, context, "progressBarMsg");
        block(env, morph3, context, "if", [get(env, context, "isSatelliteProgressBar")], {}, child2, null);
        block(env, morph4, context, "if", [get(env, context, "hasHumanizedErrors")], {}, child3, null);
        content(env, morph5, context, "percentProgress");
        attribute(env, attrMorph0, element2, "class", get(env, context, "progressBarClass"));
        attribute(env, attrMorph1, element2, "aria-valuenow", get(env, context, "percentProgressInt"));
        attribute(env, attrMorph2, element2, "style", concat(env, ["width: ", get(env, context, "styleWidth"), ";"]));
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/radio-button-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);
        var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "radio-button", [], {"name": get(env, context, "name"), "value": get(env, context, "value"), "checked": get(env, context, "checked"), "id": get(env, context, "cssId")});
        content(env, morph1, context, "value");
        content(env, morph2, context, "label");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/radio-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, inline = hooks.inline, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          var morph1 = dom.createMorphAt(element0,3,3);
          var attrMorph0 = dom.createAttrMorph(element0, 'class');
          var attrMorph1 = dom.createAttrMorph(element0, 'for');
          attribute(env, attrMorph0, element0, "class", concat(env, ["ember-radio-button ", subexpr(env, context, "if", [get(env, context, "checked"), "checked"], {}), " ", get(env, context, "joinedClassNames")]));
          attribute(env, attrMorph1, element0, "for", get(env, context, "radioId"));
          inline(env, morph0, context, "radio-button-input", [], {"class": get(env, context, "radioClass"), "id": get(env, context, "radioId"), "disabled": get(env, context, "disabled"), "name": get(env, context, "name"), "required": get(env, context, "required"), "groupValue": get(env, context, "groupValue"), "value": get(env, context, "value"), "changed": "changed"});
          content(env, morph1, context, "yield");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "radio-button-input", [], {"class": get(env, context, "radioClass"), "id": get(env, context, "radioId"), "disabled": get(env, context, "disabled"), "name": get(env, context, "name"), "required": get(env, context, "required"), "groupValue": get(env, context, "groupValue"), "value": get(env, context, "value"), "changed": "changed"});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "hasBlock")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/range-text-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","error errorForValidation");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","glyphicon glyphicon-warning-sign");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);
              content(env, morph0, context, "errors.name");
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "errors.name")], {}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"style","float: left;padding-left:5px;padding-right:5px;");
          var el3 = dom.createTextNode(" - ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, inline = hooks.inline, block = hooks.block, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [5]);
          var morph0 = dom.createMorphAt(element1,1,1);
          var attrMorph0 = dom.createAttrMorph(element1, 'class');
          var morph1 = dom.createMorphAt(element2,1,1);
          var attrMorph1 = dom.createAttrMorph(element2, 'class');
          var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph3 = dom.createMorphAt(fragment,5,5,contextualElement);
          attribute(env, attrMorph0, element1, "class", concat(env, [get(env, context, "inputSize")]));
          inline(env, morph0, context, "input", [], {"class": "form-control", "value": get(env, context, "value1"), "placeholder": get(env, context, "placeholder1"), "type": get(env, context, "typeInput"), "focus-out": "showErrors", "id": get(env, context, "cssId1")});
          attribute(env, attrMorph1, element2, "class", concat(env, [get(env, context, "inputSize")]));
          inline(env, morph1, context, "input", [], {"class": "form-control", "value": get(env, context, "value2"), "placeholder": get(env, context, "placeholder2"), "type": get(env, context, "typeInput"), "id": get(env, context, "cssId2")});
          block(env, morph2, context, "if", [get(env, context, "showError")], {}, child0, null);
          content(env, morph3, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "rangeSize"), "unitsSize": get(env, context, "unitsSize"), "unitsLabel": get(env, context, "unitsLabel"), "help-inline": get(env, context, "help-inline"), "errors": get(env, context, "errors"), "isRequired": get(env, context, "isRequired"), "helpText": get(env, context, "helpText")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/review-link', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"target","_blank");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element1,0,0);
          var attrMorph0 = dom.createAttrMorph(element1, 'href');
          attribute(env, attrMorph0, element1, "href", get(env, context, "value"));
          content(env, morph0, context, "value");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "value");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                content(env, morph0, context, "yield");
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                content(env, morph0, context, "valueFormatted");
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "useYieldInstead")], {}, child0, child1);
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element0 = dom.childAt(fragment, [1]);
              var attrMorph0 = dom.createAttrMorph(element0, 'class');
              attribute(env, attrMorph0, element0, "class", concat(env, ["fa ", get(env, context, "eyeIcon")]));
              element(env, element0, context, "action", ["showPassword"], {});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "link-to", [get(env, context, "routeName")], {}, child0, null);
            block(env, morph1, context, "if", [get(env, context, "isPassword")], {}, child1, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isNotALink")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "validationMessage");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","errorForValidation");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          block(env, morph0, context, "link-to", [get(env, context, "routeName")], {}, child0, null);
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "defaultMessage");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","defaultValue");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          block(env, morph0, context, "link-to", [get(env, context, "routeName")], {}, child0, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-2 text-right bold");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-10");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
        var morph1 = dom.createMorphAt(element3,1,1);
        var morph2 = dom.createMorphAt(element3,3,3);
        var morph3 = dom.createMorphAt(element3,5,5);
        content(env, morph0, context, "label");
        block(env, morph1, context, "if", [get(env, context, "isExternalURL")], {}, child0, child1);
        block(env, morph2, context, "if", [get(env, context, "showValidationMessage")], {}, child2, null);
        block(env, morph3, context, "if", [get(env, context, "showDefaultMessage")], {}, child3, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/rhci-item', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("           ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-1x fa-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n           Deploy this product\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("img");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n       ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","rhci-install-footer");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("       ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, subexpr = hooks.subexpr, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var attrMorph0 = dom.createAttrMorph(element0, 'id');
        var attrMorph1 = dom.createAttrMorph(element1, 'src');
        var attrMorph2 = dom.createAttrMorph(element1, 'class');
        var attrMorph3 = dom.createAttrMorph(element2, 'class');
        var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
        attribute(env, attrMorph0, element0, "id", concat(env, [get(env, context, "cssId")]));
        attribute(env, attrMorph1, element1, "src", concat(env, [get(env, context, "srcImage")]));
        attribute(env, attrMorph2, element1, "class", concat(env, ["img-responsive ", subexpr(env, context, "if", [get(env, context, "isDisabled"), "disabledImage"], {})]));
        attribute(env, attrMorph3, element2, "class", concat(env, ["rhci-footer ", subexpr(env, context, "if", [get(env, context, "isChecked"), "rhci-footer-selected", "rhci-footer-unselected"], {})]));
        block(env, morph0, context, "if", [get(env, context, "isChecked")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/rhci-start', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","subscriptions_needed");
          var el2 = dom.createTextNode("\n\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-info-circle");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createTextNode("Before you begin:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Subscriptions required to complete this deployment.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Check your account in the ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3,"href","https://idp.redhat.com/idp/");
          dom.setAttribute(el3,"target","_blank");
          var el4 = dom.createTextNode("Red Hat Customer Portal");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" to verify you have subscriptions available to cover the selected products.\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("br");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Start up host machines.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Ensure that the bare-metal computers and the virtual machines that you plan to use are turned on and discoverable.\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("br");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Configure your network.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Ensure that the network and subnets are set up and available.\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Select");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("New Deployment: Select Cloud Infrastructure Products");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    Choose the products to deploy. This wizard guides you through creating a new ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" Cloud Infrastructure deployment.\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        dom.setAttribute(el1,"style","height:370px;");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"style","float:right;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(fragment, [8, 1, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]),5,5);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
        var morph4 = dom.createMorphAt(fragment,4,4,contextualElement);
        var morph5 = dom.createMorphAt(element1,1,1);
        var morph6 = dom.createMorphAt(element1,3,3);
        content(env, morph0, context, "nameRedHat");
        inline(env, morph1, context, "rhci-item", [], {"srcImage": get(env, context, "imgRhev"), "isChecked": get(env, context, "isRhev"), "name": get(env, context, "nameRhev"), "cssId": "is_rhev"});
        inline(env, morph2, context, "rhci-item", [], {"srcImage": get(env, context, "imgOpenStack"), "isChecked": get(env, context, "isOpenStack"), "name": get(env, context, "nameOpenStack"), "cssId": "is_openstack"});
        inline(env, morph3, context, "rhci-item", [], {"srcImage": get(env, context, "imgCloudForms"), "isChecked": get(env, context, "isCloudForms"), "name": get(env, context, "nameCloudForms"), "cssId": "is_cloudforms", "isDisabled": get(env, context, "isDisabledCfme")});
        block(env, morph4, context, "unless", [get(env, context, "isUpstream")], {}, child0, null);
        block(env, morph5, context, "link-to", ["deployments"], {"class": "btn btn-default"}, child1, null);
        block(env, morph6, context, "link-to", [get(env, context, "satelliteTabRouteName")], {"class": "btn btn-primary", "disabled": get(env, context, "disableNextOnStart")}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/rhci-wizard', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "wizard-item", [], {"num": get(env, context, "stepNumberRhev"), "name": get(env, context, "nameRhev"), "routeName": "rhev", "isDisabled": get(env, context, "isDisabledRhev"), "currentStepNumber": get(env, context, "currentStepNumber"), "fullname": get(env, context, "fullnameRhev")});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "wizard-item", [], {"num": get(env, context, "stepNumberOpenstack"), "name": get(env, context, "nameOpenStack"), "routeName": "openstack", "isDisabled": get(env, context, "isDisabledOpenstack"), "currentStepNumber": get(env, context, "currentStepNumber"), "fullname": get(env, context, "fullnameOpenStack")});
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "wizard-item", [], {"num": get(env, context, "stepNumberCloudForms"), "name": get(env, context, "nameCloudForms"), "routeName": "cloudforms", "isDisabled": get(env, context, "isDisabledCloudForms"), "currentStepNumber": get(env, context, "currentStepNumber"), "fullname": get(env, context, "fullnameCloudForms")});
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "wizard-item", [], {"num": get(env, context, "stepNumberSubscriptions"), "name": "Subscriptions", "routeName": "subscriptions", "isDisabled": get(env, context, "isDisabledSubscriptions"), "currentStepNumber": get(env, context, "currentStepNumber")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("New ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" Deployment:  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","rhci-steps");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [4]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph3 = dom.createMorphAt(element1,1,1);
        var morph4 = dom.createMorphAt(element1,3,3);
        var morph5 = dom.createMorphAt(element1,5,5);
        var morph6 = dom.createMorphAt(element1,7,7);
        var morph7 = dom.createMorphAt(element1,9,9);
        var morph8 = dom.createMorphAt(element1,11,11);
        content(env, morph0, context, "nameRHCI");
        content(env, morph1, context, "name");
        inline(env, morph2, context, "error-message", [], {"errorMsg": get(env, context, "errorMsg")});
        inline(env, morph3, context, "wizard-item", [], {"num": 1, "name": get(env, context, "nameSatellite"), "routeName": get(env, context, "routeNameSatellite"), "isDisabled": false, "currentStepNumber": get(env, context, "currentStepNumber")});
        block(env, morph4, context, "if", [get(env, context, "isRhev")], {}, child0, null);
        block(env, morph5, context, "if", [get(env, context, "isOpenStack")], {}, child1, null);
        block(env, morph6, context, "if", [get(env, context, "isCloudForms")], {}, child2, null);
        block(env, morph7, context, "if", [get(env, context, "isSubscriptions")], {}, child3, null);
        inline(env, morph8, context, "wizard-item", [], {"num": get(env, context, "stepNumberReview"), "name": "Review", "routeName": "review", "isDisabled": get(env, context, "isDisabledReview"), "currentStepNumber": get(env, context, "currentStepNumber")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/select-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          inline(env, morph0, context, "view", ["select"], {"content": get(env, context, "content"), "value": get(env, context, "value"), "optionLabelPath": get(env, context, "optionLabelPath"), "optionValuePath": get(env, context, "optionValuePath"), "selection": get(env, context, "selection"), "prompt": get(env, context, "prompt"), "class": "form-control", "id": get(env, context, "cssId"), "disabled": get(env, context, "disabled")});
          content(env, morph1, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "inputSize"), "unitsSize": get(env, context, "unitsSize"), "unitsLabel": get(env, context, "unitsLabel"), "isRequired": get(env, context, "isRequired"), "helpText": get(env, context, "helpText")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/select-simple-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          inline(env, morph0, context, "view", ["select"], {"content": get(env, context, "content"), "value": get(env, context, "value"), "selection": get(env, context, "selection"), "prompt": get(env, context, "prompt"), "class": "form-control", "id": get(env, context, "cssId"), "disabled": get(env, context, "disabled")});
          content(env, morph1, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "inputSize"), "unitsSize": get(env, context, "unitsSize"), "unitsLabel": get(env, context, "unitsLabel"), "isRequired": get(env, context, "isRequired"), "helpText": get(env, context, "helpText")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/step-number', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "value");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/text-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element0, 'class');
            attribute(env, attrMorph0, element0, "class", concat(env, ["fa ", get(env, context, "eyeIcon"), " eye-icon"]));
            element(env, element0, context, "action", ["showPassword"], {});
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","error errorForValidation");
              var el2 = dom.createTextNode("\n            cannot be blank\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","error errorForValidation");
              var el2 = dom.createTextNode("\n            must be ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" or more characters\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              content(env, morph0, context, "minChars");
              return fragment;
            }
          };
        }());
        var child2 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","error errorForValidation");
              var el2 = dom.createTextNode("\n            must be unique\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child3 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","error errorForValidation");
              var el2 = dom.createTextNode("\n            must contain only 'A-Z', 'a-z', '0-9', '_' or '-' characters\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child4 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","error errorForValidation");
              var el2 = dom.createTextNode("\n            invalid hostname\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
            var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
            var morph3 = dom.createMorphAt(fragment,6,6,contextualElement);
            var morph4 = dom.createMorphAt(fragment,8,8,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "validIsRequiredAndBlank")], {}, child0, null);
            block(env, morph1, context, "if", [get(env, context, "passwordTooShort")], {}, child1, null);
            block(env, morph2, context, "if", [get(env, context, "validIsUnique")], {}, child2, null);
            block(env, morph3, context, "if", [get(env, context, "invalidIsAlphaNumeric")], {}, child3, null);
            block(env, morph4, context, "if", [get(env, context, "invalidIsHostname")], {}, child4, null);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","error errorForValidation");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            content(env, morph0, context, "errors.name");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" don't need to wait for focus-out ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          var morph3 = dom.createMorphAt(fragment,9,9,contextualElement);
          var morph4 = dom.createMorphAt(fragment,11,11,contextualElement);
          inline(env, morph0, context, "input", [], {"class": "form-control", "value": get(env, context, "value"), "placeholder": get(env, context, "placeholder"), "type": get(env, context, "typeInput"), "focus-out": "showValidationErrors", "id": get(env, context, "cssId"), "disabled": get(env, context, "disabled"), "autocomplete": "off", "maxlength": "250"});
          block(env, morph1, context, "if", [get(env, context, "isPassword")], {}, child0, null);
          block(env, morph2, context, "if", [get(env, context, "showValidationError")], {}, child1, null);
          block(env, morph3, context, "if", [get(env, context, "showValidationError")], {}, child2, null);
          content(env, morph4, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "inputSize"), "unitsSize": get(env, context, "unitsSize"), "unitsLabel": get(env, context, "unitsLabel"), "help-inline": get(env, context, "help-inline"), "errors": get(env, context, "errors"), "isRequired": get(env, context, "isRequired"), "hasError": get(env, context, "hasError"), "helpText": get(env, context, "helpText")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/textarea-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "textarea", [], {"class": "form-control", "value": get(env, context, "value"), "placeholder": get(env, context, "placeholder"), "rows": get(env, context, "numRows"), "id": get(env, context, "cssId"), "disabled": get(env, context, "disabled")});
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "textarea", [], {"class": "form-control", "value": get(env, context, "value"), "placeholder": get(env, context, "placeholder"), "id": get(env, context, "cssId"), "disabled": get(env, context, "disabled")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          block(env, morph0, context, "if", [get(env, context, "rowsPassed")], {}, child0, child1);
          content(env, morph1, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "inputSize"), "unitsSize": get(env, context, "unitsSize"), "unitsLabel": get(env, context, "unitsLabel"), "isRequired": get(env, context, "isRequired"), "help-inline": get(env, context, "help-inline"), "helpText": get(env, context, "helpText")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-deployment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "deployment.name");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" Edit ");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "delete-deployment-button", [], {"deployment": get(env, context, "deployment"), "action": "openDeploymentModal"});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("   ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [8]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        var morph4 = dom.createMorphAt(element0,1,1);
        var morph5 = dom.createMorphAt(element0,3,3);
        block(env, morph0, context, "link-to", [get(env, context, "routeNameForEdit"), get(env, context, "deployment")], {}, child0, null);
        content(env, morph1, context, "deployment.lifecycle_environment.name");
        content(env, morph2, context, "deployment.organization.name");
        content(env, morph3, context, "deployment.state");
        block(env, morph4, context, "link-to", ["deployment", get(env, context, "deployment")], {"class": "btn btn-sm btn-default"}, child1, null);
        block(env, morph5, context, "if", [get(env, context, "canDelete")], {}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-engine', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "host.name");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "input", [], {"type": "text", "value": get(env, context, "host.name"), "class": "form-control", "focus-out": "saveHostname", "id": get(env, context, "cssHostHostId")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "disabled")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Not Selected\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" CPU");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(element0,1,1);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        var morph4 = dom.createMorphAt(dom.childAt(fragment, [8]),1,1);
        var morph5 = dom.createMorphAt(dom.childAt(fragment, [10]),1,1);
        var morph6 = dom.createMorphAt(dom.childAt(fragment, [12]),1,1);
        var morph7 = dom.createMorphAt(dom.childAt(fragment, [14]),1,1);
        var morph8 = dom.createMorphAt(dom.childAt(fragment, [16]),1,1);
        inline(env, morph0, context, "radio-button", [], {"value": get(env, context, "host"), "groupValue": get(env, context, "selectedRhevEngineHost"), "changed": "engineHostChanged", "id": get(env, context, "cssIdHostId"), "disabled": get(env, context, "disabled")});
        attribute(env, attrMorph0, element0, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isSelectedAsEngine"), "white-font", "not-selected"], {})]));
        block(env, morph1, context, "if", [get(env, context, "isSelectedAsEngine")], {}, child0, child1);
        content(env, morph2, context, "host.mac");
        inline(env, morph3, context, "host-type", [get(env, context, "host")], {});
        content(env, morph4, context, "host.cpus");
        content(env, morph5, context, "host.memory_human_size");
        content(env, morph6, context, "host.disk_count");
        content(env, morph7, context, "host.disks_human_size");
        content(env, morph8, context, "host.subnet_to_s");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-hypervisor', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "host.name");
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "input", [], {"type": "text", "value": get(env, context, "host.name"), "class": "form-control", "focus-out": "saveHostname", "id": get(env, context, "cssHostHostId")});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "disabled")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "host.name");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isFreeform")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Not Selected\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" CPU");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(element0,1,1);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        var morph4 = dom.createMorphAt(dom.childAt(fragment, [8]),1,1);
        var morph5 = dom.createMorphAt(dom.childAt(fragment, [10]),1,1);
        var morph6 = dom.createMorphAt(dom.childAt(fragment, [12]),1,1);
        var morph7 = dom.createMorphAt(dom.childAt(fragment, [14]),1,1);
        var morph8 = dom.createMorphAt(dom.childAt(fragment, [16]),1,1);
        inline(env, morph0, context, "input", [], {"type": "checkbox", "name": "isSelectedAsHypervisor", "checked": get(env, context, "isSelectedAsHypervisor"), "id": get(env, context, "cssIdHostId"), "disabled": get(env, context, "disabled")});
        attribute(env, attrMorph0, element0, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isSelectedAsHypervisor"), "white-font", "not-selected"], {})]));
        block(env, morph1, context, "if", [get(env, context, "isSelectedAsHypervisor")], {}, child0, child1);
        content(env, morph2, context, "host.mac");
        inline(env, morph3, context, "host-type", [get(env, context, "host")], {});
        content(env, morph4, context, "host.cpus");
        content(env, morph5, context, "host.memory_human_size");
        content(env, morph6, context, "host.disk_count");
        content(env, morph7, context, "host.disks_human_size");
        content(env, morph8, context, "host.subnet_to_s");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-management-app', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        inline(env, morph0, context, "radio-button", [], {"value": get(env, context, "managementApp.id"), "groupValue": get(env, context, "consumerUUID"), "changed": "changeManagementApp", "id": get(env, context, "org.id"), "disabled": get(env, context, "disabled")});
        content(env, morph1, context, "managementApp.name");
        content(env, morph2, context, "managementApp.entitlementCount");
        content(env, morph3, context, "managementApp.id");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-organization', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        inline(env, morph0, context, "radio-button", [], {"value": get(env, context, "org"), "groupValue": get(env, context, "selectedOrganization"), "changed": "organizationChanged", "id": get(env, context, "org.id"), "disabled": get(env, context, "disabled")});
        content(env, morph1, context, "org.name");
        content(env, morph2, context, "org.description");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-subscription-saved', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center white-font");
        var el2 = dom.createTextNode("\n     ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        inline(env, morph0, context, "input", [], {"type": "checkbox", "checked": true, "disabled": true});
        content(env, morph1, context, "subscription.product_name");
        content(env, morph2, context, "subscription.contract_number");
        content(env, morph3, context, "subscription.quantity_attached");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-subscription', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "input", [], {"type": "input", "name": "qtyToAttach", "value": get(env, context, "subscription.qtyToAttach"), "size": 5, "maxlength": 5, "classBinding": ":center isQtyInValid:invalid-input", "disabled": get(env, context, "disableQty"), "focus-out": "setValidQty"});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Not Selected\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [16]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        var morph4 = dom.createMorphAt(dom.childAt(fragment, [8]),1,1);
        var morph5 = dom.createMorphAt(dom.childAt(fragment, [10]),1,1);
        var morph6 = dom.createMorphAt(dom.childAt(fragment, [12]),1,1);
        var morph7 = dom.createMorphAt(dom.childAt(fragment, [14]),1,1);
        var morph8 = dom.createMorphAt(element0,1,1);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        inline(env, morph0, context, "input", [], {"type": "checkbox", "name": "isSelectedSubscription", "checked": get(env, context, "subscription.isSelectedSubscription"), "id": get(env, context, "subscription.id")});
        content(env, morph1, context, "subscription.productName");
        content(env, morph2, context, "subscription.contractNumber");
        content(env, morph3, context, "systemType");
        inline(env, morph4, context, "moment", [get(env, context, "subscription.startDate"), "ll"], {});
        inline(env, morph5, context, "moment", [get(env, context, "subscription.endDate"), "ll"], {});
        content(env, morph6, context, "subscription.qtyAttached");
        content(env, morph7, context, "subscription.qtyAvailableOfTotal");
        attribute(env, attrMorph0, element0, "class", concat(env, ["text-center ", subexpr(env, context, "if", [get(env, context, "subscription.isSelectedSubscription"), "black-font", "not-selected"], {})]));
        block(env, morph8, context, "if", [get(env, context, "subscription.isSelectedSubscription")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-task', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"target","_blank");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element1,0,0);
            var attrMorph0 = dom.createAttrMorph(element1, 'href');
            attribute(env, attrMorph0, element1, "href", get(env, context, "task.taskUrl"));
            content(env, morph0, context, "task.result");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "task.result");
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"target","_blank");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element0,0,0);
            var attrMorph0 = dom.createAttrMorph(element0, 'href');
            attribute(env, attrMorph0, element0, "href", get(env, context, "task.taskUrl"));
            content(env, morph0, context, "percentProgress");
            return fragment;
          }
        };
      }());
      var child3 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "percentProgress");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"target","_blank");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1,"class","center");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1,"class","center");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, content = hooks.content, concat = hooks.concat, block = hooks.block, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1, 1]);
          var element3 = dom.childAt(fragment, [5]);
          var element4 = dom.childAt(fragment, [7]);
          var morph0 = dom.createMorphAt(element2,0,0);
          var attrMorph0 = dom.createAttrMorph(element2, 'href');
          var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
          var morph2 = dom.createMorphAt(element3,1,1);
          var attrMorph1 = dom.createAttrMorph(element3, 'class');
          var morph3 = dom.createMorphAt(element4,1,1);
          var attrMorph2 = dom.createAttrMorph(element4, 'class');
          var morph4 = dom.createMorphAt(dom.childAt(fragment, [9]),1,1);
          attribute(env, attrMorph0, element2, "href", get(env, context, "task.taskUrl"));
          content(env, morph0, context, "actionNameAndRepository");
          content(env, morph1, context, "task.state");
          attribute(env, attrMorph1, element3, "class", concat(env, ["center ", get(env, context, "textBold"), " ", get(env, context, "textColor")]));
          block(env, morph2, context, "if", [get(env, context, "isError")], {}, child0, child1);
          attribute(env, attrMorph2, element4, "class", concat(env, ["center ", get(env, context, "textBold"), " ", get(env, context, "textColor")]));
          block(env, morph3, context, "if", [get(env, context, "isError")], {}, child2, child3);
          inline(env, morph4, context, "moment", [get(env, context, "task.started_at"), "lll"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "task")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/wizard-item', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(". ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          content(env, morph0, context, "num");
          content(env, morph1, context, "name");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(". ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            content(env, morph0, context, "num");
            content(env, morph1, context, "name");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "link-to", [get(env, context, "routeName")], {}, child0, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isDisabled")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/wizard-step', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-sm-8 col-md-9 col-lg-10 col-sm-push-4 col-md-push-3 col-lg-push-2 sidebar-pf-right");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-sm-4 col-md-3 col-lg-2 col-sm-pull-8 col-md-pull-9 col-lg-pull-10 sidebar-pf sidebar-pf-left");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills nav-stacked");
        var el3 = dom.createTextNode("\n       ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var attrMorph0 = dom.createAttrMorph(element0, 'style');
        var attrMorph1 = dom.createAttrMorph(element1, 'style');
        var morph1 = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
        attribute(env, attrMorph0, element0, "style", concat(env, [get(env, context, "minHeightStyle")]));
        content(env, morph0, context, "outlet");
        attribute(env, attrMorph1, element1, "style", concat(env, [get(env, context, "minHeightStyle")]));
        content(env, morph1, context, "yield");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/configure-environment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-success rhci-alert");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-check-circle-o green-circle");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n         \n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" added successfully.\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]),3,3);
          content(env, morph0, context, "selectedEnvironment.name");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","alert alert-info rhci-alert");
            var el2 = dom.createTextNode("\n          No lifecycle environments are in organization ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),0,0);
            content(env, morph0, context, "selectedOrganization.name");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","path-selector");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("ul");
              dom.setAttribute(el2,"class","path-list");
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("li");
              dom.setAttribute(el3,"class","path-list-item");
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("label");
              dom.setAttribute(el4,"class","path-list-item-label");
              var el5 = dom.createTextNode("\n                 \n              ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
              inline(env, morph0, context, "env-path-list-item", [], {"env": get(env, context, "libraryEnv"), "selectedEnvironment": get(env, context, "selectedEnvironment"), "action": "selectEnvironment", "disabled": get(env, context, "isStarted")});
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","path-selector");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("ul");
                dom.setAttribute(el2,"class","path-list");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("li");
                dom.setAttribute(el3,"class","path-list-item");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("label");
                dom.setAttribute(el4,"class","path-list-item-label");
                var el5 = dom.createTextNode("\n                 \n              ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element2 = dom.childAt(fragment, [1, 1]);
                var morph0 = dom.createMorphAt(element2,1,1);
                var morph1 = dom.createMorphAt(element2,3,3);
                inline(env, morph0, context, "env-path-list-item", [], {"env": get(env, context, "libraryEnv"), "selectedEnvironment": get(env, context, "selectedEnvironment"), "action": "selectEnvironment", "disabled": get(env, context, "isStarted")});
                inline(env, morph1, context, "env-path-list-item", [], {"env": get(env, context, "env"), "selectedEnvironment": get(env, context, "selectedEnvironment"), "action": "selectEnvironment", "disabled": get(env, context, "isStarted")});
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "each", [get(env, context, "priorLibraryEnvironments")], {"keyword": "env"}, child0, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "hasOnlyLibraryEnvironment")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        New Environment Path\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"style","margin-top:15px;");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [0, 1]);
          var morph0 = dom.createMorphAt(element3,1,1);
          var morph1 = dom.createMorphAt(dom.childAt(element3, [3]),1,1);
          block(env, morph0, context, "if", [get(env, context, "hasNoEnvironments")], {}, child0, child1);
          block(env, morph1, context, "em-modal-toggler", [], {"modal-id": "newLifecycleEnvironmentModal", "class": "btn btn-default", "disabled": get(env, context, "isStarted")}, child2, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Loading ... ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-angle-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Next ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-angle-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, element = hooks.element, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var morph0 = dom.createMorphAt(element1,1,1);
            var attrMorph0 = dom.createAttrMorph(element1, 'disabled');
            attribute(env, attrMorph0, element1, "disabled", get(env, context, "disableNextOnLifecycleEnvironment"));
            element(env, element1, context, "action", ["saveDeployment", get(env, context, "step2RouteName")], {});
            block(env, morph0, context, "if", [get(env, context, "deployment.isSaving")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("\n          Next ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","fa fa-angle-right");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element0, 'disabled');
            attribute(env, attrMorph0, element0, "disabled", get(env, context, "disableNextOnLifecycleEnvironment"));
            element(env, element0, context, "action", ["saveDeployment", get(env, context, "step2RouteName")], {});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "deployment.isNew")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-6");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select a lifecycle environment for this RHCI deployment. The application lifecycle is divided into lifecycle environments, which mimic each stage of the lifecycle. These lifecycle environments are linked in an environment path. You can promote content along the environment path to the next stage when required. For example, if development completes on a particular version of an application, you can promote this version to the testing environment and start development on the next version.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","default_org_view");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("\n    Use Default Organization View\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element4 = dom.childAt(fragment, [6]);
        var element5 = dom.childAt(element4, [3]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(element4,1,1);
        var attrMorph0 = dom.createAttrMorph(element5, 'class');
        var morph2 = dom.createMorphAt(fragment,8,8,contextualElement);
        var morph3 = dom.createMorphAt(fragment,14,14,contextualElement);
        var morph4 = dom.createMorphAt(fragment,16,16,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "showAlertMessage")], {}, child0, null);
        inline(env, morph1, context, "input", [], {"type": "checkbox", "name": "useDefaultOrgViewForEnv", "checked": get(env, context, "useDefaultOrgViewForEnv"), "disabled": get(env, context, "isStarted")});
        attribute(env, attrMorph0, element5, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "isStarted"), "disabled"], {})]));
        block(env, morph2, context, "unless", [get(env, context, "useDefaultOrgViewForEnv")], {}, child1, null);
        inline(env, morph3, context, "partial", ["new-environment"], {});
        block(env, morph4, context, "cancel-back-next", [], {"backRouteName": get(env, context, "organizationTabRouteName"), "disableBack": false, "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "isStarted")}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/configure-environment.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Environments ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/configure-organization', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-success rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-check-circle-o green-circle");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" added successfully.\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
          content(env, morph0, context, "selectedOrganization.name");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        New Organization\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "tr-organization", [], {"org": get(env, context, "org"), "selectedOrganization": get(env, context, "selectedOrganization"), "action": "selectOrganization", "disabled": get(env, context, "isStarted")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-5");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Choose an organization for this deployment. Organizations divide hosts into logical groups based on ownership, purpose, content, security level, or other divisions.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","pull-right");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3,"class","table table-bordered small fusor-table");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5,"class","org-radio-btn");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Description");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2, 3, 1]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [6, 1, 1, 3]),1,1);
        var morph3 = dom.createMorphAt(fragment,10,10,contextualElement);
        var morph4 = dom.createMorphAt(fragment,12,12,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "showAlertMessage")], {}, child0, null);
        block(env, morph1, context, "em-modal-toggler", [], {"modal-id": "newOrganizationModal", "class": "btn btn-primary", "disabled": true}, child1, null);
        block(env, morph2, context, "each", [get(env, context, "organizations")], {"keyword": "org"}, child2, null);
        inline(env, morph3, context, "partial", ["new-organization"], {});
        inline(env, morph4, context, "cancel-back-next", [], {"backRouteName": get(env, context, "satelliteTabRouteName"), "disableBack": false, "nextRouteName": get(env, context, "lifecycleEnvironmentTabRouteName"), "disableNext": get(env, context, "disableNextOnConfigureOrganization"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "isStarted")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/configure-organization.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Organizations ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/consumer', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/consumers', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/debug-deployment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("ID: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("  (isNew: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(")\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nDesc: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nOrg: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("   (");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(") ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nEnv: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("     (");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(") ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasName: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableTabConfigureOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableTabLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableAll: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnDeploymentName: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnConfigureOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledRhev: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledOpenstack: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledCloudForms: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledSubscriptions: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledReview: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_rhev: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_openstack: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_cfme: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
        var morph2 = dom.createMorphAt(fragment,7,7,contextualElement);
        var morph3 = dom.createMorphAt(fragment,11,11,contextualElement);
        var morph4 = dom.createMorphAt(fragment,13,13,contextualElement);
        var morph5 = dom.createMorphAt(fragment,15,15,contextualElement);
        var morph6 = dom.createMorphAt(fragment,19,19,contextualElement);
        var morph7 = dom.createMorphAt(fragment,21,21,contextualElement);
        var morph8 = dom.createMorphAt(fragment,23,23,contextualElement);
        var morph9 = dom.createMorphAt(fragment,27,27,contextualElement);
        var morph10 = dom.createMorphAt(fragment,31,31,contextualElement);
        var morph11 = dom.createMorphAt(fragment,35,35,contextualElement);
        var morph12 = dom.createMorphAt(fragment,39,39,contextualElement);
        var morph13 = dom.createMorphAt(fragment,43,43,contextualElement);
        var morph14 = dom.createMorphAt(fragment,47,47,contextualElement);
        var morph15 = dom.createMorphAt(fragment,51,51,contextualElement);
        var morph16 = dom.createMorphAt(fragment,55,55,contextualElement);
        var morph17 = dom.createMorphAt(fragment,59,59,contextualElement);
        var morph18 = dom.createMorphAt(fragment,65,65,contextualElement);
        var morph19 = dom.createMorphAt(fragment,69,69,contextualElement);
        var morph20 = dom.createMorphAt(fragment,73,73,contextualElement);
        var morph21 = dom.createMorphAt(fragment,77,77,contextualElement);
        var morph22 = dom.createMorphAt(fragment,81,81,contextualElement);
        var morph23 = dom.createMorphAt(fragment,85,85,contextualElement);
        var morph24 = dom.createMorphAt(fragment,89,89,contextualElement);
        var morph25 = dom.createMorphAt(fragment,93,93,contextualElement);
        content(env, morph0, context, "id");
        content(env, morph1, context, "isNew");
        content(env, morph2, context, "description");
        content(env, morph3, context, "organization.name");
        content(env, morph4, context, "organization.id");
        content(env, morph5, context, "organization");
        content(env, morph6, context, "lifecycle_environment.name");
        content(env, morph7, context, "lifecycle_environment.id");
        content(env, morph8, context, "lifecycle_environment");
        content(env, morph9, context, "hasName");
        content(env, morph10, context, "hasOrganization");
        content(env, morph11, context, "hasLifecycleEnvironment");
        content(env, morph12, context, "disableTabConfigureOrganization");
        content(env, morph13, context, "disableTabLifecycleEnvironment");
        content(env, morph14, context, "disableAll");
        content(env, morph15, context, "disableNextOnDeploymentName");
        content(env, morph16, context, "disableNextOnConfigureOrganization");
        content(env, morph17, context, "disableNextOnLifecycleEnvironment");
        content(env, morph18, context, "isDisabledRhev");
        content(env, morph19, context, "isDisabledOpenstack");
        content(env, morph20, context, "isDisabledCloudForms");
        content(env, morph21, context, "isDisabledSubscriptions");
        content(env, morph22, context, "isDisabledReview");
        content(env, morph23, context, "deploy_rhev");
        content(env, morph24, context, "deploy_openstack");
        content(env, morph25, context, "deploy_cfme");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/delete-deployment-modal', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Delete RHCI Deployment - ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            content(env, morph1, context, "deploymentInModal.name");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Are you sure that you want to delete this deployment - ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("?\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "deploymentInModal.name");
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          No\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-danger");
            var el2 = dom.createTextNode("Yes, Delete Deployment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block, get = hooks.get, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [2]);
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "btn btn-default"}, child0, null);
            element(env, element0, context, "action", ["deleteDeployment", get(env, context, "deploymentInModal")], {});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
          var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal", [], {"configName": "bs", "id": "deleteDeploymentModal", "open-if": get(env, context, "isOpenModal"), "close-if": get(env, context, "isCloseModal")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["deployment"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["satellite"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/configure-environment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["configure-environment"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/configure-environment.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Environments ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/configure-organization', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["configure-organization"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/configure-organization.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Organizations ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["satellite/index"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading ....\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/start', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["deployment/start"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
          inline(env, morph0, context, "rhci-wizard", [], {"name": get(env, context, "model.name"), "nameRHCI": get(env, context, "nameRHCI"), "nameSatellite": get(env, context, "nameSatellite"), "routeNameSatellite": get(env, context, "routeNameSatellite"), "nameRhev": get(env, context, "nameRhev"), "nameOpenStack": get(env, context, "nameOpenStack"), "nameCloudForms": get(env, context, "nameCloudForms"), "fullnameRhev": get(env, context, "fullnameRhev"), "fullnameOpenStack": get(env, context, "fullnameOpenStack"), "fullnameCloudForms": get(env, context, "fullnameCloudForms"), "stepNumberRhev": get(env, context, "stepNumberRhev"), "stepNumberOpenstack": get(env, context, "stepNumberOpenstack"), "stepNumberCloudForms": get(env, context, "stepNumberCloudForms"), "stepNumberSubscriptions": get(env, context, "stepNumberSubscriptions"), "stepNumberReview": get(env, context, "stepNumberReview"), "isDisabledRhev": get(env, context, "isDisabledRhev"), "isDisabledOpenstack": get(env, context, "isDisabledOpenstack"), "isDisabledCloudForms": get(env, context, "isDisabledCloudForms"), "isDisabledSubscriptions": get(env, context, "isDisabledSubscriptions"), "isDisabledReview": get(env, context, "isDisabledReview"), "isRhev": get(env, context, "isRhev"), "isOpenStack": get(env, context, "isOpenStack"), "isCloudForms": get(env, context, "isCloudForms"), "isSubscriptions": get(env, context, "isSubscriptions"), "currentStepNumber": get(env, context, "currentStepNumber"), "errorMsg": get(env, context, "errorMsg")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row parent-sidebar-pf");
        var el2 = dom.createTextNode("\n ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "unless", [get(env, context, "isHideWizard")], {}, child0, null);
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment/start', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "rhci-start", [], {"isRhev": get(env, context, "isRhev"), "isOpenStack": get(env, context, "isOpenStack"), "isCloudForms": get(env, context, "isCloudForms"), "nameRedHat": get(env, context, "nameRedHat"), "nameRhev": get(env, context, "nameRhev"), "nameOpenStack": get(env, context, "nameOpenStack"), "nameCloudForms": get(env, context, "nameCloudForms"), "imgRhev": get(env, context, "imgRhev"), "imgOpenStack": get(env, context, "imgOpenStack"), "imgCloudForms": get(env, context, "imgCloudForms"), "isUpstream": get(env, context, "isUpstream"), "satelliteTabRouteName": get(env, context, "satelliteTabRouteName"), "disableNextOnStart": get(env, context, "disableNextOnStart")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployments', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("New Deployment");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "tr-deployment", [], {"deployment": get(env, context, "deployment")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Deployments");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"style","float:right;");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"class","form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","clearfix");
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        dom.setAttribute(el3,"style","margin-left: -18px;");
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-md-5");
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","btn btn-default");
        dom.setAttribute(el4,"style","margin-left:-20px");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-search");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Search");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n   ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1,"class","table table-bordered table-striped small");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Name ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Environment ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Organization ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Status ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nDisplaying ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("strong");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" of ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" entries\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [14]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2, 1]),0,0);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [6, 1, 1, 1]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [10, 3]),1,1);
        var morph3 = dom.createMorphAt(element0,0,0);
        var morph4 = dom.createMorphAt(element0,2,2);
        var morph5 = dom.createMorphAt(fragment,16,16,contextualElement);
        var morph6 = dom.createMorphAt(fragment,18,18,contextualElement);
        block(env, morph0, context, "link-to", ["deployment-new.start"], {"class": "btn btn-success"}, child0, null);
        inline(env, morph1, context, "input", [], {"type": "text", "class": "form-control", "placeholder": "Filter ...", "value": get(env, context, "searchDeploymentString")});
        block(env, morph2, context, "each", [get(env, context, "filteredDeployments")], {"keyword": "deployment"}, child1, null);
        content(env, morph3, context, "filteredDeployments.length");
        content(env, morph4, context, "model.length");
        content(env, morph5, context, "outlet");
        inline(env, morph6, context, "partial", ["delete-deployment-modal"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/edit-deployment-role', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, element = hooks.element;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element13 = dom.childAt(fragment, [1]);
              element(env, element13, context, "action", ["cancelEditRole"], {});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Edit Deployment Role - ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            content(env, morph1, context, "edittedRole.name");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                  inline(env, morph0, context, "check-f", [], {"label": get(env, context, "roleParameter.displayId"), "checked": get(env, context, "roleParameter.value"), "labelSize": "col-md-6", "inputSize": "col-md-5", "isRequired": false, "helpText": get(env, context, "roleParameter.description")});
                  return fragment;
                }
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                return {
                  isHTMLBars: true,
                  revision: "Ember@1.11.1",
                  blockParams: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  build: function build(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  render: function render(context, env, contextualElement) {
                    var dom = env.dom;
                    var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                    dom.detectNamespace(contextualElement);
                    var fragment;
                    if (env.useFragmentCache && dom.canClone) {
                      if (this.cachedFragment === null) {
                        fragment = this.build(dom);
                        if (this.hasRendered) {
                          this.cachedFragment = fragment;
                        } else {
                          this.hasRendered = true;
                        }
                      }
                      if (this.cachedFragment) {
                        fragment = dom.cloneNode(this.cachedFragment, true);
                      }
                    } else {
                      fragment = this.build(dom);
                    }
                    var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                    inline(env, morph0, context, "text-f", [], {"label": get(env, context, "roleParameter.displayId"), "value": get(env, context, "roleParameter.value"), "type": "password", "labelSize": "col-md-6", "inputSize": "col-md-5", "isRequired": false, "helpText": get(env, context, "roleParameter.description")});
                    return fragment;
                  }
                };
              }());
              var child1 = (function() {
                return {
                  isHTMLBars: true,
                  revision: "Ember@1.11.1",
                  blockParams: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  build: function build(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  render: function render(context, env, contextualElement) {
                    var dom = env.dom;
                    var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                    dom.detectNamespace(contextualElement);
                    var fragment;
                    if (env.useFragmentCache && dom.canClone) {
                      if (this.cachedFragment === null) {
                        fragment = this.build(dom);
                        if (this.hasRendered) {
                          this.cachedFragment = fragment;
                        } else {
                          this.hasRendered = true;
                        }
                      }
                      if (this.cachedFragment) {
                        fragment = dom.cloneNode(this.cachedFragment, true);
                      }
                    } else {
                      fragment = this.build(dom);
                    }
                    var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                    inline(env, morph0, context, "text-f", [], {"label": get(env, context, "roleParameter.displayId"), "value": get(env, context, "roleParameter.value"), "type": get(env, context, "roleParameter.inputType"), "labelSize": "col-md-6", "inputSize": "col-md-5", "isRequired": false, "helpText": get(env, context, "roleParameter.description")});
                    return fragment;
                  }
                };
              }());
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, get = hooks.get, block = hooks.block;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, null);
                  dom.insertBoundary(fragment, 0);
                  block(env, morph0, context, "if", [get(env, context, "rolerParameter.isPassword")], {}, child0, child1);
                  return fragment;
                }
              };
            }());
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, null);
                dom.insertBoundary(fragment, 0);
                block(env, morph0, context, "if", [get(env, context, "roleParameter.isBoolean")], {}, child0, child1);
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1,"class","nav nav-tabs nav-tabs-pf");
              dom.setAttribute(el1,"role","tablist");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              dom.setAttribute(el2,"role","presentation");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3,"aria-controls","overall-settings");
              dom.setAttribute(el3,"role","tab");
              dom.setAttribute(el3,"data-toggle","tab");
              var el4 = dom.createTextNode("Overall Settings");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              dom.setAttribute(el2,"role","presentation");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3,"aria-controls","service-configuration");
              dom.setAttribute(el3,"role","tab");
              dom.setAttribute(el3,"data-toggle","tab");
              var el4 = dom.createTextNode("Service Configuration");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","tab-content");
              dom.setAttribute(el1,"style","margin-top: 30px;");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"role","tabpanel");
              dom.setAttribute(el2,"id","overall-settings");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","form-horizontal");
              var el4 = dom.createTextNode("\n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("fieldset");
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5,"class","form-group");
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("label");
              dom.setAttribute(el6,"class","control-label col-sm-4 ");
              var el7 = dom.createTextNode("Name");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("div");
              dom.setAttribute(el6,"class","col-sm-8");
              var el7 = dom.createTextNode("\n                                    ");
              dom.appendChild(el6, el7);
              var el7 = dom.createElement("input");
              dom.setAttribute(el7,"class","form-control");
              dom.setAttribute(el7,"type","text");
              dom.setAttribute(el7,"readOnly","true");
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                ");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                            ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5,"class","form-group");
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("label");
              dom.setAttribute(el6,"class","control-label col-sm-4 ");
              var el7 = dom.createTextNode("Description");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("div");
              dom.setAttribute(el6,"class","col-sm-8");
              var el7 = dom.createTextNode("\n                                    ");
              dom.appendChild(el6, el7);
              var el7 = dom.createElement("textarea");
              dom.setAttribute(el7,"class","form-control");
              dom.setAttribute(el7,"type","text");
              dom.setAttribute(el7,"readOnly","true");
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                ");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                            ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                        ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"role","tabpanel");
              dom.setAttribute(el2,"id","service-configuration");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","row");
              var el4 = dom.createTextNode("\n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4,"class","col-md-12");
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5,"class","form-horizontal");
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("fieldset");
              var el7 = dom.createTextNode("\n                                    ");
              dom.appendChild(el6, el7);
              var el7 = dom.createElement("div");
              dom.setAttribute(el7,"class","required");
              var el8 = dom.createTextNode("\n");
              dom.appendChild(el7, el8);
              var el8 = dom.createComment("");
              dom.appendChild(el7, el8);
              var el8 = dom.createTextNode("                                    ");
              dom.appendChild(el7, el8);
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                ");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                            ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                        ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, element = hooks.element, concat = hooks.concat, inline = hooks.inline, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(element2, [1]);
              var element4 = dom.childAt(element3, [1]);
              var element5 = dom.childAt(element2, [3]);
              var element6 = dom.childAt(element5, [1]);
              var element7 = dom.childAt(fragment, [3]);
              var element8 = dom.childAt(element7, [1]);
              var element9 = dom.childAt(element8, [1, 1]);
              var element10 = dom.childAt(element9, [1, 3, 1]);
              var element11 = dom.childAt(element9, [3, 3, 1]);
              var element12 = dom.childAt(element7, [3]);
              var attrMorph0 = dom.createAttrMorph(element3, 'class');
              var attrMorph1 = dom.createAttrMorph(element5, 'class');
              var attrMorph2 = dom.createAttrMorph(element8, 'class');
              var attrMorph3 = dom.createAttrMorph(element10, 'value');
              var attrMorph4 = dom.createAttrMorph(element11, 'value');
              var morph0 = dom.createMorphAt(element9,5,5);
              var morph1 = dom.createMorphAt(element9,7,7);
              var morph2 = dom.createMorphAt(element9,9,9);
              var attrMorph5 = dom.createAttrMorph(element12, 'class');
              var morph3 = dom.createMorphAt(dom.childAt(element12, [1, 1, 1, 1, 1]),1,1);
              attribute(env, attrMorph0, element3, "class", get(env, context, "settingsTabActiveClass"));
              element(env, element4, context, "action", ["doShowSettings"], {});
              attribute(env, attrMorph1, element5, "class", get(env, context, "configTabActiveClass"));
              element(env, element6, context, "action", ["doShowConfig"], {});
              attribute(env, attrMorph2, element8, "class", concat(env, ["tab-pane deployment-role-settings-content ", get(env, context, "showRoleSettings")]));
              attribute(env, attrMorph3, element10, "value", get(env, context, "edittedRole.name"));
              attribute(env, attrMorph4, element11, "value", get(env, context, "edittedRole.description"));
              inline(env, morph0, context, "select-f", [], {"label": "Provisioning Image", "labelSize": "col-sm-4", "inputSize": "col-sm-8", "content": get(env, context, "images"), "value": get(env, context, "edittedRoleImage"), "isRequired": false, "optionLabelPath": "content.name", "optionValuePath": "content.name"});
              inline(env, morph1, context, "select-f", [], {"label": "Node Profile", "labelSize": "col-sm-4", "inputSize": "col-sm-8", "content": get(env, context, "profiles"), "value": get(env, context, "edittedRoleProfile"), "isRequired": false, "optionLabelPath": "content.name", "optionValuePath": "content.name"});
              inline(env, morph2, context, "text-f", [], {"label": "Number of Nodes", "type": "number", "labelSize": "col-sm-4", "inputSize": "col-sm-8", "value": get(env, context, "edittedRoleNodeCount"), "isRequired": false});
              attribute(env, attrMorph5, element12, "class", concat(env, ["tab-pane deployment-role-settings-content ", get(env, context, "showRoleConfig")]));
              block(env, morph3, context, "each", [get(env, context, "edittedRoleParameters")], {"keyword": "roleParameter"}, child0, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "async")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","cancel");
            dom.setAttribute(el1,"class","btn btn-default");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Save");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var attrMorph0 = dom.createAttrMorph(element0, 'disabled');
            var attrMorph1 = dom.createAttrMorph(element1, 'disabled');
            attribute(env, attrMorph0, element0, "disabled", get(env, context, "async"));
            element(env, element0, context, "action", ["cancelEditRole"], {});
            attribute(env, attrMorph1, element1, "disabled", get(env, context, "async"));
            element(env, element1, context, "action", ["saveRole"], {});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          dom.insertBoundary(fragment, null);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal", [], {"configName": "bs", "id": "editDeploymentRoleModal", "closeIfClickedOutside": get(env, context, "handleOutsideClick"), "open-if": get(env, context, "editRoleModalOpened"), "close-if": get(env, context, "editRoleModalClosed"), "in-async": get(env, context, "async")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/edit-global-service-config', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, element = hooks.element;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element2 = dom.childAt(fragment, [1]);
              element(env, element2, context, "action", ["cancelGlobalServiceConfig"], {});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Edit Global Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                  inline(env, morph0, context, "check-f", [], {"label": get(env, context, "planParameter.displayId"), "checked": get(env, context, "planParameter.value"), "labelSize": "col-md-6", "inputSize": "col-md-5", "isRequired": false, "helpText": get(env, context, "planParameter.description")});
                  return fragment;
                }
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                return {
                  isHTMLBars: true,
                  revision: "Ember@1.11.1",
                  blockParams: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  build: function build(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  render: function render(context, env, contextualElement) {
                    var dom = env.dom;
                    var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                    dom.detectNamespace(contextualElement);
                    var fragment;
                    if (env.useFragmentCache && dom.canClone) {
                      if (this.cachedFragment === null) {
                        fragment = this.build(dom);
                        if (this.hasRendered) {
                          this.cachedFragment = fragment;
                        } else {
                          this.hasRendered = true;
                        }
                      }
                      if (this.cachedFragment) {
                        fragment = dom.cloneNode(this.cachedFragment, true);
                      }
                    } else {
                      fragment = this.build(dom);
                    }
                    var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                    inline(env, morph0, context, "text-f", [], {"label": get(env, context, "planParameter.displayId"), "value": get(env, context, "planParameter.value"), "type": "password", "labelSize": "col-md-6", "inputSize": "col-md-5", "isRequired": false, "helpText": get(env, context, "planParameter.description")});
                    return fragment;
                  }
                };
              }());
              var child1 = (function() {
                return {
                  isHTMLBars: true,
                  revision: "Ember@1.11.1",
                  blockParams: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  build: function build(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  render: function render(context, env, contextualElement) {
                    var dom = env.dom;
                    var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                    dom.detectNamespace(contextualElement);
                    var fragment;
                    if (env.useFragmentCache && dom.canClone) {
                      if (this.cachedFragment === null) {
                        fragment = this.build(dom);
                        if (this.hasRendered) {
                          this.cachedFragment = fragment;
                        } else {
                          this.hasRendered = true;
                        }
                      }
                      if (this.cachedFragment) {
                        fragment = dom.cloneNode(this.cachedFragment, true);
                      }
                    } else {
                      fragment = this.build(dom);
                    }
                    var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                    inline(env, morph0, context, "text-f", [], {"label": get(env, context, "planParameter.displayId"), "value": get(env, context, "planParameter.value"), "type": get(env, context, "planParameter.inputType"), "labelSize": "col-md-6", "inputSize": "col-md-5", "isRequired": false, "helpText": get(env, context, "planParameter.description")});
                    return fragment;
                  }
                };
              }());
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, get = hooks.get, block = hooks.block;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, null);
                  dom.insertBoundary(fragment, 0);
                  block(env, morph0, context, "if", [get(env, context, "rolerParameter.isPassword")], {}, child0, child1);
                  return fragment;
                }
              };
            }());
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, null);
                dom.insertBoundary(fragment, 0);
                block(env, morph0, context, "if", [get(env, context, "planParameter.isBoolean")], {}, child0, child1);
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"role","tabpanel");
              dom.setAttribute(el1,"class","tab-pane active global-config-settings-content");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","form-horizontal");
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("fieldset");
              var el4 = dom.createTextNode("\n                      ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4,"class","required");
              var el5 = dom.createTextNode("\n");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("                      ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                  ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 1]),1,1);
              block(env, morph0, context, "each", [get(env, context, "edittedPlanParameters")], {"keyword": "planParameter"}, child0, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "async")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","cancel");
            dom.setAttribute(el1,"class","btn btn-default");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Save");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var attrMorph0 = dom.createAttrMorph(element0, 'disabled');
            var attrMorph1 = dom.createAttrMorph(element1, 'disabled');
            attribute(env, attrMorph0, element0, "disabled", get(env, context, "async"));
            element(env, element0, context, "action", ["cancelGlobalServiceConfig"], {});
            attribute(env, attrMorph1, element1, "disabled", get(env, context, "async"));
            element(env, element1, context, "action", ["saveGlobalServiceConfig"], {});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          dom.insertBoundary(fragment, null);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {"class": "modal-button-bar"}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal", [], {"configName": "bs", "id": "editGlobalServiceConfigModal", "closeIfClickedOutside": get(env, context, "handleOutsideClick"), "open-if": get(env, context, "editGlobalServiceConfigModalOpened"), "close-if": get(env, context, "editGlobalServiceConfigModalClosed"), "in-async": get(env, context, "async")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/engine', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select a target machine for the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(":\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        content(env, morph0, context, "engineTabNameLowercase");
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/engine/discovered-host', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","spinner-text");
          var el2 = dom.createTextNode("\n        Loading ....\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("             ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "tr-engine", [], {"host": get(env, context, "host"), "selectedRhevEngineHost": get(env, context, "selectedRhevEngineHost"), "disabled": get(env, context, "isStarted"), "action": "setEngine"});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","rhev-searchbar clearfix");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("form");
          dom.setAttribute(el2,"class","form-inline");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","col-md-9");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","form-group");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5,"class","rhev-search-box");
          var el6 = dom.createTextNode("\n                  ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","col-md-3 text-right");
          var el4 = dom.createTextNode("\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" selected\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4,"class","btn btn-default btn-sm");
          var el5 = dom.createTextNode("\n                Refresh Data\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1,"class","table table-bordered small fusor-table");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("thead");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-checkbox");
          var el5 = dom.createTextNode(" ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-hostname");
          var el5 = dom.createTextNode(" Host Name ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          var el5 = dom.createTextNode(" MAC Address ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","text-center");
          var el5 = dom.createTextNode(" Host Type ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-cpu text-center");
          var el5 = dom.createTextNode(" CPU ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-memory text-center");
          var el5 = dom.createTextNode(" Memory ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-disks text-center");
          var el5 = dom.createTextNode(" # Disks ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-diskspace text-center");
          var el5 = dom.createTextNode(" Disk Space ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-network");
          var el5 = dom.createTextNode(" Network ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tbody");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content, attribute = hooks.attribute, element = hooks.element, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [3]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1, 1]),1,1);
          var morph1 = dom.createMorphAt(element1,1,1);
          var attrMorph0 = dom.createAttrMorph(element2, 'disabled');
          var morph2 = dom.createMorphAt(dom.childAt(fragment, [3, 3]),1,1);
          inline(env, morph0, context, "input", [], {"type": "text", "class": "form-control rhev-search-input", "placeholder": " Search ...", "value": get(env, context, "searchString"), "disabled": get(env, context, "isStarted")});
          content(env, morph1, context, "numSelected");
          attribute(env, attrMorph0, element2, "disabled", get(env, context, "isStarted"));
          element(env, element2, context, "action", ["refreshDiscoveredHosts"], {});
          block(env, morph2, context, "each", [get(env, context, "filteredHosts")], {"keyword": "host"}, child0, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]),1,1);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        block(env, morph0, context, "if", [get(env, context, "isLoadingHosts")], {}, child0, child1);
        inline(env, morph1, context, "cancel-back-next", [], {"backRouteName": "rhev-setup", "disableBack": false, "nextRouteName": get(env, context, "engineNextRouteName"), "disableNext": get(env, context, "controllers.deployment.hasNoEngine"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "isStarted")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/entitlements.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/hypervisor', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","prepend-host-names");
          var el2 = dom.createTextNode("\n            Prepend host names with ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          inline(env, morph0, context, "input", [], {"type": "text", "value": get(env, context, "customPreprendName"), "disabled": get(env, context, "controllers.deployment.isStarted")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select one or more target machines to be hypervisors.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form-inline");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        Host naming scheme   ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [3, 1]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element1,3,3);
        var morph2 = dom.createMorphAt(element0,7,7);
        inline(env, morph0, context, "view", ["select"], {"content": get(env, context, "namingOptions"), "value": get(env, context, "hostNamingScheme"), "class": "form-control", "disabled": get(env, context, "controllers.deployment.isStarted")});
        block(env, morph1, context, "if", [get(env, context, "isCustomScheme")], {}, child0, null);
        content(env, morph2, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/hypervisor/discovered-host', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","spinner-text");
          var el2 = dom.createTextNode("\n        Loading ....\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createTextNode("Deselect all (");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(")");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, element = hooks.element, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element2 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element2,1,1);
              element(env, element2, context, "action", ["setUncheckAll"], {});
              content(env, morph0, context, "availableHosts.length");
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createTextNode("Select all (");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(")");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, element = hooks.element, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element1 = dom.childAt(fragment, [1]);
              var morph0 = dom.createMorphAt(element1,1,1);
              element(env, element1, context, "action", ["setCheckAll"], {});
              content(env, morph0, context, "availableHosts.length");
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","rhev-select-all");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            block(env, morph0, context, "if", [get(env, context, "isAllChecked")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("           ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "tr-hypervisor", [], {"host": get(env, context, "host"), "model": get(env, context, "model"), "parentController": get(env, context, "controller"), "isCustomScheme": get(env, context, "isCustomScheme"), "isMac": get(env, context, "isMac"), "isHypervisorN": get(env, context, "isHypervisorN"), "customPreprendName": get(env, context, "customPreprendName"), "isFreeform": get(env, context, "isFreeform"), "num": get(env, context, "host.id"), "disabled": get(env, context, "isStarted"), "filteredHosts": get(env, context, "filteredHosts")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","rhev-searchbar clearfix");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("form");
          dom.setAttribute(el2,"class","form-inline");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","col-md-7");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","form-group");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5,"class","rhev-search-box");
          var el6 = dom.createTextNode("\n                  ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","col-md-5 text-right");
          var el4 = dom.createTextNode("\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" selected\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4,"class","btn btn-default btn-sm");
          var el5 = dom.createTextNode("\n                Refresh Data\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1,"class","table table-bordered small fusor-table");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("thead");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-checkbox");
          var el5 = dom.createTextNode(" ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-hostname");
          var el5 = dom.createTextNode(" Host Name ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          var el5 = dom.createTextNode(" MAC Address ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          var el5 = dom.createTextNode(" Host Type ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-cpu text-center");
          var el5 = dom.createTextNode(" CPU ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-memory text-center");
          var el5 = dom.createTextNode(" Memory ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-disks text-center");
          var el5 = dom.createTextNode(" # Disks ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-diskspace text-center");
          var el5 = dom.createTextNode(" Disk Space ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4,"class","rhev-network");
          var el5 = dom.createTextNode(" Network ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tbody");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content, block = hooks.block, attribute = hooks.attribute, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1, 1]);
          var element4 = dom.childAt(element3, [3]);
          var element5 = dom.childAt(element4, [5]);
          var morph0 = dom.createMorphAt(dom.childAt(element3, [1, 1, 1]),1,1);
          var morph1 = dom.createMorphAt(element4,1,1);
          var morph2 = dom.createMorphAt(element4,3,3);
          var attrMorph0 = dom.createAttrMorph(element5, 'disabled');
          var morph3 = dom.createMorphAt(dom.childAt(fragment, [3, 3]),1,1);
          inline(env, morph0, context, "input", [], {"type": "text", "class": "form-control rhev-search-input", "placeholder": " Search ...", "value": get(env, context, "searchString"), "disabled": get(env, context, "isStarted")});
          content(env, morph1, context, "model.length");
          block(env, morph2, context, "if", [get(env, context, "isNotStarted")], {}, child0, null);
          attribute(env, attrMorph0, element5, "disabled", get(env, context, "isStarted"));
          element(env, element5, context, "action", ["refreshDiscoveredHosts"], {});
          block(env, morph3, context, "each", [get(env, context, "filteredHosts")], {"keyword": "host"}, child1, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"class","btn btn-primary");
          var el2 = dom.createTextNode("Next");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element0, 'disabled');
          attribute(env, attrMorph0, element0, "disabled", get(env, context, "controllers.rhev.hasNoHypervisor"));
          element(env, element0, context, "action", ["saveHyperVisors", "rhev-options"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]),1,1);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        block(env, morph0, context, "if", [get(env, context, "isLoadingHosts")], {}, child0, child1);
        block(env, morph1, context, "cancel-back-next", [], {"backRouteName": get(env, context, "hypervisorBackRouteName"), "disableBack": false, "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","spinner spinner-md spinner-inline");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","spinner-text");
        var el2 = dom.createTextNode("\n  Loading ....\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/mainmenu', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("EMBER-CLI DEV MODE ONLY");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" INSTALLER ");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          content(env, morph0, context, "nameRHCI");
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("All Deployments");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("New ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Deployment");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "nameRHCI");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","position: static; top: 0px;");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","navbar-header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","button");
        dom.setAttribute(el3,"class","navbar-toggle collapsed");
        dom.setAttribute(el3,"data-toggle","collapse");
        dom.setAttribute(el3,"data-target","#bs-example-navbar-collapse-1");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","sr-only");
        var el5 = dom.createTextNode("Toggle navigation");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"class","navbar-brand");
        dom.setAttribute(el3,"href","#");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","nav navbar-nav");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 5]);
        var attrMorph0 = dom.createAttrMorph(element0, 'class');
        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [5]),0,0);
        var morph3 = dom.createMorphAt(dom.childAt(element1, [7]),0,0);
        attribute(env, attrMorph0, element0, "class", concat(env, ["navbar navbar-default navbar-inner navbar-fixed-top persist-header ", subexpr(env, context, "if", [get(env, context, "isUpstream"), "navbar-inner-upstream"], {})]));
        block(env, morph0, context, "link-to", ["deployments"], {}, child0, null);
        block(env, morph1, context, "link-to", ["deployments"], {}, child1, null);
        block(env, morph2, context, "link-to", ["deployments"], {}, child2, null);
        block(env, morph3, context, "link-to", ["deployment-new.start"], {}, child3, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/new-environment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Create Environment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
              inline(env, morph0, context, "text-f", [], {"label": "Environment Name", "value": get(env, context, "name"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              inline(env, morph1, context, "text-f", [], {"label": "Label", "value": get(env, context, "label"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              inline(env, morph2, context, "textarea-f", [], {"label": "Description (Optional)", "value": get(env, context, "description"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "async")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element0, 'disabled');
            attribute(env, attrMorph0, element0, "disabled", get(env, context, "async"));
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal-form", [], {"configName": "bs", "id": "newLifecycleEnvironmentModal", "on-submit": "createEnvironment", "in-async": get(env, context, "async")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/new-node-registration', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, element = hooks.element;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element14 = dom.childAt(fragment, [1]);
              element(env, element14, context, "action", ["cancelRegisterNodes"], {});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Node Registration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                var el2 = dom.createTextNode("\n                Warning: The registration process is paused while editting Nodes.\n              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("i");
                  dom.setAttribute(el1,"class","fa fa-trash-o");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, get = hooks.get, element = hooks.element;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var element2 = dom.childAt(fragment, [1]);
                  element(env, element2, context, "action", ["removeNode", get(env, context, "node")], {});
                  return fragment;
                }
              };
            }());
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createTextNode("\n                                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("a");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("                            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content, block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element3 = dom.childAt(fragment, [1]);
                var element4 = dom.childAt(element3, [1]);
                var attrMorph0 = dom.createAttrMorph(element3, 'class');
                var morph0 = dom.createMorphAt(element4,0,0);
                var morph1 = dom.createMorphAt(element3,3,3);
                attribute(env, attrMorph0, element3, "class", concat(env, [get(env, context, "node.isActiveClass")]));
                element(env, element4, context, "action", ["selectNode", get(env, context, "node")], {});
                content(env, morph0, context, "node.name");
                block(env, morph1, context, "if", [get(env, context, "node.isSelected")], {}, child0, null);
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","row register-nodes-formset");
              dom.setAttribute(el1,"id","formset-register_nodes");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","col-xs-5");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","row");
              var el4 = dom.createTextNode("\n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4,"class","col-xs-12 column");
              dom.setAttribute(el4,"style","padding-bottom: 5px;");
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("h3");
              dom.setAttribute(el5,"class","col-xs-6 nodes-registered-count");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode(" Nodes");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("a");
              dom.setAttribute(el5,"class","col-xs-2  nodes-add-button add-node-link");
              dom.setAttribute(el5,"title","Upload from CSV");
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("i");
              dom.setAttribute(el6,"class","fa fa-upload");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                            ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("a");
              dom.setAttribute(el5,"class","col-xs-2  nodes-add-button add-node-link");
              dom.setAttribute(el5,"title","Add node");
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("i");
              dom.setAttribute(el6,"class","fa fa-plus");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                            ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                        ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"style","display: none;");
              var el4 = dom.createTextNode("\n                            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("input");
              dom.setAttribute(el4,"id","regNodesUploadFileInput");
              dom.setAttribute(el4,"value","selectedFile");
              dom.setAttribute(el4,"type","file");
              dom.setAttribute(el4,"accept","text/csv");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                        ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              dom.setAttribute(el3,"class","nav nav-pills nav-stacked nav-registered-nodes");
              var el4 = dom.createTextNode("\n");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("form");
              var el3 = dom.createTextNode("\n                      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","col-xs-7");
              var el4 = dom.createTextNode("\n                          ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              var el5 = dom.createTextNode("\n                              ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("h4");
              var el6 = dom.createTextNode("Node Detail");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                              ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5,"class","form-horizontal");
              var el6 = dom.createTextNode("\n                                  ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("fieldset");
              var el7 = dom.createTextNode("\n                                      ");
              dom.appendChild(el6, el7);
              var el7 = dom.createElement("legend");
              var el8 = dom.createTextNode("Management");
              dom.appendChild(el7, el8);
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                      ");
              dom.appendChild(el6, el7);
              var el7 = dom.createComment("");
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                      ");
              dom.appendChild(el6, el7);
              var el7 = dom.createComment("");
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                      ");
              dom.appendChild(el6, el7);
              var el7 = dom.createComment("");
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                      ");
              dom.appendChild(el6, el7);
              var el7 = dom.createComment("");
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n\n                                  ");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                                  ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("fieldset");
              var el7 = dom.createTextNode("\n                                      ");
              dom.appendChild(el6, el7);
              var el7 = dom.createElement("legend");
              var el8 = dom.createTextNode("Networking");
              dom.appendChild(el7, el8);
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                      ");
              dom.appendChild(el6, el7);
              var el7 = dom.createComment("");
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                  ");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                              ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                          ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content, element = hooks.element, concat = hooks.concat, attribute = hooks.attribute, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var element5 = dom.childAt(fragment, [2]);
              var element6 = dom.childAt(element5, [1]);
              var element7 = dom.childAt(element6, [1, 1]);
              var element8 = dom.childAt(element7, [3]);
              var element9 = dom.childAt(element7, [5]);
              var element10 = dom.childAt(element6, [3, 1]);
              var element11 = dom.childAt(element5, [3, 1]);
              var element12 = dom.childAt(element11, [1, 3]);
              var element13 = dom.childAt(element12, [1]);
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              var morph1 = dom.createMorphAt(dom.childAt(element7, [1]),0,0);
              var morph2 = dom.createMorphAt(dom.childAt(element6, [5]),1,1);
              var attrMorph0 = dom.createAttrMorph(element11, 'style');
              var morph3 = dom.createMorphAt(element13,3,3);
              var morph4 = dom.createMorphAt(element13,5,5);
              var morph5 = dom.createMorphAt(element13,7,7);
              var morph6 = dom.createMorphAt(element13,9,9);
              var morph7 = dom.createMorphAt(dom.childAt(element12, [3]),3,3);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "registrationPaused")], {}, child0, null);
              content(env, morph1, context, "edittedNodes.length");
              element(env, element8, context, "action", ["updloadCsvFile"], {});
              element(env, element9, context, "action", ["addNode"], {});
              element(env, element10, context, "action", ["csvFileChosen"], {"on": "change"});
              block(env, morph2, context, "each", [get(env, context, "edittedNodes")], {"keyword": "node"}, child1, null);
              attribute(env, attrMorph0, element11, "style", concat(env, [get(env, context, "nodeFormStyle")]));
              inline(env, morph3, context, "select-simple-f", [], {"label": "Driver", "labelSize": "col-xs-4", "inputSize": "col-xs-6", "content": get(env, context, "drivers"), "selection": get(env, context, "selectedNode.driver"), "prompt": "unspecified", "isRequired": true});
              inline(env, morph4, context, "text-f", [], {"label": "IP Address", "type": "text", "labelSize": "col-xs-4", "inputSize": "col-xs-6", "value": get(env, context, "selectedNode.ipAddress"), "isRequired": true});
              inline(env, morph5, context, "text-f", [], {"label": "IPMI User", "type": "text", "labelSize": "col-xs-4", "inputSize": "col-xs-6", "value": get(env, context, "selectedNode.ipmiUsername"), "isRequired": false});
              inline(env, morph6, context, "text-f", [], {"label": "IPMI Password", "type": "password", "labelSize": "form-label-nowrap col-xs-4", "inputSize": "col-xs-6", "value": get(env, context, "selectedNode.ipmiPassword"), "isRequired": false});
              inline(env, morph7, context, "textarea-f", [], {"label": "NIC MAC Address", "labelSize": "form-label-nowrap col-xs-4", "inputSize": "col-xs-6", "value": get(env, context, "selectedNode.nicMacAddress"), "cols": "40", "placeholder": "unspecified", "rows": "2", "isRequired": true});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "async")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","cancel");
            dom.setAttribute(el1,"class","btn btn-default");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Register Nodes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var attrMorph0 = dom.createAttrMorph(element0, 'disabled');
            var attrMorph1 = dom.createAttrMorph(element1, 'disabled');
            attribute(env, attrMorph0, element0, "disabled", get(env, context, "async"));
            element(env, element0, context, "action", ["cancelRegisterNodes"], {});
            attribute(env, attrMorph1, element1, "disabled", get(env, context, "async"));
            element(env, element1, context, "action", ["registerNodes"], {});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal", [], {"class": "scrollable-form", "configName": "bs", "id": "nodeRegistrationModal", "closeIfClickedOutside": get(env, context, "handleOutsideClick"), "open-if": get(env, context, "registerNodesModalOpened"), "close-if": get(env, context, "registerNodesModalClosed"), "in-async": get(env, context, "async")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/new-organization', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Create Organization");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              inline(env, morph0, context, "text-f", [], {"label": "Organization Name", "value": get(env, context, "defaultOrgName"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              inline(env, morph1, context, "textarea-f", [], {"label": "Description (Optional)", "value": get(env, context, "fields_org.description"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "async")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element0, 'disabled');
            attribute(env, attrMorph0, element0, "disabled", get(env, context, "async"));
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal-form", [], {"configName": "bs", "id": "newOrganizationModal", "on-submit": "createOrganization", "in-async": get(env, context, "async")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/new-satellite', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("New Subscription Management Application");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "text-f", [], {"label": "Name", "value": get(env, context, "newSatelliteName"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "async")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Cancel");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Register");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block, get = hooks.get, attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [3]);
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var attrMorph0 = dom.createAttrMorph(element0, 'disabled');
            block(env, morph0, context, "em-modal-toggler", [], {"class": "btn btn-default"}, child0, null);
            attribute(env, attrMorph0, element0, "disabled", get(env, context, "async"));
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal-form", [], {"configName": "bs", "id": "registerNewSatellite", "on-submit": "createSatellite", "in-async": get(env, context, "async")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/openstack', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("A. Detect Undercloud");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberOpenstack");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("B. Register Nodes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberOpenstack");
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("C. Assign Nodes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberOpenstack");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block, get = hooks.get;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "link-to", ["undercloud-deploy"], {"tagName": "li"}, child0, null);
          block(env, morph1, context, "link-to", ["register-nodes"], {"tagName": "li", "disabled": get(env, context, "disableTabRegisterNodes")}, child1, null);
          block(env, morph2, context, "link-to", ["assign-nodes"], {"tagName": "li", "disabled": get(env, context, "disableTabAssignNodes")}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "wizard-step", [], {"outlet": get(env, context, "outlet")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/openstack/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/openstack/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "loading-spinner", [], {"show": true, "text": "Loading..."});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/register-nodes', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-success rhci-alert");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-check-circle-o green-circle");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                 \n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" registered successfully.\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
          content(env, morph0, context, "registeredNode.name");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","pficon-layered");
          dom.setAttribute(el1,"data-toggle","tooltip");
          dom.setAttribute(el1,"data-placement","top");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","pficon pficon-error-octagon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","pficon pficon-error-exclamation");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createTextNode("Error:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element2 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element2, 'title');
          var morph0 = dom.createMorphAt(element2,7,7);
          attribute(env, attrMorph0, element2, "title", get(env, context, "registrationErrorTip"));
          content(env, morph0, context, "registrationErrorMessage");
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","progress progress-label-top-right");
          dom.setAttribute(el1,"style","width:50%;");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","progress-bar");
          dom.setAttribute(el2,"role","progressbar");
          dom.setAttribute(el2,"aria-valuemin","0");
          dom.setAttribute(el2,"aria-valuemax","100");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("% (");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" of ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(")");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var attrMorph0 = dom.createAttrMorph(element0, 'aria-valuenow');
          var attrMorph1 = dom.createAttrMorph(element0, 'style');
          var morph0 = dom.createMorphAt(element1,0,0);
          var morph1 = dom.createMorphAt(element1,2,2);
          var morph2 = dom.createMorphAt(element1,4,4);
          attribute(env, attrMorph0, element0, "aria-valuenow", concat(env, [get(env, context, "nodeRegPercentComplete"), "%"]));
          attribute(env, attrMorph1, element0, "style", concat(env, ["width: ", get(env, context, "nodeRegPercentComplete"), "%;"]));
          content(env, morph0, context, "nodeRegPercentComplete");
          content(env, morph1, context, "nodeRegComplete");
          content(env, morph2, context, "nodeRegTotal");
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n        Currently, there are no registered nodes available. You must have at least 3 nodes in order to continue\n        this deployment. Use the Register Nodes button below to begin the registration process.\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n        You can register more nodes to coalesce into Node Profiles. Use the Register Nodes button below to begin the registration process.\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-7");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          block(env, morph0, context, "if", [get(env, context, "noRegisteredNodes")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "node-profile", [], {"profile": get(env, context, "profile"), "nodes": get(env, context, "model.nodes"), "stepNumberOpenstack": get(env, context, "stepNumberOpenstack")});
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "node-profile", [], {"profile": get(env, context, "profile"), "stepNumberOpenstack": get(env, context, "stepNumberOpenstack")});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","row");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","col-md-7");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
            block(env, morph0, context, "if", [get(env, context, "model.nodes")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-5");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h2");
          var el4 = dom.createTextNode("Coalescing Node Profiles");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);
          dom.insertBoundary(fragment, null);
          block(env, morph0, context, "each", [get(env, context, "model.profiles")], {"keyword": "profile"}, child0, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-5");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Registering Nodes");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","progress-description");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-5");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","btn btn-primary");
        var el4 = dom.createTextNode("\n          Register Nodes\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element3 = dom.childAt(fragment, [10, 1, 1]);
        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        var morph2 = dom.createMorphAt(fragment,8,8,contextualElement);
        var morph3 = dom.createMorphAt(fragment,12,12,contextualElement);
        var morph4 = dom.createMorphAt(fragment,16,16,contextualElement);
        var morph5 = dom.createMorphAt(fragment,18,18,contextualElement);
        block(env, morph0, context, "if", [get(env, context, "showAlertMessage")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "registrationError")], {}, child1, null);
        block(env, morph2, context, "if", [get(env, context, "registrationInProgress")], {}, child2, child3);
        element(env, element3, context, "action", ["showNodeRegistrationModal"], {});
        block(env, morph3, context, "unless", [get(env, context, "noRegisteredNodes")], {}, child4, null);
        inline(env, morph4, context, "cancel-back-next", [], {"backRouteName": "undercloud-deploy", "disableBack": false, "nextRouteName": "assign-nodes", "disableNext": get(env, context, "disableRegisterNodesNext"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")});
        inline(env, morph5, context, "partial", ["new-node-registration"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("A. Installation Review");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberReview");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("B. Installation Progress");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberReview");
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("C. Installation Summary");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberReview");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "link-to", ["review.installation"], {"tagName": "li", "disabled": get(env, context, "disableTabInstallation")}, child0, null);
          block(env, morph1, context, "link-to", ["review.progress"], {"tagName": "li", "disabled": get(env, context, "disableTabProgress")}, child1, null);
          block(env, morph2, context, "link-to", ["review.summary"], {"tagName": "li", "disabled": get(env, context, "disableTabSummary")}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "wizard-step", [], {"outlet": get(env, context, "outlet")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/installation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4,"class","fa fa-2x fa-exclamation-triangle errorForValidation");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n             \n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
            content(env, morph0, context, "errorMsg");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
            inline(env, morph0, context, "review-link", [], {"label": "Name", "routeName": "satellite", "isRequired": true, "value": get(env, context, "model.name")});
            inline(env, morph1, context, "review-link", [], {"label": "Organization", "routeName": "configure-organization", "isRequired": true, "value": get(env, context, "model.organization.name")});
            inline(env, morph2, context, "review-link", [], {"label": "Environment", "routeName": "configure-environment", "value": get(env, context, "lifecycleEnvironmentName")});
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                inline(env, morph0, context, "review-link", [], {"label": "Engine/Hypervisor", "routeName": "engine.discovered-host", "isRequired": true, "value": get(env, context, "engineNamePlusDomain")});
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                return {
                  isHTMLBars: true,
                  revision: "Ember@1.11.1",
                  blockParams: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  build: function build(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                   ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  render: function render(context, env, contextualElement) {
                    var dom = env.dom;
                    var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                    dom.detectNamespace(contextualElement);
                    var fragment;
                    if (env.useFragmentCache && dom.canClone) {
                      if (this.cachedFragment === null) {
                        fragment = this.build(dom);
                        if (this.hasRendered) {
                          this.cachedFragment = fragment;
                        } else {
                          this.hasRendered = true;
                        }
                      }
                      if (this.cachedFragment) {
                        fragment = dom.cloneNode(this.cachedFragment, true);
                      }
                    } else {
                      fragment = this.build(dom);
                    }
                    var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                    inline(env, morph0, context, "hypervisor-name", [], {"host": get(env, context, "host"), "hypervisorDomain": get(env, context, "hypervisorDomain")});
                    return fragment;
                  }
                };
              }());
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, get = hooks.get, block = hooks.block;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, null);
                  dom.insertBoundary(fragment, 0);
                  block(env, morph0, context, "each", [get(env, context, "selectedHypervisorHosts")], {"keyword": "host"}, child0, null);
                  return fragment;
                }
              };
            }());
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
                dom.insertBoundary(fragment, null);
                inline(env, morph0, context, "review-link", [], {"label": "Engine Host Name", "routeName": "engine.discovered-host", "isRequired": true, "value": get(env, context, "engineNamePlusDomain")});
                block(env, morph1, context, "review-link", [], {"label": "Hypervisor Host Name", "routeName": "hypervisor.discovered-host", "isRequired": true, "value": get(env, context, "selectedHypervisorHosts"), "useYieldInstead": true}, child0, null);
                return fragment;
              }
            };
          }());
          var child2 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
                var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
                inline(env, morph0, context, "review-link", [], {"label": "Export Domain Name", "routeName": "storage", "isDefault": true, "value": get(env, context, "model.rhev_export_domain_name")});
                inline(env, morph1, context, "review-link", [], {"label": "Export Storage Address", "routeName": "storage", "isDefault": true, "value": get(env, context, "model.rhev_export_domain_address")});
                inline(env, morph2, context, "review-link", [], {"label": "Export Storage Path", "routeName": "storage", "isDefault": true, "value": get(env, context, "model.rhev_export_domain_path")});
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("br");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
              var morph3 = dom.createMorphAt(fragment,7,7,contextualElement);
              var morph4 = dom.createMorphAt(fragment,9,9,contextualElement);
              var morph5 = dom.createMorphAt(fragment,11,11,contextualElement);
              var morph6 = dom.createMorphAt(fragment,13,13,contextualElement);
              var morph7 = dom.createMorphAt(fragment,15,15,contextualElement);
              var morph8 = dom.createMorphAt(fragment,17,17,contextualElement);
              var morph9 = dom.createMorphAt(fragment,19,19,contextualElement);
              var morph10 = dom.createMorphAt(fragment,21,21,contextualElement);
              var morph11 = dom.createMorphAt(fragment,23,23,contextualElement);
              inline(env, morph0, context, "review-link", [], {"label": "Setup Type", "routeName": "rhev-setup", "isRequired": true, "value": get(env, context, "controllers.rhev-setup.rhevSetupTitle")});
              block(env, morph1, context, "if", [get(env, context, "isSelfHosted")], {}, child0, child1);
              inline(env, morph2, context, "review-link", [], {"label": "Root password Engine & Hypervisor", "routeName": "rhev-options", "isRequired": true, "isPassword": true, "value": get(env, context, "model.rhev_root_password")});
              inline(env, morph3, context, "review-link", [], {"label": "Engine admin password", "routeName": "rhev-options", "isRequired": true, "isPassword": true, "value": get(env, context, "model.rhev_engine_admin_password")});
              inline(env, morph4, context, "review-link", [], {"label": "Datacenter Name", "routeName": "rhev-options", "isDefault": true, "value": get(env, context, "model.rhev_database_name")});
              inline(env, morph5, context, "review-link", [], {"label": "Cluster Name", "routeName": "rhev-options", "isDefault": true, "value": get(env, context, "model.rhev_cluster_name")});
              inline(env, morph6, context, "review-link", [], {"label": "CPU Type", "routeName": "rhev-options", "isDefault": true, "value": get(env, context, "model.rhev_cpu_type")});
              inline(env, morph7, context, "review-link", [], {"label": "Storage Type", "routeName": "storage", "isRequired": true, "value": get(env, context, "model.rhev_storage_type")});
              inline(env, morph8, context, "review-link", [], {"label": "Data Domain Name", "routeName": "storage", "isDefault": true, "value": get(env, context, "model.rhev_storage_name")});
              inline(env, morph9, context, "review-link", [], {"label": "Data Storage Address", "routeName": "storage", "isDefault": true, "value": get(env, context, "model.rhev_storage_address")});
              inline(env, morph10, context, "review-link", [], {"label": "Data Storage Path", "routeName": "storage", "isDefault": true, "value": get(env, context, "model.rhev_share_path")});
              block(env, morph11, context, "if", [get(env, context, "isCloudForms")], {}, child2, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "accordion-item", [], {"name": "Red Hat Enterprise Virtualization", "isOpen": get(env, context, "isRhevOpen")}, child0, null);
            return fragment;
          }
        };
      }());
      var child3 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                  inline(env, morph0, context, "node-profile", [], {"profile": get(env, context, "profile"), "nodes": get(env, context, "openstackNodes"), "plan": get(env, context, "openstackPlan"), "doAssign": true, "readOnly": true});
                  return fragment;
                }
              };
            }());
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, null);
                dom.insertBoundary(fragment, 0);
                block(env, morph0, context, "each", [get(env, context, "openstackProfiles")], {"keyword": "profile"}, child0, null);
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
              var morph3 = dom.createMorphAt(fragment,7,7,contextualElement);
              dom.insertBoundary(fragment, null);
              inline(env, morph0, context, "review-link", [], {"label": "Director URL", "value": get(env, context, "undercloudUrl"), "isRequired": true, "isExternalURL": true});
              inline(env, morph1, context, "review-link", [], {"label": "Director username", "value": get(env, context, "undercloudUsername"), "isRequired": true});
              inline(env, morph2, context, "review-link", [], {"label": "Director password", "value": get(env, context, "undercloudPassword"), "isRequired": true});
              block(env, morph3, context, "review-link", [], {"label": "Assigned Nodes", "routeName": "assign-nodes", "isRequired": true, "value": get(env, context, "openstackProfiles"), "useYieldInstead": true}, child0, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "accordion-item", [], {"name": get(env, context, "controllers.deployment.nameOpenStack"), "isOpen": get(env, context, "isOpenStackOpen")}, child0, null);
            return fragment;
          }
        };
      }());
      var child4 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
              inline(env, morph0, context, "review-link", [], {"label": "Installation Location", "routeName": "where-install", "isRequired": true, "value": get(env, context, "model.cfme_install_loc")});
              inline(env, morph1, context, "review-link", [], {"label": "CFME Root password", "routeName": "cloudforms.cfme-configuration", "isRequired": true, "isPassword": true, "value": get(env, context, "model.cfme_root_password")});
              inline(env, morph2, context, "review-link", [], {"label": "CFME Admin password", "routeName": "cloudforms.cfme-configuration", "isRequired": true, "isPassword": true, "value": get(env, context, "model.cfme_admin_password")});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "accordion-item", [], {"name": "Cloud Forms Management Engine", "isOpen": get(env, context, "isCloudFormsOpen")}, child0, null);
            return fragment;
          }
        };
      }());
      var child5 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
                var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
                inline(env, morph0, context, "review-link", [], {"label": "Subscription Name", "routeName": "subscriptions.select-subscriptions", "value": get(env, context, "sub.product_name")});
                inline(env, morph1, context, "review-link", [], {"label": "Contract Number", "routeName": "subscriptions.select-subscriptions", "value": get(env, context, "sub.contract_number")});
                inline(env, morph2, context, "review-link", [], {"label": "Quantity", "routeName": "subscriptions.select-subscriptions", "value": get(env, context, "sub.quantity_attached")});
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                inline(env, morph0, context, "review-link", [], {"label": "Quantity", "routeName": "subscriptions.select-subscriptions", "value": "0 - no new subscriptions to attach"});
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
              inline(env, morph0, context, "review-link", [], {"label": "Subscription Management Application", "routeName": "subscriptions.management-application", "isRequired": true, "value": get(env, context, "controllers.deployment.managementApplicationName")});
              inline(env, morph1, context, "review-link", [], {"label": "Red Hat Access Insights", "routeName": "subscriptions.select-subscriptions", "value": get(env, context, "controllers.subscriptions/select-subscriptions.enableAnalytics")});
              block(env, morph2, context, "each", [get(env, context, "subscriptions")], {"keyword": "sub"}, child0, child1);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "accordion-item", [], {"name": "Subscriptions", "isOpen": get(env, context, "isSubscriptionsOpen")}, child0, null);
            return fragment;
          }
        };
      }());
      var child6 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            Next ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1,"class","fa fa-angle-right");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "link-to", ["review.progress.overview"], {"role": "button", "class": "btn btn-primary"}, child0, null);
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("             ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1,"class","fa fa-angle-right");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                content(env, morph0, context, "buttonDeployTitle");
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "button-f", [], {"disabled": get(env, context, "buttonDeployDisabled"), "action": get(env, context, "deploymentButtonAction")}, child0, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "controllers.deployment.isStarted")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-12");
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [3, 1]);
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(element0,1,1);
          var morph2 = dom.createMorphAt(element0,3,3);
          var morph3 = dom.createMorphAt(element0,5,5);
          var morph4 = dom.createMorphAt(element0,7,7);
          var morph5 = dom.createMorphAt(element0,9,9);
          var morph6 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "if", [get(env, context, "showErrorMessage")], {}, child0, null);
          block(env, morph1, context, "accordion-item", [], {"name": "Red Hat Satellite", "isOpen": true}, child1, null);
          block(env, morph2, context, "if", [get(env, context, "isRhev")], {}, child2, null);
          block(env, morph3, context, "if", [get(env, context, "isOpenStack")], {}, child3, null);
          block(env, morph4, context, "if", [get(env, context, "isCloudForms")], {}, child4, null);
          block(env, morph5, context, "if", [get(env, context, "isSubscriptions")], {}, child5, null);
          block(env, morph6, context, "cancel-back-next", [], {"backRouteName": get(env, context, "backRouteNameonReviewInstallation"), "disableBack": false, "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")}, child6, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","spinner-text");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
          content(env, morph0, context, "spinnerTextMessage");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "unless", [get(env, context, "showSpinner")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","spinner spinner-md spinner-inline");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","spinner-text");
        var el2 = dom.createTextNode("\n  Loading Data from Tasks ...\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
          content(env, morph0, context, "errorMsg");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Overview");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Details");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        Next ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-angle-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "link-to", ["review.summary"], {"role": "button", "class": "btn btn-primary"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","btn btn-primary");
            dom.setAttribute(el1,"disabled","true");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","fa fa-angle-right");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            content(env, morph0, context, "deployButtonTitle");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "deployTaskIsFinished")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","nav nav-tabs col-md-12");
        dom.setAttribute(el3,"data-tabs","pills");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-12");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(element1,1,1);
        var morph2 = dom.createMorphAt(element1,2,2);
        var morph3 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        var morph4 = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "showErrorMessage")], {}, child0, null);
        block(env, morph1, context, "link-to", ["review.progress.overview"], {"tagName": "li"}, child1, null);
        block(env, morph2, context, "link-to", ["review.progress.details"], {"tagName": "li"}, child2, null);
        content(env, morph3, context, "outlet");
        block(env, morph4, context, "cancel-back-next", [], {"backRouteName": "review.installation", "disableBack": false, "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")}, child3, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","spinner-text");
          var el2 = dom.createTextNode("\n      Loading Data from Tasks ...\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "tr-task", [], {"task": get(env, context, "synctask")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3,"class","table table-bordered small");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("thead");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Action");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5,"class","center");
          var el6 = dom.createTextNode("State");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5,"class","center");
          var el6 = dom.createTextNode("Result");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5,"class","center");
          var el6 = dom.createTextNode("Progress");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5,"class","center");
          var el6 = dom.createTextNode("Started at");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tbody");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1, 1, 3]);
          var morph0 = dom.createMorphAt(element0,1,1);
          var morph1 = dom.createMorphAt(element0,3,3);
          var morph2 = dom.createMorphAt(element0,5,5);
          var morph3 = dom.createMorphAt(element0,7,7);
          var morph4 = dom.createMorphAt(element0,9,9);
          var morph5 = dom.createMorphAt(fragment,3,3,contextualElement);
          inline(env, morph0, context, "tr-task", [], {"task": get(env, context, "model.deployTask")});
          inline(env, morph1, context, "tr-task", [], {"task": get(env, context, "model.manageContentTask")});
          inline(env, morph2, context, "tr-task", [], {"task": get(env, context, "model.rhevTask")});
          inline(env, morph3, context, "tr-task", [], {"task": get(env, context, "model.cfmeTask")});
          block(env, morph4, context, "each", [get(env, context, "synctasks")], {"keyword": "synctask"}, child0, null);
          content(env, morph5, context, "outlet");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        block(env, morph0, context, "if", [get(env, context, "isLoadingMoreTasks")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Task");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","nav nav-tabs col-md-12");
        dom.setAttribute(el1,"data-tabs","pills");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("     <li>\n      <a href='/katello/sync_management#!=' target='_blank'>Content Sync Status</a>\n    </li> ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" <a>Running Steps</a> ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" <a>Errors</a> ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" <a>Locks</a> ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" <a>Raw</a> ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-md-12");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        block(env, morph0, context, "link-to", ["review.progress.details.task.index"], {"tagName": "li"}, child0, null);
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-name");
          var el3 = dom.createTextNode("Parent task");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-name");
          var el3 = dom.createTextNode("Sub tasks");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","spinner spinner-xs spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-name");
          var el3 = dom.createTextNode("Output:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-value");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("pre");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 3, 1]),0,0);
          content(env, morph0, context, "model.humanized_output");
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-name");
          var el3 = dom.createTextNode("Errors:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-value");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("pre");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 3, 1]),0,0);
          content(env, morph0, context, "model.humanized_errors");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Id:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Label:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Name:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Owner:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Started at:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Ended at:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("State:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Result:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Params:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-8");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","progress-bar-label");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","no-bold");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","pull-right");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("%\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","progress");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"role","progressbar");
        dom.setAttribute(el4,"aria-valuemin","0");
        dom.setAttribute(el4,"aria-valuemax","100");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, block = hooks.block, get = hooks.get, attribute = hooks.attribute, concat = hooks.concat;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [22, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 3]),0,0);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2, 3]),0,0);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4, 3]),0,0);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6, 3]),0,0);
        var morph4 = dom.createMorphAt(dom.childAt(fragment, [8, 3]),0,0);
        var morph5 = dom.createMorphAt(dom.childAt(fragment, [10, 3]),0,0);
        var morph6 = dom.createMorphAt(dom.childAt(fragment, [12, 3]),0,0);
        var morph7 = dom.createMorphAt(dom.childAt(fragment, [14, 3]),0,0);
        var morph8 = dom.createMorphAt(fragment,18,18,contextualElement);
        var morph9 = dom.createMorphAt(fragment,20,20,contextualElement);
        var morph10 = dom.createMorphAt(element1,1,1);
        var morph11 = dom.createMorphAt(element1,3,3);
        var morph12 = dom.createMorphAt(dom.childAt(element1, [4]),0,0);
        var morph13 = dom.createMorphAt(element1,6,6);
        var morph14 = dom.createMorphAt(element1,8,8);
        var morph15 = dom.createMorphAt(dom.childAt(element1, [10]),1,1);
        var attrMorph0 = dom.createAttrMorph(element2, 'class');
        var attrMorph1 = dom.createAttrMorph(element2, 'aria-valuenow');
        var attrMorph2 = dom.createAttrMorph(element2, 'style');
        var morph16 = dom.createMorphAt(fragment,24,24,contextualElement);
        var morph17 = dom.createMorphAt(fragment,26,26,contextualElement);
        dom.insertBoundary(fragment, null);
        content(env, morph0, context, "model.id");
        content(env, morph1, context, "model.label");
        content(env, morph2, context, "model.humanized_name");
        content(env, morph3, context, "model.username");
        content(env, morph4, context, "model.started_at");
        content(env, morph5, context, "model.ended_at");
        content(env, morph6, context, "model.state");
        content(env, morph7, context, "model.result");
        block(env, morph8, context, "if", [false], {}, child0, null);
        block(env, morph9, context, "if", [false], {}, child1, null);
        block(env, morph10, context, "unless", [get(env, context, "isFinished")], {}, child2, null);
        content(env, morph11, context, "progressBarMsg");
        content(env, morph12, context, "controller.progressBarSubMsg");
        content(env, morph13, context, "model.humanized_errors");
        content(env, morph14, context, "model.humanized_errors");
        content(env, morph15, context, "controller.percentProgress");
        attribute(env, attrMorph0, element2, "class", get(env, context, "progressBarClass"));
        attribute(env, attrMorph1, element2, "aria-valuenow", get(env, context, "controller.percentProgressInt"));
        attribute(env, attrMorph2, element2, "style", concat(env, ["width: ", get(env, context, "styleWidth"), ";"]));
        block(env, morph16, context, "if", [true], {}, child3, null);
        block(env, morph17, context, "if", [true], {}, child4, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/running-steps', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("NEED TODO running steps\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/task-errors', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("NEED TODO ERRORS\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/task-locks', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("NEED TODO LOCKS\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/task-raw', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("NEED TODO task RAW\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/overview', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "progress-bar", [], {"model": get(env, context, "rhevTask"), "name": get(env, context, "nameRhev"), "isSatelliteProgressBar": false});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "progress-bar", [], {"model": get(env, context, "openstackTask"), "name": get(env, context, "nameOpenStack"), "isSatelliteProgressBar": false});
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "progress-bar", [], {"model": get(env, context, "cfmeTask"), "name": get(env, context, "nameCloudForms"), "isSatelliteProgressBar": false});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph1 = dom.createMorphAt(fragment,4,4,contextualElement);
        var morph2 = dom.createMorphAt(fragment,6,6,contextualElement);
        var morph3 = dom.createMorphAt(fragment,8,8,contextualElement);
        dom.insertBoundary(fragment, null);
        inline(env, morph0, context, "progress-bar", [], {"model": get(env, context, "manageContentTask"), "name": get(env, context, "nameSatellite"), "isSatelliteProgressBar": true});
        block(env, morph1, context, "if", [get(env, context, "isRhev")], {}, child0, null);
        block(env, morph2, context, "if", [get(env, context, "isOpenStack")], {}, child1, null);
        block(env, morph3, context, "if", [get(env, context, "isCloudForms")], {}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/summary', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            inline(env, morph0, context, "review-link", [], {"label": "URL", "isExternalURL": true, "value": get(env, context, "rhevEngineUrl")});
            inline(env, morph1, context, "review-link", [], {"label": "Username", "value": "admin"});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "accordion-item", [], {"name": "Red Hat Enterprise Virtualization", "isOpen": true}, child0, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
            inline(env, morph0, context, "review-link", [], {"label": "Director URL", "value": get(env, context, "undercloudUrl"), "isRequired": true, "isExternalURL": true});
            inline(env, morph1, context, "review-link", [], {"label": "Director username", "value": get(env, context, "undercloudUsername"), "isRequired": true});
            inline(env, morph2, context, "review-link", [], {"label": "Director password", "value": get(env, context, "undercloudPassword"), "isRequired": true});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "accordion-item", [], {"name": "Red Hat Enterprise Linux - OpenStack Platform", "isOpen": get(env, context, "isOpenStackOpen")}, child0, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            inline(env, morph0, context, "review-link", [], {"label": "URL", "isExternalURL": true, "value": get(env, context, "cfmeUrl")});
            inline(env, morph1, context, "review-link", [], {"label": "Username", "value": "admin"});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "accordion-item", [], {"name": "Cloud Forms Management Engine", "isOpen": true}, child0, null);
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        View Deployments\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "link-to", ["deployments"], {"role": "button", "class": "btn btn-primary"}, child0, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [1, 1]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(element0,5,5);
        var morph3 = dom.createMorphAt(fragment,3,3,contextualElement);
        block(env, morph0, context, "if", [get(env, context, "isRhev")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "isOpenStack")], {}, child1, null);
        block(env, morph2, context, "if", [get(env, context, "isCloudForms")], {}, child2, null);
        block(env, morph3, context, "cancel-back-next", [], {"backRouteName": "review.progress.overview", "disableBack": false, "parentController": get(env, context, "controller"), "disableCancel": true}, child3, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/rhev-options', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h4");
        var el2 = dom.createTextNode(" Engine Configuration ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form form-horizontal");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 1, 3]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(element0,5,5);
        var morph3 = dom.createMorphAt(element0,7,7);
        var morph4 = dom.createMorphAt(element0,9,9);
        var morph5 = dom.createMorphAt(fragment,4,4,contextualElement);
        inline(env, morph0, context, "text-f", [], {"label": "Root password for Engine & Hypervisor", "type": "password", "value": get(env, context, "rhev_root_password"), "cssId": "rhev_root_password", "isRequired": true, "disabled": get(env, context, "controllers.deployment.isStarted"), "minChars": 8, "help-inline": "must be 8 or more characters", "placeholder": "must be 8 or more characters"});
        inline(env, morph1, context, "text-f", [], {"label": "Engine admin password", "type": "password", "value": get(env, context, "rhev_engine_admin_password"), "cssId": "rhev_engine_admin_password", "isRequired": true, "disabled": get(env, context, "controllers.deployment.isStarted"), "minChars": 8, "help-inline": "must be 8 or more characters", "placeholder": "must be 8 or more characters"});
        inline(env, morph2, context, "text-f", [], {"label": "Datacenter Name", "value": get(env, context, "rhev_database_name"), "placeholder": "Leave blank for default", "cssId": "rhev_database_name", "disabled": get(env, context, "controllers.deployment.isStarted"), "isAlphaNumeric": true});
        inline(env, morph3, context, "text-f", [], {"label": "Cluster Name", "value": get(env, context, "rhev_cluster_name"), "placeholder": "Leave blank for default", "cssId": "rhev_cluster_name", "disabled": get(env, context, "controllers.deployment.isStarted"), "isAlphaNumeric": true});
        inline(env, morph4, context, "select-simple-f", [], {"label": "CPU Type", "content": get(env, context, "cpuTypes"), "value": get(env, context, "rhev_cpu_type"), "prompt": "Leave blank for default", "cssId": "rhev_cpu_type", "disabled": get(env, context, "controllers.deployment.isStarted")});
        inline(env, morph5, context, "cancel-back-next", [], {"backRouteName": get(env, context, "optionsBackRouteName"), "disableBack": false, "nextRouteName": "storage", "disableNext": get(env, context, "disableNextRhevOptions"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/rhev-setup', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Self-hosted\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element1, 'class');
          attribute(env, attrMorph0, element1, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "controllers.deployment.isStarted"), "disabled"], {})]));
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n        Hypervisor + engine\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element0, 'class');
          attribute(env, attrMorph0, element0, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "controllers.deployment.isStarted"), "disabled"], {})]));
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select the setup type.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element2, [3]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(element2, [5]),1,1);
        var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
        block(env, morph0, context, "radio-button", [], {"value": "selfhost", "groupValue": get(env, context, "rhevSetup"), "changed": "rhevSetupChanged", "id": "selfhost", "disabled": get(env, context, "controllers.deployment.isStarted")}, child0, null);
        block(env, morph1, context, "radio-button", [], {"value": "rhevhost", "groupValue": get(env, context, "rhevSetup"), "changed": "rhevSetupChanged", "id": "rhevhost", "disabled": get(env, context, "controllers.deployment.isStarted")}, child1, null);
        inline(env, morph2, context, "cancel-back-next", [], {"backRouteName": "configure-environment", "disableBack": false, "nextRouteName": "engine.discovered-host", "disableNext": false, "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/rhev', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("2A. Setup Type");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("2B. ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            content(env, morph0, context, "engineTabName");
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createTextNode("2C. Hypervisors");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "link-to", ["hypervisor"], {"tagName": "li", "disabled": get(env, context, "disableTabRhevHypervisors")}, child0, null);
            return fragment;
          }
        };
      }());
      var child3 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(". Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            inline(env, morph0, context, "if", [get(env, context, "isSelfHost"), "2C", "2D"], {});
            return fragment;
          }
        };
      }());
      var child4 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(". Storage");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            inline(env, morph0, context, "if", [get(env, context, "isSelfHost"), "2D", "2E"], {});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          var morph3 = dom.createMorphAt(fragment,7,7,contextualElement);
          var morph4 = dom.createMorphAt(fragment,9,9,contextualElement);
          block(env, morph0, context, "link-to", ["rhev-setup"], {"tagName": "li", "disabled": get(env, context, "disableTabRhevSetupType")}, child0, null);
          block(env, morph1, context, "link-to", ["engine"], {"tagName": "li", "disabled": get(env, context, "disableTabRhevEngine")}, child1, null);
          block(env, morph2, context, "unless", [get(env, context, "isSelfHost")], {}, child2, null);
          block(env, morph3, context, "link-to", ["rhev-options"], {"tagName": "li", "disabled": get(env, context, "disableTabRhevConfiguration")}, child3, null);
          block(env, morph4, context, "link-to", ["storage"], {"tagName": "li", "disabled": get(env, context, "disableTabRhevStorage")}, child4, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "wizard-step", [], {"outlet": get(env, context, "outlet")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/satellite', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("1A. Deployment Name");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("1B. Configure Organization");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("1C. Configure Lifecycle Environment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
          var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);
          block(env, morph0, context, "link-to", [get(env, context, "satelliteTabRouteName")], {"tagName": "li", "disabled": get(env, context, "disableTabDeploymentName")}, child0, null);
          block(env, morph1, context, "link-to", [get(env, context, "organizationTabRouteName")], {"tagName": "li", "disabled": get(env, context, "disableTabConfigureOrganization")}, child1, null);
          block(env, morph2, context, "link-to", [get(env, context, "lifecycleEnvironmentTabRouteName")], {"tagName": "li", "disabled": get(env, context, "disableTabLifecycleEnvironment")}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "wizard-step", [], {"outlet": get(env, context, "outlet")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/satellite/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form-horizontal");
        dom.setAttribute(el3,"role","form");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(fragment,2,2,contextualElement);
        inline(env, morph0, context, "text-f", [], {"label": "Name", "value": get(env, context, "model.name"), "inputSize": "col-md-5", "errors": get(env, context, "errors"), "cssId": get(env, context, "idSatName"), "isRequired": true, "disabled": get(env, context, "isStarted"), "isUnique": true, "uniqueValues": get(env, context, "deploymentNames")});
        inline(env, morph1, context, "textarea-f", [], {"label": "Description (Optional)", "value": get(env, context, "model.description"), "inputSize": "col-md-5", "cssId": get(env, context, "idSatDesc"), "disabled": get(env, context, "isStarted")});
        inline(env, morph2, context, "cancel-back-next", [], {"backRouteName": get(env, context, "backRouteNameOnSatIndex"), "disableBack": false, "nextRouteName": get(env, context, "organizationTabRouteName"), "disableNext": get(env, context, "disableNextOnDeploymentName"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "isStarted")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/satellite/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "loading-spinner", [], {"show": true, "text": "Loading..."});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/storage', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          var el2 = dom.createTextNode(" Data Domain ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        NFS\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element2 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element2, 'class');
            attribute(env, attrMorph0, element2, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "controllers.deployment.isStarted"), "disabled"], {})]));
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        Local\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element1 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element1, 'class');
            attribute(env, attrMorph0, element1, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "controllers.deployment.isStarted"), "disabled"], {})]));
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        Gluster\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            var attrMorph0 = dom.createAttrMorph(element0, 'class');
            attribute(env, attrMorph0, element0, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "controllers.deployment.isStarted"), "disabled"], {})]));
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          dom.insertBoundary(fragment, null);
          block(env, morph0, context, "radio-button", [], {"value": "NFS", "groupValue": get(env, context, "rhev_storage_type"), "id": "nfs", "disabled": get(env, context, "controllers.deployment.isStarted")}, child0, null);
          block(env, morph1, context, "radio-button", [], {"value": "Local", "groupValue": get(env, context, "rhev_storage_type"), "id": "local", "disabled": get(env, context, "controllers.deployment.isStarted")}, child1, null);
          block(env, morph2, context, "radio-button", [], {"value": "Gluster", "groupValue": get(env, context, "rhev_storage_type"), "id": "gluster", "disabled": get(env, context, "controllers.deployment.isStarted")}, child2, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            var el2 = dom.createTextNode(" Export Domain ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);
            var morph1 = dom.createMorphAt(fragment,5,5,contextualElement);
            var morph2 = dom.createMorphAt(fragment,7,7,contextualElement);
            inline(env, morph0, context, "text-f", [], {"label": "Export Domain Name", "value": get(env, context, "rhev_export_domain_name"), "cssId": "rhev_export_domain_name", "isRequired": true, "disabled": get(env, context, "controllers.deployment.isStarted"), "isAlphaNumeric": true});
            inline(env, morph1, context, "text-f", [], {"label": "Storage Address", "value": get(env, context, "rhev_export_domain_address"), "cssId": "rhev_export_domain_address", "isRequired": true, "disabled": get(env, context, "controllers.deployment.isStarted"), "isHostname": true});
            inline(env, morph2, context, "text-f", [], {"label": "Share Path", "value": get(env, context, "rhev_export_domain_path"), "cssId": "rhev_export_domain_path", "isRequired": true, "disabled": get(env, context, "controllers.deployment.isStarted"), "errors": get(env, context, "errorsHashExportPath")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          var morph3 = dom.createMorphAt(fragment,7,7,contextualElement);
          inline(env, morph0, context, "text-f", [], {"label": "Data Domain Name", "value": get(env, context, "rhev_storage_name"), "isRequired": true, "cssId": "rhev_storage_name", "disabled": get(env, context, "controllers.deployment.isStarted"), "isAlphaNumeric": true});
          inline(env, morph1, context, "text-f", [], {"label": "Storage Address", "value": get(env, context, "rhev_storage_address"), "isRequired": true, "cssId": "rhev_storage_address", "disabled": get(env, context, "controllers.deployment.isStarted"), "isHostname": true});
          inline(env, morph2, context, "text-f", [], {"label": "Share Path", "value": get(env, context, "rhev_share_path"), "isRequired": true, "cssId": "rhev_share_path", "disabled": get(env, context, "controllers.deployment.isStarted"), "errors": get(env, context, "errorsHashSharePath")});
          block(env, morph3, context, "if", [get(env, context, "isCloudForms")], {}, child0, null);
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "text-f", [], {"label": "Storage Path", "value": get(env, context, "rhev_local_storage_path"), "placeholder": "Ex. /rhev/data_storage", "isRequired": true, "cssId": "rhev_local_storage_path", "help-inline": "This path will be created and given appropriate permissions - chown 36:36;chmod 0755, etc", "disabled": get(env, context, "controllers.deployment.isStarted")});
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n  ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
              var morph3 = dom.createMorphAt(fragment,7,7,contextualElement);
              inline(env, morph0, context, "text-f", [], {"label": "Node Name", "value": get(env, context, "rhev_gluster_node_name"), "placeholder": "Ex. node.example.com", "isRequired": true, "cssId": "rhev_gluster_node_name", "isRequired": true, "disabled": get(env, context, "controllers.deployment.isStarted")});
              inline(env, morph1, context, "text-f", [], {"label": "Node Address", "value": get(env, context, "rhev_gluster_node_address"), "placeholder": "Ex. 1.2.3.4", "isRequired": true, "cssId": "rhev_gluster_node_address", "disabled": get(env, context, "controllers.deployment.isStarted")});
              inline(env, morph2, context, "text-f", [], {"label": "SSH Port", "value": get(env, context, "rhev_gluster_ssh_port"), "isRequired": true, "cssId": "rhev_gluster_ssh_port", "disabled": get(env, context, "controllers.deployment.isStarted")});
              inline(env, morph3, context, "text-f", [], {"label": "Root Password", "value": get(env, context, "rhev_gluster_root_password"), "isRequired": true, "cssId": "rhev_gluster_root_password", "type": "password", "disabled": get(env, context, "controllers.deployment.isStarted")});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "isGluster")], {}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "isLocal")], {}, child0, child1);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"class","form form-horizontal");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element3 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(element3,1,1);
        var morph2 = dom.createMorphAt(element3,2,2);
        var morph3 = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isCloudForms")], {}, child0, null);
        block(env, morph1, context, "base-f", [], {"label": "Storage Type", "isRequired": true}, child1, null);
        block(env, morph2, context, "if", [get(env, context, "isNFS")], {}, child2, child3);
        inline(env, morph3, context, "cancel-back-next", [], {"backRouteName": "rhev-options", "disableBack": false, "nextRouteName": get(env, context, "step3RouteName"), "disableNext": get(env, context, "disableNextStorage"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("A. Red Hat Login");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberSubscriptions");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("B. Subscription Management Application");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberSubscriptions");
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("C. Subscriptions");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            content(env, morph0, context, "stepNumberSubscriptions");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" <a>4C. Entitlements</a> ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" <a>4C. Pools</a> ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
          var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);
          block(env, morph0, context, "link-to", ["subscriptions.credentials"], {"tagName": "li", "disabled": get(env, context, "disableTabCredentials")}, child0, null);
          block(env, morph1, context, "link-to", ["subscriptions.management-application"], {"tagName": "li", "disabled": get(env, context, "disableTabManagementApplication")}, child1, null);
          block(env, morph2, context, "link-to", ["subscriptions.select-subscriptions"], {"tagName": "li", "disabled": get(env, context, "disableTabSelectSubsciptions")}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "wizard-step", [], {"outlet": get(env, context, "outlet")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/credentials', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-info rhci-alert");
          var el4 = dom.createTextNode("\n          This deployment already has a subscription management application ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" assigned to it.\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 1]),0,0);
          content(env, morph0, context, "upstreamConsumerName");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","col-md-9");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","alert alert-info rhci-alert");
            var el4 = dom.createTextNode("\n          There is already a manifest uploaded for your organization: ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("strong");
            var el5 = dom.createTextNode(" ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 1]),1,1);
            content(env, morph0, context, "organizationUpstreamConsumerName");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "hasOrganizationUpstreamConsumerUUID")], {}, child0, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-success rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-check-circle-o green-circle");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          You are already successfully authenticated as ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" with the Red Hat Customer Portal.\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("p");
          dom.setAttribute(el4,"style","margin-left:30px;");
          var el5 = dom.createTextNode("\n            You may ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          var el6 = dom.createTextNode("logout");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" and then login as a different user.\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1, 1, 1]);
          var element2 = dom.childAt(element1, [5, 1]);
          var morph0 = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
          content(env, morph0, context, "model.identification");
          element(env, element2, context, "action", ["logoutPortal"], {});
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
          content(env, morph0, context, "errorMsg");
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"href","https://www.redhat.com/wapps/sso/lostPassword.html");
            dom.setAttribute(el1,"target","_blank");
            var el2 = dom.createTextNode("\n            Forgot your login or password?\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\nEnter your Red Hat account information.\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("br");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("form");
          dom.setAttribute(el3,"class","form form-horizontal");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment(" invisble input password is hack to remove chrome autocomplete ");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4,"style","display:none");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4,"type","password");
          dom.setAttribute(el4,"style","display:none");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1, 3]);
          var morph0 = dom.createMorphAt(element0,7,7);
          var morph1 = dom.createMorphAt(element0,9,9);
          var morph2 = dom.createMorphAt(element0,11,11);
          inline(env, morph0, context, "text-f", [], {"label": "Red Hat login", "value": get(env, context, "model.identification")});
          inline(env, morph1, context, "text-f", [], {"label": "Password", "value": get(env, context, "password"), "type": "password"});
          block(env, morph2, context, "base-f", [], {}, child0, null);
          return fragment;
        }
      };
    }());
    var child5 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-angle-right");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "nextButtonTitle");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "button-f", [], {"disabled": get(env, context, "disableCredentialsNext"), "action": get(env, context, "actionCredentialsNext")}, child0, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
        var morph3 = dom.createMorphAt(fragment,6,6,contextualElement);
        var morph4 = dom.createMorphAt(fragment,8,8,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "hasUpstreamConsumerUuid")], {}, child0, child1);
        block(env, morph1, context, "if", [get(env, context, "model.isAuthenticated")], {}, child2, null);
        block(env, morph2, context, "if", [get(env, context, "showErrorMessage")], {}, child3, null);
        block(env, morph3, context, "unless", [get(env, context, "model.isAuthenticated")], {}, child4, null);
        block(env, morph4, context, "cancel-back-next", [], {"backRouteName": get(env, context, "backRouteNameonCredentials"), "disableBack": false, "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")}, child5, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "loading-spinner", [], {"show": true, "text": "Loading from Red Hat Customer Portal ..."});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/management-application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","col-md-9");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","alert alert-success rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4,"class","fa fa-2x fa-check-circle-o green-circle");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n           \n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" added successfully.\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
            content(env, morph0, context, "newSatelliteName");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          New Subscription Management Application\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "tr-management-app", [], {"managementApp": get(env, context, "managementApp"), "consumerUUID": get(env, context, "sessionPortal.consumerUUID"), "action": "selectManagementApp", "disabled": get(env, context, "controllers.deployment.isStarted")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","pull-right");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3,"class","table table-bordered");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("thead");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Name");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Subscriptions Attached");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("UUID");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tbody");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(dom.childAt(fragment, [3, 1, 1]),1,1);
          var morph2 = dom.createMorphAt(dom.childAt(fragment, [7, 1, 1, 3]),1,1);
          var morph3 = dom.createMorphAt(fragment,9,9,contextualElement);
          var morph4 = dom.createMorphAt(fragment,11,11,contextualElement);
          block(env, morph0, context, "if", [get(env, context, "showAlertMessage")], {}, child0, null);
          block(env, morph1, context, "em-modal-toggler", [], {"modal-id": "registerNewSatellite", "class": "btn btn-primary", "disabled": get(env, context, "controllers.deployment.isStarted")}, child1, null);
          block(env, morph2, context, "each", [get(env, context, "model")], {"keyword": "managementApp"}, child2, null);
          inline(env, morph3, context, "partial", ["new-satellite"], {});
          inline(env, morph4, context, "cancel-back-next", [], {"backRouteName": "subscriptions.credentials", "disableBack": false, "nextRouteName": "subscriptions.select-subscriptions", "disableNext": get(env, context, "disableNextOnManagementApp"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        block(env, morph1, context, "if", [get(env, context, "showManagementApplications")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/management-application.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading from Red Hat Customer Portal ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/management-application/consumer', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/management-application/consumer/entitlements', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" - ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" - ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" - ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" - ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element1,1,1);
          var morph1 = dom.createMorphAt(element1,3,3);
          var morph2 = dom.createMorphAt(element1,5,5);
          var morph3 = dom.createMorphAt(element1,7,7);
          var morph4 = dom.createMorphAt(element1,9,9);
          content(env, morph0, context, "entitlement.contractNumber");
          content(env, morph1, context, "entitlement.quantity");
          content(env, morph2, context, "entitlement.endDate");
          content(env, morph3, context, "entitlement.consumed");
          content(env, morph4, context, "entitlement.poolQuantity");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("List of Entitlements");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" - ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" - ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element0 = dom.childAt(fragment, [1]);
                var morph0 = dom.createMorphAt(element0,1,1);
                var morph1 = dom.createMorphAt(element0,3,3);
                var morph2 = dom.createMorphAt(element0,5,5);
                content(env, morph0, context, "entitlement.contractNumber");
                content(env, morph1, context, "entitlement.quantity");
                content(env, morph2, context, "entitlement.endDate");
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h1");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Subscriptions Attached");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              content(env, morph0, context, "totalQuantity");
              block(env, morph1, context, "each", [get(env, context, "model")], {"keyword": "entitlement"}, child0, null);
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Loading ...\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "model.isLoaded")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          Close\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Entitlements");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" Subscriptions Attached");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment(" HOW TO INTERATE AND ONLY SHOW UNIQUE ROWS ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [4]),0,0);
        var morph2 = dom.createMorphAt(fragment,6,6,contextualElement);
        var morph3 = dom.createMorphAt(fragment,10,10,contextualElement);
        var morph4 = dom.createMorphAt(fragment,12,12,contextualElement);
        content(env, morph0, context, "upstream_consumer_uuid");
        content(env, morph1, context, "totalQuantity");
        block(env, morph2, context, "each", [get(env, context, "model")], {"keyword": "entitlement"}, child0, null);
        block(env, morph3, context, "em-modal", [], {"configName": "bs", "id": "entitlementsModal"}, child1, null);
        content(env, morph4, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/management-application/consumer/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","spinner spinner-md spinner-inline");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","spinner-text");
        var el2 = dom.createTextNode("\n  Loading from Red Hat Customer Portal ...\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/management-application/consumer/pools', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          Quantity should be greater than zero and should not exceed the number of available subscriptions for this product.\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "tr-subscription", [], {"subscription": get(env, context, "subscription"), "numSubscriptionsRequired": get(env, context, "numSubscriptionsRequired")});
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"colspan","8");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3,"class","no_subscriptions");
          var el4 = dom.createTextNode("\n              No subscriptions found. Check your account in in the ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","https://idp.redhat.com/idp/");
          dom.setAttribute(el4,"target","_blank");
          var el5 = dom.createTextNode("Red Hat Customer Portal");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" to verify you have subscriptions available.\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n    If you need to attach more subscriptions to ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" for the components of your RHCI deployment, please do so before proceeding.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      Enable Red Hat Access Insights for this deployment\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3,"class","table table-bordered small");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Subscription Name ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Contract Number ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" System Type ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Start Date ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" End Date ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Attached ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Available ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Quantity ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content, inline = hooks.inline, attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(element0, [5]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
        var morph2 = dom.createMorphAt(element0,3,3);
        var attrMorph0 = dom.createAttrMorph(element1, 'class');
        var morph3 = dom.createMorphAt(dom.childAt(element0, [11, 3]),1,1);
        var morph4 = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "showErrorMessage")], {}, child0, null);
        content(env, morph1, context, "controllers.deployment.upstream_consumer_name");
        inline(env, morph2, context, "input", [], {"type": "checkbox", "name": "enable_access_insights", "disabled": false, "checked": get(env, context, "enable_access_insights")});
        attribute(env, attrMorph0, element1, "class", get(env, context, "analyticsColor"));
        block(env, morph3, context, "each", [get(env, context, "model")], {"keyword": "subscription"}, child1, child2);
        inline(env, morph4, context, "cancel-back-next", [], {"backRouteName": "subscriptions.management-application", "disableBack": false, "nextRouteName": "review", "disableNext": get(env, context, "disableNextOnSelectSubscriptions"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/management-application/consumer/pools.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("ppools.loading.hbs");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/management-application/consumer/pools/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("loading poooooooools");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/select-subscriptions', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          Quantity should be greater than zero and should not exceed the number of available subscriptions for this product.\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","spinner-text");
          var el2 = dom.createTextNode("\n        Loading from Red Hat Customer Portal ...\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","row");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","col-md-9");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","alert alert-danger rhci-alert");
              var el4 = dom.createTextNode("\n                  You previously selected subscriptions (Contract Number ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(") that are no longer available to be selected in the pool.\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),1,1);
              content(env, morph0, context, "contractNumbersInModelNotInPool");
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                inline(env, morph0, context, "tr-subscription", [], {"subscription": get(env, context, "subscription"), "numSubscriptionsRequired": get(env, context, "numSubscriptionsRequired"), "model": get(env, context, "model")});
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2,"colspan","8");
                var el3 = dom.createTextNode("\n                  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("p");
                dom.setAttribute(el3,"class","no_subscriptions");
                var el4 = dom.createTextNode("\n                    No subscriptions found. Check your account in in the ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","https://idp.redhat.com/idp/");
                dom.setAttribute(el4,"target","_blank");
                var el5 = dom.createTextNode("Red Hat Customer Portal");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" to verify you have subscriptions available.\n                  ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("table");
              dom.setAttribute(el1,"class","table table-bordered small");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("thead");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("tr");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Subscription Name ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Contract Number ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" System Type ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Start Date ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" End Date ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Attached ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Available ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Quantity ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("tbody");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);
              block(env, morph0, context, "each", [get(env, context, "subscriptionPools")], {"keyword": "subscription"}, child0, child1);
              return fragment;
            }
          };
        }());
        var child2 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                  inline(env, morph0, context, "tr-subscription-saved", [], {"subscription": get(env, context, "sub")});
                  return fragment;
                }
              };
            }());
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","alert alert-danger rhci-alert");
                var el2 = dom.createTextNode("\n                        Below are the subscriptions that you previously saved with the deployment.\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("table");
                dom.setAttribute(el1,"class","table table-bordered small");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("thead");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("tr");
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" Subscription Name ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" Contract Number ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" Quantity ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("tbody");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(dom.childAt(fragment, [3, 3]),1,1);
                block(env, morph0, context, "each", [get(env, context, "model")], {"keyword": "sub"}, child0, null);
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","col-md-9");
              var el2 = dom.createTextNode("\n\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","alert alert-info rhci-alert");
              var el3 = dom.createTextNode("\n                    You have no additional subscriptions to add to this subscription management application. Please see the\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3,"href","https://idp.redhat.com/idp/");
              dom.setAttribute(el3,"target","_blank");
              var el4 = dom.createTextNode("Red Hat Customer Portal");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" for more information.\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);
              block(env, morph0, context, "if", [get(env, context, "hasSubscriptionSavedInModel")], {}, child0, null);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            block(env, morph0, context, "if", [get(env, context, "hasContractNumbersInModelNotInPool")], {}, child0, null);
            block(env, morph1, context, "if", [get(env, context, "hasSubscriptionPools")], {}, child1, child2);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "tr-subscription-saved", [], {"subscription": get(env, context, "sub")});
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2,"colspan","4");
              var el3 = dom.createTextNode("\n                    No subscriptions were attached to deployment\n                  ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1,"class","table table-bordered small");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("thead");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tr");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" Subscription Name ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" Contract Number ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" Quantity ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tbody");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);
            block(env, morph0, context, "each", [get(env, context, "model")], {"keyword": "sub"}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Next");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            element(env, element0, context, "action", ["saveSubscriptions", "review"], {});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("\n    If you need to attach more subscriptions to ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" for the components of your RHCI deployment, please do so before proceeding.\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("\n      Enable Red Hat Access Insights for this deployment\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("br");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("br");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline, attribute = hooks.attribute, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [0, 1]);
          var element2 = dom.childAt(element1, [5]);
          var morph0 = dom.createMorphAt(dom.childAt(element1, [1, 1]),0,0);
          var morph1 = dom.createMorphAt(element1,3,3);
          var attrMorph0 = dom.createAttrMorph(element2, 'class');
          var morph2 = dom.createMorphAt(element1,11,11);
          var morph3 = dom.createMorphAt(fragment,2,2,contextualElement);
          content(env, morph0, context, "controllers.deployment.model.upstream_consumer_name");
          inline(env, morph1, context, "input", [], {"type": "checkbox", "name": "enable_access_insights", "disabled": get(env, context, "isStarted"), "checked": get(env, context, "enableAccessInsights")});
          attribute(env, attrMorph0, element2, "class", get(env, context, "analyticsColor"));
          block(env, morph2, context, "unless", [get(env, context, "isStarted")], {}, child0, child1);
          block(env, morph3, context, "cancel-back-next", [], {"backRouteName": "subscriptions.management-application", "disableBack": false, "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "showErrorMessage")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "isLoading")], {}, child1, child2);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/undercloud-deploy', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","col-md-9");
            dom.setAttribute(el1,"style","padding-top: 10px;");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","alert alert-danger");
            dom.setAttribute(el2,"style","margin-bottom: 0px;");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","pficon pficon-error-circle-o");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                Undercloud detection failed: ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),3,3);
            content(env, morph0, context, "deploymentError");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("form");
          dom.setAttribute(el3,"class","form-horizontal");
          dom.setAttribute(el3,"role","form");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4,"class","btn btn-primary pull-left");
          var el5 = dom.createTextNode("\n            Detect Undercloud\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, attribute = hooks.attribute, element = hooks.element, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [0, 1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element2, [7]);
          var morph0 = dom.createMorphAt(element2,1,1);
          var morph1 = dom.createMorphAt(element2,3,3);
          var morph2 = dom.createMorphAt(element2,5,5);
          var attrMorph0 = dom.createAttrMorph(element3, 'disabled');
          var morph3 = dom.createMorphAt(element1,3,3);
          inline(env, morph0, context, "text-f", [], {"label": "Undercloud IP", "value": get(env, context, "undercloudIP"), "labelSize": "deploy-undercloud-param-label", "inputSize": "deploy-undercloud-param-input", "isRequired": true, "helpText": get(env, context, "undercloudIPHelp")});
          inline(env, morph1, context, "text-f", [], {"label": "SSH User", "value": get(env, context, "sshUser"), "labelSize": "deploy-undercloud-param-label", "inputSize": "deploy-undercloud-param-input", "isRequired": true});
          inline(env, morph2, context, "text-f", [], {"label": "SSH Password", "value": get(env, context, "sshPassword"), "labelSize": "deploy-undercloud-param-label", "inputSize": "deploy-undercloud-param-input", "isRequired": true});
          attribute(env, attrMorph0, element3, "disabled", get(env, context, "deployDisabled"));
          element(env, element3, context, "action", ["deployUndercloud"], {});
          block(env, morph3, context, "if", [get(env, context, "deploymentError")], {}, child0, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","col-md-9");
          dom.setAttribute(el3,"style","padding-top: 10px;");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","alert alert-success");
          dom.setAttribute(el4,"style","margin-bottom: 0px;");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5,"class","pficon pficon-ok");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            Undercloud has been successfully detected. If you want to connect to a different undercloud ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          var el6 = dom.createTextNode(" click here to enter new credentials");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(".\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [0, 1, 1, 1, 3]);
          element(env, element0, context, "action", ["resetCredentials"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "unless", [get(env, context, "deployed")], {}, child0, child1);
        inline(env, morph1, context, "cancel-back-next", [], {"backRouteName": get(env, context, "backRouteNameUndercloud"), "disableBack": false, "nextRouteName": "register-nodes", "disableNext": get(env, context, "disableDeployUndercloudNext"), "parentController": get(env, context, "controller")});
        inline(env, morph2, context, "loading-spinner", [], {"show": get(env, context, "showLoadingSpinner"), "text": get(env, context, "loadingSpinnerText")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/where-install', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Install CloudForms on Red Hat Enterprise Virtualization\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element1, 'class');
          attribute(env, attrMorph0, element1, "class", concat(env, [subexpr(env, context, "if", [get(env, context, "disableRHEV"), "disabled"], {})]));
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Install CloudForms on Red Hat Enterprise Linux OpenStack Platform\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2,"style","margin-left:16px;");
          var el3 = dom.createTextNode("\n            Able to split virtualization workloads across multiple controller nodes\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var attrMorph0 = dom.createAttrMorph(element0, 'class');
          attribute(env, attrMorph0, element0, "class", concat(env, ["inline-block ", subexpr(env, context, "if", [get(env, context, "disableOpenStack"), "disabled"], {})]));
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select a product to create and manage virtual machines.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element2, [3]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(element2, [5]),1,1);
        var morph2 = dom.createMorphAt(fragment,2,2,contextualElement);
        block(env, morph0, context, "radio-button", [], {"value": "RHEV", "groupValue": get(env, context, "cfmeInstallLoc"), "changed": "cfmeLocationChanged", "id": "install_on_rhev", "disabled": get(env, context, "disableRHEVradio")}, child0, null);
        block(env, morph1, context, "radio-button", [], {"value": "OpenStack", "groupValue": get(env, context, "cfmeInstallLoc"), "changed": "cfmeLocationChanged", "id": "install_on_openstack", "disabled": get(env, context, "disableOpenstackradio")}, child1, null);
        inline(env, morph2, context, "cancel-back-next", [], {"backRouteName": get(env, context, "backRouteName"), "disableBack": false, "nextRouteName": "cloudforms.cfme-configuration", "disableNext": get(env, context, "controllers.cloudforms.hasNoInstallLocation"), "parentController": get(env, context, "controller"), "disableCancel": get(env, context, "controllers.deployment.isStarted")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/tests/acceptance/user-can-view-deployments-test', ['ember', 'qunit', 'fusor-ember-cli/tests/helpers/start-app'], function (Ember, qunit, startApp) {

  'use strict';

  var application;

  qunit.module('Acceptance | user can view deployments', {
    beforeEach: function beforeEach() {
      application = startApp['default']();
    },

    afterEach: function afterEach() {
      Ember['default'].run(application, 'destroy');
    }
  });

  qunit.test('visiting /user-can-view-deployments', function (assert) {
    visit('/deployments');

    andThen(function () {
      assert.equal(currentURL(), '/deployments');
    });
  });

});
define('fusor-ember-cli/tests/acceptance/user-can-view-deployments-test.jshint', function () {

  'use strict';

  module('JSHint - acceptance');
  test('acceptance/user-can-view-deployments-test.js should pass jshint', function() { 
    ok(true, 'acceptance/user-can-view-deployments-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/application.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/application.js should pass jshint', function() { 
    ok(true, 'adapters/application.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/deployment-plan.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/deployment-plan.js should pass jshint', function() { 
    ok(true, 'adapters/deployment-plan.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/deployment.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/deployment.js should pass jshint', function() { 
    ok(true, 'adapters/deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/entitlement.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/entitlement.js should pass jshint', function() { 
    ok(true, 'adapters/entitlement.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/flavor.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/flavor.js should pass jshint', function() { 
    ok(true, 'adapters/flavor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/foreman-task.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/foreman-task.js should pass jshint', function() { 
    ok(true, 'adapters/foreman-task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/image.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/image.js should pass jshint', function() { 
    ok(true, 'adapters/image.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/management-application.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/management-application.js should pass jshint', function() { 
    ok(true, 'adapters/management-application.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/node.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/node.js should pass jshint', function() { 
    ok(true, 'adapters/node.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/pool.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/pool.js should pass jshint', function() { 
    ok(true, 'adapters/pool.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/session-portal.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/session-portal.js should pass jshint', function() { 
    ok(true, 'adapters/session-portal.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/adapters/subscription.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/subscription.js should pass jshint', function() { 
    ok(true, 'adapters/subscription.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/accordion-item.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/accordion-item.js should pass jshint', function() { 
    ok(true, 'components/accordion-item.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/base-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/base-f.js should pass jshint', function() { 
    ok(true, 'components/base-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/base-popover.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/base-popover.js should pass jshint', function() { 
    ok(true, 'components/base-popover.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/button-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/button-f.js should pass jshint', function() { 
    ok(true, 'components/button-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/cancel-back-next.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/cancel-back-next.js should pass jshint', function() { 
    ok(true, 'components/cancel-back-next.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/debug-info.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/debug-info.js should pass jshint', function() { 
    ok(true, 'components/debug-info.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/delete-deployment-button.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/delete-deployment-button.js should pass jshint', function() { 
    ok(true, 'components/delete-deployment-button.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/deployment-role.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/deployment-role.js should pass jshint', function() { 
    ok(true, 'components/deployment-role.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/env-path-list-item.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/env-path-list-item.js should pass jshint', function() { 
    ok(true, 'components/env-path-list-item.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/error-message.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/error-message.js should pass jshint', function() { 
    ok(true, 'components/error-message.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/file-upload-form.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/file-upload-form.js should pass jshint', function() { 
    ok(true, 'components/file-upload-form.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/hypervisor-name.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/hypervisor-name.js should pass jshint', function() { 
    ok(true, 'components/hypervisor-name.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/node-profile.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/node-profile.js should pass jshint', function() { 
    ok(true, 'components/node-profile.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/progress-bar.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/progress-bar.js should pass jshint', function() { 
    ok(true, 'components/progress-bar.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/radio-button-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/radio-button-f.js should pass jshint', function() { 
    ok(true, 'components/radio-button-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/range-text-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/range-text-f.js should pass jshint', function() { 
    ok(true, 'components/range-text-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/review-link.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/review-link.js should pass jshint', function() { 
    ok(true, 'components/review-link.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/rhci-item.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/rhci-item.js should pass jshint', function() { 
    ok(true, 'components/rhci-item.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/rhci-start.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/rhci-start.js should pass jshint', function() { 
    ok(true, 'components/rhci-start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/rhci-wizard.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/rhci-wizard.js should pass jshint', function() { 
    ok(true, 'components/rhci-wizard.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/select-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/select-f.js should pass jshint', function() { 
    ok(true, 'components/select-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/select-simple-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/select-simple-f.js should pass jshint', function() { 
    ok(true, 'components/select-simple-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/step-number.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/step-number.js should pass jshint', function() { 
    ok(true, 'components/step-number.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/text-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/text-f.js should pass jshint', function() { 
    ok(true, 'components/text-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/textarea-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/textarea-f.js should pass jshint', function() { 
    ok(true, 'components/textarea-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-deployment.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-deployment.js should pass jshint', function() { 
    ok(true, 'components/tr-deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-engine.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-engine.js should pass jshint', function() { 
    ok(true, 'components/tr-engine.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-hypervisor.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-hypervisor.js should pass jshint', function() { 
    ok(true, 'components/tr-hypervisor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-management-app.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-management-app.js should pass jshint', function() { 
    ok(true, 'components/tr-management-app.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-organization.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-organization.js should pass jshint', function() { 
    ok(true, 'components/tr-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-subscription-saved.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-subscription-saved.js should pass jshint', function() { 
    ok(true, 'components/tr-subscription-saved.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-subscription.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-subscription.js should pass jshint', function() { 
    ok(true, 'components/tr-subscription.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-task.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-task.js should pass jshint', function() { 
    ok(true, 'components/tr-task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/traffic-type.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/traffic-type.js should pass jshint', function() { 
    ok(true, 'components/traffic-type.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/wizard-item.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/wizard-item.js should pass jshint', function() { 
    ok(true, 'components/wizard-item.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/wizard-step.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/wizard-step.js should pass jshint', function() { 
    ok(true, 'components/wizard-step.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/application.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/application.js should pass jshint', function() { 
    ok(true, 'controllers/application.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/assign-nodes.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/assign-nodes.js should pass jshint', function() { 
    ok(true, 'controllers/assign-nodes.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/cloudforms.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/cloudforms.js should pass jshint', function() { 
    ok(true, 'controllers/cloudforms.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/cloudforms/cfme-configuration.jshint', function () {

  'use strict';

  module('JSHint - controllers/cloudforms');
  test('controllers/cloudforms/cfme-configuration.js should pass jshint', function() { 
    ok(true, 'controllers/cloudforms/cfme-configuration.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/configure-environment.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/configure-environment.js should pass jshint', function() { 
    ok(true, 'controllers/configure-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/configure-organization.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/configure-organization.js should pass jshint', function() { 
    ok(true, 'controllers/configure-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/deployment-new.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/satellite.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new');
  test('controllers/deployment-new/satellite.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new/satellite.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/satellite/configure-environment.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new/satellite');
  test('controllers/deployment-new/satellite/configure-environment.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new/satellite/configure-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/satellite/configure-organization.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new/satellite');
  test('controllers/deployment-new/satellite/configure-organization.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new/satellite/configure-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/satellite/index.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new/satellite');
  test('controllers/deployment-new/satellite/index.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new/satellite/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/start.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new');
  test('controllers/deployment-new/start.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new/start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-plan.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/deployment-plan.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-plan.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-role.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/deployment-role.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-role.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/deployment.js should pass jshint', function() { 
    ok(true, 'controllers/deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment/start.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment');
  test('controllers/deployment/start.js should pass jshint', function() { 
    ok(true, 'controllers/deployment/start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployments.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/deployments.js should pass jshint', function() { 
    ok(true, 'controllers/deployments.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/discovered-host.js should pass jshint', function() { 
    ok(true, 'controllers/discovered-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/engine.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/engine.js should pass jshint', function() { 
    ok(true, 'controllers/engine.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/engine/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - controllers/engine');
  test('controllers/engine/discovered-host.js should pass jshint', function() { 
    ok(true, 'controllers/engine/discovered-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/entitlements.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/entitlements.js should pass jshint', function() { 
    ok(true, 'controllers/entitlements.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/flavor.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/flavor.js should pass jshint', function() { 
    ok(true, 'controllers/flavor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/host.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/host.js should pass jshint', function() { 
    ok(true, 'controllers/host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/hypervisor.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/hypervisor.js should pass jshint', function() { 
    ok(true, 'controllers/hypervisor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/hypervisor/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - controllers/hypervisor');
  test('controllers/hypervisor/discovered-host.js should pass jshint', function() { 
    ok(true, 'controllers/hypervisor/discovered-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/image.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/image.js should pass jshint', function() { 
    ok(true, 'controllers/image.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/new-environment.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/new-environment.js should pass jshint', function() { 
    ok(true, 'controllers/new-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/new-organization.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/new-organization.js should pass jshint', function() { 
    ok(true, 'controllers/new-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/node.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/node.js should pass jshint', function() { 
    ok(true, 'controllers/node.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/openstack-deployment.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/openstack-deployment.js should pass jshint', function() { 
    ok(true, 'controllers/openstack-deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/openstack.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/openstack.js should pass jshint', function() { 
    ok(true, 'controllers/openstack.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/register-nodes.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/register-nodes.js should pass jshint', function() { 
    ok(true, 'controllers/register-nodes.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/review.js should pass jshint', function() { 
    ok(true, 'controllers/review.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/installation.jshint', function () {

  'use strict';

  module('JSHint - controllers/review');
  test('controllers/review/installation.js should pass jshint', function() { 
    ok(true, 'controllers/review/installation.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/progress.jshint', function () {

  'use strict';

  module('JSHint - controllers/review');
  test('controllers/review/progress.js should pass jshint', function() { 
    ok(true, 'controllers/review/progress.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/progress/details/task.jshint', function () {

  'use strict';

  module('JSHint - controllers/review/progress/details');
  test('controllers/review/progress/details/task.js should pass jshint', function() { 
    ok(true, 'controllers/review/progress/details/task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/progress/details/task/index.jshint', function () {

  'use strict';

  module('JSHint - controllers/review/progress/details/task');
  test('controllers/review/progress/details/task/index.js should pass jshint', function() { 
    ok(true, 'controllers/review/progress/details/task/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/progress/overview.jshint', function () {

  'use strict';

  module('JSHint - controllers/review/progress');
  test('controllers/review/progress/overview.js should pass jshint', function() { 
    ok(true, 'controllers/review/progress/overview.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/summary.jshint', function () {

  'use strict';

  module('JSHint - controllers/review');
  test('controllers/review/summary.js should pass jshint', function() { 
    ok(true, 'controllers/review/summary.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/rhev-options.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/rhev-options.js should pass jshint', function() { 
    ok(true, 'controllers/rhev-options.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/rhev-setup.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/rhev-setup.js should pass jshint', function() { 
    ok(true, 'controllers/rhev-setup.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/rhev.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/rhev.js should pass jshint', function() { 
    ok(true, 'controllers/rhev.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/satellite.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/satellite.js should pass jshint', function() { 
    ok(true, 'controllers/satellite.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/satellite/index.jshint', function () {

  'use strict';

  module('JSHint - controllers/satellite');
  test('controllers/satellite/index.js should pass jshint', function() { 
    ok(true, 'controllers/satellite/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/storage.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/storage.js should pass jshint', function() { 
    ok(true, 'controllers/storage.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/subscriptions.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions/credentials.jshint', function () {

  'use strict';

  module('JSHint - controllers/subscriptions');
  test('controllers/subscriptions/credentials.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions/credentials.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions/management-application.jshint', function () {

  'use strict';

  module('JSHint - controllers/subscriptions');
  test('controllers/subscriptions/management-application.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions/management-application.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions/management-application/consumer.jshint', function () {

  'use strict';

  module('JSHint - controllers/subscriptions/management-application');
  test('controllers/subscriptions/management-application/consumer.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions/management-application/consumer.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions/management-application/consumer/entitlements.jshint', function () {

  'use strict';

  module('JSHint - controllers/subscriptions/management-application/consumer');
  test('controllers/subscriptions/management-application/consumer/entitlements.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions/management-application/consumer/entitlements.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions/management-application/consumer/pools.jshint', function () {

  'use strict';

  module('JSHint - controllers/subscriptions/management-application/consumer');
  test('controllers/subscriptions/management-application/consumer/pools.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions/management-application/consumer/pools.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions/select-subscriptions.jshint', function () {

  'use strict';

  module('JSHint - controllers/subscriptions');
  test('controllers/subscriptions/select-subscriptions.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions/select-subscriptions.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/undercloud-deploy.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/undercloud-deploy.js should pass jshint', function() { 
    ok(true, 'controllers/undercloud-deploy.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/where-install.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/where-install.js should pass jshint', function() { 
    ok(true, 'controllers/where-install.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/helpers/host-type.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/host-type.js should pass jshint', function() { 
    ok(true, 'helpers/host-type.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/helpers/resolver', ['exports', 'ember/resolver', 'fusor-ember-cli/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('fusor-ember-cli/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/helpers/start-app', ['exports', 'ember', 'fusor-ember-cli/app', 'fusor-ember-cli/router', 'fusor-ember-cli/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('fusor-ember-cli/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/helpers/validate-properties', ['exports', 'ember', 'ember-qunit'], function (exports, Ember, ember_qunit) {

  'use strict';

  exports.testValidPropertyValues = testValidPropertyValues;
  exports.testInvalidPropertyValues = testInvalidPropertyValues;

  var run = Ember['default'].run;

  function validateValues(object, propertyName, values, isTestForValid) {
    var promise = null;
    var validatedValues = [];

    values.forEach(function (value) {
      function handleValidation(errors) {
        var hasErrors = object.get('errors.' + propertyName + '.firstObject');
        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {
          validatedValues.push(value);
        }
      }

      run(object, 'set', propertyName, value);

      var objectPromise = null;
      run(function () {
        objectPromise = object.validate().then(handleValidation, handleValidation);
      });

      // Since we are setting the values in a different run loop as we are validating them,
      // we need to chain the promises so that they run sequentially. The wrong value will
      // be validated if the promises execute concurrently
      promise = promise ? promise.then(objectPromise) : objectPromise;
    });

    return promise.then(function () {
      return validatedValues;
    });
  }

  function testPropertyValues(propertyName, values, isTestForValid, context) {
    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';
    var testName = validOrInvalid + ' ' + propertyName;

    ember_qunit.test(testName, function (assert) {
      var object = this.subject();

      if (context && typeof context === 'function') {
        context(object);
      }

      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and
      // 'undefined' strings in the assert message.
      var valuesString = QUnit.dump.parse(values).replace(/\n(\s+)?/g, '').replace(/,/g, ', ');
      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;

      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {
        assert.deepEqual(validatedValues, values, assertMessage);
      });
    });
  }

  function testValidPropertyValues(propertyName, values, context) {
    testPropertyValues(propertyName, values, true, context);
  }

  function testInvalidPropertyValues(propertyName, values, context) {
    testPropertyValues(propertyName, values, false, context);
  }

});
define('fusor-ember-cli/tests/mixins/configure-environment-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/configure-environment-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/configure-environment-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/configure-organization-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/configure-organization-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/configure-organization-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/deployment-controller-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/deployment-controller-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/deployment-controller-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/deployment-new-controller-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/deployment-new-controller-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/deployment-new-controller-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/deployment-new-satellite-route-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/deployment-new-satellite-route-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/deployment-new-satellite-route-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/deployment-route-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/deployment-route-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/deployment-route-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/disable-tab-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/disable-tab-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/disable-tab-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/discovered-host-route-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/discovered-host-route-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/discovered-host-route-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/progress-bar-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/progress-bar-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/progress-bar-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/start-controller-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/start-controller-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/start-controller-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/tr-engine-hypervisor-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/tr-engine-hypervisor-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/tr-engine-hypervisor-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/consumer.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/consumer.js should pass jshint', function() { 
    ok(true, 'models/consumer.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/deployment-plan-parameter.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/deployment-plan-parameter.js should pass jshint', function() { 
    ok(true, 'models/deployment-plan-parameter.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/deployment-plan.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/deployment-plan.js should pass jshint', function() { 
    ok(true, 'models/deployment-plan.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/deployment-role.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/deployment-role.js should pass jshint', function() { 
    ok(true, 'models/deployment-role.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/deployment.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/deployment.js should pass jshint', function() { 
    ok(true, 'models/deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/discovered-host.js should pass jshint', function() { 
    ok(true, 'models/discovered-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/domain.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/domain.js should pass jshint', function() { 
    ok(true, 'models/domain.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/entitlement.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/entitlement.js should pass jshint', function() { 
    ok(true, 'models/entitlement.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/environment.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/environment.js should pass jshint', function() { 
    ok(true, 'models/environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/flavor.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/flavor.js should pass jshint', function() { 
    ok(true, 'models/flavor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/foreman-task.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/foreman-task.js should pass jshint', function() { 
    ok(true, 'models/foreman-task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/host.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/host.js should pass jshint', function() { 
    ok(true, 'models/host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/hostgroup.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/hostgroup.js should pass jshint', function() { 
    ok(true, 'models/hostgroup.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/image.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/image.js should pass jshint', function() { 
    ok(true, 'models/image.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/lifecycle-environment.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/lifecycle-environment.js should pass jshint', function() { 
    ok(true, 'models/lifecycle-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/management-application.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/management-application.js should pass jshint', function() { 
    ok(true, 'models/management-application.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/node.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/node.js should pass jshint', function() { 
    ok(true, 'models/node.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/openstack-deployment.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/openstack-deployment.js should pass jshint', function() { 
    ok(true, 'models/openstack-deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/organization.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/organization.js should pass jshint', function() { 
    ok(true, 'models/organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/pool.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/pool.js should pass jshint', function() { 
    ok(true, 'models/pool.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/session-portal.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/session-portal.js should pass jshint', function() { 
    ok(true, 'models/session-portal.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/subnet.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/subnet.js should pass jshint', function() { 
    ok(true, 'models/subnet.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/subscription.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/subscription.js should pass jshint', function() { 
    ok(true, 'models/subscription.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/application.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/application.js should pass jshint', function() { 
    ok(true, 'routes/application.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/assign-nodes.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/assign-nodes.js should pass jshint', function() { 
    ok(true, 'routes/assign-nodes.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/cloudforms.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/cloudforms.js should pass jshint', function() { 
    ok(true, 'routes/cloudforms.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/cloudforms/cfme-configuration.jshint', function () {

  'use strict';

  module('JSHint - routes/cloudforms');
  test('routes/cloudforms/cfme-configuration.js should pass jshint', function() { 
    ok(true, 'routes/cloudforms/cfme-configuration.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/cloudforms/index.jshint', function () {

  'use strict';

  module('JSHint - routes/cloudforms');
  test('routes/cloudforms/index.js should pass jshint', function() { 
    ok(true, 'routes/cloudforms/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/configure-environment.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/configure-environment.js should pass jshint', function() { 
    ok(true, 'routes/configure-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/configure-organization.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/configure-organization.js should pass jshint', function() { 
    ok(true, 'routes/configure-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/consumer.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/consumer.js should pass jshint', function() { 
    ok(true, 'routes/consumer.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/consumers.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/consumers.js should pass jshint', function() { 
    ok(true, 'routes/consumers.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/deployment-new.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/index.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new');
  test('routes/deployment-new/index.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/satellite.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new');
  test('routes/deployment-new/satellite.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/satellite.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/satellite/configure-environment.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new/satellite');
  test('routes/deployment-new/satellite/configure-environment.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/satellite/configure-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/satellite/configure-organization.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new/satellite');
  test('routes/deployment-new/satellite/configure-organization.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/satellite/configure-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/satellite/index.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new/satellite');
  test('routes/deployment-new/satellite/index.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/satellite/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/start.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new');
  test('routes/deployment-new/start.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/deployment.js should pass jshint', function() { 
    ok(true, 'routes/deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment/index.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment');
  test('routes/deployment/index.js should pass jshint', function() { 
    ok(true, 'routes/deployment/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment/start.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment');
  test('routes/deployment/start.js should pass jshint', function() { 
    ok(true, 'routes/deployment/start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployments.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/deployments.js should pass jshint', function() { 
    ok(true, 'routes/deployments.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/engine.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/engine.js should pass jshint', function() { 
    ok(true, 'routes/engine.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/engine/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - routes/engine');
  test('routes/engine/discovered-host.js should pass jshint', function() { 
    ok(true, 'routes/engine/discovered-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/hypervisor.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/hypervisor.js should pass jshint', function() { 
    ok(true, 'routes/hypervisor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/hypervisor/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - routes/hypervisor');
  test('routes/hypervisor/discovered-host.js should pass jshint', function() { 
    ok(true, 'routes/hypervisor/discovered-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/index.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/index.js should pass jshint', function() { 
    ok(true, 'routes/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/new-environment.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/new-environment.js should pass jshint', function() { 
    ok(true, 'routes/new-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/new-node-registration.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/new-node-registration.js should pass jshint', function() { 
    ok(true, 'routes/new-node-registration.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/new-organization.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/new-organization.js should pass jshint', function() { 
    ok(true, 'routes/new-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/openstack.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/openstack.js should pass jshint', function() { 
    ok(true, 'routes/openstack.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/openstack/index.jshint', function () {

  'use strict';

  module('JSHint - routes/openstack');
  test('routes/openstack/index.js should pass jshint', function() { 
    ok(true, 'routes/openstack/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/register-nodes.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/register-nodes.js should pass jshint', function() { 
    ok(true, 'routes/register-nodes.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/review.js should pass jshint', function() { 
    ok(true, 'routes/review.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/index.jshint', function () {

  'use strict';

  module('JSHint - routes/review');
  test('routes/review/index.js should pass jshint', function() { 
    ok(true, 'routes/review/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/installation.jshint', function () {

  'use strict';

  module('JSHint - routes/review');
  test('routes/review/installation.js should pass jshint', function() { 
    ok(true, 'routes/review/installation.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress.jshint', function () {

  'use strict';

  module('JSHint - routes/review');
  test('routes/review/progress.js should pass jshint', function() { 
    ok(true, 'routes/review/progress.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress');
  test('routes/review/progress/details.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details');
  test('routes/review/progress/details/task.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/index.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/index.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/running-steps.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/running-steps.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task/running-steps.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/task-errors.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/task-errors.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task/task-errors.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/task-locks.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/task-locks.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task/task-locks.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/task-raw.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/task-raw.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task/task-raw.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/overview.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress');
  test('routes/review/progress/overview.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/overview.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/summary.jshint', function () {

  'use strict';

  module('JSHint - routes/review');
  test('routes/review/summary.js should pass jshint', function() { 
    ok(true, 'routes/review/summary.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhci.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/rhci.js should pass jshint', function() { 
    ok(true, 'routes/rhci.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhev-options.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/rhev-options.js should pass jshint', function() { 
    ok(true, 'routes/rhev-options.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhev-setup.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/rhev-setup.js should pass jshint', function() { 
    ok(true, 'routes/rhev-setup.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhev.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/rhev.js should pass jshint', function() { 
    ok(true, 'routes/rhev.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhev/index.jshint', function () {

  'use strict';

  module('JSHint - routes/rhev');
  test('routes/rhev/index.js should pass jshint', function() { 
    ok(true, 'routes/rhev/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/satellite.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/satellite.js should pass jshint', function() { 
    ok(true, 'routes/satellite.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/satellite/index.jshint', function () {

  'use strict';

  module('JSHint - routes/satellite');
  test('routes/satellite/index.js should pass jshint', function() { 
    ok(true, 'routes/satellite/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/storage.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/storage.js should pass jshint', function() { 
    ok(true, 'routes/storage.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/subscriptions.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/credentials.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions');
  test('routes/subscriptions/credentials.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/credentials.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/index.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions');
  test('routes/subscriptions/index.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/management-application.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions');
  test('routes/subscriptions/management-application.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/management-application.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/management-application/consumer.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions/management-application');
  test('routes/subscriptions/management-application/consumer.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/management-application/consumer.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/management-application/consumer/entitlements.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions/management-application/consumer');
  test('routes/subscriptions/management-application/consumer/entitlements.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/management-application/consumer/entitlements.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/management-application/consumer/pools.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions/management-application/consumer');
  test('routes/subscriptions/management-application/consumer/pools.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/management-application/consumer/pools.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/select-subscriptions.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions');
  test('routes/subscriptions/select-subscriptions.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/select-subscriptions.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/undercloud-deploy.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/undercloud-deploy.js should pass jshint', function() { 
    ok(true, 'routes/undercloud-deploy.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/where-install.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/where-install.js should pass jshint', function() { 
    ok(true, 'routes/where-install.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/deployment-plan-parameter.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/deployment-plan-parameter.js should pass jshint', function() { 
    ok(true, 'serializers/deployment-plan-parameter.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/deployment-plan.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/deployment-plan.js should pass jshint', function() { 
    ok(true, 'serializers/deployment-plan.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/deployment-role.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/deployment-role.js should pass jshint', function() { 
    ok(true, 'serializers/deployment-role.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/entitlement.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/entitlement.js should pass jshint', function() { 
    ok(true, 'serializers/entitlement.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/foreman-task.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/foreman-task.js should pass jshint', function() { 
    ok(true, 'serializers/foreman-task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/management-application.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/management-application.js should pass jshint', function() { 
    ok(true, 'serializers/management-application.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/node.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/node.js should pass jshint', function() { 
    ok(true, 'serializers/node.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/openstack-deployment.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/openstack-deployment.js should pass jshint', function() { 
    ok(true, 'serializers/openstack-deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/pool.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/pool.js should pass jshint', function() { 
    ok(true, 'serializers/pool.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/test-helper', ['fusor-ember-cli/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('fusor-ember-cli/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:application', 'Unit | Adapter | application', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('fusor-ember-cli/tests/unit/adapters/application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/application-test.js should pass jshint', function() { 
    ok(true, 'unit/adapters/application-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/deployment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:deployment', 'Unit | Adapter | deployment', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('fusor-ember-cli/tests/unit/adapters/deployment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/deployment-test.js should pass jshint', function() { 
    ok(true, 'unit/adapters/deployment-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/entitlement-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:entitlement', 'Unit | Adapter | entitlement', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('fusor-ember-cli/tests/unit/adapters/entitlement-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/entitlement-test.js should pass jshint', function() { 
    ok(true, 'unit/adapters/entitlement-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/foreman-task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:foreman-task', 'Unit | Adapter | foreman task', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('fusor-ember-cli/tests/unit/adapters/foreman-task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/foreman-task-test.js should pass jshint', function() { 
    ok(true, 'unit/adapters/foreman-task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/management-application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:management-application', 'Unit | Adapter | management application', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('fusor-ember-cli/tests/unit/adapters/management-application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/management-application-test.js should pass jshint', function() { 
    ok(true, 'unit/adapters/management-application-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/pool-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:pool', 'Unit | Adapter | pool', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('fusor-ember-cli/tests/unit/adapters/pool-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/pool-test.js should pass jshint', function() { 
    ok(true, 'unit/adapters/pool-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/session-portal-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:session-portal', 'Unit | Adapter | session portal', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('fusor-ember-cli/tests/unit/adapters/session-portal-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/session-portal-test.js should pass jshint', function() { 
    ok(true, 'unit/adapters/session-portal-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/accordion-item-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('accordion-item', 'Unit | Component | accordion item', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/accordion-item-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/accordion-item-test.js should pass jshint', function() { 
    ok(true, 'unit/components/accordion-item-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/base-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('base-f', 'Unit | Component | base f', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/base-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/base-f-test.js should pass jshint', function() { 
    ok(true, 'unit/components/base-f-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/button-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('button-f', 'Unit | Component | button f', {
    // Specify the other units that are required for this test
    needs: ['component:radio-button'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/button-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/button-f-test.js should pass jshint', function() { 
    ok(true, 'unit/components/button-f-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/cancel-back-next-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('cancel-back-next', 'Unit | Component | cancel back next', {
    // Specify the other units that are required for this test
    needs: ['component:em-modal-toggler'],
    unit: true
  });

  // TODO  Assertion Failed: Unable to find partial with name "cancel-deployment-modal"
  //test('it renders', function(assert) {
  //assert.expect(2);
  // Creates the component instance
  //var component = this.subject();
  //assert.equal(component._state, 'preRender');

  // Renders the component to the page
  //this.render();
  // assert.equal(component._state, 'inDOM');
  //});

});
define('fusor-ember-cli/tests/unit/components/cancel-back-next-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/cancel-back-next-test.js should pass jshint', function() { 
    ok(true, 'unit/components/cancel-back-next-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/debug-info-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('debug-info', 'Unit | Component | debug info', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/debug-info-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/debug-info-test.js should pass jshint', function() { 
    ok(true, 'unit/components/debug-info-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/delete-deployment-button-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('delete-deployment-button', 'Unit | Component | delete deployment button', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/delete-deployment-button-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/delete-deployment-button-test.js should pass jshint', function() { 
    ok(true, 'unit/components/delete-deployment-button-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/deployment-role-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('deployment-role', 'Unit | Component | deployment role', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/deployment-role-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/deployment-role-test.js should pass jshint', function() { 
    ok(true, 'unit/components/deployment-role-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/env-path-list-item-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('env-path-list-item', 'Unit | Component | env path list item', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/env-path-list-item-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/env-path-list-item-test.js should pass jshint', function() { 
    ok(true, 'unit/components/env-path-list-item-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/error-message-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('error-message', 'Unit | Component | error message', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/error-message-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/error-message-test.js should pass jshint', function() { 
    ok(true, 'unit/components/error-message-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/hypervisor-name-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('hypervisor-name', 'Unit | Component | hypervisor name', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/hypervisor-name-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/hypervisor-name-test.js should pass jshint', function() { 
    ok(true, 'unit/components/hypervisor-name-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/node-profile-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('node-profile', 'Unit | Component | node profile', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/node-profile-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/node-profile-test.js should pass jshint', function() { 
    ok(true, 'unit/components/node-profile-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/progress-bar-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('progress-bar', 'Unit | Component | progress bar', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/progress-bar-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/progress-bar-test.js should pass jshint', function() { 
    ok(true, 'unit/components/progress-bar-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/radio-button-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('radio-button-f', 'Unit | Component | radio button f', {
    // Specify the other units that are required for this test
    needs: ['component:radio-button'],
    unit: true
  });

  //  Cannot set read-only property "checked" on object: <(subclass of Ember.Component):ember276>
  //test('it renders', function(assert) {
  // assert.expect(2);

  // Creates the component instance
  // var component = this.subject();
  // assert.equal(component._state, 'preRender');

  // Renders the component to the page
  // this.render();
  //  assert.equal(component._state, 'inDOM');
  //});

});
define('fusor-ember-cli/tests/unit/components/radio-button-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/radio-button-f-test.js should pass jshint', function() { 
    ok(true, 'unit/components/radio-button-f-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/review-link-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('review-link', 'Unit | Component | review link', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/review-link-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/review-link-test.js should pass jshint', function() { 
    ok(true, 'unit/components/review-link-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/rhci-item-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('rhci-item', 'Unit | Component | rhci item', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/rhci-item-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/rhci-item-test.js should pass jshint', function() { 
    ok(true, 'unit/components/rhci-item-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/rhci-start-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('rhci-start', 'Unit | Component | rhci start', {
    // Specify the other units that are required for this test
    needs: ['component:rhci-item'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/rhci-start-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/rhci-start-test.js should pass jshint', function() { 
    ok(true, 'unit/components/rhci-start-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/rhci-wizard-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('rhci-wizard', 'Unit | Component | rhci wizard', {
    // Specify the other units that are required for this test
    needs: ['component:wizard-item', 'component:error-message'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/rhci-wizard-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/rhci-wizard-test.js should pass jshint', function() { 
    ok(true, 'unit/components/rhci-wizard-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/select-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('select-f', 'Unit | Component | select f', {
    // Specify the other units that are required for this test
    needs: ['component:base-f'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/select-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/select-f-test.js should pass jshint', function() { 
    ok(true, 'unit/components/select-f-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/select-simple-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('select-simple-f', 'Unit | Component | select simple f', {
    // Specify the other units that are required for this test
    needs: ['component:base-f'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/select-simple-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/select-simple-f-test.js should pass jshint', function() { 
    ok(true, 'unit/components/select-simple-f-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/step-number-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('step-number', 'Unit | Component | step number', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/step-number-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/step-number-test.js should pass jshint', function() { 
    ok(true, 'unit/components/step-number-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/text-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('text-f', 'Unit | Component | text f', {
    // Specify the other units that are required for this test
    needs: ['component:base-f'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/text-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/text-f-test.js should pass jshint', function() { 
    ok(true, 'unit/components/text-f-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/textarea-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('textarea-f', 'Unit | Component | textarea f', {
    // Specify the other units that are required for this test
    needs: ['component:base-f'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/textarea-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/textarea-f-test.js should pass jshint', function() { 
    ok(true, 'unit/components/textarea-f-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-deployment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-deployment', 'Unit | Component | tr deployment', {
    // Specify the other units that are required for this test
    needs: ['component:delete-deployment-button'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/tr-deployment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-deployment-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-deployment-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-engine-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-engine', 'Unit | Component | tr engine', {
    // Specify the other units that are required for this test
    needs: ['component:radio-button'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/tr-engine-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-engine-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-engine-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-hypervisor-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-hypervisor', 'Unit | Component | tr hypervisor', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/tr-hypervisor-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-hypervisor-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-hypervisor-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-management-app-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-management-app', 'Unit | Component | tr management app', {
    // Specify the other units that are required for this test
    needs: ['component:radio-button'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/tr-management-app-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-management-app-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-management-app-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-organization', 'Unit | Component | tr organization', {
    // Specify the other units that are required for this test
    needs: ['component:radio-button'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/tr-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-organization-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-organization-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-subscription-saved-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-subscription-saved', 'Unit | Component | tr subscription saved', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/tr-subscription-saved-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-subscription-saved-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-subscription-saved-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-subscription-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-subscription', 'Unit | Component | tr subscription', {
    // Specify the other units that are required for this test
    needs: ['helper:moment'],
    unit: true
  });

  // test('it renders', function(assert) {
  //   assert.expect(2);

  //   // Creates the component instance
  //   var component = this.subject();
  //   assert.equal(component._state, 'preRender');

  //   // Renders the component to the page
  //   this.render();
  //   assert.equal(component._state, 'inDOM');
  // });

});
define('fusor-ember-cli/tests/unit/components/tr-subscription-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-subscription-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-subscription-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-task', 'Unit | Component | tr task', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/tr-task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-task-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/traffic-type-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('traffic-type', 'Unit | Component | traffic type', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/traffic-type-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/traffic-type-test.js should pass jshint', function() { 
    ok(true, 'unit/components/traffic-type-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/wizard-item-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('wizard-item', 'Unit | Component | wizard item', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/wizard-item-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/wizard-item-test.js should pass jshint', function() { 
    ok(true, 'unit/components/wizard-item-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/wizard-step-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('wizard-step', 'Unit | Component | wizard step', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('fusor-ember-cli/tests/unit/components/wizard-step-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/wizard-step-test.js should pass jshint', function() { 
    ok(true, 'unit/components/wizard-step-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:application', {
    // Specify the other units that are required for this test.
    needs: ['controller:deployment']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('fusor-ember-cli/tests/unit/controllers/application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/application-test.js should pass jshint', function() { 
    ok(true, 'unit/controllers/application-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/entitlements-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:entitlements', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('fusor-ember-cli/tests/unit/controllers/entitlements-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/entitlements-test.js should pass jshint', function() { 
    ok(true, 'unit/controllers/entitlements-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/management-application/consumer-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:subscriptions/management-application/consumer', {
    // Specify the other units that are required for this test.
    needs: ['controller:deployment']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/management-application/consumer-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/subscriptions/management-application');
  test('unit/controllers/subscriptions/management-application/consumer-test.js should pass jshint', function() { 
    ok(true, 'unit/controllers/subscriptions/management-application/consumer-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/management-application/consumer/entitlements-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:subscriptions/management-application/consumer/entitlements', {
    // Specify the other units that are required for this test.
    needs: ['controller:deployment']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/management-application/consumer/entitlements-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/subscriptions/management-application/consumer');
  test('unit/controllers/subscriptions/management-application/consumer/entitlements-test.js should pass jshint', function() { 
    ok(true, 'unit/controllers/subscriptions/management-application/consumer/entitlements-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/management-application/consumer/pools-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:subscriptions/management-application/consumer/pools', {
    // Specify the other units that are required for this test.
    needs: ['controller:deployment', 'controller:application']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/management-application/consumer/pools-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/subscriptions/management-application/consumer');
  test('unit/controllers/subscriptions/management-application/consumer/pools-test.js should pass jshint', function() { 
    ok(true, 'unit/controllers/subscriptions/management-application/consumer/pools-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/helpers/host-type-test', ['fusor-ember-cli/helpers/host-type', 'qunit'], function (host_type, qunit) {

  'use strict';

  qunit.module('Unit | Helper | host type');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var result = host_type.hostType(42);
    assert.ok(result);
  });

});
define('fusor-ember-cli/tests/unit/helpers/host-type-test.jshint', function () {

  'use strict';

  module('JSHint - unit/helpers');
  test('unit/helpers/host-type-test.js should pass jshint', function() { 
    ok(true, 'unit/helpers/host-type-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/configure-environment-mixin-test', ['ember', 'fusor-ember-cli/mixins/configure-environment-mixin', 'qunit'], function (Ember, ConfigureEnvironmentMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | configure environment mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ConfigureEnvironmentMixinObject = Ember['default'].Object.extend(ConfigureEnvironmentMixinMixin['default']);
    var subject = ConfigureEnvironmentMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/configure-environment-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/configure-environment-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/configure-environment-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/configure-organization-mixin-test', ['ember', 'fusor-ember-cli/mixins/configure-organization-mixin', 'qunit'], function (Ember, ConfigureOrganizationMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | configure organization mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ConfigureOrganizationMixinObject = Ember['default'].Object.extend(ConfigureOrganizationMixinMixin['default']);
    var subject = ConfigureOrganizationMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/configure-organization-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/configure-organization-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/configure-organization-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-controller-mixin-test', ['ember', 'fusor-ember-cli/mixins/deployment-controller-mixin', 'qunit'], function (Ember, DeploymentControllerMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | deployment controller mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var DeploymentControllerMixinObject = Ember['default'].Object.extend(DeploymentControllerMixinMixin['default']);
    var subject = DeploymentControllerMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-controller-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/deployment-controller-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/deployment-controller-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-new-controller-mixin-test', ['ember', 'fusor-ember-cli/mixins/deployment-new-controller-mixin', 'qunit'], function (Ember, DeploymentNewControllerMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | deployment new controller mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var DeploymentNewControllerMixinObject = Ember['default'].Object.extend(DeploymentNewControllerMixinMixin['default']);
    var subject = DeploymentNewControllerMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-new-controller-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/deployment-new-controller-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/deployment-new-controller-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-new-satellite-route-mixin-test', ['ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin', 'qunit'], function (Ember, DeploymentNewSatelliteRouteMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | deployment new satellite route mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var DeploymentNewSatelliteRouteMixinObject = Ember['default'].Object.extend(DeploymentNewSatelliteRouteMixinMixin['default']);
    var subject = DeploymentNewSatelliteRouteMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-new-satellite-route-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/deployment-new-satellite-route-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/deployment-new-satellite-route-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-route-mixin-test', ['ember', 'fusor-ember-cli/mixins/deployment-route-mixin', 'qunit'], function (Ember, DeploymentRouteMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | deployment route mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var DeploymentRouteMixinObject = Ember['default'].Object.extend(DeploymentRouteMixinMixin['default']);
    var subject = DeploymentRouteMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-route-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/deployment-route-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/deployment-route-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/disable-tab-mixin-test', ['ember', 'fusor-ember-cli/mixins/disable-tab-mixin', 'qunit'], function (Ember, DisableTabMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | disable tab mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var DisableTabMixinObject = Ember['default'].Object.extend(DisableTabMixinMixin['default']);
    var subject = DisableTabMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/disable-tab-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/disable-tab-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/disable-tab-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/discovered-host-route-mixin-test', ['ember', 'fusor-ember-cli/mixins/discovered-host-route-mixin', 'qunit'], function (Ember, DiscoveredHostRouteMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | discovered host route mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var DiscoveredHostRouteMixinObject = Ember['default'].Object.extend(DiscoveredHostRouteMixinMixin['default']);
    var subject = DiscoveredHostRouteMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/discovered-host-route-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/discovered-host-route-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/discovered-host-route-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/progress-bar-mixin-test', ['ember', 'fusor-ember-cli/mixins/progress-bar-mixin', 'qunit'], function (Ember, ProgressBarMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | progress bar mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ProgressBarMixinObject = Ember['default'].Object.extend(ProgressBarMixinMixin['default']);
    var subject = ProgressBarMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/progress-bar-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/progress-bar-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/progress-bar-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/start-controller-mixin-test', ['ember', 'fusor-ember-cli/mixins/start-controller-mixin', 'qunit'], function (Ember, StartControllerMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | start controller mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var StartControllerMixinObject = Ember['default'].Object.extend(StartControllerMixinMixin['default']);
    var subject = StartControllerMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/start-controller-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/start-controller-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/start-controller-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/tr-engine-hypervisor-mixin-test', ['ember', 'fusor-ember-cli/mixins/tr-engine-hypervisor-mixin', 'qunit'], function (Ember, TrEngineHypervisorMixinMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | tr engine hypervisor mixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var TrEngineHypervisorMixinObject = Ember['default'].Object.extend(TrEngineHypervisorMixinMixin['default']);
    var subject = TrEngineHypervisorMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/tr-engine-hypervisor-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/tr-engine-hypervisor-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/tr-engine-hypervisor-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/consumer-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('consumer', 'Unit | Model | consumer', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/consumer-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/consumer-test.js should pass jshint', function() { 
    ok(true, 'unit/models/consumer-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/deployment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('deployment', 'Unit | Model | deployment', {
    // Specify the other units that are required for this test.
    needs: ['model:organization', 'model:lifecycle-environment', 'model:discovered-host', 'model:subscription']
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/deployment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/deployment-test.js should pass jshint', function() { 
    ok(true, 'unit/models/deployment-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('discovered-host', 'Unit | Model | discovered host', {
    // Specify the other units that are required for this test.
    needs: ['model:deployment', 'model:organization', 'model:lifecycle-environment', 'model:subscription']
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/discovered-host-test.js should pass jshint', function() { 
    ok(true, 'unit/models/discovered-host-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/domain-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('domain', 'Unit | Model | domain', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/domain-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/domain-test.js should pass jshint', function() { 
    ok(true, 'unit/models/domain-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/entitlement-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('entitlement', 'Unit | Model | entitlement', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/entitlement-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/entitlement-test.js should pass jshint', function() { 
    ok(true, 'unit/models/entitlement-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('environment', 'Unit | Model | environment', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/environment-test.js should pass jshint', function() { 
    ok(true, 'unit/models/environment-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/foreman-task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('foreman-task', 'Unit | Model | foreman task', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/foreman-task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/foreman-task-test.js should pass jshint', function() { 
    ok(true, 'unit/models/foreman-task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('host', 'Unit | Model | host', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/host-test.js should pass jshint', function() { 
    ok(true, 'unit/models/host-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/hostgroup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('hostgroup', 'Unit | Model | hostgroup', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/hostgroup-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/hostgroup-test.js should pass jshint', function() { 
    ok(true, 'unit/models/hostgroup-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/lifecycle-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('lifecycle-environment', 'Unit | Model | lifecycle environment', {
    // Specify the other units that are required for this test.
    needs: ['model:organization']
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/lifecycle-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/lifecycle-environment-test.js should pass jshint', function() { 
    ok(true, 'unit/models/lifecycle-environment-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/management-application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('management-application', 'Unit | Model | management application', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/management-application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/management-application-test.js should pass jshint', function() { 
    ok(true, 'unit/models/management-application-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('organization', 'Unit | Model | organization', {
    // Specify the other units that are required for this test.
    needs: ['model:lifecycle-environment']
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/organization-test.js should pass jshint', function() { 
    ok(true, 'unit/models/organization-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/pool-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('pool', 'Unit | Model | pool', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/pool-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/pool-test.js should pass jshint', function() { 
    ok(true, 'unit/models/pool-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/session-portal-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('session-portal', 'Unit | Model | session portal', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/session-portal-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/session-portal-test.js should pass jshint', function() { 
    ok(true, 'unit/models/session-portal-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/subnet-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('subnet', 'Unit | Model | subnet', {
    // Specify the other units that are required for this test.
    needs: ['model:organization', 'model:lifecycle-environment']
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/subnet-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/subnet-test.js should pass jshint', function() { 
    ok(true, 'unit/models/subnet-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/subscription-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('subscription', 'Unit | Model | subscription', {
    // Specify the other units that are required for this test.
    needs: ['model:deployment', 'model:organization', 'model:lifecycle-environment', 'model:discovered-host']
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/subscription-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/subscription-test.js should pass jshint', function() { 
    ok(true, 'unit/models/subscription-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:application', 'Unit | Route | application', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/application-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/application-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/assign-nodes-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:assign-nodes', 'Unit | Route | assign nodes', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/assign-nodes-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/assign-nodes-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/assign-nodes-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/cloudforms-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:cloudforms', 'Unit | Route | cloudforms', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/cloudforms-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/cloudforms-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/cloudforms-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/cloudforms/cfme-configuration-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:cloudforms/cfme-configuration', 'Unit | Route | cloudforms/cfme configuration', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/cloudforms/cfme-configuration-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/cloudforms');
  test('unit/routes/cloudforms/cfme-configuration-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/cloudforms/cfme-configuration-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/cloudforms/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:cloudforms/index', 'Unit | Route | cloudforms/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/cloudforms/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/cloudforms');
  test('unit/routes/cloudforms/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/cloudforms/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/configure-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:configure-environment', 'Unit | Route | configure environment', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/configure-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/configure-environment-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/configure-environment-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/configure-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:configure-organization', 'Unit | Route | configure organization', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/configure-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/configure-organization-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/configure-organization-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/consumer-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:consumer', 'Unit | Route | consumer', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/consumer-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/consumer-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/consumer-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/consumers-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:consumers', 'Unit | Route | consumers', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/consumers-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/consumers-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/consumers-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new', 'Unit | Route | deployment new', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/deployment-new-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment-new-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/index', 'Unit | Route | deployment new/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new');
  test('unit/routes/deployment-new/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment-new/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/satellite', 'Unit | Route | deployment new/satellite', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new');
  test('unit/routes/deployment-new/satellite-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment-new/satellite-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/configure-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/satellite/configure-environment', 'Unit | Route | deployment new/satellite/configure environment', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/configure-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new/satellite');
  test('unit/routes/deployment-new/satellite/configure-environment-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment-new/satellite/configure-environment-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/configure-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/satellite/configure-organization', 'Unit | Route | deployment new/satellite/configure organization', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/configure-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new/satellite');
  test('unit/routes/deployment-new/satellite/configure-organization-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment-new/satellite/configure-organization-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/satellite/index', 'Unit | Route | deployment new/satellite/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new/satellite');
  test('unit/routes/deployment-new/satellite/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment-new/satellite/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/start-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/start', 'Unit | Route | deployment new/start', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/start-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new');
  test('unit/routes/deployment-new/start-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment-new/start-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment', 'Unit | Route | deployment', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/deployment-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment/index', 'Unit | Route | deployment/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment');
  test('unit/routes/deployment/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment/start-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment/start', 'Unit | Route | deployment/start', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment/start-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment');
  test('unit/routes/deployment/start-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployment/start-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployments-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployments', 'Unit | Route | deployments', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/deployments-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/deployments-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/deployments-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/engine-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:engine', 'Unit | Route | engine', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/engine-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/engine-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/engine-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/engine/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:engine/discovered-host', 'Unit | Route | engine/discovered host', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/engine/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/engine');
  test('unit/routes/engine/discovered-host-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/engine/discovered-host-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/hypervisor-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:hypervisor', 'Unit | Route | hypervisor', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/hypervisor-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/hypervisor-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/hypervisor-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/hypervisor/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:hypervisor/discovered-host', 'Unit | Route | hypervisor/discovered host', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/hypervisor/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/hypervisor');
  test('unit/routes/hypervisor/discovered-host-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/hypervisor/discovered-host-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:index', 'Unit | Route | index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/new-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:new-environment', 'Unit | Route | new environment', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/new-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/new-environment-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/new-environment-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/new-node-registration-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:new-node-registration', 'Unit | Route | new node registration', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/new-node-registration-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/new-node-registration-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/new-node-registration-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/new-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:new-organization', 'Unit | Route | new organization', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/new-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/new-organization-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/new-organization-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/openstack-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:openstack', 'Unit | Route | openstack', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/openstack-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/openstack-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/openstack-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/openstack/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:openstack/index', 'Unit | Route | openstack/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/openstack/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/openstack');
  test('unit/routes/openstack/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/openstack/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/register-nodes-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:register-nodes', 'Unit | Route | register nodes', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/register-nodes-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/register-nodes-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/register-nodes-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review', 'Unit | Route | review', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/review-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/index', 'Unit | Route | review/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review');
  test('unit/routes/review/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/installation-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/installation', 'Unit | Route | review/installation', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/installation-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review');
  test('unit/routes/review/installation-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/installation-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress', 'Unit | Route | review/progress', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review');
  test('unit/routes/review/progress-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details', 'Unit | Route | review/progress/details', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress');
  test('unit/routes/review/progress/details-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task', 'Unit | Route | review/progress/details/task', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details');
  test('unit/routes/review/progress/details/task-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/index', 'Unit | Route | review/progress/details/task/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/running-steps-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/running-steps', 'Unit | Route | review/progress/details/task/running steps', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/running-steps-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/running-steps-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/running-steps-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-errors-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/task-errors', 'Unit | Route | review/progress/details/task/task errors', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-errors-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/task-errors-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/task-errors-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-locks-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/task-locks', 'Unit | Route | review/progress/details/task/task locks', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-locks-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/task-locks-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/task-locks-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-raw-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/task-raw', 'Unit | Route | review/progress/details/task/task raw', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-raw-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/task-raw-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/task-raw-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/overview-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/overview', 'Unit | Route | review/progress/overview', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/overview-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress');
  test('unit/routes/review/progress/overview-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/overview-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/summary-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/summary', 'Unit | Route | review/summary', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/review/summary-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review');
  test('unit/routes/review/summary-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/summary-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhci-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhci', 'Unit | Route | rhci', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/rhci-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/rhci-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/rhci-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev-options-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhev-options', 'Unit | Route | rhev options', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev-options-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/rhev-options-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/rhev-options-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev-setup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhev-setup', 'Unit | Route | rhev setup', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev-setup-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/rhev-setup-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/rhev-setup-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhev', 'Unit | Route | rhev', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/rhev-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/rhev-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhev/index', 'Unit | Route | rhev/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/rhev');
  test('unit/routes/rhev/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/rhev/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/satellite-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:satellite', 'Unit | Route | satellite', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/satellite-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/satellite-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/satellite-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/satellite/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:satellite/index', 'Unit | Route | satellite/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/satellite/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/satellite');
  test('unit/routes/satellite/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/satellite/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/storage-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:storage', 'Unit | Route | storage', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/storage-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/storage-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/storage-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions', 'Unit | Route | subscriptions', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/subscriptions-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/subscriptions-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/credentials-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/credentials', 'Unit | Route | subscriptions/credentials', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/credentials-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions');
  test('unit/routes/subscriptions/credentials-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/subscriptions/credentials-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/index', 'Unit | Route | subscriptions/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions');
  test('unit/routes/subscriptions/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/subscriptions/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/management-application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/management-application', 'Unit | Route | subscriptions/management application', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/management-application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions');
  test('unit/routes/subscriptions/management-application-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/subscriptions/management-application-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/management-application/consumer-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/management-application/consumer', 'Unit | Route | subscriptions/management application/consumer', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/management-application/consumer-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions/management-application');
  test('unit/routes/subscriptions/management-application/consumer-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/subscriptions/management-application/consumer-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/management-application/consumer/entitlements-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/management-application/consumer/entitlements', 'Unit | Route | subscriptions/management application/consumer/entitlements', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/management-application/consumer/entitlements-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions/management-application/consumer');
  test('unit/routes/subscriptions/management-application/consumer/entitlements-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/subscriptions/management-application/consumer/entitlements-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/management-application/consumer/pools-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/management-application/consumer/pools', 'Unit | Route | subscriptions/management application/consumer/pools', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/management-application/consumer/pools-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions/management-application/consumer');
  test('unit/routes/subscriptions/management-application/consumer/pools-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/subscriptions/management-application/consumer/pools-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/select-subscriptions-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/select-subscriptions', 'Unit | Route | subscriptions/select subscriptions', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/select-subscriptions-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions');
  test('unit/routes/subscriptions/select-subscriptions-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/subscriptions/select-subscriptions-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/where-install-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:where-install', 'Unit | Route | where install', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('fusor-ember-cli/tests/unit/routes/where-install-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/where-install-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/where-install-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/serializers/entitlement-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('entitlement', 'Unit | Serializer | entitlement', {
    // Specify the other units that are required for this test.
    needs: ['serializer:entitlement']
  });

  // Replace this with your real tests.
  ember_qunit.test('it serializes records', function (assert) {
    var record = this.subject();

    var serializedRecord = record.serialize();

    assert.ok(serializedRecord);
  });

});
define('fusor-ember-cli/tests/unit/serializers/entitlement-test.jshint', function () {

  'use strict';

  module('JSHint - unit/serializers');
  test('unit/serializers/entitlement-test.js should pass jshint', function() { 
    ok(true, 'unit/serializers/entitlement-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/serializers/foreman-task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('foreman-task', 'Unit | Serializer | foreman task', {
    // Specify the other units that are required for this test.
    needs: ['serializer:foreman-task']
  });

  // Replace this with your real tests.
  ember_qunit.test('it serializes records', function (assert) {
    var record = this.subject();

    var serializedRecord = record.serialize();

    assert.ok(serializedRecord);
  });

});
define('fusor-ember-cli/tests/unit/serializers/foreman-task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/serializers');
  test('unit/serializers/foreman-task-test.js should pass jshint', function() { 
    ok(true, 'unit/serializers/foreman-task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/serializers/management-application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('management-application', 'Unit | Serializer | management application', {
    // Specify the other units that are required for this test.
    needs: ['serializer:management-application']
  });

  // Replace this with your real tests.
  ember_qunit.test('it serializes records', function (assert) {
    var record = this.subject();

    var serializedRecord = record.serialize();

    assert.ok(serializedRecord);
  });

});
define('fusor-ember-cli/tests/unit/serializers/management-application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/serializers');
  test('unit/serializers/management-application-test.js should pass jshint', function() { 
    ok(true, 'unit/serializers/management-application-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/serializers/pool-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('pool', 'Unit | Serializer | pool', {
    // Specify the other units that are required for this test.
    needs: ['serializer:pool']
  });

  // Replace this with your real tests.
  ember_qunit.test('it serializes records', function (assert) {
    var record = this.subject();

    var serializedRecord = record.serialize();

    assert.ok(serializedRecord);
  });

});
define('fusor-ember-cli/tests/unit/serializers/pool-test.jshint', function () {

  'use strict';

  module('JSHint - unit/serializers');
  test('unit/serializers/pool-test.js should pass jshint', function() { 
    ok(true, 'unit/serializers/pool-test.js should pass jshint.'); 
  });

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('fusor-ember-cli/config/environment', ['ember'], function(Ember) {
  return { 'default': {"modulePrefix":"fusor-ember-cli","environment":"development","baseURL":"/","locationType":"hash","EmberENV":{"FEATURES":{}},"contentSecurityPolicyHeader":"Disabled-Content-Security-Policy","emberDevTools":{"global":true},"APP":{"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_VIEW_LOOKUPS":true,"rootElement":"#ember-app","name":"fusor-ember-cli","version":"0.0.0.a144e0ca"},"contentSecurityPolicy":{"default-src":"'none'","script-src":"'self' 'unsafe-eval'","font-src":"'self'","connect-src":"'self'","img-src":"'self'","style-src":"'self'","media-src":"'self'"},"ember-devtools":{"enabled":true,"global":false},"exportApplicationGlobal":true}};
});

if (runningTests) {
  require("fusor-ember-cli/tests/test-helper");
} else {
  require("fusor-ember-cli/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_VIEW_LOOKUPS":true,"rootElement":"#ember-app","name":"fusor-ember-cli","version":"0.0.0.a144e0ca"});
}

/* jshint ignore:end */
//# sourceMappingURL=fusor-ember-cli.map