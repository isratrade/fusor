"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('fusor-ember-cli/adapters/application', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {

    var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
    exports['default'] = _emberData['default'].JSONAPIAdapter.extend({
        namespace: 'api/v3',
        headers: {
            "X-CSRF-Token": token,
            "Accept": "application/json",
            "Content-Type": "application/json"
        },

        pathForType: function pathForType(modelName) {
            var underscored = _ember['default'].String.underscore(modelName);
            return _ember['default'].String.pluralize(underscored);
        },

        shouldReloadRecord: function shouldReloadRecord(store, ticketSnapshot) {
            return true;
        },
        handleResponse: function handleResponse(status /*, headers, payload */) {
            if (status === 401) {
                this.eventBus.trigger('displayErrorModal', {
                    errorMessage: 'It looks like your session has timed out.' + ' Try logging back in again to continue.',
                    okayCallback: function okayCallback() {
                        document.location.pathname = '/'; // Redirect to root
                    }
                });
            }
            return this._super.apply(this, arguments);
        }
    });
});
define('fusor-ember-cli/adapters/deployment-plan', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].ActiveModelAdapter.extend({

        // 'overcloud' is harded
        // ex. /fusor/api/openstack/deployments/:id/deployment_plans/overcloud
        urlForFindRecord: function urlForFindRecord(id, modelName, snapshot) {
            return '/fusor/api/openstack/deployments/' + id + '/deployment_plans/overcloud';
        }

    });
});
define('fusor-ember-cli/adapters/deployment', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({
    namespace: 'fusor/api/v3',

    urlForQueryRecord: function urlForQueryRecord(query, modelName) {
      if (query.id) {
        return '/' + this.get('namespace') + '/deployments/' + query.id;
      }
      return this._super(query, modelName);
    }
  });
});
define('fusor-ember-cli/adapters/discovered-host', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
    exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({
        namespace: 'fusor/api/v3'
    });
});
define('fusor-ember-cli/adapters/entitlement', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].ActiveModelAdapter.extend({

        urlForQuery: function urlForQuery(query, modelName) {
            // Use consumer UUID to get entitlements
            // GET /customer_portal/consumers/#{CONSUMER['uuid']}/entitlements
            return '/customer_portal/consumers/' + query['uuid'] + '/entitlements';
        }

    });
});
define('fusor-ember-cli/adapters/flavor', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].ActiveModelAdapter.extend({

        urlForQuery: function urlForQuery(query, modelName) {
            return '/fusor/api/openstack/deployments/' + query['deployment_id'] + '/flavors';
        }

    });
});
define('fusor-ember-cli/adapters/foreman-task', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
    exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({
        namespace: 'fusor/api/v3'
    });
});
define('fusor-ember-cli/adapters/image', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].ActiveModelAdapter.extend({

        urlForQuery: function urlForQuery(query, modelName) {
            return '/fusor/api/openstack/deployments/' + query['deployment_id'] + '/images';
        }

    });
});
define('fusor-ember-cli/adapters/lifecycle-environment', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
    exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({
        namespace: 'fusor/api/v3'
    });
});
define('fusor-ember-cli/adapters/management-application', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].ActiveModelAdapter.extend({

        urlForQuery: function urlForQuery(query, modelName) {
            // Use owner key to get consumers (subscription application manangers)
            // GET /customer_portal/owners/#{OWNER['key']}/consumers?type=satellite
            return '/customer_portal/owners/' + query['owner_key'] + '/consumers?type=satellite';
        }

    });
});
define('fusor-ember-cli/adapters/node', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].ActiveModelAdapter.extend({

        urlForQuery: function urlForQuery(query, modelName) {
            return '/fusor/api/openstack/deployments/' + query['deployment_id'] + '/nodes';
        }

    });
});
define('fusor-ember-cli/adapters/pool', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].ActiveModelAdapter.extend({

        urlForQuery: function urlForQuery(query, modelName) {
            // Use consumer UUID to get pools
            // GET /customer_portal/pools?consumer=' + consumerUUID + '&listall=false');
            return "/customer_portal/pools?consumer=" + query["uuid"] + "&listall=false";
        }

    });
});
define('fusor-ember-cli/adapters/session-portal', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].LSAdapter.extend({
    namespace: 'rhci'
  });
});
define('fusor-ember-cli/adapters/subscription', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
    exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({
        namespace: 'fusor/api/v3'
    });
});
define('fusor-ember-cli/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'fusor-ember-cli/config/environment'], function (exports, _ember, _emberResolver, _emberLoadInitializers, _fusorEmberCliConfigEnvironment) {

  var App;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _fusorEmberCliConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _fusorEmberCliConfigEnvironment['default'].podModulePrefix,
    Resolver: _emberResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _fusorEmberCliConfigEnvironment['default'].modulePrefix);

  // Instantiate and expose global event bus
  App.EventBus = _ember['default'].Object.extend(_ember['default'].Evented).create();

  exports['default'] = App;
});
define('fusor-ember-cli/components/accordion-item', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    isOpen: false,

    classNames: ['accordion-item'],

    actions: {
      openItem: function openItem() {
        this.set('isOpen', this.toggleProperty('isOpen'));
      }
    }
  });
});
define('fusor-ember-cli/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'fusor-ember-cli/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _fusorEmberCliConfigEnvironment) {
  var _config$APP = _fusorEmberCliConfigEnvironment['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;
  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('fusor-ember-cli/components/auto-node-registration-mac-address', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    hostNumber: _ember['default'].computed('index', 'indexOffset', function () {
      var index = this.get('index');
      var indexOffset = this.get('indexOffset');
      return indexOffset ? index + indexOffset + 1 : index + 1;
    }),

    deselected: _ember['default'].computed.not('host.selected'),

    deselectedTextClass: _ember['default'].computed('deselected', function () {
      return this.get('deselected') ? 'new-node-deselected-text' : '';
    }),

    selectId: _ember['default'].computed('hostNumber', function () {
      return 'autoDetectNodeMacAddressSelect' + this.get('hostNumber');
    }),

    multipleMacAddresses: _ember['default'].computed('host.macAddresses', function () {
      return this.get('host.macAddresses.length') > 1;
    })
  });
});
define('fusor-ember-cli/components/base-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    didInsertElement: function didInsertElement() {
      return _ember['default'].$('[data-toggle="popover"]').popover({ html: false,
        trigger: 'focus hover',
        title: this.get('label'),
        placement: 'right',
        content: this.get('helpText')
      });
    },

    willDestroyElement: function willDestroyElement() {
      return _ember['default'].$('[data-toggle="popover"]').popover('destroy');
    },

    labelClassSize: _ember['default'].computed(function () {
      return this.getWithDefault('labelSize', 'col-lg-2 col-md-3 col-sm-5');
    }),

    inputClassSize: _ember['default'].computed(function () {
      return this.getWithDefault('inputSize', 'col-lg-4 col-md-6 col-sm-7');
    }),

    showUnits: _ember['default'].computed('unitsLabel', function () {
      return !_ember['default'].isBlank(this.get('unitsLabel'));
    }),

    showHelpPopover: _ember['default'].computed('showHelpIndicator', function () {
      return !_ember['default'].isBlank(this.get('helpText'));
    }),

    unitsClassSize: _ember['default'].computed(function () {
      return this.getWithDefault('unitsSize', 'col-md-2');
    }),

    actions: {
      doNothing: function doNothing() {
        return false;
      }
    }
  });
});
define('fusor-ember-cli/components/base-popover', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        didInsertElement: function didInsertElement() {
            return _ember['default'].$('[data-toggle=popover]').popover();
        },

        willDestroyElement: function willDestroyElement() {
            return _ember['default'].$('[data-toggle=popover]').popover('destroy');
        }

    });
});
define('fusor-ember-cli/components/button-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'button',
    classNames: ['btn btn-primary'],
    attributeBindings: ['disabled'],
    click: function click() {
      this.sendAction();
    }
  });
});
define('fusor-ember-cli/components/button-selection', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['button-selection'],

    classNameBindings: ['buttonSelectionSelected', 'buttonDisabled'],

    buttonSelectionSelected: _ember['default'].computed('value', 'groupValue', function () {
      return this.get('value') === this.get('groupValue');
    }),

    buttonDisabled: _ember['default'].computed('disabled', function () {
      return this.get('disabled');
    }),

    click: function click() {
      if (!this.get('disabled')) {
        return this.sendAction('changed', this.get('value'));
      }
    }

  });
});
define('fusor-ember-cli/components/cancel-back-next', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['row'],

    actions: {
      openCancelDeploymentModal: function openCancelDeploymentModal() {
        this.set('openModal', true);
      },

      saveAndCancelDeployment: function saveAndCancelDeployment() {
        this.get('targetObject').send('saveAndCancelDeployment');
        this.set('openModal', false);
      },

      cancelAndDeleteDeployment: function cancelAndDeleteDeployment() {
        this.get('targetObject').send('cancelAndDeleteDeployment');
        this.set('openModal', false);
      },

      cancelAndRollbackNewDeployment: function cancelAndRollbackNewDeployment() {
        this.get('targetObject').send('cancelAndRollbackNewDeployment');
      }
    }

  });
});
define('fusor-ember-cli/components/content-mirror-f', ['exports', 'ember', 'fusor-ember-cli/components/text-f', 'ic-ajax'], function (exports, _ember, _fusorEmberCliComponentsTextF, _icAjax) {

  var CDN_VERIFY_TIMEOUT = 3000;

  exports['default'] = _fusorEmberCliComponentsTextF['default'].extend({
    responseCounter: 0,
    validationTrigger: null,
    isVerifyingContentMirror: false,
    dirty: false,

    didInsertElement: function didInsertElement() {
      if (this.get('cdnUrl')) {
        this.queueValidation();
      }
    },

    contentMirrorObserver: _ember['default'].observer('cdnUrl', function () {
      this.queueValidation();
    }),

    queueValidation: function queueValidation() {
      var _this = this;

      if (this.get('isVerifyingContentMirror') === false) {
        this.setIsVerifyingContentMirror(true);
      }

      this.set('dirty', true);
      var validationTrigger = this.get('validationTrigger');

      if (validationTrigger) {
        _ember['default'].run.cancel(validationTrigger);
      }

      this.set('validationTrigger', _ember['default'].run.later(this, function () {
        return _this.onValidate();
      }, CDN_VERIFY_TIMEOUT));
    },

    onValidate: function onValidate() {
      var _this2 = this;

      var cdnUrl = this.get('cdnUrl');
      var protocolCheckRx = /^https?:\/\//;

      if (!protocolCheckRx.test(cdnUrl)) {
        this.setIsVerifyingContentMirror(false);
        this.setContentMirrorValidation(false, 'Missing http protocol');
        return;
      }

      // Guard against race condition of newer responses returning faster
      // than old responses that could result in valid content mirrors
      // being marked invalid, or vice versa
      var responseCounter = this.get('responseCounter') + 1;
      this.set('responseCounter', responseCounter);

      var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
      var deploymentId = this.get('deploymentId');

      var shouldUpdate = function shouldUpdate() {
        return responseCounter === _this2.get('responseCounter') && !_this2.get('dirty');
      };

      this.set('dirty', false);
      this.set('validationTrigger', null);

      (0, _icAjax['default'])({
        url: '/fusor/api/v3/deployments/' + deploymentId + '/validate_cdn',
        headers: {
          "Accept": "application/json",
          "X-CSRF-Token": token
        },
        data: {
          cdn_url: encodeURIComponent(cdnUrl)
        }
      }).then(function (res) {
        // If the response is not the newest response local responseCounter
        // will be less than the responseCounter member field),
        // we want throw away the result since we know a more accurate
        // result is incoming or already has updated our state
        if (shouldUpdate()) {
          _this2.setContentMirrorValidation(res.cdn_url_code === '200');
        }
      })['catch'](function (err) {
        if (shouldUpdate()) {
          _this2.setContentMirrorValidation(false);
        }
      })['finally'](function () {
        if (shouldUpdate()) {
          _this2.setIsVerifyingContentMirror(false);
        }
      });
    },

    setContentMirrorValidation: function setContentMirrorValidation(isValid, validationMsg) {
      this.set('isContentMirrorValid', isValid);

      if (isValid) {
        if (!validationMsg) {
          this.set('contentMirrorValidationMsg', 'Content mirror verified');
        }
        this.sendAction('mirrorStatusUpdate', this.get('MirrorStatus').VALID);
      } else {
        if (!validationMsg) {
          this.set('contentMirrorValidationMsg', 'Invalid content mirror');
        }
        this.sendAction('mirrorStatusUpdate', this.get('MirrorStatus').INVALID);
      }

      if (validationMsg) {
        this.set('contentMirrorValidationMsg', validationMsg);
      }
    },
    setIsVerifyingContentMirror: function setIsVerifyingContentMirror(isVerifying) {
      this.set('isVerifyingContentMirror', isVerifying);

      if (isVerifying) {
        this.sendAction('mirrorStatusUpdate', this.get('MirrorStatus').VALIDATING);
      }
    }
  });
});
define('fusor-ember-cli/components/debug-info', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    isOpen: false,

    click: function click() {
      this.set('isOpen', this.toggleProperty('isOpen'));
    }

  });
});
define('fusor-ember-cli/components/delete-deployment-button', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'span',

    click: function click() {
      this.sendAction('action', this.get('deployment'));
    }

  });
});
define('fusor-ember-cli/components/deployment-role', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    role: null,
    profile: null,
    plan: null,
    nodeCount: 0,

    getParamValue: function getParamValue(paramName, params) {
      var paramValue = null;
      if (params) {
        var numParams = params.get('length');
        for (var i = 0; i < numParams; i++) {
          var param = params.objectAt(i);
          if (param.get('id') === paramName) {
            paramValue = param.get('value');
            break;
          }
        }
      }
      return paramValue;
    },

    roleAssigned: _ember['default'].computed('profile', function () {
      return this.get('profile') !== null;
    }),

    assignedClass: _ember['default'].computed('role-assigned', function () {
      if (this.get('roleAssigned')) {
        return 'role-assigned';
      } else {
        return 'role-unassigned';
      }
    }),

    roleNodeCount: _ember['default'].computed('role', 'plan.parameters', function () {
      var role = this.get('role');
      var params = this.get('plan.parameters');
      return this.getParamValue(role.get('countParameterName'), params);
    }),

    hasAssignedNodes: _ember['default'].computed('roleNodeCount', function () {
      return this.get('roleNodeCount') >= 1;
    }),

    multipleAssignedNodes: _ember['default'].computed('roleNodeCount', function () {
      return this.get('roleNodeCount') >= 2;
    }),

    profileNodes: _ember['default'].computed('totalNodes', function () {
      var totalNodes = 10;
      return totalNodes;
    }),

    availableOptions: _ember['default'].computed('roleNodeCount', function () {
      var avail = _ember['default'].A();
      var increment = 1;
      var maxNodes = Math.max(this.get('nodeCount'), this.get('roleNodeCount'));

      for (var i = 0; i <= maxNodes; i = i + increment) {
        var nextOption = _ember['default'].Object.create({
          label: '' + i,
          value: i,
          /* jshint ignore:start */
          selected: i == this.get('roleNodeCount')
          /* jshint ignore:end */
        });
        avail.addObject(nextOption);
      }

      return avail;
    }),

    actions: {
      updateNodeCount: function updateNodeCount() {
        var nodeCount = parseInt(this.$('select').val());
        this.sendAction('setRoleCount', this.get('role'), nodeCount);
      },

      editRole: function editRole() {
        this.sendAction('edit', this.get('role'));
      },

      removeRole: function removeRole() {
        this.sendAction('remove', this.get('role'));
      }
    }
  });
});
define('fusor-ember-cli/components/draggable-object-target', ['exports', 'ember-drag-drop/components/draggable-object-target'], function (exports, _emberDragDropComponentsDraggableObjectTarget) {
  exports['default'] = _emberDragDropComponentsDraggableObjectTarget['default'];
});
define('fusor-ember-cli/components/draggable-object', ['exports', 'ember-drag-drop/components/draggable-object'], function (exports, _emberDragDropComponentsDraggableObject) {
  exports['default'] = _emberDragDropComponentsDraggableObject['default'];
});
define('fusor-ember-cli/components/em-button', ['exports', 'ember-idx-button/button'], function (exports, _emberIdxButtonButton) {
  exports['default'] = _emberIdxButtonButton['default'];
});
define('fusor-ember-cli/components/em-checkbox', ['exports', 'ember', 'ember-idx-forms/checkbox'], function (exports, _ember, _emberIdxFormsCheckbox) {
  exports['default'] = _emberIdxFormsCheckbox['default'];
});
define('fusor-ember-cli/components/em-form-control-help', ['exports', 'ember', 'ember-idx-forms/control_help'], function (exports, _ember, _emberIdxFormsControl_help) {
  exports['default'] = _emberIdxFormsControl_help['default'];
});
define('fusor-ember-cli/components/em-form-group', ['exports', 'ember', 'ember-idx-forms/group'], function (exports, _ember, _emberIdxFormsGroup) {
  exports['default'] = _emberIdxFormsGroup['default'];
});
define('fusor-ember-cli/components/em-form-label', ['exports', 'ember', 'ember-idx-forms/label'], function (exports, _ember, _emberIdxFormsLabel) {
  exports['default'] = _emberIdxFormsLabel['default'];
});
define('fusor-ember-cli/components/em-form-submit', ['exports', 'ember', 'ember-idx-forms/submit_button'], function (exports, _ember, _emberIdxFormsSubmit_button) {
  exports['default'] = _emberIdxFormsSubmit_button['default'];
});
define('fusor-ember-cli/components/em-form', ['exports', 'ember', 'ember-idx-forms/form'], function (exports, _ember, _emberIdxFormsForm) {
  exports['default'] = _emberIdxFormsForm['default'];
});
define('fusor-ember-cli/components/em-input', ['exports', 'ember', 'ember-idx-forms/input'], function (exports, _ember, _emberIdxFormsInput) {
  exports['default'] = _emberIdxFormsInput['default'];
});
define('fusor-ember-cli/components/em-modal-body', ['exports', 'ember-idx-modal/modal-body'], function (exports, _emberIdxModalModalBody) {
  exports['default'] = _emberIdxModalModalBody['default'];
});
define('fusor-ember-cli/components/em-modal-confirm-with-reason', ['exports', 'ember-idx-modal/modal-confirm-with-reason'], function (exports, _emberIdxModalModalConfirmWithReason) {
  exports['default'] = _emberIdxModalModalConfirmWithReason['default'];
});
define('fusor-ember-cli/components/em-modal-confirm', ['exports', 'ember-idx-modal/modal-confirm'], function (exports, _emberIdxModalModalConfirm) {
  exports['default'] = _emberIdxModalModalConfirm['default'];
});
define('fusor-ember-cli/components/em-modal-emform', ['exports', 'ember-idx-modal/modal-emform'], function (exports, _emberIdxModalModalEmform) {
  exports['default'] = _emberIdxModalModalEmform['default'];
});
define('fusor-ember-cli/components/em-modal-footer', ['exports', 'ember-idx-modal/modal-footer'], function (exports, _emberIdxModalModalFooter) {
  exports['default'] = _emberIdxModalModalFooter['default'];
});
define('fusor-ember-cli/components/em-modal-form', ['exports', 'ember-idx-modal/modal-form'], function (exports, _emberIdxModalModalForm) {
  exports['default'] = _emberIdxModalModalForm['default'];
});
define('fusor-ember-cli/components/em-modal-title', ['exports', 'ember-idx-modal/modal-title'], function (exports, _emberIdxModalModalTitle) {
  exports['default'] = _emberIdxModalModalTitle['default'];
});
define('fusor-ember-cli/components/em-modal-toggler', ['exports', 'ember-idx-modal/modal-toggler'], function (exports, _emberIdxModalModalToggler) {
  exports['default'] = _emberIdxModalModalToggler['default'];
});
define('fusor-ember-cli/components/em-modal', ['exports', 'ember-idx-modal/modal'], function (exports, _emberIdxModalModal) {
  exports['default'] = _emberIdxModalModal['default'];
});
define('fusor-ember-cli/components/em-select', ['exports', 'ember', 'ember-idx-forms/select'], function (exports, _ember, _emberIdxFormsSelect) {
  exports['default'] = _emberIdxFormsSelect['default'];
});
define('fusor-ember-cli/components/em-text', ['exports', 'ember', 'ember-idx-forms/text'], function (exports, _ember, _emberIdxFormsText) {
  exports['default'] = _emberIdxFormsText['default'];
});
define('fusor-ember-cli/components/env-path-list-item', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['path-list-item', 'list_item_active'],

    isChecked: _ember['default'].computed('selectedEnvironment', 'env', function () {
      return this.get('selectedEnvironment') === this.get('env');
    }),

    bgColor: _ember['default'].computed('isChecked', 'disabled', function () {
      if (this.get('isChecked') && this.get('disabled')) {
        return 'env_path_disabled';
      } else if (this.get('isChecked')) {
        return 'env_path_active';
      } else {
        return null;
      }
    }),

    envCssId: _ember['default'].computed('env', function () {
      return 'env_' + this.get('env.id');
    }),

    click: function click() {
      if (!this.get('disabled')) {
        return this.sendAction('action', this.get('env'));
      }
    }

  });
});
define('fusor-ember-cli/components/error-message', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    click: function click() {
      return this.set('errorMsg', null);
    }

  });
});
define('fusor-ember-cli/components/error-modal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    openModal: false,
    errorMessage: '',
    okayCallback: null,
    didInsertElement: function didInsertElement() {
      var _this = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {
        return _this.send('startListening');
      });
    },
    actions: {
      okay: function okay() {
        this.set('openModal', false);
        var okcb = this.get('okayCallback');
        if (okcb) {
          okcb();
        }
      },
      startListening: function startListening() {
        var _this2 = this;

        this.eventBus.on('displayErrorModal', function (e) {
          // Reset stale okayCallback
          if (_this2.get('okayCallback')) {
            _this2.set('okayCallback', null);
          }

          _this2.set('errorMessage', e.errorMessage);
          if (e.okayCallback) {
            _this2.set('okayCallback', e.okayCallback);
          }
          _this2.set('openModal', true);
        });
      },
      stopListening: function stopListening() {
        this.eventBus.off('displayErrorModal');
      }
    }
  });
});
define('fusor-ember-cli/components/file-upload-form', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    selectedFile: null,

    formId: _ember['default'].computed(function () {
      return this.getWithDefault('fileChooserFormId', 'fileChooserForm');
    }),
    inputId: _ember['default'].computed(function () {
      return this.getWithDefault('fileChooserFormId', 'fileChooserInput');
    }),
    acceptValue: _ember['default'].computed(function () {
      return this.getWithDefault('accept', '*');
    }),
    getFileInput: function getFileInput() {
      var idValue = this.get('inputId');
      return this.$('#' + idValue)[0];
    },
    actions: {
      fileChosen: function fileChosen() {
        var fileInput = this.getFileInput();
        this.set('selectedFile', fileInput.files[0]);
      },
      doUpload: function doUpload() {
        var fileInput = this.getFileInput();
        this.sendAction('doUpload', this.get('selectedFile'), fileInput);
      },
      doCancel: function doCancel() {
        var fileInput = this.getFileInput();
        this.sendAction('doCancel', fileInput);
      }
    }
  });
});
define('fusor-ember-cli/components/host-type-icon', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    didInsertElement: function didInsertElement() {
      return _ember['default'].$('[data-toggle="tooltip"]').tooltip({ placement: 'right' });
    },

    willDestroyElement: function willDestroyElement() {
      return _ember['default'].$('[data-toggle="tooltip"]').tooltip('destroy');
    }

  });
});
define('fusor-ember-cli/components/hypervisor-name', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    namePlusDomain: _ember['default'].computed('host', 'hypervisorDomain', function () {
      if (this.get("host.is_discovered")) {
        return this.get("host.name") + "." + this.get('hypervisorDomain');
      } else {
        // name is fqdn for managed host
        return this.get("host.name");
      }
    })

  });
});
define('fusor-ember-cli/components/labeled-radio-button', ['exports', 'ember-radio-button/components/labeled-radio-button'], function (exports, _emberRadioButtonComponentsLabeledRadioButton) {
  exports['default'] = _emberRadioButtonComponentsLabeledRadioButton['default'];
});
define('fusor-ember-cli/components/log-entry', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'p',

    classNames: ['log-entry'],
    classNameBindings: ['levelClass'],

    levelClass: _ember['default'].computed('entry.level', function () {
      var level = this.get('entry.level');

      if (!level) {
        return null;
      }

      return 'log-entry-level-' + level.toLowerCase();
    })
  });
});
define('fusor-ember-cli/components/markdown-to-html', ['exports', 'ember-cli-showdown/components/markdown-to-html'], function (exports, _emberCliShowdownComponentsMarkdownToHtml) {
  exports['default'] = _emberCliShowdownComponentsMarkdownToHtml['default'];
});
define('fusor-ember-cli/components/new-node-registration-mac-address', ['exports', 'ember', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Component.extend({
    macAddressValidator: _fusorEmberCliUtilsValidators.MacAddressValidator.create({}),

    label: _ember['default'].computed('index', function () {
      return this.get('index') === 0 ? 'MAC Address' : '';
    }),

    cssId: _ember['default'].computed('index', function () {
      return 'newNodeManualMacAddressAddInput' + this.get('index');
    })
  });
});
define('fusor-ember-cli/components/node-details-block', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define('fusor-ember-cli/components/node-details', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['node-details'],

    customEditLabel: "Custom Edit",

    isEditMode: false,

    customEditLabel: _ember['default'].computed('isEditMode', function () {
      return this.get('isEditMode') ? "Finish Editing" : "Custom Edit";
    }),

    actions: {
      editOseNodeDetails: function editOseNodeDetails() {
        this.toggleProperty('isEditMode');
      }
    }

  });
});
define('fusor-ember-cli/components/node-profile', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    assignMenuOpenClass: '',

    nodes: [],

    getParamValue: function getParamValue(paramName, params) {
      var paramValue = null;
      var numParams = params.get('length');
      for (var i = 0; i < numParams; i++) {
        var param = params.objectAt(i);
        if (param.get('id') === paramName) {
          paramValue = param.get('value');
          break;
        }
      }
      return paramValue;
    },

    flavorParams: _ember['default'].computed('plan.parameters.[]', function () {
      var params = this.get('plan.parameters');

      if (!params) {
        return [];
      }

      return params.filter(function (param) {
        return !!param.get('id').match(/.*::Flavor/);
      });
    }),

    unassignedRoles: _ember['default'].computed('plan.roles.[]', 'flavorParams.@each.value', function () {
      var self = this,
          roles = this.get('plan.roles');

      if (!roles) {
        return [];
      }

      return roles.filter(function (role) {
        return !self.roleIsAssigned(role);
      });
    }),

    assignedRoles: _ember['default'].computed('plan.roles.[]', 'flavorParams.@each.value', function () {
      var self = this,
          roles = this.get('plan.roles'),
          params = this.get('flavorParams');

      if (!roles) {
        return [];
      }

      return roles.filter(function (role) {
        var param = params.findBy('id', role.get('flavorParameterName'));
        return param && param.get('value') === self.get('profile.name');
      });
    }),

    roleIsAssigned: function roleIsAssigned(role) {
      var value = this.getParamValue(role.get('flavorParameterName'), this.get('flavorParams'));
      return value && value !== 'baremetal';
    },

    allRolesAssigned: _ember['default'].computed('unassignedRoles.[]', function () {
      return this.get('unassignedRoles.length') === 0;
    }),

    /* jshint ignore:start */
    nodeMatchesProfile: function nodeMatchesProfile(node, profile) {
      var nodeMemory = node.get('properties.memory_mb');
      var nodeCPUs = node.get('properties.cpus');
      var nodeDisk = node.get('properties.local_gb');
      var nodeCPUArch = node.get('properties.cpu_arch');
      var profileMemory = profile.get('ram');
      var profileCPUs = profile.get('vcpus');
      var profileDisk = profile.get('disk');
      var profileCPUArch = profile.get('extra_specs.cpu_arch');
      return nodeMemory == profileMemory && nodeCPUs == profileCPUs && nodeDisk == profileDisk && nodeCPUArch == profileCPUArch;
    },
    /* jshint ignore:end */

    matchingNodeCount: _ember['default'].computed('profile', 'nodes.[]', function () {
      var nodeCount = 0;
      var profile = this.get('profile');
      var self = this;
      this.get('nodes').forEach(function (node) {
        if (self.nodeMatchesProfile(node, profile)) {
          nodeCount++;
        }
      });
      return nodeCount;
    }),

    hideAssignMenu: function hideAssignMenu() {
      this.set('assignMenuOpenClass', '');
    },

    assignClass: _ember['default'].computed('doAssign', function () {
      if (this.doAssign) {
        return "";
      } else {
        return "nodes-coalescing";
      }
    }),

    actions: {
      showAssignMenu: function showAssignMenu() {
        if (!this.get('allRolesAssigned')) {
          this.set('assignMenuOpenClass', 'open');
        }
      },

      assignRole: function assignRole(role) {
        var profile = this.get('profile');
        var plan = this.get('plan');
        this.sendAction('assignRole', plan, role, profile);
      },

      assignDroppedRole: function assignDroppedRole(role) {
        role.set('isDraggingObject', false);
        var profile = this.get('profile');
        var plan = this.get('plan');
        if (this.getParamValue(role.get('flavorParameterName'), plan.get('parameters')) !== profile.get('name')) {
          this.sendAction('assignRole', plan, role, profile);
        }
      },
      editRole: function editRole(role) {
        this.sendAction('editRole', role);
      },

      setRoleCount: function setRoleCount(role, count) {
        this.sendAction('setRoleCount', role, count);
      },

      removeRole: function removeRole(role) {
        var profile = this.get('profile');
        this.sendAction('removeRole', profile, role);
      }
    },
    didInsertElement: function didInsertElement() {
      var self = this;
      _ember['default'].$('body').on('click', function () {
        try {
          self.hideAssignMenu();
        } catch (error) {}
      });
    }
  });
});
define('fusor-ember-cli/components/object-bin', ['exports', 'ember-drag-drop/components/object-bin'], function (exports, _emberDragDropComponentsObjectBin) {
  exports['default'] = _emberDragDropComponentsObjectBin['default'];
});
define('fusor-ember-cli/components/ose-env-summary', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['ose-env-summary'],

    resourcesAvailableToolTip: _ember['default'].computed('cfmeVcpu', 'cfmeRam', 'cfmeDisk', function () {
      return this.get('cfmeVcpu') + ' vCPUs, ' + this.get('cfmeRam') + 'GB RAM, ' + this.get('cfmeDisk') + 'GB Disk reserved for CloudForms';
    })

  });
});
define('fusor-ember-cli/components/ose-host-review-link', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    linkLabel: _ember['default'].computed('_infoObj', function () {
      var info = this.get('_infoObj');
      var labelPrefix = info.get('labelPrefix');
      var hostId = info.get('hostId');

      return labelPrefix + ' ' + hostId;
    }),
    linkValue: _ember['default'].computed('oseHost', function () {
      return 'https://' + this.get('oseHost.name') + ':8443';
    }),
    linkIp: _ember['default'].computed('oseHost', function () {
      return 'https://' + this.get('oseHost.ip') + ':8443';
    }),
    isWorkerNode: _ember['default'].computed('_infoObj', function () {
      var info = this.get('_infoObj');
      return info.get('labelPrefix') === 'Node';
    }),
    // Internal
    _infoObj: _ember['default'].computed('oseHost', function () {
      var extractionRegex = /ose-(master|node)(\d+)\./;
      var hostName = this.get('oseHost.name');
      var match = hostName.match(extractionRegex);

      if (!match) {
        throw "ASSERTION FAILED: Failed to extract regex from host name.";
      }

      return _ember['default'].Object.create({
        labelPrefix: match[1] === 'master' ? 'Master' : 'Node',
        hostId: match[2]
      });
    })
  });
});
define('fusor-ember-cli/components/ose-node-detail-line', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['row', 'ose-node-line']

  });
});
define('fusor-ember-cli/components/ose-summary-needed-available', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['row env-summary-needed-available'],

    percentProgress: _ember['default'].computed('needed', 'available', function () {
      return parseInt(parseInt(this.get('needed')) / parseInt(this.get('available')) * 100);
    }),

    percentProgressMax: _ember['default'].computed('percentProgress', function () {
      var percentProgress = this.get('percentProgress') > 100 ? 100 : this.get('percentProgress');
      return parseInt(percentProgress);
    }),

    styleWidth: _ember['default'].computed('percentProgressMax', function () {
      return new _ember['default'].Handlebars.SafeString(this.get('percentProgressMax') + '%');
    }),

    progressBarClass: _ember['default'].computed('percentProgress', function () {
      var percent = this.get('percentProgress');
      if (percent < 100) {
        return 'progress-bar progress-bar-gray';
      } else if (percent === 100) {
        return 'progress-bar progress-bar-black';
      } else if (percent > 100) {
        return 'progress-bar progress-bar-danger';
      } else {
        return 'progress-bar';
      }
    }),

    fontColorClass: _ember['default'].computed('percentProgress', function () {
      if (this.get('percentProgress') > 99) {
        return 'white';
      } else {
        return 'black';
      }
    }),

    isMaxAmount: _ember['default'].computed('percentProgress', function () {
      return this.get('percentProgress') === 100;
    }),

    isOverCapacity: _ember['default'].computed('percentProgress', function () {
      return this.get('percentProgress') > 100;
    }),

    helpText: _ember['default'].computed('isOverCapacity', 'isMaxAmount', function () {
      if (this.get('isOverCapacity')) {
        return "Too much " + this.get('label') + " assigned";
      } else if (this.get('isMaxAmount')) {
        return "Maximum amount of " + this.get('label') + " assigned";
      }
    }),

    showSubstractTooltip: _ember['default'].computed('label', 'substractCfme', function () {
      return this.get('label') === 'Disk' && this.get('substractCfme');
    })

  });
});
define('fusor-ember-cli/components/osp-node-manager', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    isAddNewNodeDisabled: false,
    autoNodes: [],
    manualNodes: [],

    safeLabel: _ember['default'].computed('nodeManager.address', function () {
      var label = this.get('nodeManager.address');
      return label ? label.replace(/[^A-Z0-9]/ig, '') : '';
    }),

    isEditable: _ember['default'].computed('nodeManager.nodes.[]', function () {
      return _ember['default'].isEmpty(this.get('nodeManager.nodes'));
    }),

    isValidLogin: _ember['default'].computed('nodeManager.driver', 'nodeManager.address', 'nodeManager.username', 'nodeManager.password', function () {
      return _ember['default'].isPresent(this.get('nodeManager.driver')) && _ember['default'].isPresent(this.get('nodeManager.address')) && _ember['default'].isPresent(this.get('nodeManager.username')) && _ember['default'].isPresent(this.get('nodeManager.password'));
    }),

    isAutoDetectDisabled: _ember['default'].computed.not('isValidLogin'),
    isNodeListDisabled: _ember['default'].computed.not('isValidLogin'),

    nodeCount: _ember['default'].computed('nodeManager.nodes.@each.properties', function () {
      return this.get('nodeManager.nodes').reduce(function (prev, node) {
        return prev + (node.get('ready') ? 1 : 0);
      }, 0);
    }),

    nodesPendingRegistration: _ember['default'].computed('autoNodes.[]', 'manualNodes.[]', function () {
      return this.get('autoNodes.length') > 0 || this.get('manualNodes.length') > 0;
    }),

    cpuRange: _ember['default'].computed('nodeManager.nodes.@each.properties.cpus', function () {
      var minCPUs = null,
          maxCPUs = null;
      var nodes = this.get('nodeManager.nodes');

      if (nodes) {
        nodes.forEach(function (node) {
          var nodeCPUs = parseInt(node.get('properties.cpus'), 10);
          if (nodeCPUs) {
            minCPUs = minCPUs ? Math.min(minCPUs, nodeCPUs) : nodeCPUs;
            maxCPUs = maxCPUs ? Math.max(maxCPUs, nodeCPUs) : nodeCPUs;
          }
        });
      }

      if (minCPUs === maxCPUs) {
        return _ember['default'].isPresent(minCPUs) ? '' + minCPUs : '??';
      }

      return minCPUs + ' - ' + maxCPUs;
    }),

    memRange: _ember['default'].computed('nodeManager.nodes.@each.properties.memory_mb', function () {
      var minMem = null,
          maxMem = null;
      var nodes = this.get('nodeManager.nodes');

      if (nodes) {
        nodes.forEach(function (node) {
          var memoryMB = parseInt(node.get('properties.memory_mb'), 10);
          if (memoryMB) {
            memoryMB = Math.floor(memoryMB / 1024);
            minMem = minMem ? Math.min(minMem, memoryMB) : memoryMB;
            maxMem = maxMem ? Math.max(maxMem, memoryMB) : memoryMB;
          }
        });
      }

      if (minMem === maxMem) {
        return _ember['default'].isPresent(minMem) ? minMem + ' GB' : '??';
      }

      return minMem + ' GB - ' + maxMem + ' GB';
    }),

    storageRange: _ember['default'].computed('nodeManager.nodes.@each.properties.local_gb', function () {
      var minStorage = null,
          maxStorage = null;
      var nodes = this.get('nodeManager.nodes');

      if (nodes) {
        nodes.forEach(function (node) {
          var localGB = parseInt(node.get('properties.local_gb'), 10);
          if (localGB) {
            minStorage = minStorage ? Math.min(minStorage, localGB) : localGB;
            maxStorage = maxStorage ? Math.max(maxStorage, localGB) : localGB;
          }
        });
      }

      if (minStorage === maxStorage) {
        return _ember['default'].isPresent(minStorage) ? minStorage + ' GB' : '??';
      }

      return minStorage + ' GB - ' + maxStorage + ' GB';
    }),

    actions: {
      onAddNode: function onAddNode() {
        this.sendAction('addNodes', this.get('nodeManager'));
      },

      deleteNode: function deleteNode(node, nodeLabel) {
        this.sendAction('deleteNode', node, nodeLabel);
      }
    }

  });
});
define('fusor-ember-cli/components/osp-node', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['row osp-node-row'],

    deleteEnabled: true,

    label: _ember['default'].computed('node', 'ports', function () {
      var node = this.get('node');
      var macAddress = node ? node.getMacAddress(this.get('ports')) : null;
      return macAddress || node.get('id');
    }),

    safeLabel: _ember['default'].computed('label', function () {
      var label = this.get('label');
      return label ? label.replace(/[^A-Z0-9]/ig, '') : '';
    }),

    status: _ember['default'].computed('node', function () {
      if (this.get('node.last_error')) {
        return 'Error';
      }

      if (_ember['default'].isPresent(this.get('node.provision_state'))) {
        return 'node.provision_state';
      }

      return 'Free';
    }),

    foremanTask: _ember['default'].computed('node', 'introspectionTasks.@each', 'foremanTasks.@each', function () {
      return this.get('node').getForemanTask(this.get('introspectionTasks'), this.get('foremanTasks'));
    }),

    isNodeReady: _ember['default'].computed('node.properties.cpu', 'node.properties.memory_mb', 'node.properties.local_gb', function () {
      return this.get('node.ready');
    }),

    isNodeInspecting: _ember['default'].computed('node.ready', 'foremanTask', 'foremanTask.state', 'foremanTask.result', function () {
      return !this.get('node.ready') && this.get('foremanTask') && this.get('foremanTask.state') === 'running' && this.get('foremanTask.result') === 'pending';
    }),

    isNodeError: _ember['default'].computed('isNodeReady', 'isNodeInspecting', 'foremanTask', 'foremanTask.result', 'foremanTask.humanized_errors', function () {
      if (this.get('isNodeReady') || this.get('isNodeInspecting')) {
        return false;
      }

      return this.get('foremanTask.result') === 'error' || _ember['default'].isPresent(this.get('foremanTask.humanized_errors'));
    }),

    progressWidth: _ember['default'].computed('foremanTask.progress', function () {
      var progressPercent = Math.floor((parseFloat(this.get('foremanTask.progress')) || 0) * 100);
      return progressPercent + '%';
    }),

    progressBarClass: _ember['default'].computed('isNodeError', function () {
      if (this.get('isNodeError')) {
        return 'progress-bar progress-bar-danger osp-node-progress-bar';
      }
      return 'progress-bar osp-node-progress-bar';
    }),

    actions: {
      onDeleteClicked: function onDeleteClicked() {
        this.sendAction('deleteNode', this.get('node'), this.get('label'));
      }
    }

  });
});
define('fusor-ember-cli/components/progress-bar', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['row'],

    valueProgress: _ember['default'].computed('model.progress', function () {
      if (this.get('model.state') === 'planning') {
        return 0.1;
      } else if (this.get('model.state')) {
        return this.get('model.progress') * 100;
      } else {
        return 0;
      }
    }),

    percentProgress: _ember['default'].computed('valueProgress', function () {
      return this.get('valueProgress').toFixed(1);
    }),

    percentProgressInt: _ember['default'].computed('valueProgress', function () {
      return this.get('valueProgress').toFixed(0);
    }),

    styleWidth: _ember['default'].computed('percentProgressInt', function () {
      return new _ember['default'].Handlebars.SafeString(this.get('percentProgressInt') + '%');
    }),

    progressBarClass: _ember['default'].computed('model.result', function () {
      var result = this.get('model.result');
      if (result === 'success') {
        return 'progress-bar progress-bar-success';
      } else if (result === 'error') {
        return 'progress-bar progress-bar-danger';
      } else if (result === 'warning') {
        return 'progress-bar progress-bar-warning';
      } else {
        return 'progress-bar';
      }
    }),

    deploymentStatus: _ember['default'].computed('valueProgress', function () {
      var valueProgress = this.get('valueProgress');
      if (valueProgress) {
        if (valueProgress === 100) {
          return 'Finished';
        } else {
          return 'In Process';
        }
      } else {
        return 'Waiting for content';
      }
    }),

    isSpin: _ember['default'].computed('deploymentStatus', 'model.result', function () {
      return this.get('deploymentStatus') === 'In Process' && this.get('model.result') === 'pending';
    }),

    progressBarMsg: _ember['default'].computed('deploymentStatus', 'model.result', 'isFinished', 'isStopped', 'isSatelliteProgressBar', function () {
      if (this.get('deploymentStatus') === 'In Process' && this.get('model.result') === 'pending') {
        if (this.get('isSatelliteProgressBar')) {
          return "Syncing content";
        } else if (this.get('isNodeProgressBar')) {
          return "Registering Node";
        } else if (this.get('isStopped')) {
          return "Task is stopped";
        } else {
          return "Installing components";
        }
      } else if (this.get('model.result') === 'error') {
        return "Error";
      } else if (this.get('model.result') === 'warning') {
        return "Warning";
      } else if (!this.get('isStarted')) {
        return "Waiting for content";
      } else if (this.get('isFinished')) {
        if (this.get('isSatelliteProgressBar')) {
          return "Sync content and setup successful";
        } else {
          if (this.get('isNodeProgressBar')) {
            return "Node registration successful";
          } else {
            return "Deployment successful";
          }
        }
      }
    }),

    isFinished: _ember['default'].computed('valueProgress', function () {
      return this.get('valueProgress') === 100;
    }),

    isStarted: _ember['default'].computed('valueProgress', function () {
      return this.get('valueProgress') > 0;
    }),

    isError: _ember['default'].computed('model.result', function () {
      return this.get('model.result') === 'error';
    }),

    isStopped: _ember['default'].computed('model.state', function () {
      return this.get('model.state') === 'stopped' || this.get('model.state') === 'paused';
    }),

    hasHumanizedErrors: _ember['default'].computed('model.humanized_errors', function () {
      return _ember['default'].isPresent(this.get('model.humanized_errors'));
    }),

    hostErrorInfo: _ember['default'].computed('model.humanized_errors', function () {
      var error = this.get('model.humanized_errors'),
          host = '';

      if (error.match(/Failed to provision/)) {
        host = error.match(/host '(.*)'\./)[1];

        return "Please check the host logs or <a href='/hosts/" + host + "/reports'>puppet reports</a>.";
      }
    })

  });
});
define('fusor-ember-cli/components/radio-button-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define('fusor-ember-cli/components/radio-button-input', ['exports', 'ember-radio-button/components/radio-button-input'], function (exports, _emberRadioButtonComponentsRadioButtonInput) {
  exports['default'] = _emberRadioButtonComponentsRadioButtonInput['default'];
});
define('fusor-ember-cli/components/radio-button', ['exports', 'ember-radio-button/components/radio-button'], function (exports, _emberRadioButtonComponentsRadioButton) {
  exports['default'] = _emberRadioButtonComponentsRadioButton['default'];
});
define('fusor-ember-cli/components/range-text-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    typeInput: _ember['default'].computed('type', function () {
      return this.get('type') ? this.get('type') : 'text';
    }),

    actions: {
      showErrors: function showErrors() {
        this.set("showError", true);
      }
    }

  });
});
define('fusor-ember-cli/components/review-link', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    // all these values can be overwritten
    isRequired: false,
    isDefault: false,
    useYieldInstead: false,
    isExternalURL: false,
    validationMessage: 'required field',
    defaultMessage: 'default',

    eyeIcon: 'fa-eye',
    isEyeOpen: true,

    showValidationMessage: _ember['default'].computed('isRequired', 'value', function () {
      return this.get('isRequired') && _ember['default'].isBlank(this.get('value'));
    }),

    showDefaultMessage: _ember['default'].computed('isDefault', 'value', function () {
      return this.get('isDefault') && _ember['default'].isBlank(this.get('value'));
    }),

    valueFormatted: _ember['default'].computed('isPassword', 'isEyeOpen', 'value', function () {
      if (this.get('isPassword') && this.get('isEyeOpen') && _ember['default'].isPresent(this.get('value'))) {
        return '********';
      } else {
        return this.get('value');
      }
    }),

    isNotALink: _ember['default'].computed('isExternalURL', 'routeName', function () {
      return _ember['default'].isBlank(this.get('routeName')) && !this.get('isExternalURL');
    }),

    title: 'Alternative IP Address',
    helpTextIpAddress: _ember['default'].computed('ipAddress', function () {
      return '<a href=' + this.get('ipAddress') + ' target="_blank">' + this.get('ipAddress') + '</a>';
    }),

    didInsertElement: function didInsertElement() {
      return _ember['default'].$('[data-toggle="popover"]').popover({ html: true,
        trigger: 'click hover',
        title: this.get('title'),
        placement: 'right'
      });
    },

    willDestroyElement: function willDestroyElement() {
      return _ember['default'].$('[data-toggle="popover"]').popover('destroy');
    },

    actions: {
      showPassword: function showPassword() {
        this.set('isEyeOpen', this.toggleProperty('isEyeOpen'));
        if (this.get('isEyeOpen')) {
          return this.set('eyeIcon', "fa-eye");
        } else {
          return this.set('eyeIcon', "fa-eye-slash");
        }
      },

      doNothing: function doNothing() {
        return false;
      }

    }

  });
});
define('fusor-ember-cli/components/rhci-item', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['row', 'rhci-item'],
    classNameBindings: ['isChecked:rhci-item-selected']
  });
});
define('fusor-ember-cli/components/rhci-start', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['rhci-start-block'],

    setIsDisabledCfmeAndOpenshift: _ember['default'].observer('isRhev', 'isOpenStack', function () {
      if (this.get('isRhev') || this.get('isOpenStack')) {
        this.set('isDisabledOpenShift', false);
        return this.set('isDisabledCfme', false);
      } else {
        this.set('isOpenShift', false);
        this.set('isCloudForms', false);
        this.set('isDisabledOpenShift', true);
        return this.set('isDisabledCfme', true);
      }
    }),

    // tagline names
    taglineRhev: "for Traditional Workloads",
    taglineOpenStack: "for Cloud Workloads",
    taglineCloudForms: "for Hybrid Cloud Management",
    taglineOpenShift: "for Private Platform as a Service",

    // desc
    descRhev: 'Complete enterprise virtualization management for servers and desktops on the same infrastructure',
    descOpenStack: 'Flexible, secure foundations to build a massively scalable private or public cloud',
    descCloudForms: 'Manage your virtual, private, and hybrid cloud infrastructures',
    descOpenShift: 'Develop, host, and scale applications in a cloud environment'

  });
});
define('fusor-ember-cli/components/rhci-wizard', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['col-md-12', 'page-header', 'page-header-rhci']
  });
});
define('fusor-ember-cli/components/select-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define('fusor-ember-cli/components/select-req-f', ['exports', 'ember'], function (exports, _ember) {

  _ember['default'].SelectOption.reopen({
    attributeBindings: ['value', 'disabled'],
    disabled: (function () {
      var content = this.get('content');
      return content.disabled || false;
    }).property('content')
  });

  exports['default'] = _ember['default'].Component.extend({
    // Requires: optionLabelPath, optionValuePath, prompt
    // Expects showValidationError to be bound to external property
    _content: _ember['default'].computed('content', 'prompt', function () {
      var promptObj = _ember['default'].Object.create({
        disabled: true,
        isPrompt: true
      });

      if (this.get('optValueIsOptLabel')) {
        promptObj.set(this.get('valueKey'), this.get('prompt'));
      } else {
        promptObj.set(this.get('labelKey'), this.get('prompt'));
        promptObj.set(this.get('valueKey'), null);
      }

      var wrappedContent = _ember['default'].A([promptObj]);
      wrappedContent.pushObjects(this.get('content'));
      return wrappedContent;
    }),

    valueKey: _ember['default'].computed('content', function () {
      var split = this.get('optionValuePath').split('.');
      return split[split.length - 1];
    }),

    labelKey: _ember['default'].computed('content', function () {
      var split = this.get('optionLabelPath').split('.');
      return split[split.length - 1];
    }),

    optValueIsOptLabel: _ember['default'].computed('optionValuePath', 'optionLabelPath', function () {
      return this.get('optionValuePath') === this.get('optionLabelPath');
    }),

    valueIsPrompt: _ember['default'].computed('value', function () {
      return this.get('value') === null || this.get('value.isPrompt');
    }),
    valueIsNotPrompt: _ember['default'].computed.not('valueIsPrompt'),

    isInvalid: _ember['default'].computed.not('isValid'),

    validationMessages: _ember['default'].computed('value', function () {
      return ['must select an option'];
    }),

    hasError: _ember['default'].computed('showValidationError', 'errors.name', 'isInvalid', function () {
      return this.get('showValidationError') && this.get('isInvalid');
    }),

    showValidationError: false // Sane default if not bound to external property
  });
});
define('fusor-ember-cli/components/select-simple-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define('fusor-ember-cli/components/sortable-objects', ['exports', 'ember-drag-drop/components/sortable-objects'], function (exports, _emberDragDropComponentsSortableObjects) {
  exports['default'] = _emberDragDropComponentsSortableObjects['default'];
});
define('fusor-ember-cli/components/step-number', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'span',
    classNames: ['badge'],
    classNameBindings: ['badgeInverse'],
    badgeInverse: false
  });
});
define('fusor-ember-cli/components/text-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    didInsertElement: function didInsertElement() {
      var _this = this;

      var resetErrorsMessageKey = this.get('resetErrorsMessageKey');
      if (resetErrorsMessageKey) {
        this.eventBus.on(resetErrorsMessageKey, function () {
          return _this.send('showValidationErrors');
        });
      }
    },
    willClearRender: function willClearRender() {
      var resetErrorsMessageKey = this.get('resetErrorsMessageKey');
      if (resetErrorsMessageKey) {
        this.eventBus.off(resetErrorsMessageKey);
      }
    },

    typeInput: _ember['default'].computed('type', function () {
      return this.get('type') ? this.get('type') : 'text';
    }),

    cssFormClass: _ember['default'].computed('preText', 'postText', function () {
      if (_ember['default'].isEmpty(this.get('preText')) && _ember['default'].isEmpty(this.get('postText'))) {
        return 'form-control';
      }
    }),

    validIsRequiredAndBlank: _ember['default'].computed('value', 'isRequired', function () {
      return this.get('isRequired') && _ember['default'].isBlank(this.get('value'));
    }),

    isPassword: _ember['default'].computed('type', function () {
      return this.get('type') === 'password';
    }),

    isValid: _ember['default'].computed('value', 'validator', 'errors.name', 'validIsRequiredAndBlank', function () {
      if (_ember['default'].isPresent(this.get('errors.name')) || this.get('validIsRequiredAndBlank')) {
        return false;
      }

      var validator = this.get('validator');
      return validator ? validator.isValid(this.get('value')) : true;
    }),

    isInvalid: _ember['default'].computed.not('isValid'),

    hasError: _ember['default'].computed('showValidationError', 'errors.name', 'isInvalid', function () {
      return this.get('showValidationError') && this.get('isInvalid');
    }),

    validationMessages: _ember['default'].computed('value', 'validator', 'validIsRequiredAndBlank', function () {
      if (this.get('validIsRequiredAndBlank')) {
        return ['cannot be blank'];
      }

      var validator = this.get('validator');
      return validator ? validator.getMessages(this.get('value')) : [];
    }),

    setOrigValue: _ember['default'].on('didInsertElement', function () {
      this.set('origValue', this.get('value'));
    }),

    eyeIcon: 'fa-eye',
    isEyeOpen: true,

    actions: {
      showValidationErrors: function showValidationErrors() {
        this.set("showValidationError", true);
      },

      showPassword: function showPassword() {
        this.set('isEyeOpen', this.toggleProperty('isEyeOpen'));
        if (this.get('isEyeOpen')) {
          this.set('typeInput', 'password');
          return this.set('eyeIcon', "fa-eye");
        } else {
          this.set('typeInput', 'text');
          return this.set('eyeIcon', "fa-eye-slash");
        }
      }
    }
  });
});
define('fusor-ember-cli/components/textarea-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    rowsPassed: _ember['default'].computed('rows', function () {
      if (this.get('rows')) {
        if (this.get('rows') > 0) {
          return true;
        }
      }
    }),

    numRows: _ember['default'].computed(function () {
      return this.getWithDefault('rows', '');
    }),

    numCols: _ember['default'].computed(function () {
      return this.getWithDefault('cols', '');
    })

  });
});
define('fusor-ember-cli/components/tool-tip', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'span',

    attributeBindings: ['dataToggle:data-toggle', 'title'],
    dataToggle: 'tooltip',

    hasImage: _ember['default'].computed.notEmpty('srcImage'),

    hasFaIcon: _ember['default'].computed.notEmpty('faIcon'),

    didInsertElement: function didInsertElement() {
      return _ember['default'].$('[data-toggle="tooltip"]').tooltip({ placement: 'top' });
    },

    willDestroyElement: function willDestroyElement() {
      return _ember['default'].$('[data-toggle="tooltip"]').tooltip('destroy');
    }

  });
});
define('fusor-ember-cli/components/tr-deployment', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    classNames: ['deployment-row'],

    isStarted: _ember['default'].computed('deployment.foreman_task_uuid', function () {
      return !!this.get('deployment.foreman_task_uuid');
    }),

    isComplete: _ember['default'].computed('foremanTask', 'foremanTask.progress', function () {
      return this.get('foremanTask.progress') === '1';
    }),

    foremanTask: _ember['default'].computed('deployment.foreman_task_uuid', function () {
      var foremanTaskUuid = this.get('deployment.foreman_task_uuid');

      if (!foremanTaskUuid) {
        return null;
      }

      return this.get('targetObject.store').findRecord('foreman-task', foremanTaskUuid);
    }),

    isError: _ember['default'].computed('foremanTask.result', function () {
      return this.get('foremanTask.result') === 'error';
    }),

    canDelete: _ember['default'].computed('isStarted', 'isError', function () {
      if (!this.get('isStarted')) {
        return true;
      } else {
        return this.get('isError');
      }
    }),

    routeNameForEdit: _ember['default'].computed('isComplete', 'isStarted', function () {
      if (this.get('isComplete')) {
        return 'review.summary';
      } else if (this.get('isStarted')) {
        return 'review.progress.overview';
      }

      return 'deployment';
    }),

    actions: {
      openDeploymentModal: function openDeploymentModal(item) {
        this.get('targetObject').set('deploymentInModal', item);
        return this.get('targetObject').set('isOpenModal', true);
      }
    }

  });
});
define('fusor-ember-cli/components/tr-engine', ['exports', 'ember', 'fusor-ember-cli/mixins/tr-engine-hypervisor-mixin'], function (exports, _ember, _fusorEmberCliMixinsTrEngineHypervisorMixin) {
  exports['default'] = _ember['default'].Component.extend(_fusorEmberCliMixinsTrEngineHypervisorMixin['default'], {

    isSelectedAsEngine: _ember['default'].computed('host', 'selectedRhevEngineHost', function () {
      if (this.get('selectedRhevEngineHost')) {
        return this.get('selectedRhevEngineHost.id') === this.get('host.id');
      }
    }),

    isChecked: _ember['default'].computed('isSelectedAsEngine', function () {
      return this.get('isSelectedAsEngine');
    }),

    actions: {
      engineHostChanged: function engineHostChanged(host) {
        return this.sendAction("action", host, this.get('isInvalidHostname'));
      }
    }
  });
});
define('fusor-ember-cli/components/tr-hypervisor', ['exports', 'ember', 'fusor-ember-cli/mixins/tr-engine-hypervisor-mixin'], function (exports, _ember, _fusorEmberCliMixinsTrEngineHypervisorMixin) {
  exports['default'] = _ember['default'].Component.extend(_fusorEmberCliMixinsTrEngineHypervisorMixin['default'], {

    isChecked: _ember['default'].computed('isSelectedAsHypervisor', function () {
      return this.get('isSelectedAsHypervisor');
    }),

    observeHostName: _ember['default'].observer('isSelectedAsHypervisor', 'customPreprendName', 'isCustomScheme', 'isHypervisorN', 'isFreeform', 'isMac', function () {
      if (this.get('isSelectedAsHypervisor')) {
        if (this.get('isCustomScheme') && this.get('customPreprendName')) {
          this.get('host').set('name', this.get('customPreprendName') + this.get('num'));
        } else if (this.get('isHypervisorN')) {
          this.get('host').set('name', 'hypervisor' + this.get('num'));
        } else if (this.get('isMac')) {
          this.get('host').set('name', 'mac' + this.get('host').get('mac').replace(/:/g, ''));
        } else {
          this.get('host').set('name', this.get('host.name'));
        }
        return this.send('saveHostname');
      }
    }),

    addOrRemoveHypervisor: _ember['default'].observer('isSelectedAsHypervisor', function () {
      if (this.get('isSelectedAsHypervisor')) {
        this.get('model').addObject(this.get('host'));
      } else {
        this.get('model').removeObject(this.get('host'));
      }
    }),

    setOrUnceckAll: _ember['default'].observer('checkAll', 'uncheckAll', function () {
      if (this.get('checkAll')) {
        return this.set('isSelectedAsHypervisor', true);
      } else if (this.get('uncheckAll')) {
        return this.set('isSelectedAsHypervisor', false);
      }
    }),

    isSelectedAsHypervisor: _ember['default'].computed('selectedIds', 'host.id', function () {
      if (this.get('selectedIds')) {
        return this.get('selectedIds').contains(this.get('host.id'));
      }
    })

  });
});
define('fusor-ember-cli/components/tr-management-app', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    isChecked: _ember['default'].computed('consumerUUID', 'managementApp.id', function () {
      return this.get('consumerUUID') === this.get('managementApp.id');
    }),

    bgColor: _ember['default'].computed('isChecked', function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }),

    actions: {
      changeManagementApp: function changeManagementApp() {
        this.sendAction('action', this.get('managementApp'));
      }
    }

  });
});
define('fusor-ember-cli/components/tr-organization', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    isChecked: _ember['default'].computed('selectedOrganization', 'org', function () {
      return this.get('selectedOrganization') === this.get('org');
    }),

    bgColor: _ember['default'].computed('isChecked', function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }),

    actions: {
      organizationChanged: function organizationChanged() {
        this.sendAction('action', this.get('org'));
      }
    }

  });
});
define('fusor-ember-cli/components/tr-subscription-manifest', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'tr',

        qtyColumn: _ember['default'].computed('isDisconnected', 'subscription.quantity_to_add', 'subscription.quantity_attached', 'subscription.qtySumAttached', function () {
            if (this.get('isDisconnected')) {
                return this.get('subscription.quantity_attached');
            } else if (this.get('subscription.quantity_to_add') > 0) {
                return this.get('subscription.quantity_attached') + ' + ' + this.get('subscription.quantity_to_add') + ' = ' + this.get('subscription.qtySumAttached');
            } else {
                return this.get('subscription.quantity_attached');
            }
        })

    });
});
define('fusor-ember-cli/components/tr-subscription-saved', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    classNames: ['white-on-blue']

  });
});
define('fusor-ember-cli/components/tr-subscription', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    systemType: _ember['default'].computed('subscription.type', function () {
      if (this.get('subscription.type') === "NORMAL") {
        return 'Physical';
      } else {
        return this.get('subscription.type');
      }
    }),

    bgColor: _ember['default'].computed('isChecked', function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }),

    envCssId: _ember['default'].computed('env', function () {
      return 'env_' + this.get('env.id');
    }),

    isQtyValid: _ember['default'].computed('subscription.qtyAvailable', 'subscription.qtyToAttach', function () {
      if (this.get('subscription.qtyToAttach') >= 0 && this.get('subscription.qtyAvailable') > 0) {
        return this.get('subscription.qtyToAttach') <= this.get('subscription.qtyAvailable');
      }
    }),
    isQtyInValid: _ember['default'].computed.not('isQtyValid'),

    disableQty: _ember['default'].computed('subscription.qtyAvailable', function () {
      return this.get('subscription.qtyAvailable') === 0;
    }),

    setIsSelectedSubscription: _ember['default'].on('didInsertElement', function () {
      // model is subscriptions added
      // this.get('subscription') is actually a pool
      var self = this;
      this.get('model').forEach(function (sub) {
        // update for matching subscription only
        if (sub.get('contract_number') == self.get('subscription.contractNumber')) {
          var hasQtyToAdd = sub.get('quantity_to_add') > 0;
          self.get('subscription').set('isSelectedSubscription', hasQtyToAdd);
          self.get('subscription').set('qtyToAttach', sub.get('quantity_to_add'));
        }
      });
    }),

    saveSubAfterCheck: _ember['default'].observer('subscription.isSelectedSubscription', function () {
      if (this.get('subscription.isSelectedSubscription')) {
        if (this.get('subscription.qtyToAttach') > 0) {
          // nothing - don't want to change subscription.qtyToAttach
        } else {
            this.set('subscription.qtyToAttach', 0);
          }
      } else {
        // Zero out and save if unchecked
        var hasPostiveQty = this.get('subscription.qtyToAttach') > 0;
        if (hasPostiveQty) {
          this.set('subscription.qtyToAttach', 0);
          var pool = this.get('subscription');
          return this.sendAction('saveSubscription', pool, this.get('subscription.qtyToAttach'));
        }
      }
    }),

    isChecked: _ember['default'].computed.alias('subscription.isSelectedSubscription'),

    actions: {
      setValidQty: function setValidQty() {
        if (this.get('isQtyInValid')) {
          return this.set('subscription.qtyToAttach', this.get('subscription.qtyAvailable'));
        }
        // TODO - call saveSubscription action from within this action
        var pool = this.get('subscription');
        return this.sendAction('saveSubscription', pool, this.get('subscription.qtyToAttach'));
      },

      saveSubscription: function saveSubscription() {
        // this.get('subscription') is actally of model type "pool"
        // TODO - qtyToAttach was not passed with pool = this.get('subscription'), so including it
        // as 2nd parameter
        var pool = this.get('subscription');
        alert(this.get('subscription.qtyToAttach'));
        return this.sendAction('saveSubscription', pool, this.get('subscription.qtyToAttach'));
      }

    }

  });
});
define('fusor-ember-cli/components/tr-task', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    actionNameAndRepository: _ember['default'].computed('task.humanized_name', 'task.repository', function () {
      return this.get('task.humanized_name') + ' ' + (this.get('task.repository') || '');
    }),

    isError: _ember['default'].computed('task.result', function () {
      return this.get('task.result') === 'error';
    }),

    textBold: _ember['default'].computed('isError', function () {
      if (this.get('isError')) {
        return 'bold';
      }
    }),

    textColor: _ember['default'].computed('isError', function () {
      if (this.get('isError')) {
        return 'errorForValidation';
      }
    }),

    percentProgress: _ember['default'].computed('task.progress', function () {
      return (this.get('task.progress') * 100).toFixed(0) + '%';
    })

  });
});
define('fusor-ember-cli/components/wizard-item', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'li',

    classNameBindings: ['active', 'completed'],

    attributeBindings: ['dataToggle:data-toggle', 'dataPlacement:data-placement', 'title'],

    dataToggle: "tooltip",
    dataPlacement: "top",
    title: _ember['default'].computed('fullname', function () {
      return this.get('fullname');
    }),

    completed: _ember['default'].computed('isDisabled', 'active', function () {
      return !this.get('isDisabled') && !this.get('active');
    }),

    // code borrowed addon ember-cli-active-link-wrapper
    // github.com/alexspeller/ember-cli-active-link-wrapper/blob/master/addon/components/active-link.js
    childLinkViews: [],

    active: _ember['default'].computed('childLinkViews.@each.active', function () {
      return _ember['default'].A(this.get('childLinkViews')).isAny('active');
    }),

    didRender: function didRender() {
      _ember['default'].run.schedule('afterRender', this, function () {
        var _this = this;

        var childLinkElements = this.$('a.ember-view');

        var childLinkViews = childLinkElements.toArray().map(function (view) {
          return _this._viewRegistry[view.id];
        });

        this.set('childLinkViews', childLinkViews);
      });
    }

  });
});
define('fusor-ember-cli/components/wizard-step', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    minHeightStyle: _ember['default'].computed('minHeight', function () {
      return new _ember['default'].Handlebars.SafeString('min-height: ' + this.get('minHeight') + 'px;');
    }),

    resizeWizard: _ember['default'].on('didInsertElement', function () {
      var self = this;
      this.resizeHandler = (function () {
        // Rob's jquery code for resizing in
        // https://github.com/patternfly/rcue-rdom/blob/master/html/assign-roles-rhci.html
        var documentHeight = 0;
        var navbarOuterHeight = 0;
        var navbarInnerHeight = 0;
        var pageheaderrhciHeight = 0;
        var rowHeight = 0;
        if (_ember['default'].$('.sidebar-pf').length > 0 && matchMedia('only screen and (min-width: 768px)').matches) {
          documentHeight = _ember['default'].$(document).height();
          navbarOuterHeight = _ember['default'].$('.navbar-outer').outerHeight();
          navbarInnerHeight = _ember['default'].$('.navbar-inner').outerHeight();
          pageheaderrhciHeight = _ember['default'].$('.page-header-rhci').outerHeight();
          rowHeight = documentHeight - navbarInnerHeight - navbarOuterHeight - pageheaderrhciHeight;
        }
        // set height of attribute in controller
        return self.set('minHeight', rowHeight);
      }).bind(this);

      _ember['default'].$(window).on('resize', this.resizeHandler);
      this.resizeHandler();
    }),

    removeResize: _ember['default'].on('willDestroyElement', function () {
      _ember['default'].$(window).off('resize', this.resizeHandler);
    })

  });
});
define('fusor-ember-cli/controllers/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    deploymentController: _ember['default'].inject.controller('deployment'),

    deployAsPlugin: true,
    isEmberCliMode: _ember['default'].computed.not('deployAsPlugin'),
    isUpstream: false,

    isContainer: _ember['default'].computed.alias("isUpstream"),

    isLoggedIn: true, //Ember.computed.alias("session.isAuthenticated"),

    loginUsername: _ember['default'].computed.alias("session.currentUser.login"),

    nameRHCI: _ember['default'].computed.alias("deploymentController.nameRHCI"),
    nameRhev: _ember['default'].computed.alias("deploymentController.nameRhev"),
    nameOpenStack: _ember['default'].computed.alias("deploymentController.nameOpenStack"),
    nameCloudForms: _ember['default'].computed.alias("deploymentController.nameCloudForms"),
    nameSatellite: _ember['default'].computed.alias("deploymentController.nameSatellite"),
    logoPath: _ember['default'].computed.alias("deploymentController.logoPath"),

    actions: {
      invalidate: function invalidate() {
        return this.transitionTo('login');
      },

      signOut: function signOut() {
        return this.transitionTo('login');
      }
    }

  });
});
define('fusor-ember-cli/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('fusor-ember-cli/controllers/assign-nodes', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/deployment-controller-mixin', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsDeploymentControllerMixin, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsDeploymentControllerMixin['default'], _fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    deployment: _ember['default'].computed.alias("deploymentController.model"),
    deploymentId: _ember['default'].computed.alias("deployment.id"),
    isCloudForms: _ember['default'].computed.alias("deploymentController.isCloudForms"),

    flavorParams: _ember['default'].computed('plan.parameters.[]', function () {
      if (!this.get('plan.parameters')) {
        return [];
      }

      return this.get('plan.parameters').filter(function (param) {
        return !!param.get('id').match(/.*::Flavor/);
      });
    }),

    unassignedRoles: _ember['default'].computed('plan.roles.[]', 'flavorParams.@each.value', function () {
      var self = this,
          roles = this.get('plan.roles');

      if (!roles) {
        return [];
      }

      return roles.filter(function (role) {
        return !self.roleIsAssigned(role);
      });
    }),

    assignedRoles: _ember['default'].computed('unassignedRoles.[]', function () {
      var self = this,
          roles = this.get('plan.roles');

      if (!roles) {
        return [];
      }

      return roles.filter(function (role) {
        return self.roleIsAssigned(role);
      });
    }),

    roleIsAssigned: function roleIsAssigned(role) {
      var value = this.get('plan').getParamValue(role.get('flavorParameterName'), this.get('flavorParams'));
      return value && value !== 'baremetal';
    },

    allRolesAssigned: _ember['default'].computed('unassignedRoles.[]', function () {
      return this.get('unassignedRoles.length') === 0;
    }),

    notAllRolesAssigned: _ember['default'].computed.not('allRolesAssigned'),

    numProfiles: _ember['default'].computed('profiles.[]', function () {
      return this.get('profiles.length');
    }),

    nodeCount: _ember['default'].computed('nodes.[]', function () {
      return this.get('nodes.length');
    }),

    assignedNodeCount: _ember['default'].computed('plan.roles.[]', 'plan.parameters.[]', function () {
      var count = 0;
      var params = this.get('plan.parameters');
      var self = this;
      if (!this.get('plan.roles')) {
        return 0;
      }
      this.get('plan.roles').forEach(function (role) {
        count += parseInt(self.getParamValue(role.get('countParameterName'), params), 10);
      });
      return count;
    }),

    isDraggingRole: _ember['default'].computed('plan.roles.[]', 'plan.roles.@each.isDraggingObject', function () {
      var isDragging = false;

      if (!this.get('plan.roles')) {
        return false;
      }

      this.get('plan.roles').forEach(function (role) {
        if (role.get('isDraggingObject') === true) {
          isDragging = true;
        }
      });

      return isDragging;
    }),

    droppableClass: _ember['default'].computed('isDraggingRole', function () {
      if (this.get('isDraggingRole')) {
        return 'deployment-roles-active';
      } else {
        return '';
      }
    }),

    doAssignRole: function doAssignRole(plan, role, profile) {
      var data;
      var self = this;
      var unassignedRoles;
      var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

      if (!profile) {
        unassignedRoles = this.get('unassignedRoles');
        if (unassignedRoles.contains(role)) {
          // Role is already unassigned, do nothing
          return;
        }
        data = { 'role_name': role.get('name'), 'flavor_name': 'baremetal' };
      } else {
        data = { 'role_name': role.get('name'), 'flavor_name': profile.get('name') };
      }

      var updateUrl = '/fusor/api/openstack/deployments/' + this.get('deploymentId') + '/deployment_plans/overcloud/update_role_flavor';

      plan.updateParam(role.get('flavorParameterName'), data.flavor_name);
      this.set('deployment.' + role.get('flavorDeploymentAttributeName'), data.flavor_name);
      (0, _icAjax['default'])({
        url: updateUrl,
        type: 'PUT',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": token
        },
        data: JSON.stringify(data)
      })['catch'](function (error) {
        console.log('ERROR');
        console.log(error.jqXHR);
        return self.send('error', error.jqXHR);
      });
    },

    editedRole: null,
    editedRoleImage: null,
    editedRoleNodeCount: null,
    editedRoleProfile: null,
    editedRoleParameters: null,
    showSettings: true,

    openEditDialog: function openEditDialog() {
      this.set('editRoleModalOpened', true);
      this.set('editRoleModalClosed', false);
    },

    closeEditDialog: function closeEditDialog() {
      this.set('editRoleModalOpened', false);
      this.set('editRoleModalClosed', true);
    },

    openGlobalServiceConfigDialog: function openGlobalServiceConfigDialog() {
      this.set('editGlobalServiceConfigModalOpened', true);
      this.set('editGlobalServiceConfigModalClosed', false);
    },

    closeGlobalServiceConfigDialog: function closeGlobalServiceConfigDialog() {
      this.set('editGlobalServiceConfigModalOpened', false);
      this.set('editGlobalServiceConfigModalClosed', true);
    },

    settingsTabActiveClass: _ember['default'].computed('showSettings', function () {
      if (this.get('showSettings')) {
        return "active";
      } else {
        return "inactive";
      }
    }),

    configTabActiveClass: _ember['default'].computed('showSettings', function () {
      if (this.get('showSettings')) {
        return "inactive";
      } else {
        return "active";
      }
    }),

    handleOutsideClick: function handleOutsideClick(e) {
      // do nothing, this overrides the closing of the dialog when clicked outside of it
    },

    actions: {
      editRole: function editRole(role) {
        this.set('showRoleSettings', 'active');
        this.set('showRoleConfig', 'inactive');
        var roleParams = _ember['default'].A();
        this.get('plan.parameters').forEach(function (param) {
          var paramId = param.get('id');
          if (paramId.indexOf(role.get('parameterPrefix')) === 0) {
            param.displayId = paramId.substring(role.get('parameterPrefix').length);
            param.displayId = param.displayId.replace(/([a-z])([A-Z])/g, '$1 $2');

            /* Using boolean breaks saving...
               if (param.get('parameter_type') === 'boolean') {
               param.set('isBoolean', true);
               }
               */
            if (param.get('hidden')) {
              param.set('inputType', 'password');
            } else {
              param.set('inputType', param.get('parameter_type'));
            }

            var shouldAddParam = paramId === role.get('imageParameterName') || paramId === role.get('countParameterName') || paramId === role.get('flavorParameterName');

            if (shouldAddParam) {
              roleParams.addObject(param);
            } else if (param.get('parameter_type') !== 'json') {
              advancedParams.addObject(param);
            }
          }
        });

        this.set('editedRole', role);
        this.set('editedRoleImage', this.get('plan').getParamValue(role.get('imageParameterName'), roleParams));
        this.set('editedRoleNodeCount', this.get('plan').getParamValue(role.get('countParameterName'), roleParams));
        this.set('editedRoleProfile', this.get('plan').getParamValue(role.get('flavorParameterName'), roleParams));
        this.set('editedRoleParameters', advancedParams);

        this.openEditDialog();
      },

      saveRole: function saveRole() {
        var plan = this.get('plan');
        var role = this.get('editedRole');
        var deploymentId = this.get('deploymentId');

        var params = [{ 'name': role.get('imageParameterName'), 'value': this.get('editedRoleImage') }, { 'name': role.get('countParameterName'), 'value': this.get('editedRoleNodeCount') }, { 'name': role.get('flavorParameterName'), 'value': this.get('editedRoleProfile') }];

        this.get('editedRoleParameters').forEach(function (param) {
          params.push({ 'name': param.get('id'), 'value': param.get('value') });
        });
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        this.send('updateOpenStackPlan', params);
        this.closeEditDialog();
      },

      setRoleCount: function setRoleCount(role, count) {
        var plan = this.get('plan');
        var data = { 'role_name': role.get('name'), 'count': count };
        var deploymentId = this.get('deploymentId');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        plan.updateParam(role.get('countParameterName'), count);
        this.set('deployment.' + role.get('countDeploymentAttributeName'), count);

        (0, _icAjax['default'])({
          url: '/fusor/api/openstack/deployments/' + deploymentId + '/deployment_plans/overcloud/update_role_count',
          type: 'PUT',
          data: JSON.stringify(data),
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token
          }
        })['catch'](function (error) {
          console.log('ERROR');
          console.log(error);
        });
      },

      cancelEditRole: function cancelEditRole() {
        this.closeEditDialog();
      },

      assignRoleType: function assignRoleType(profile, roleType) {
        var role = this.getRoleByType(roleType);
        this.doAssignRole(profile, role);
      },

      assignRole: function assignRole(plan, role, profile) {
        this.doAssignRole(plan, role, profile);
      },

      removeRole: function removeRole(profile, role) {
        var plan = this.get('plan');
        this.doAssignRole(plan, role, null);
      },

      unassignRole: function unassignRole(role) {
        var plan = this.get('plan');
        this.doAssignRole(plan, role, null);
      },

      showRoleSettings: 'active',
      showRoleConfig: 'inactive',

      doShowSettings: function doShowSettings() {
        this.set('showRoleSettings', 'active');
        this.set('showRoleConfig', 'inactive');
      },

      doShowConfig: function doShowConfig() {
        this.set('showRoleSettings', 'inactive');
        this.set('showRoleConfig', 'active');
      },

      editGlobalServiceConfig: function editGlobalServiceConfig() {
        var planParams = _ember['default'].A();
        this.get('plan.parameters').forEach(function (param) {
          if (param.get('id').indexOf('::') === -1) {
            param.displayId = param.get('id').replace(/([a-z])([A-Z])/g, '$1 $2');
            /* Using boolean breaks saving...
               if (param.get('parameter_type') === 'boolean') {
               param.set('isBoolean', true);
               }
               */
            if (param.get('hidden')) {
              param.set('inputType', 'password');
            } else {
              param.set('inputType', param.get('parameter_type'));
            }
            if (param.get('parameter_type') !== 'json') {
              planParams.addObject(param);
            }
          }
        });
        this.set('editedPlanParameters', planParams);

        this.openGlobalServiceConfigDialog();
      },

      saveGlobalServiceConfig: function saveGlobalServiceConfig() {
        var params = _ember['default'].A();
        this.get('editedPlanParameters').forEach(function (param) {
          params.push({ 'name': param.get('id'), 'value': param.get('value') });
        });
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        this.send('updateOpenStackPlan', params);
        this.closeGlobalServiceConfigDialog();
      },

      cancelGlobalServiceConfig: function cancelGlobalServiceConfig() {
        this.closeGlobalServiceConfigDialog();
      }
    },

    hasValidNodeAssignments: _ember['default'].computed('deployment.openstack_overcloud_compute_flavor', 'deployment.openstack_overcloud_compute_count', 'deployment.openstack_overcloud_controller_flavor', 'deployment.openstack_overcloud_controller_count', function () {
      var computeFlavor = this.get('deployment.openstack_overcloud_compute_flavor');
      var computeCount = this.get('deployment.openstack_overcloud_compute_count');
      var controllerFlavor = this.get('deployment.openstack_overcloud_controller_flavor');
      var controllerCount = this.get('deployment.openstack_overcloud_controller_count');

      return computeFlavor && computeFlavor !== 'baremetal' && computeCount > 0 && controllerFlavor && controllerFlavor !== 'baremetal' && controllerCount > 0;
    }),

    disableAssignNodesNext: _ember['default'].computed.not('hasValidNodeAssignments')
  });
});
define('fusor-ember-cli/controllers/cloudforms/cfme-configuration', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    cfmeRootPassword: _ember['default'].computed.alias("deploymentController.model.cfme_root_password"),
    cfmeAdminPassword: _ember['default'].computed.alias("deploymentController.model.cfme_admin_password"),
    confirmCfmeRootPassword: _ember['default'].computed.alias("deploymentController.confirmCfmeRootPassword"),
    confirmCfmeAdminPassword: _ember['default'].computed.alias("deploymentController.confirmCfmeAdminPassword"),

    isSubscriptions: _ember['default'].computed.alias("deploymentController.isSubscriptions"),

    nextRouteNameAfterCFME: _ember['default'].computed('isSubscriptions', function () {
      if (this.get('isSubscriptions')) {
        return 'subscriptions';
      } else {
        return 'review';
      }
    }),

    passwordValidator: _fusorEmberCliUtilsValidators.PasswordValidator.create({}),

    confirmCfmeRootPasswordValidator: _ember['default'].computed('cfmeRootPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('cfmeRootPassword') });
    }),

    confirmCfmeAdminPasswordValidator: _ember['default'].computed('cfmeAdminPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('cfmeAdminPassword') });
    }),

    hasCFRootPassword: _ember['default'].computed('cfmeRootPassword', function () {
      return this.get('passwordValidator').isValid(this.get('cfmeRootPassword'));
    }),
    hasNoCFRootPassword: _ember['default'].computed.not("hasCFRootPassword"),

    hasCFAdminPassword: _ember['default'].computed('cfmeAdminPassword', function () {
      return this.get('passwordValidator').isValid(this.get('cfmeAdminPassword'));
    }),
    hasNoCFAdminPassword: _ember['default'].computed.not("hasCFAdminPassword"),

    isValidCfmeConfiguration: _ember['default'].computed('cfmeRootPassword', 'confirmCfmeRootPassword', 'cfmeAdminPassword', 'confirmCfmeAdminPassword', function () {
      return this.get('hasCFRootPassword') && this.get('hasCFAdminPassword') && this.get('cfmeRootPassword') === this.get('confirmCfmeRootPassword') && this.get('cfmeAdminPassword') === this.get('confirmCfmeAdminPassword');
    }),

    disableNextCfmeConfiguration: _ember['default'].computed.not("isValidCfmeConfiguration")

  });
});
define('fusor-ember-cli/controllers/cloudforms', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    cfmeConfigurationController: _ember['default'].inject.controller('cloudforms.cfme-configuration'),

    stepNumberCloudForms: _ember['default'].computed.alias("deploymentController.stepNumberCloudForms"),
    isValidCfmeConfiguration: _ember['default'].computed.alias("cfmeConfigurationController.isValidCfmeConfiguration"),

    isValidCfmeInstallLocation: _ember['default'].computed.notEmpty('deploymentController.model.cfme_install_loc'),

    isInvalidCfmeInstallLocation: _ember['default'].computed.not("isValidCfmeInstallLocation"),
    disableTabCFConfiguration: _ember['default'].computed.alias("isInvalidCfmeInstallLocation"),

    validCloudforms: _ember['default'].computed('isValidCfmeInstallLocation', 'isValidCfmeConfiguration', function () {
      return this.get('isValidCfmeInstallLocation') && this.get('isValidCfmeConfiguration');
    }),

    notValidCloudforms: _ember['default'].computed.not("validCloudforms")

  });
});
define("fusor-ember-cli/controllers/configure-environment", ["exports", "ember", "fusor-ember-cli/mixins/configure-environment-mixin", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsConfigureEnvironmentMixin, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsConfigureEnvironmentMixin["default"], _fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    satelliteTabRouteName: _ember["default"].computed.alias("deploymentController.satelliteTabRouteName"),
    organizationTabRouteName: _ember["default"].computed.alias("deploymentController.organizationTabRouteName"),
    isStarted: _ember["default"].computed.alias("deploymentController.isStarted"),

    selectedOrganization: _ember["default"].computed.alias("deploymentController.model.organization"),

    step2RouteName: _ember["default"].computed.alias("deploymentController.step2RouteName"),

    nullifyLifecycleEnvIfSelected: _ember["default"].observer('useDefaultOrgViewForEnv', function () {
      this.set('showAlertMessage', false);
      if (this.get('useDefaultOrgViewForEnv')) {
        this.set('selectedEnvironment', null);
        return this.get('deploymentController.model').set('lifecycle_environment', null);
      }
    }),

    hasLifecycleEnvironment: _ember["default"].computed.alias("deploymentController.hasLifecycleEnvironment"),
    hasNoLifecycleEnvironment: _ember["default"].computed.alias("deploymentController.hasNoLifecycleEnvironment"),
    disableNextOnLifecycleEnvironment: _ember["default"].computed.alias("deploymentController.disableNextOnLifecycleEnvironment"),
    openNewEnvironmentModal: false,

    deployment: _ember["default"].computed.alias("deploymentController.model"),

    actions: {
      selectEnvironment: function selectEnvironment(environment) {
        this.set('showAlertMessage', false);
        this.set('selectedEnvironment', environment);
        return this.get('deploymentController.model').set('lifecycle_environment', environment);
      },

      newEnvironment: function newEnvironment() {
        this.set('newEnvName', '');
        this.set('description', '');
        this.set('openNewEnvironmentModal', true);
      },

      createEnvironment: function createEnvironment() {
        var self = this;

        var envName = this.get('newEnvName');
        var nameAlreadyExists = self.get('lifecycleEnvironments').findBy('name', envName);
        if (nameAlreadyExists) {
          return self.get('deploymentController').set('errorMsg', envName + ' is not a unique name. Environment not saved.');
        }

        var selectedOrganization = this.get('selectedOrganization');
        this.set('fields_env.name', this.get('newEnvName'));
        this.set('fields_env.label', this.get('envLabelName'));
        this.set('fields_env.description', this.get('description'));
        this.set('fields_env.organization', selectedOrganization);

        var library = this.get('libraryEnv');
        // assign library to prior db attribute
        this.set('fields_env.prior', library.get('id'));
        var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
        environment.save().then(function (result) {
          //success
          self.get('lifecycleEnvironments').addObject(result._internalModel);
          self.set('selectedEnvironment', environment);
          self.get('deploymentController.model').set('lifecycle_environment', environment);
          self.get('deploymentController').set('errorMsg', null);
          return self.set('showAlertMessage', true);
        }, function (error) {
          self.get('deploymentController').set('errorMsg', 'error saving environment' + error);
        });
      }
    }

  });
});
define("fusor-ember-cli/controllers/configure-organization", ["exports", "ember", "fusor-ember-cli/mixins/configure-organization-mixin", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsConfigureOrganizationMixin, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsConfigureOrganizationMixin["default"], _fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    organization: _ember["default"].computed.alias("deploymentController.organization"),

    disableNextOnConfigureOrganization: _ember["default"].computed.alias("deploymentController.disableNextOnConfigureOrganization"),
    satelliteTabRouteName: _ember["default"].computed.alias("deploymentController.satelliteTabRouteName"),
    lifecycleEnvironmentTabRouteName: _ember["default"].computed.alias("deploymentController.lifecycleEnvironmentTabRouteName"),

    actions: {
      selectOrganization: function selectOrganization(organization) {
        this.set('showAlertMessage', false);
        this.set('selectedOrganization', organization);
        return this.get('deploymentController').set('organization', organization);
      }
    }

  });
});
define("fusor-ember-cli/controllers/deployment/start", ["exports", "ember", "fusor-ember-cli/mixins/start-controller-mixin", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsStartControllerMixin, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsStartControllerMixin["default"], _fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    isRhev: _ember["default"].computed.alias("deploymentController.model.deploy_rhev"),
    isOpenStack: _ember["default"].computed.alias("deploymentController.model.deploy_openstack"),
    isCloudForms: _ember["default"].computed.alias("deploymentController.model.deploy_cfme"),
    isOpenShift: _ember["default"].computed.alias("deploymentController.model.deploy_openshift"),
    isSubscriptions: _ember["default"].computed.alias("deploymentController.model.isSubscriptions")

  });
});
define("fusor-ember-cli/controllers/deployment-new/satellite/configure-environment", ["exports", "ember", "fusor-ember-cli/mixins/configure-environment-mixin", "fusor-ember-cli/mixins/needs-deployment-new-mixin"], function (exports, _ember, _fusorEmberCliMixinsConfigureEnvironmentMixin, _fusorEmberCliMixinsNeedsDeploymentNewMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsConfigureEnvironmentMixin["default"], _fusorEmberCliMixinsNeedsDeploymentNewMixin["default"], {

    satelliteTabRouteName: _ember["default"].computed.alias("deploymentNewController.satelliteTabRouteName"),
    organizationTabRouteName: _ember["default"].computed.alias("deploymentNewController.organizationTabRouteName"),

    selectedOrganization: _ember["default"].computed.alias("deploymentNewController.model.organization"),

    step2RouteName: _ember["default"].computed.alias("deploymentNewController.step2RouteName"),

    nullifyLifecycleEnvIfSelected: _ember["default"].observer('useDefaultOrgViewForEnv', function () {
      this.set('showAlertMessage', false);
      if (this.get('useDefaultOrgViewForEnv')) {
        this.set('selectedEnvironment', null);
        return this.get('deploymentNewController.model').set('lifecycle_environment', null);
      }
    }),

    hasLifecycleEnvironment: _ember["default"].computed.alias("deploymentNewController.hasLifecycleEnvironment"),
    hasNoLifecycleEnvironment: _ember["default"].computed.alias("deploymentNewController.hasNoLifecycleEnvironment"),
    disableNextOnLifecycleEnvironment: _ember["default"].computed.alias("deploymentNewController.disableNextOnLifecycleEnvironment"),
    openNewEnvironmentModal: false,

    deployment: _ember["default"].computed.alias("deploymentNewController"),

    actions: {
      selectEnvironment: function selectEnvironment(environment) {
        this.set('showAlertMessage', false);
        this.set('selectedEnvironment', environment);
        return this.get('deploymentNewController.model').set('lifecycle_environment', environment);
      },

      newEnvironment: function newEnvironment() {
        this.set('newEnvName', '');
        this.set('description', '');
        this.set('openNewEnvironmentModal', true);
      },

      createEnvironment: function createEnvironment() {
        var self = this;

        var envName = this.get('newEnvName');
        var nameAlreadyExists = self.get('lifecycleEnvironments').findBy('name', envName);
        if (nameAlreadyExists) {
          return self.get('deploymentNewController').set('errorMsg', envName + ' is not a unique name. Environment not saved.');
        }

        var selectedOrganization = this.get('selectedOrganization');
        this.set('fields_env.name', this.get('newEnvName'));
        this.set('fields_env.label', this.get('envLabelName'));
        this.set('fields_env.description', this.get('description'));
        this.set('fields_env.organization', selectedOrganization);

        var library = this.get('libraryEnv');
        // assign library to prior db attribute
        this.set('fields_env.prior', library.get('id'));
        var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
        environment.save().then(function (result) {
          //success
          self.get('lifecycleEnvironments').addObject(result._internalModel);
          self.set('selectedEnvironment', environment);
          self.get('deploymentNewController.model').set('lifecycle_environment', environment);
          self.get('deploymentNewController').set('errorMsg', null);
          return self.set('showAlertMessage', true);
        }, function (error) {
          self.get('deploymentNewController').set('errorMsg', 'error saving environment' + error);
        });
      }
    }

  });
});
define("fusor-ember-cli/controllers/deployment-new/satellite/configure-organization", ["exports", "ember", "fusor-ember-cli/mixins/configure-organization-mixin", "fusor-ember-cli/mixins/needs-deployment-new-mixin"], function (exports, _ember, _fusorEmberCliMixinsConfigureOrganizationMixin, _fusorEmberCliMixinsNeedsDeploymentNewMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsConfigureOrganizationMixin["default"], _fusorEmberCliMixinsNeedsDeploymentNewMixin["default"], {

    organization: _ember["default"].computed.alias("deploymentNewController.model.organization"),

    disableNextOnConfigureOrganization: _ember["default"].computed.alias("deploymentNewController.disableNextOnConfigureOrganization"),
    satelliteTabRouteName: _ember["default"].computed.alias("deploymentNewController.satelliteTabRouteName"),
    lifecycleEnvironmentTabRouteName: _ember["default"].computed.alias("deploymentNewController.lifecycleEnvironmentTabRouteName"),

    actions: {
      selectOrganization: function selectOrganization(organization) {
        this.set('showAlertMessage', false);
        this.set('selectedOrganization', organization);
        return this.get('deploymentNewController.model').set('organization', organization);
      }
    }

  });
});
define("fusor-ember-cli/controllers/deployment-new/satellite/index", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-new-mixin", "fusor-ember-cli/mixins/validates-deployment-name-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentNewMixin, _fusorEmberCliMixinsValidatesDeploymentNameMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentNewMixin["default"], _fusorEmberCliMixinsValidatesDeploymentNameMixin["default"], {

    deploymentNewController: _ember["default"].inject.controller('deployment-new'),

    name: _ember["default"].computed.alias("deploymentNewController.name"),
    description: _ember["default"].computed.alias("deploymentNewController.description"),

    organizationTabRouteName: _ember["default"].computed.alias("deploymentNewController.organizationTabRouteName"),
    lifecycleEnvironmentTabRouteName: _ember["default"].computed.alias("deploymentNewController.lifecycleEnvironmentTabRouteName"),

    disableNextOnDeploymentName: _ember["default"].computed.alias("deploymentNewController.disableNextOnDeploymentName"),

    idSatName: 'deployment_new_sat_name',
    idSatDesc: 'deployment_new_sat_desc',

    backRouteNameOnSatIndex: 'deployment-new.start'
  });
});
define('fusor-ember-cli/controllers/deployment-new/satellite', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    deploymentNewController: _ember['default'].inject.controller('deployment-new'),

    satelliteTabRouteName: _ember['default'].computed.alias("deploymentNewController.satelliteTabRouteName"),
    organizationTabRouteName: _ember['default'].computed.alias("deploymentNewController.organizationTabRouteName"),
    lifecycleEnvironmentTabRouteName: _ember['default'].computed.alias("deploymentNewController.lifecycleEnvironmentTabRouteName"),

    disableTabDeploymentName: _ember['default'].computed.alias("deploymentNewController.disableTabDeploymentName"),
    disableTabConfigureOrganization: _ember['default'].computed.alias("deploymentNewController.disableTabConfigureOrganization"),
    disableTabLifecycleEnvironment: _ember['default'].computed.alias("deploymentNewController.disableTabLifecycleEnvironment"),
    disableTabAccessInsights: true,

    backRouteNameOnSatIndex: 'deployment-new.start'

  });
});
define('fusor-ember-cli/controllers/deployment-new/start', ['exports', 'ember', 'fusor-ember-cli/mixins/start-controller-mixin'], function (exports, _ember, _fusorEmberCliMixinsStartControllerMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsStartControllerMixin['default'], {

    deploymentNewController: _ember['default'].inject.controller('deployment-new'),

    isRhev: _ember['default'].computed.alias("deploymentNewController.model.deploy_rhev"),
    isOpenStack: _ember['default'].computed.alias("deploymentNewController.model.deploy_openstack"),
    isCloudForms: _ember['default'].computed.alias("deploymentNewController.model.deploy_cfme"),
    isOpenShift: _ember['default'].computed.alias("deploymentNewController.model.deploy_openshift"),
    isSubscriptions: _ember['default'].computed.alias("deploymentNewController.isSubscriptions")

  });
});
define("fusor-ember-cli/controllers/deployment-new", ["exports", "ember", "fusor-ember-cli/mixins/deployment-controller-mixin", "fusor-ember-cli/mixins/disable-tab-mixin"], function (exports, _ember, _fusorEmberCliMixinsDeploymentControllerMixin, _fusorEmberCliMixinsDisableTabMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsDeploymentControllerMixin["default"], _fusorEmberCliMixinsDisableTabMixin["default"], {

    deploymentNewConfigureEnvironment: _ember["default"].inject.controller('deployment-new/satellite/configure-environment'),

    routeNameSatellite: 'deployment-new.satellite',

    useDefaultOrgViewForEnv: _ember["default"].computed.alias("deploymentNewConfigureEnvironment.useDefaultOrgViewForEnv"),
    selectedEnvironmentDeploymentNew: _ember["default"].computed.alias("deploymentNewConfigureEnvironment.selectedEnvironment"),

    // these tabs will always be disabled within deployment-new
    isDisabledRhev: true,
    isDisabledOpenstack: true,
    isDisabledOpenShift: true,
    isDisabledCloudForms: true,
    isDisabledSubscriptions: true,
    isDisabledReview: true,

    // selectedEnvironmentDeploymentNew is set to 'Library' by routes/deployment-new/satellite/configure-environment.js if Library is only environment
    hasLifecycleEnvironment: _ember["default"].computed('model.lifecycle_environment', 'useDefaultOrgViewForEnv', function () {
      return !!this.get('model.lifecycle_environment.id') || this.get('useDefaultOrgViewForEnv') || this.get('selectedEnvironmentDeploymentNew');
    }),
    hasNoLifecycleEnvironment: _ember["default"].computed.not('hasLifecycleEnvironment')

  });
});
define("fusor-ember-cli/controllers/deployment-plan", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {});
});
define("fusor-ember-cli/controllers/deployment-role", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {});
});
define("fusor-ember-cli/controllers/deployment", ["exports", "ember", "fusor-ember-cli/mixins/deployment-controller-mixin", "fusor-ember-cli/mixins/disable-tab-mixin"], function (exports, _ember, _fusorEmberCliMixinsDeploymentControllerMixin, _fusorEmberCliMixinsDisableTabMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsDeploymentControllerMixin["default"], _fusorEmberCliMixinsDisableTabMixin["default"], {

    deploymentsController: _ember["default"].inject.controller('deployments'),
    configureEnvironmentController: _ember["default"].inject.controller('configure-environment'),
    rhevController: _ember["default"].inject.controller('rhev'),
    openstackController: _ember["default"].inject.controller('openstack'),
    openshiftController: _ember["default"].inject.controller('openshift'),
    cloudformsController: _ember["default"].inject.controller('cloudforms'),
    credentialsController: _ember["default"].inject.controller('subscriptions/credentials'),
    selectSubscriptionsController: _ember["default"].inject.controller('subscriptions/select-subscriptions'),

    routeNameSatellite: 'satellite',

    useDefaultOrgViewForEnv: _ember["default"].computed.alias("configureEnvironmentController.useDefaultOrgViewForEnv"),

    isOpenModal: _ember["default"].computed.alias("deploymentsController.isOpenModal"),
    deploymentInModal: _ember["default"].computed.alias("deploymentsController.deploymentInModal"),

    validRhev: _ember["default"].computed.alias("rhevController.validRhev"),
    validOpenStack: _ember["default"].computed.alias("openstackController.validOpenStack"),
    validOpenshift: _ember["default"].computed.alias("openshiftController.validOpenshift"),
    validCloudforms: _ember["default"].computed.alias("cloudformsController.validCloudforms"),
    disableNextOnSelectSubscriptions: _ember["default"].computed.alias("selectSubscriptionsController.disableNextOnSelectSubscriptions"),
    isDisconnected: _ember["default"].computed.alias("model.is_disconnected"),

    isDisabledRhev: _ember["default"].computed.alias("satelliteInvalid"),

    isDisabledOpenstack: _ember["default"].computed("satelliteInvalid", 'isRhev', 'validRhev', function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev');
    }),

    isDisabledOpenShift: _ember["default"].computed("satelliteInvalid", 'isRhev', 'isOpenStack', 'validRhev', 'validOpenStack', function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev') || this.get('isOpenStack') && !this.get('validOpenStack');
    }),

    isDisabledCloudForms: _ember["default"].computed("satelliteInvalid", 'isRhev', 'isOpenStack', 'isOpenShift', 'validRhev', 'validOpenStack', 'validOpenshift', function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev') || this.get('isOpenStack') && !this.get('validOpenStack') || this.get('isOpenShift') && !this.get('validOpenshift');
    }),

    isDisabledSubscriptions: _ember["default"].computed("satelliteInvalid", 'isRhev', 'isOpenStack', 'isOpenShift', 'validRhev', 'validOpenStack', 'validOpenshift', 'isCloudForms', 'validCloudforms', function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev') || this.get('isOpenStack') && !this.get('validOpenStack') || this.get('isOpenShift') && !this.get('validOpenshift') || this.get('isCloudForms') && !this.get('validCloudforms');
    }),

    hasSubscriptionUUID: _ember["default"].computed('organizationUpstreamConsumerUUID', 'model.upstream_consumer_uuid', function () {
      return _ember["default"].isPresent(this.get('organizationUpstreamConsumerUUID')) || _ember["default"].isPresent(this.get('model.upstream_consumer_uuid'));
    }),

    isDisabledReview: _ember["default"].computed('isDisconnected', 'isDisabledSubscriptions', 'hasSubscriptionUUID', 'disableNextOnSelectSubscriptions', function () {
      return !this.get('isDisconnected') && (this.get('isDisabledSubscriptions') || !this.get("hasSubscriptionUUID") || this.get('disableNextOnSelectSubscriptions'));
    }),

    hasLifecycleEnvironment: _ember["default"].computed('model.lifecycle_environment', 'useDefaultOrgViewForEnv', function () {
      return !!this.get('model.lifecycle_environment.id') || this.get('useDefaultOrgViewForEnv');
    }),
    hasNoLifecycleEnvironment: _ember["default"].computed.not('hasLifecycleEnvironment'),

    satelliteInvalid: _ember["default"].computed.or('hasNoName', 'hasNoOrganization', 'hasNoLifecycleEnvironment'),

    skipContent: false,

    numSubscriptionsRequired: _ember["default"].computed('isRhev', 'isOpenStack', 'isCloudForms', 'model.discovered_hosts.[]', function () {
      var num = 0;
      if (this.get('isRhev')) {
        num = num + 1 + this.get('model.discovered_hosts.length'); // 1 is for engine
      }
      if (this.get('isCloudForms')) {
        num = num + 1;
      }
      return num;
    }),

    managementApplicationName: _ember["default"].computed('model.upstream_consumer_name', 'credentialsController.organizationUpstreamConsumerName', function () {
      if (_ember["default"].isPresent(this.get('model.upstream_consumer_name'))) {
        return this.get('model.upstream_consumer_name');
      } else {
        return this.get('credentialsController.organizationUpstreamConsumerName');
      }
    }),

    hasEngine: _ember["default"].computed('model.discovered_host.id', function () {
      return _ember["default"].isPresent(this.get("model.discovered_host.id"));
    }),
    hasNoEngine: _ember["default"].computed.not('hasEngine'),

    cntHypervisors: _ember["default"].computed('model.discovered_hosts.[]', function () {
      return this.get('model.discovered_hosts.length');
    }),

    hasHypervisors: _ember["default"].computed('cntHypervisors', function () {
      return this.get('cntHypervisors') > 0;
    }),
    hasNoHypervisors: _ember["default"].computed.not('hasHypervisors'),

    isStarted: _ember["default"].computed('model.foreman_task_uuid', function () {
      return !!this.get('model.foreman_task_uuid');
    }),
    isNotStarted: _ember["default"].computed.not('isStarted'),

    isFinished: _ember["default"].computed('model.progress', function () {
      return this.get('model.progress') === '1';
    }),
    isNotFinished: _ember["default"].computed.not('isFinished'),

    cntSubscriptions: _ember["default"].computed('model.subscriptions.[]', function () {
      return this.get('model.subscriptions.length');
    }),

    enableAccessInsights: _ember["default"].computed('model.enable_access_insights', function () {
      if (this.get('model.enable_access_insights')) {
        return 'Enabled';
      } else {
        return 'Disabled';
      }
    }),

    hasSubscriptions: _ember["default"].computed('cntSubscriptions', function () {
      return this.get('cntSubscriptions') > 0;
    }),
    hasNoSubscriptions: _ember["default"].computed.not('hasSubscriptions')
  });
});
define('fusor-ember-cli/controllers/deployments', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    sortedDeployments: _ember['default'].computed('model.[]', 'model.@each.name', function () {
      return this.get('model').sortBy('name');
    }),

    searchDeploymentString: '',

    filteredDeployments: _ember['default'].computed('sortedDeployments', 'searchDeploymentString', 'model.[]', function () {
      var searchDeploymentString = this.get('searchDeploymentString');
      var rx = new RegExp(searchDeploymentString, 'gi');
      var sortedDeployments = this.get('sortedDeployments');

      if (sortedDeployments.get('length') > 1) {
        return sortedDeployments.filter(function (record) {
          if (_ember['default'].isPresent(record.get('name'))) {
            return record.get('name').match(rx);
          }
        });
      } else {
        return sortedDeployments;
      }
    }),

    // related to deleted-deployment-modal
    isOpenModal: false,
    deploymentInModal: null,

    actions: {
      openDeploymentModal: function openDeploymentModal(item) {
        this.set('deploymentInModal', item);
        return this.set('isOpenModal', true);
      }
    }
  });
});
define('fusor-ember-cli/controllers/engine/discovered-host', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    rhevController: _ember['default'].inject.controller('rhev'),

    selectedRhevEngineHost: _ember['default'].computed.alias("model"),
    rhevIsSelfHosted: _ember['default'].computed.alias("deploymentController.model.rhev_is_self_hosted"),

    hypervisorModelIds: _ember['default'].computed('deploymentController.model.discovered_hosts.[]', function () {
      return this.get('deploymentController.model.discovered_hosts').getEach('id');
    }),

    engineNextRouteName: _ember['default'].computed('rhevIsSelfHosted', function () {
      if (this.get('rhevIsSelfHosted')) {
        return 'rhev-options';
      } else {
        return 'hypervisor.discovered-host';
      }
    }),

    // Filter out hosts selected as Hypervisor
    availableHosts: _ember['default'].computed('allDiscoveredHosts.[]', 'hypervisorModelIds.[]', function () {
      // TODO: Ember.computed.filter() caused problems. error item.get is not a function
      var self = this;
      var allDiscoveredHosts = this.get('allDiscoveredHosts');
      if (this.get('allDiscoveredHosts')) {
        return allDiscoveredHosts.filter(function (item) {
          if (self.get('hypervisorModelIds')) {
            return !self.get('hypervisorModelIds').contains(item.get('id'));
          }
        });
      }
    }),

    filteredHosts: _ember['default'].computed('availableHosts.[]', 'searchString', 'isStarted', function () {
      var searchString = this.get('searchString');
      var rx = new RegExp(searchString, 'gi');
      var availableHosts = this.get('availableHosts');

      if (this.get('isStarted')) {
        return _ember['default'].A([this.get('model')]);
      } else if (availableHosts.get('length') > 0) {
        return availableHosts.filter(function (record) {
          return record.get('name').match(rx) || record.get('memory_human_size').match(rx) || record.get('disks_human_size').match(rx) || record.get('subnet_to_s').match(rx) || record.get('mac').match(rx);
        });
      } else {
        return availableHosts;
      }
    }),

    numSelected: _ember['default'].computed('model.id', function () {
      return this.get('model.id') ? 1 : 0;
    }),

    isSelectedEngineHostnameInvalid: false,

    disableNextOnEngine: _ember['default'].computed('isSelectedEngineHostnameInvalid', 'deploymentController.hasNoEngine', function () {
      return this.get('deploymentController.hasNoEngine') || this.get('isSelectedEngineHostnameInvalid');
    }),

    actions: {
      onEngineChanged: function onEngineChanged(newlySelectedHost, isInvalidHostname) {
        this.set('isSelectedEngineHostnameInvalid', isInvalidHostname);
        this.set('deploymentController.model.discovered_host', newlySelectedHost);
      },
      setIfHostnameInvalid: function setIfHostnameInvalid(bool, hostId) {
        var discoveredHost = this.get('deploymentController.model.discovered_host');
        if (discoveredHost && discoveredHost.get('id') === hostId) {
          this.set('isSelectedEngineHostnameInvalid', bool);
        }
      }
    }
  });
});
define('fusor-ember-cli/controllers/engine', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    rhevController: _ember['default'].inject.controller('rhev'),

    engineTabName: _ember['default'].computed.alias("rhevController.engineTabName"),
    engineTabNameLowercase: _ember['default'].computed('engineTabName', function () {
      return this.get('engineTabName').toLowerCase();
    })
  });
});
define("fusor-ember-cli/controllers/flavor", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {});
});
define('fusor-ember-cli/controllers/host', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define("fusor-ember-cli/controllers/hypervisor/discovered-host", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    selectedRhevEngine: _ember["default"].computed.alias("deploymentController.model.discovered_host"),
    rhevIsSelfHosted: _ember["default"].computed.alias("deploymentController.model.rhev_is_self_hosted"),

    hostNamingScheme: _ember["default"].computed.alias("deploymentController.model.host_naming_scheme"),
    customPreprendName: _ember["default"].computed.alias("deploymentController.model.custom_preprend_name"),

    namingOptions: ['Freeform', 'MAC address', 'hypervisorN', 'Custom scheme'],

    isFreeform: _ember["default"].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'Freeform';
    }),

    isMac: _ember["default"].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'MAC address';
    }),

    isCustomScheme: _ember["default"].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'Custom scheme';
    }),

    isHypervisorN: _ember["default"].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'hypervisorN';
    }),

    // Filter out hosts selected as Engine
    availableHosts: _ember["default"].computed('allDiscoveredHosts.[]', 'hypervisorModelIds.[]', function () {
      // TODO: Ember.computed.filter() caused problems. error item.get is not a function
      var self = this;
      var allDiscoveredHosts = this.get('allDiscoveredHosts');
      if (this.get('allDiscoveredHosts')) {
        return allDiscoveredHosts.filter(function (item) {
          if (self.get('hypervisorModelIds')) {
            //console.log(item.get('id'));
            //console.log(self.get('hypervisorModelIds'));
            return item.get('id') !== self.get('selectedRhevEngine.id');
          }
        });
      }
    }),

    // same as Engine. TODO. put it mixin
    filteredHosts: _ember["default"].computed('availableHosts.[]', 'searchString', 'isStarted', function () {
      var searchString = this.get('searchString');
      var rx = new RegExp(searchString, 'gi');
      var availableHosts = this.get('availableHosts');

      if (this.get('isStarted')) {
        return this.get('model');
      } else if (availableHosts.get('length') > 0) {
        return availableHosts.filter(function (record) {
          return record.get('name').match(rx) || record.get('memory_human_size').match(rx) || record.get('disks_human_size').match(rx) || record.get('subnet_to_s').match(rx) || record.get('mac').match(rx);
        });
      } else {
        return availableHosts;
      }
    }),

    hypervisorModelIds: _ember["default"].computed('model.[]', 'selectedRhevEngine', function () {
      if (this.get('model')) {
        var allIds = this.get('model').getEach('id');
        return allIds.removeObject(this.get('selectedRhevEngine').get('id'));
      } else {
        return [];
      }
    }),

    cntSelectedHypervisorHosts: _ember["default"].computed.alias('hypervisorModelIds.length'),

    hostInflection: _ember["default"].computed('cntSelectedHypervisorHosts', function () {
      return this.get('cntSelectedHypervisorHosts') === 1 ? 'host' : 'hosts';
    }),

    isAllChecked: _ember["default"].computed('availableHosts.[]', 'cntSelectedHypervisorHosts', function () {
      return this.get('cntSelectedHypervisorHosts') === this.get('availableHosts.length');
    }),

    observeAllChecked: _ember["default"].observer('allChecked', function (row) {
      // TODO
      if (this.get('allChecked')) {
        return this.send('setCheckAll');
      } else {
        return this.send('setUncheckAll');
      }
    }),

    hypervisorBackRouteName: _ember["default"].computed('rhevIsSelfHosted', function () {
      if (this.get('rhevIsSelfHosted')) {
        return 'rhev-setup';
      } else {
        return 'engine.discovered-host';
      }
    }),

    hostnameValidity: _ember["default"].Object.create({
      updated: Date.now(),
      state: _ember["default"].Object.create()
    }),
    disableNextOnHypervisor: _ember["default"].computed('hypervisorModelIds', 'hostnameValidity.updated', function () {
      var _this = this;

      if (this.get('hypervisorModelIds').get('length') === 0) {
        return true;
      }

      var vState = this.get('hostnameValidity').get('state');
      var trackedHostIds = _ember["default"].keys(vState);
      return trackedHostIds.length === 0 || !trackedHostIds.filter(function (hostId) {
        return _this.get('hypervisorModelIds').contains(hostId);
      }).map(function (k) {
        return vState.get(k);
      }).reduce(function (lhs, rhs) {
        return lhs && rhs;
      });
    }),
    actions: {

      setCheckAll: function setCheckAll() {
        this.get('model').setObjects([]);
        this.set('checkAll', true);
        this.set('uncheckAll', false);
        return this.get('model').addObjects(this.get('availableHosts'));
      },

      setUncheckAll: function setUncheckAll() {
        this.set('uncheckAll', true);
        this.set('checkAll', false);
        this.get('model').setObjects([]);
      },

      openNamingSchemeModal: function openNamingSchemeModal() {
        this.set('isOpenNamingSchemeModal', true);
      },

      cancelNamingScheme: function cancelNamingScheme() {
        this.set('isCloseNamingSchemeModal', true);
        this.get('deploymentController.model').rollback();
      },

      saveNamingScheme: function saveNamingScheme() {
        this.set('isCloseNamingSchemeModal', true);
        this.get('deploymentController.model').save();
      },

      setIfHostnameInvalid: function setIfHostnameInvalid(isInvalid, hostId) {
        this.get('hostnameValidity').get('state').set(hostId, !isInvalid);
        this.get('hostnameValidity').set('updated', Date.now());
      }
    }
  });
});
define("fusor-ember-cli/controllers/hypervisor", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {});
});
define('fusor-ember-cli/controllers/image', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/new-environment', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/new-organization', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/node', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('fusor-ember-cli/controllers/openshift/openshift-configuration', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    openshiftController: _ember['default'].inject.controller('openshift'),

    isCloudForms: _ember['default'].computed.alias("deploymentController.isCloudForms"),
    isSubscriptions: _ember['default'].computed.alias("deploymentController.isSubscriptions"),

    nextRouteNameAfterOpenshift: _ember['default'].computed('isCloudForms', 'isSubscriptions', function () {
      if (this.get('isCloudForms')) {
        return 'cloudforms';
      } else if (this.get('isSubscriptions')) {
        return 'subscriptions';
      } else {
        return 'review';
      }
    }),

    openshiftUsernameValidator: _ember['default'].computed.alias("openshiftController.openshiftUsernameValidator"),
    isValidOpenshiftConfiguration: _ember['default'].computed.alias("openshiftController.isValidOpenshiftConfiguration"),
    isInvalidOpenshiftConfiguration: _ember['default'].computed.alias("openshiftController.isInvalidOpenshiftConfiguration"),

    userpassword: _ember['default'].computed.alias('model.openshift_user_password'),

    passwordValidator: _fusorEmberCliUtilsValidators.PasswordValidator.create({}),

    confirmUserpasswordValidator: _ember['default'].computed('userpassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('userpassword') });
    }),

    hasEndingSlashInExportPath: _ember['default'].computed('model.openshift_export_path', function () {
      if (_ember['default'].isPresent(this.get('model.openshift_export_path'))) {
        return this.get('model.openshift_export_path').slice('-1') === '/';
      }
    }),

    hasNoLeadingSlashInExportPath: _ember['default'].computed('model.openshift_export_path', function () {
      if (_ember['default'].isPresent(this.get('model.openshift_export_path'))) {
        return this.get('model.openshift_export_path').charAt(0) !== '/';
      }
    }),

    errorsHashExportPath: _ember['default'].computed('hasEndingSlashInExportPath', 'model.openshift_export_path', function () {
      if (this.get('hasNoLeadingSlashInExportPath')) {
        return { "name": 'You must have a leading slash' };
      } else if (this.get('hasEndingSlashInExportPath')) {
        return { "name": 'You cannot have a trailing slash' };
      } else {
        return {};
      }
    }),

    isNFS: _ember['default'].computed('model.openshift_storage_type', function () {
      return this.get('model.openshift_storage_type') === 'NFS';
    }),

    isDoNotUse: _ember['default'].computed('model.openshift_storage_type', function () {
      return this.get('model.openshift_storage_type') === 'DoNotUse';
    }),

    isGluster: _ember['default'].computed('model.openshift_storage_type', function () {
      return this.get('model.openshift_storage_type') === 'Gluster';
    }),

    isInvalidExportPath: _ember['default'].computed('model.openshift_export_path', 'hasEndingSlashInExportPath', 'hasNoLeadingSlashInExportPath', function () {
      return _ember['default'].isBlank(this.get('model.openshift_export_path')) || this.get('hasEndingSlashInExportPath') || this.get('hasNoLeadingSlashInExportPath');
    }),

    invalidStorageName: _ember['default'].computed('model.openshift_storage_name', function () {
      var validAlphaNumbericRegex = new RegExp(/^[A-Za-z0-9_-]+$/);
      if (_ember['default'].isPresent(this.get('model.openshift_storage_name'))) {
        return !this.get('model.openshift_storage_name').trim().match(validAlphaNumbericRegex);
      }
    }),

    hostnameValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({})]
    }),

    postTextDomainName: _ember['default'].computed('domainName', function () {
      return "." + this.get('domainName');
    }),

    invalidSubdomain: _ember['default'].computed('model.openshift_subdomain_name', function () {
      return !this.get('hostnameValidator').isValid(this.get('model.openshift_subdomain_name'));
    }),

    disableNextOpenshiftConfig: _ember['default'].computed('invalidStorageName', 'isInvalidExportPath', 'invalidSubdomain', function () {
      return this.get('invalidStorageName') || this.get('isInvalidExportPath') || this.get('invalidSubdomain');
    }),

    validRhevStorage: _ember['default'].computed.not('disableNextStorage')

  });
});
define("fusor-ember-cli/controllers/openshift/openshift-nodes", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/mixins/openshift-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliMixinsOpenshiftMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], _fusorEmberCliMixinsOpenshiftMixin["default"], {

    openshiftController: _ember["default"].inject.controller('openshift'),

    // similar code to CFME where-install.js. Possible to DRY into mixin
    isRhev: _ember["default"].computed.alias("deploymentController.isRhev"),
    isNotRhev: _ember["default"].computed.not("isRhev"),
    isOpenStack: _ember["default"].computed.alias("deploymentController.isOpenStack"),
    isNotOpenStack: _ember["default"].computed.not("isOpenStack"),

    isOverCapacity: _ember["default"].computed.alias("openshiftController.isOverCapacity"),
    isInvalidOpenshiftNodes: _ember["default"].computed.alias("openshiftController.isInvalidOpenshiftNodes"),

    disableRHEV: _ember["default"].computed('isStarted', 'isNotRhev', function () {
      return this.get('isStarted') || this.get('isNotRhev');
    }),

    disableOpenStack: _ember["default"].computed('isStarted', 'isNotOpenStack', function () {
      return this.get('isStarted') || this.get('isNotOpenStack');
    }),

    disableRHEVradio: _ember["default"].computed('disableRHEV', 'isStarted', function () {
      return this.get('disableRHEV') || this.get('isStarted');
    }),

    disableOpenstackradio: _ember["default"].computed('disableOpenStack', 'isStarted', function () {
      return this.get('disableOpenStack') || this.get('isStarted');
    }),

    backRouteName: _ember["default"].computed('isOpenStack', 'isRhev', function () {
      if (this.get('isOpenStack')) {
        return 'openstack.overcloud';
      } else if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'satellite.access-insights';
      }
    }),

    showEnvironmentSummary: _ember["default"].computed('numNodes', 'storageSize', function () {
      return _ember["default"].isPresent(this.get('numNodes')) && _ember["default"].isPresent(this.get('storageSize'));
    }),

    actions: {
      openshiftLocationChanged: function openshiftLocationChanged() {},

      numNodesChanged: function numNodesChanged(numNodes) {
        var numMasterNodes = 1; // for non-HA scerios
        this.set('numMasterNodes', numMasterNodes);
        return this.set('numWorkerNodes', numNodes - numMasterNodes);
      },

      storageSizeChanged: function storageSizeChanged(storageSize) {
        return this.set('model.openshift_storage_size', storageSize);
      }
    }

  });
});
define("fusor-ember-cli/controllers/openshift", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/mixins/openshift-mixin", "fusor-ember-cli/utils/validators"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliMixinsOpenshiftMixin, _fusorEmberCliUtilsValidators) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], _fusorEmberCliMixinsOpenshiftMixin["default"], {

    stepNumberOpenShift: _ember["default"].computed.alias("deploymentController.stepNumberOpenShift"),

    isVcpuOverCapacity: _ember["default"].computed('vcpuNeeded', 'vcpuAvailable', function () {
      return this.get('vcpuNeeded') > this.get('vcpuAvailable');
    }),

    isRamOverCapacity: _ember["default"].computed('ramNeeded', 'ramAvailable', function () {
      return this.get('ramNeeded') > this.get('ramAvailable');
    }),

    isDiskOverCapacity: _ember["default"].computed('diskNeeded', 'diskAvailable', function () {
      return this.get('diskNeeded') > this.get('diskAvailable');
    }),

    isOverCapacity: _ember["default"].computed('isVcpuOverCapacity', 'isRamOverCapacity', 'isDiskOverCapacity', function () {
      return this.get('isVcpuOverCapacity') || this.get('isRamOverCapacity') || this.get('isDiskOverCapacity');
    }),
    isUnderCapacity: _ember["default"].computed.not("isOverCapacity"),

    isValidOpenshiftNodes: _ember["default"].computed('openshiftInstallLoc', 'numMasterNodes', 'numWorkerNodes', 'storageSize', 'masterVcpu', 'masterRam', 'masterDisk', 'nodeVcpu', 'nodeRam', 'nodeDisk', 'isUnderCapacity', function () {
      return _ember["default"].isPresent(this.get('openshiftInstallLoc')) && this.get('numMasterNodes') > 0 && this.get('numWorkerNodes') > 0 && this.get('storageSize') > 0 && this.get('masterVcpu') > 0 && this.get('masterRam') > 0 && this.get('masterDisk') > 0 && this.get('nodeVcpu') > 0 && this.get('nodeRam') > 0 && this.get('nodeDisk') > 0 && this.get('isUnderCapacity');
    }),
    isInvalidOpenshiftNodes: _ember["default"].computed.not("isValidOpenshiftNodes"),

    openshiftUsernameValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({})]
    }),

    isValidOpenshiftConfiguration: _ember["default"].computed('model.openshift_username', function () {
      return this.get('openshiftUsernameValidator').isValid(this.get('model.openshift_username'));
    }),
    isInvalidOpenshiftConfiguration: _ember["default"].computed.not("isValidOpenshiftConfiguration"),

    validOpenshift: _ember["default"].computed('isValidOpenshiftNodes', 'isValidOpenshiftConfiguration', function () {
      return this.get('isValidOpenshiftNodes') && this.get('isValidOpenshiftConfiguration');
    })

  });
});
define("fusor-ember-cli/controllers/openstack/overcloud", ["exports", "ember", "fusor-ember-cli/mixins/deployment-controller-mixin", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/utils/validators"], function (exports, _ember, _fusorEmberCliMixinsDeploymentControllerMixin, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {

  var OvercloudController = _ember["default"].Controller.extend(_fusorEmberCliMixinsDeploymentControllerMixin["default"], _fusorEmberCliMixinsNeedsDeploymentMixin["default"], {
    isCloudForms: _ember["default"].computed.alias("deploymentController.isCloudForms"),
    isOpenShift: _ember["default"].computed.alias("deploymentController.isOpenShift"),
    openstackOvercloudPrivateNet: _ember["default"].computed.alias('deploymentController.model.openstack_overcloud_private_net'),
    openstackOvercloudFloatNet: _ember["default"].computed.alias('deploymentController.model.openstack_overcloud_float_net'),
    openstackOvercloudFloatGateway: _ember["default"].computed.alias('deploymentController.model.openstack_overcloud_float_gateway'),
    externalNetworkInterface: _ember["default"].computed.alias('deploymentController.model.openstack_overcloud_ext_net_interface'),
    overcloudPassword: _ember["default"].computed.alias("deploymentController.model.openstack_overcloud_password"),
    confirmOvercloudPassword: _ember["default"].computed.alias("deploymentController.confirmOvercloudPassword"),
    openstackOvercloudLibvirtType: _ember["default"].computed.alias("deploymentController.model.openstack_overcloud_libvirt_type"),

    ipValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.IpRangeValidator.create({})]
    }),

    cidrValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.CidrValidator.create({})]
    }),

    confirmOvercloudPasswordValidator: _ember["default"].computed('overcloudPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('overcloudPassword') });
    }),

    nextStepRouteNameOvercloud: _ember["default"].computed('isCloudForms', function () {
      if (this.get('isCloudForms')) {
        return 'cloudforms';
      } else if (this.get('isOpenShift')) {
        return 'openshift';
      } else {
        return 'subscriptions';
      }
    }),

    isValidOvercloudPassword: _ember["default"].computed('overcloudPassword', 'confirmOvercloudPassword', function () {
      return _ember["default"].isPresent(this.get('overcloudPassword')) && this.get('overcloudPassword') === this.get('confirmOvercloudPassword');
    }),

    validOvercloudNetworks: _ember["default"].computed('externalNetworkInterface', 'openstackOvercloudPrivateNet', 'openstackOvercloudFloatNet', 'openstackOvercloudFloatGateway', 'isValidOvercloudPassword', 'isValidPrivateNetworkRange', 'isValidFloatingIpNetworkRange', 'isValidFloatingIpGateway', function () {
      return _ember["default"].isPresent(this.get('externalNetworkInterface')) && _ember["default"].isPresent(this.get('openstackOvercloudPrivateNet')) && _ember["default"].isPresent(this.get('openstackOvercloudFloatNet')) && _ember["default"].isPresent(this.get('openstackOvercloudFloatGateway')) && this.get('isValidOvercloudPassword') && this.get('isValidPrivateNetworkRange') && this.get('isValidFloatingIpNetworkRange') && this.get('isValidFloatingIpGateway');
    }),

    disableNextOvercloud: _ember["default"].computed.not('validOvercloudNetworks'),

    isValidPrivateNetworkRange: _ember["default"].computed('openstackOvercloudPrivateNet', function () {
      return this.get('cidrValidator').isValid(this.get('openstackOvercloudPrivateNet'));
    }),

    isValidFloatingIpNetworkRange: _ember["default"].computed('openstackOvercloudFloatNet', function () {
      return this.get('cidrValidator').isValid(this.get('openstackOvercloudFloatNet'));
    }),

    isValidFloatingIpGateway: _ember["default"].computed('openstackOvercloudFloatGateway', function () {
      return this.get('ipValidator').isValid(this.get('openstackOvercloudFloatGateway'));
    })
  });

  exports["default"] = OvercloudController;
});
define('fusor-ember-cli/controllers/openstack', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    registerNodesController: _ember['default'].inject.controller('register-nodes'),
    assignNodesController: _ember['default'].inject.controller('assign-nodes'),
    overcloudController: _ember['default'].inject.controller('openstack/overcloud'),

    stepNumberOpenstack: _ember['default'].computed.alias("deploymentController.stepNumberOpenstack"),
    disableRegisterNodesNext: _ember['default'].computed.alias("registerNodesController.disableRegisterNodesNext"),
    disableAssignNodesNext: _ember['default'].computed.alias("assignNodesController.disableAssignNodesNext"),
    disableNextOvercloud: _ember['default'].computed.alias("overcloudController.disableNextOvercloud"),

    disableTabRegisterNodes: _ember['default'].computed.empty("deploymentController.model.openstack_undercloud_password"),

    disableTabAssignNodes: _ember['default'].computed("disableTabRegisterNodes", "disableRegisterNodesNext", function () {
      return this.get('disableTabRegisterNodes') || this.get("disableRegisterNodesNext");
    }),

    disableTabOvercloud: _ember['default'].computed("disableTabAssignNodes", "disableAssignNodesNext", function () {
      return this.get('disableTabAssignNodes') || this.get('disableAssignNodesNext');
    }),

    isValidRegisterNodes: _ember['default'].computed.not('disableRegisterNodesNext'),
    isValidAssignNodes: _ember['default'].computed.not('disableAssignNodesNext'),
    isValidOvercloud: _ember['default'].computed.not('disableNextOvercloud'),

    validOpenStack: _ember['default'].computed('isValidRegisterNodes', 'isValidAssignNodes', 'isValidOvercloud', function () {
      return this.get('isValidRegisterNodes') && this.get('isValidAssignNodes') && this.get('isValidOvercloud');
    })
  });
});
define('fusor-ember-cli/controllers/register-nodes', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/progress-bar-mixin', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsProgressBarMixin, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsProgressBarMixin['default'], _fusorEmberCliMixinsNeedsDeploymentMixin['default'], {
    deploymentId: _ember['default'].computed.alias("deploymentController.model.id"),
    deployment: _ember['default'].computed.alias("deploymentController.model"),
    intervalPolling: 10000,
    nodeCount: _ember['default'].computed.alias("deployment.openstack_overcloud_node_count"),

    presenceValidator: _fusorEmberCliUtilsValidators.PresenceValidator.create({}),
    macAddressValidator: _fusorEmberCliUtilsValidators.MacAddressValidator.create({}),

    hostAddressValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.HostAddressValidator.create({})]
    }),

    step: 1,
    detectNodesRequestNum: 0,
    savedInfo: [],
    csvInfo: [],
    csvErrors: [],

    drivers: [{ label: 'IPMI Driver', value: 'pxe_ipmitool' }, { label: 'PXE + SSH', value: 'pxe_ssh' }],

    ipmiVendors: [{ label: 'Dell', value: 'dell' }],

    ipmiVendor: 'dell',

    virtVendors: [{ label: 'KVM', value: 'kvm' }],

    virtVendor: 'kvm',

    vendors: _ember['default'].computed('nodeInfo.driver', function () {
      switch (this.get('nodeInfo.driver')) {
        case 'pxe_ssh':
          return this.get('virtVendors');
        case 'pxe_ipmitool':
          return this.get('ipmiVendors');
        default:
          return [];
      }
    }),

    isStep1: _ember['default'].computed('step', function () {
      return this.get('step') === 1;
    }),

    isStep2: _ember['default'].computed('step', function () {
      return this.get('step') === 2;
    }),

    isNewNodeMethodAuto: _ember['default'].computed('registerNodesMethod', function () {
      return this.get('registerNodesMethod') === 'auto_detect';
    }),

    isNewNodeMethodCSV: _ember['default'].computed('registerNodesMethod', function () {
      return this.get('registerNodesMethod') === 'csv_upload';
    }),

    isNewNodeMethodManual: _ember['default'].computed('registerNodesMethod', function () {
      return this.get('registerNodesMethod') === 'manual';
    }),

    nodeDriverHumanized: _ember['default'].computed('nodeInfo.driver', function () {
      return this.get('drivers').findBy('value', this.get('nodeInfo.driver')).label;
    }),

    isPxeSsh: _ember['default'].computed('nodeInfo.driver', function () {
      return this.get('nodeInfo.driver') === 'pxe_ssh';
    }),

    isIpmi: _ember['default'].computed('nodeInfo.driver', function () {
      return this.get('nodeInfo.driver') === 'pxe_ipmitool';
    }),

    newNodeVendorLabel: _ember['default'].computed('nodeInfo.driver', function () {
      if (this.get('nodeInfo.driver') === 'pxe_ipmitool') {
        return 'IPMI Vendor';
      }

      return 'Vendor';
    }),

    newNodeAddressLabel: _ember['default'].computed('nodeInfo.driver', function () {
      switch (this.get('nodeInfo.driver')) {
        case 'pxe_ssh':
          return 'SSH Address';
        case 'pxe_ipmitool':
          return 'IPMI Address';
        default:
          return 'Address';
      }
    }),

    newNodeUsernameLabel: _ember['default'].computed('nodeInfo.driver', function () {
      switch (this.get('nodeInfo.driver')) {
        case 'pxe_ssh':
          return 'SSH User';
        case 'pxe_ipmitool':
          return 'IPMI User';
        default:
          return 'Username';
      }
    }),

    newNodePasswordLabel: _ember['default'].computed('nodeInfo.driver', function () {
      switch (this.get('nodeInfo.driver')) {
        case 'pxe_ssh':
          return 'SSH Password';
        case 'pxe_ipmitool':
          return 'IPMI Password';
        default:
          return 'Password';
      }
    }),

    hasNodes: _ember['default'].computed('nodeCount', function () {
      return this.get('nodeCount') > 0;
    }),

    nodeErrors: _ember['default'].computed('nodeManagers.[]', 'nodes.@each', 'introspectionTasks.@each', 'foremanTasks.@each.humanized_errors', 'ports.@each', function () {
      var _this = this;

      var nodeManagers = this.get('nodeManagers') || [];
      var foremanTasks = this.get('foremanTasks') || [];
      var nodeErrors = [];
      nodeManagers.forEach(function (manager) {
        manager.get('nodes').forEach(function (node) {
          var nodeError = _this.getNodeError(manager, node);
          if (nodeError) {
            nodeErrors.pushObject(nodeError);
          }
        });
      });

      return nodeErrors;
    }),

    showNodeErrors: _ember['default'].computed('nodeErrors', function () {
      return _ember['default'].isPresent(this.get('nodeErrors'));
    }),

    registrationErrors: _ember['default'].computed('newIntrospectionTaskIds.@each', 'foremanTasks.@each.humanized_errors', 'introspectionTasks.[]', 'nodes.[]', function () {
      var _this2 = this;

      var newIntrospectionTaskIds = this.get('newIntrospectionTaskIds') || [];
      var foremanTasks = this.get('foremanTasks') || [];
      var registrationErrors = [];

      newIntrospectionTaskIds.forEach(function (taskId) {
        var registrationError = _this2.getRegistrationError(taskId);
        if (registrationError) {
          registrationErrors.pushObject(registrationError);
        }
      });

      return registrationErrors;
    }),

    showRegistrationErrors: _ember['default'].computed('registrationErrors', function () {
      return _ember['default'].isPresent(this.get('registrationErrors'));
    }),

    hasCsvInfo: _ember['default'].computed('csvInfo.[]', function () {
      return _ember['default'].isPresent(this.get('csvInfo'));
    }),

    hasCsvErrors: _ember['default'].computed('csvErrors.[]', function () {
      return _ember['default'].isPresent(this.get('csvErrors'));
    }),

    hasAutoDetectedNodesMultiMac: _ember['default'].computed('autoDetectedNodesMultiMac.[]', function () {
      return this.get('autoDetectedNodesMultiMac.length') > 0;
    }),

    hasAutoDetectedNodesSingleMac: _ember['default'].computed('autoDetectedNodesSingleMac.[]', function () {
      return this.get('autoDetectedNodesSingleMac.length') > 0;
    }),

    hasAutoDetectedNodes: _ember['default'].computed('hasAutoDetectedNodesMultiMac', 'hasAutoDetectedNodesSingleMac', function () {
      return this.get('hasAutoDetectedNodesMultiMac') && this.get('hasAutoDetectedNodesSingleMac');
    }),

    noNodesDetected: _ember['default'].computed('hasAutoDetectedNodes', 'detectNodesCanceled', function () {
      return !this.get('hasAutoDetectedNodes') && !this.get('detectNodesCanceled');
    }),

    numAutoDetectedNodesInvalidCount: _ember['default'].computed('autoDetectedNodesMultiMac.@each.value', 'autoDetectedNodesMultiMac.@each.selected', 'autoDetectedNodesSingleMac.@each.value', 'autoDetectedNodesSingleMac.@each.selected', function () {
      return this.countAutoDetectedNodes(function (node) {
        return node.get('selected') && !_ember['default'].isPresent(node.get('value'));
      });
    }),

    hasInvalidAutoDetectedNodes: _ember['default'].computed('numAutoDetectedNodesInvalidCount', function () {
      return this.get('numAutoDetectedNodesInvalidCount') > 0;
    }),

    numAutoDetectedNodesDeselectedCount: _ember['default'].computed('autoDetectedNodesMultiMac.@each.selected', 'autoDetectedNodesSingleMac.@each.selected', function () {
      return this.countAutoDetectedNodes(function (node) {
        return !node.get('selected');
      });
    }),

    hasDeselectedAutoDetectedNodes: _ember['default'].computed('numAutoDetectedNodesDeselectedCount', function () {
      return this.get('numAutoDetectedNodesDeselectedCount') > 0;
    }),

    numAutoDetectedNodesValidCount: _ember['default'].computed('autoDetectedNodesMultiMac.@each.value', 'autoDetectedNodesMultiMac.@each.selected', 'autoDetectedNodesSingleMac.@each.value', 'autoDetectedNodesSingleMac.@each.selected', function () {
      return this.countAutoDetectedNodes(function (node) {
        return node.get('selected') && _ember['default'].isPresent(node.get('value'));
      });
    }),

    countAutoDetectedNodes: function countAutoDetectedNodes(matchFn) {
      var numMultiMacNodes = this.get('autoDetectedNodesMultiMac').reduce(function (prev, node) {
        return prev + (matchFn(node) ? 1 : 0);
      }, 0);
      var numSingleMacNodes = this.get('autoDetectedNodesSingleMac').reduce(function (prev, node) {
        return prev + (matchFn(node) ? 1 : 0);
      }, 0);

      return numMultiMacNodes + numSingleMacNodes;
    },

    hasValidAutoDetectedNodes: _ember['default'].computed('numAutoDetectedNodesValidCount', function () {
      return this.get('numAutoDetectedNodesValidCount') > 0;
    }),

    selectedVendor: _ember['default'].computed('isIpmi', 'ipmiVendor', 'virtVendor', function () {
      return this.get('isIpmi') ? this.get('ipmiVendor') : this.get('virtVendor');
    }),

    isValidAutoDetectInfo: _ember['default'].computed('registerNodesMethod', 'nodeInfo.driver', 'nodeInfo.vendor', 'nodeInfo.address', 'nodeInfo.username', 'nodeInfo.password', function () {
      return this.get('registerNodesMethod') === 'auto_detect' && _ember['default'].isPresent(this.get('nodeInfo.driver')) && _ember['default'].isPresent(this.get('selectedVendor')) && _ember['default'].isPresent(this.get('nodeInfo.address')) && _ember['default'].isPresent(this.get('nodeInfo.username')) && _ember['default'].isPresent(this.get('nodeInfo.password')) && this.get('hostAddressValidator').isValid(this.get('nodeInfo.address'));
    }),

    isValidNewNodeAuto: _ember['default'].computed('isValidAutoDetectInfo', 'hasInvalidAutoDetectedNodes', 'hasValidAutoDetectedNodes', function () {
      if (!this.get('isValidAutoDetectInfo')) {
        return false;
      }

      var macAddresses = this.get('nodeInfo.macAddresses');
      if (!macAddresses) {
        return false;
      }

      return this.get('hasValidAutoDetectedNodes') && !this.get('hasInvalidAutoDetectedNodes');
    }),

    isValidNewNodeCsv: _ember['default'].computed('hasCsvInfo', 'hasCsvErrors', function () {
      return this.get('hasCsvInfo') && !this.get('hasCsvErrors');
    }),

    isValidNewNodeManual: _ember['default'].computed('registerNodesMethod', 'nodeInfo.driver', 'nodeInfo.address', 'nodeInfo.username', 'nodeInfo.password', 'nodeInfo.macAddresses.@each.value', function () {
      var validConnection = this.get('registerNodesMethod') === 'manual' && _ember['default'].isPresent(this.get('nodeInfo.driver')) && _ember['default'].isPresent(this.get('nodeInfo.address')) && _ember['default'].isPresent(this.get('nodeInfo.username')) && _ember['default'].isPresent(this.get('nodeInfo.password')) && this.get('hostAddressValidator').isValid(this.get('nodeInfo.address'));

      if (!validConnection) {
        return false;
      }

      var macAddresses = this.get('nodeInfo.macAddresses');
      if (!macAddresses) {
        return false;
      }

      var numberInvalidMacs = 0,
          numberValidMacs = 0,
          macAddressValidator = this.get('macAddressValidator');

      macAddresses.forEach(function (macAddress) {
        if (_ember['default'].isPresent(macAddress.value)) {
          if (macAddressValidator.isValid(macAddress.value)) {
            numberValidMacs++;
          } else {
            numberInvalidMacs++;
          }
        }
      });

      return numberInvalidMacs === 0 && numberValidMacs > 0;
    }),

    hasValidNodesForRegistration: _ember['default'].computed('isValidNewNodeAuto', 'isValidNewNodeCsv', 'isValidNewNodeManual', function () {
      return this.get('isValidNewNodeAuto') || this.get('isValidNewNodeCsv') || this.get('isValidNewNodeManual');
    }),

    disableDetectNodesSubmit: _ember['default'].computed.not('isValidAutoDetectInfo'),

    disableNewNodesSubmit: _ember['default'].computed.not('hasValidNodesForRegistration'),

    enableRegisterNodesNext: _ember['default'].computed('nodeCount', function () {
      return this.get('nodeCount') >= 2;
    }),

    disableRegisterNodesNext: _ember['default'].computed.not('enableRegisterNodesNext'),

    actions: {
      showNodeRegistrationModal: function showNodeRegistrationModal() {
        this.initInfo();
        this.openRegDialog();
      },

      backStep: function backStep() {
        this.set('step', 1);
      },

      addMacAddress: function addMacAddress() {
        this.get('nodeInfo.macAddresses').pushObject(_ember['default'].Object.create({ value: '' }));
      },

      submitRegisterNodes: function submitRegisterNodes() {
        this.submitNodes();
        this.closeRegDialog();
      },

      cancelRegisterNodes: function cancelRegisterNodes() {
        this.closeRegDialog();
      },

      csvFileChosen: function csvFileChosen() {
        this.parseCsvFile(this.getCSVFileInput());
      },

      submitDetectNodes: function submitDetectNodes() {
        this.detectNodes();
        this.set('step', 2);
      },

      cancelDetectNodes: function cancelDetectNodes() {
        this.set('detectNodesCanceled', true);
        this.set('autoDetectNodesInProgress', false);
        this.set('detectNodesRequestNum', this.get('detectNodesRequestNum') + 1);
        this.set('autoDetectedNodesMultiMac', []);
        this.set('autoDetectedNodesSingleMac', []);
      },

      addNodesToManager: function addNodesToManager(nodeManager) {
        this.set('registerNodesMethod', 'manual');

        this.set('nodeInfo', _ember['default'].Object.create({
          vendor: null,
          driver: nodeManager.get('driver'),
          address: nodeManager.get('address'),
          username: nodeManager.get('username'),
          password: this.getPassword(nodeManager),
          macAddresses: [_ember['default'].Object.create({ value: '' })]
        }));

        this.openAddNodeDialog();
      },

      submitAddNodes: function submitAddNodes() {
        this.submitNodes();
        this.closeAddNodeDialog();
      },

      cancelAddNodes: function cancelAddNodes() {
        this.closeAddNodeDialog();
      },

      deleteNode: function deleteNode(node, nodeLabel) {
        this.set('nodeToDelete', node);
        this.set('nodeToDeleteLabel', nodeLabel);
        this.set('openDeleteNodeConfirmation', true);
        this.set('closeDeleteNodeConfirmation', false);
      },

      cancelDeleteNode: function cancelDeleteNode() {
        this.set('openDeleteNodeConfirmation', false);
        this.set('closeDeleteNodeConfirmation', true);
      },

      confirmDeleteNode: function confirmDeleteNode() {
        this.deleteNodeRequest();
      }
    },

    initInfo: function initInfo() {
      this.set('registerNodesMethod', 'auto_detect');

      this.set('nodeInfo', _ember['default'].Object.create({
        vendor: null,
        driver: null,
        address: null,
        username: null,
        password: null,
        macAddresses: [_ember['default'].Object.create({ value: '' })]
      }));

      this.set('csvInfo', []);
      this.set('csvErrors', []);
      this.set('autoDetectedNodesMultiMac', []);
      this.set('autoDetectedNodesSingleMac', []);
    },

    deleteNodeRequest: function deleteNodeRequest() {
      var _this3 = this;

      var url = '/fusor/api/openstack/deployments/' + this.get('deploymentId') + '/nodes/' + this.get('nodeToDelete.id');

      this.set('openDeleteNodeConfirmation', false);
      this.set('closeDeleteNodeConfirmation', true);

      return (0, _icAjax['default'])({
        url: url,
        type: 'DELETE',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": _ember['default'].$('meta[name="csrf-token"]').attr('content')
        }
      }).then(function (result) {
        _this3.removeNode(_this3.get('nodeToDelete'));
      }, function (error) {
        _this3.send('error', error, 'Unable to delete node. DELETE ' + url + ' failed with status code ' + error.jqXHR.status + '.');
      });
    },

    removeNode: function removeNode(node) {
      var nodes = this.get('nodes');
      var nodeManagers = this.get('nodeManagers');
      nodeManagers.forEach(function (mgr) {
        mgr.removeNode(node);
      });

      this.set('nodeManagers', nodeManagers.filter(function (mgr) {
        return mgr.get('nodes.length') > 0;
      }));
      this.set('nodes', nodes.without(node));
    },

    openRegDialog: function openRegDialog() {
      this.set('step', 1);
      this.set('openNewNodeRegistrationModal', true);
      this.set('closeNewNodeRegistrationModal', false);
    },

    closeRegDialog: function closeRegDialog() {
      this.set('openNewNodeRegistrationModal', false);
      this.set('closeNewNodeRegistrationModal', true);
    },

    openAddNodeDialog: function openAddNodeDialog() {
      this.set('openAddNodeRegistrationModal', true);
      this.set('closeAddNodeRegistrationModal', false);
    },

    closeAddNodeDialog: function closeAddNodeDialog() {
      this.set('openAddNodeRegistrationModal', false);
      this.set('closeAddNodeRegistrationModal', true);
    },

    submitNodes: function submitNodes() {
      var _this4 = this;

      var method = this.get('registerNodesMethod');
      this.set('newIntrospectionTaskIds', []);

      if (method === 'manual') {
        this.registerNodes(this.get('nodeInfo'));
      } else if (method === 'csv_upload') {
        this.get('csvInfo').forEach(function (nodeInfo) {
          return _this4.registerNodes(nodeInfo);
        });
      } else if (method === 'auto_detect') {
        this.prepAutoDetectNodeInfo();
        this.registerNodes(this.get('nodeInfo'));
      }

      this.closeRegDialog();
    },

    registerNodes: function registerNodes(nodeInfo) {
      var _this5 = this;

      nodeInfo.get('macAddresses').forEach(function (macAddress) {
        if (macAddress && _ember['default'].isPresent(macAddress.value)) {
          _this5.registerNode(nodeInfo, macAddress.value);
        }
      });
    },

    registerNode: function registerNode(nodeDriverInfo, macAddress) {
      var _this6 = this;

      nodeDriverInfo.set('address', nodeDriverInfo.get('address').trim());
      nodeDriverInfo.set('username', nodeDriverInfo.get('username').trim());

      var nodeParam = this.createNodeHash(nodeDriverInfo, macAddress);
      var url = '/fusor/api/openstack/deployments/' + this.get('deploymentId') + '/nodes';

      return (0, _icAjax['default'])({
        url: url,
        type: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": _ember['default'].$('meta[name="csrf-token"]').attr('content')
        },
        data: JSON.stringify({ node: nodeParam })
      }).then(function (result) {
        _this6.get('newIntrospectionTaskIds').pushObject(result.id);
        _this6.get('savedInfo').unshiftObject(nodeDriverInfo);
        _this6.send('refreshModelOnOverviewRoute');
        _this6.stopPolling();
        _this6.startPolling();
      }, function (error) {
        _this6.send('error', error, 'Unable to register node. POST ' + url + ' failed with status code ' + error.jqXHR.status + '.');
      });
    },

    createNodeHash: function createNodeHash(nodeInfo, macAddress) {
      var driverInfo = {};
      if (nodeInfo.get('driver') === 'pxe_ssh') {
        driverInfo = {
          ssh_address: nodeInfo.get('address'),
          ssh_username: nodeInfo.get('username'),
          ssh_password: nodeInfo.get('password'),
          ssh_virt_type: 'virsh'
        };
      } else if (nodeInfo.get('driver') === 'pxe_ipmitool') {
        driverInfo = {
          ipmi_address: nodeInfo.get('address'),
          ipmi_username: nodeInfo.get('username'),
          ipmi_password: nodeInfo.get('password')
        };
      }
      driverInfo.deploy_kernel = this.get('bmDeployKernelImage.id');
      driverInfo.deploy_ramdisk = this.get('bmDeployRamdiskImage.id');

      return {
        driver: nodeInfo.get('driver'),
        driver_info: driverInfo,
        properties: {
          capabilities: 'boot_option:local'
        },
        address: macAddress.trim()
      };
    },

    detectNodes: function detectNodes() {
      var _this7 = this;

      var nodeInfo = this.get('nodeInfo');
      var detectNodesRequestNum = this.get('detectNodesRequestNum') + 1;

      nodeInfo.set('address', nodeInfo.get('address').trim());
      nodeInfo.set('username', nodeInfo.get('username').trim());
      nodeInfo.set('vendor', this.get('selectedVendor'));

      this.set('autoDetectedNodesMultiMac', []);
      this.set('autoDetectedNodesSingleMac', []);
      this.set('detectNodesRequestNum', detectNodesRequestNum);

      var driverParams = {
        driver: nodeInfo.get('driver'),
        vendor: nodeInfo.get('vendor'),
        hostname: nodeInfo.get('address'),
        username: nodeInfo.get('username'),
        password: nodeInfo.get('password')
      };

      var url = '/fusor/api/openstack/deployments/' + this.get('deploymentId') + '/node_mac_addresses';

      this.set('detectNodesCanceled', false);
      this.set('autoDetectNodesInProgress', true);

      return (0, _icAjax['default'])({
        url: url,
        type: 'POST', //GET would expose password in a query param
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": _ember['default'].$('meta[name="csrf-token"]').attr('content')
        },
        data: JSON.stringify(driverParams)
      }).then(function (result) {
        if (detectNodesRequestNum === _this7.get('detectNodesRequestNum')) {
          _this7.updateAutoDetectedNodes(result.nodes);
          _this7.set('autoDetectNodesInProgress', false);
        }
      }, function (error) {
        console.log(error);
        if (detectNodesRequestNum === _this7.get('detectNodesRequestNum')) {
          _this7.set('detectNodesErrorMsg', 'Unable to detect nodes. Failed with status code ' + error.jqXHR.status + '.');
          _this7.set('autoDetectNodesInProgress', false);
        }
      });
    },

    updateAutoDetectedNodes: function updateAutoDetectedNodes(hostArray) {
      var autoDetectedNodesMultiMac = [];
      var autoDetectedNodesSingleMac = [];

      hostArray.forEach(function (hostHash) {
        var host = _ember['default'].Object.create({
          name: hostHash.hostname,
          macAddresses: hostHash.mac_addresses,
          selected: true
        });

        if (host.get('macAddresses.length') === 1) {
          host.set('value', host.get('macAddresses')[0]);
          autoDetectedNodesSingleMac.pushObject(host);
        } else if (host.get('macAddresses.length') > 1) {
          host.set('value', '');
          autoDetectedNodesMultiMac.pushObject(host);
        }
      });

      this.set('autoDetectedNodesMultiMac', autoDetectedNodesMultiMac);
      this.set('autoDetectedNodesSingleMac', autoDetectedNodesSingleMac);
    },

    prepAutoDetectNodeInfo: function prepAutoDetectNodeInfo() {
      var nodeInfo = this.get('nodeInfo');
      var macAddresses = this.get('autoDetectedNodesMultiMac').filter(function (node) {
        return node.get('selected');
      });

      this.get('autoDetectedNodesSingleMac').forEach(function (node) {
        if (node.get('selected')) {
          macAddresses.pushObject(node);
        }
      });

      nodeInfo.set('macAddresses', macAddresses);
      nodeInfo.set('vendor', this.get('selectedVendor'));
    },

    getNodeError: function getNodeError(nodeManager, node) {
      if (node.get('ready')) {
        return null;
      }

      var macAddress = node.getMacAddress(this.get('ports'));
      var nodeLabel = macAddress ? 'MAC Address ' + macAddress : node.get('id');

      var foremanTask = node.getForemanTask(this.get('introspectionTasks'), this.get('foremanTasks'));
      var foremanErrors = foremanTask ? foremanTask.get('humanized_errors') : '';

      var lastError = node.get('last_error') || '';

      if (foremanTask && foremanTask.get('state') === 'running') {
        return null;
      }

      if (_ember['default'].isBlank(lastError) && _ember['default'].isBlank(foremanErrors)) {
        return null;
      }

      foremanErrors = this.formatForemanTaskError(foremanErrors);

      return _ember['default'].Object.create({
        taskUrl: foremanTask ? foremanTask.get('taskUrl') : '',
        message: nodeLabel + ' from ' + nodeManager.get('address') + ' ' + foremanErrors + ' ' + lastError
      });
    },

    getRegistrationError: function getRegistrationError(taskId) {
      var foremanTasks = this.get('foremanTasks');
      var foremanTask = foremanTasks ? foremanTasks.findBy('id', taskId) : null;
      var foremanErrors = foremanTask ? foremanTask.get('humanized_errors') : '';

      if (foremanTask && foremanTask.get('state') === 'running') {
        return null;
      }

      if (_ember['default'].isBlank(foremanErrors)) {
        return null;
      }

      foremanErrors = this.formatForemanTaskError(foremanErrors);

      var introspectionTasks = this.get('introspectionTasks');
      var introspectionTask = introspectionTasks ? introspectionTasks.findBy('task_id', taskId) : null;
      var macAddress = introspectionTask ? introspectionTask.get('mac_address') : '??';

      var node = this.get('nodes').findBy('id', introspectionTask.get('node_uuid')); //we'll already show this under node errors.

      if (node || _ember['default'].isBlank(foremanErrors)) {
        return null;
      }

      return _ember['default'].Object.create({
        taskUrl: foremanTask ? foremanTask.get('taskUrl') : '',
        message: 'Introspection task for ' + macAddress + ' error: ' + foremanErrors
      });
    },

    formatForemanTaskError: function formatForemanTaskError(errorMessage) {
      var formattedErrorMessage = errorMessage;
      var requestErrorMatches = errorMessage.match(/@body=".*", @headers/i);

      if (_ember['default'].isPresent(requestErrorMatches)) {
        formattedErrorMessage = requestErrorMatches[0].replace('@body="', '').replace('", @headers', '');
      }

      return formattedErrorMessage.substring(0, Math.min(250, errorMessage.length));
    },

    getErrorMessageFromReason: function getErrorMessageFromReason(reason) {
      try {
        var displayMessage = reason.responseJSON.displayMessage;

        if (displayMessage.indexOf('{') >= 0 && displayMessage.indexOf('}') >= 1) {
          displayMessage = displayMessage.substring(displayMessage.indexOf('{'), displayMessage.indexOf('}') + 1) + "}";
          displayMessage = displayMessage.replace(/\\/g, "");
          displayMessage = displayMessage.replace(/"\{/g, "{");

          var errorObj = JSON.parse(displayMessage);
          displayMessage = errorObj.error_message.faultstring;
        }

        return displayMessage;
      } catch (e) {
        return reason.statusText;
      }
    },

    getPassword: function getPassword(manager) {
      var foundInfo = this.getSavedInfo(manager);
      return foundInfo ? foundInfo.get('password') : null;
    },

    getSavedInfo: function getSavedInfo(manager) {
      return this.get('savedInfo').find(function (savedInfo) {
        return savedInfo.get('driver') === manager.get('driver') && savedInfo.get('address') === manager.get('address') && savedInfo.get('username') === manager.get('username');
      });
    },

    getCSVFileInput: function getCSVFileInput() {
      return _ember['default'].$('#csvUploadInput')[0];
    },

    updloadCsvFile: function updloadCsvFile() {
      var uploadfile = this.getCSVFileInput();
      uploadfile.click();
    },

    parseCsvFile: function parseCsvFile(fileInput) {
      var csvInfo = [];
      var csvErrors = [];
      var controller = this;
      var file = fileInput.files[0];

      if (file) {
        (function () {
          var reader = new FileReader();
          reader.onload = function () {
            var text = reader.result;
            var csvArray;

            try {
              csvArray = _ember['default'].$.csv.toArrays(text);
            } catch (e) {
              console.log(e);
              controller.set('csvInfo', []);
              controller.set('csvErrors', [e.message]);
              return;
            }

            csvArray.forEach(function (row, rowIndex) {
              if (!Array.isArray(row) || row.length < 5) {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ' Invalid row');
                return;
              }

              if (row.length < 5) {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ' does not have enough fields (' + row.length + ')');
                return;
              }

              if (rowIndex === 0 && _ember['default'].isPresent(row[0]) && row[0].toLowerCase().indexOf('driver') >= 0) {
                return; //skip header row if present
              }

              var csvNode = _ember['default'].Object.create({});
              var errorsFound = false;

              if (row[0].toLowerCase().indexOf('ssh') >= 0) {
                csvNode.set('driver', 'pxe_ssh');
              } else if (row[0].toLowerCase().indexOf('ipmi') >= 0) {
                csvNode.set('driver', 'pxe_ipmitool');
              } else {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 1: "' + row[0] + '" is not a valid driver value');
                errorsFound = true;
              }

              if (controller.get('hostAddressValidator').isValid(row[1])) {
                csvNode.set('address', row[1]);
              } else {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 2: "' + row[1] + '" is not a valid host address');
                errorsFound = true;
              }

              if (_ember['default'].isPresent(row[2])) {
                csvNode.set('username', row[2]);
              } else {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 3: "' + row[2] + '" is not a valid username');
                errorsFound = true;
              }

              if (_ember['default'].isPresent(row[3])) {
                csvNode.set('password', row[3]);
              } else {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 4: "' + row[3] + '" is not a valid password');
                errorsFound = true;
              }

              if (_ember['default'].isPresent(row[4]) && controller.get('macAddressValidator').isValid(row[4])) {
                csvNode.set('macAddresses', [_ember['default'].Object.create({ value: row[4] })]);
              } else {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 5 "' + row[4] + '" is not a valid MAC address');
                errorsFound = true;
              }

              if (!errorsFound) {
                csvInfo.pushObject(csvNode);
              }
            });

            controller.set('csvInfo', csvInfo);
            controller.set('csvErrors', csvErrors);
          };

          reader.onloadend = function () {
            if (reader.error) {
              console.log(reader.error.message);
              controller.set('csvErrors', [reader.error.message]);
            }
          };

          reader.readAsText(file);
        })();
      }
    },

    handleOutsideClick: function handleOutsideClick() {
      //do nothing
    }

  });
});
define("fusor-ember-cli/controllers/review/installation", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/mixins/openshift-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliMixinsOpenshiftMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], _fusorEmberCliMixinsOpenshiftMixin["default"], {

    rhevController: _ember["default"].inject.controller('rhev'),
    rhevSetupController: _ember["default"].inject.controller('rhev-setup'),
    rhevOptionsController: _ember["default"].inject.controller('rhev-options'),
    selectSubscriptionsController: _ember["default"].inject.controller('subscriptions/select-subscriptions'),
    overcloudController: _ember["default"].inject.controller('openstack/overcloud'),

    isSelfHost: _ember["default"].computed.alias("rhevController.isSelfHost"),
    isDisconnected: _ember["default"].computed.alias("deploymentController.isDisconnected"),
    isNotDisconnected: _ember["default"].computed.not("isDisconnected"),
    cdnUrl: _ember["default"].computed.alias("model.cdn_url"),

    manifestFile: _ember["default"].computed.alias('deploymentController.model.manifest_file'),
    hasManifestFile: _ember["default"].computed.notEmpty('manifestFile'),
    hasNoManifestFile: _ember["default"].computed.not('hasManifestFile'),

    buttonDeployTitle: _ember["default"].computed('isStarted', function () {
      if (this.get('isStarted')) {
        return 'Next';
      } else {
        return 'Deploy';
      }
    }),

    isMissingSubscriptions: _ember["default"].computed('isNotDisconnected', 'hasSubscriptionsToAttach', 'hasSessionPortal', 'hasSubscriptionPools', function () {
      return this.get('isNotDisconnected') && this.get('hasSubscriptionsToAttach') && (!this.get('hasSessionPortal') || !this.get('hasSubscriptionPools'));
    }),

    buttonDeployDisabled: _ember["default"].computed('deploymentController.isDisabledReview', 'isMissingSubscriptions', 'isDisconnected', 'hasNoManifestFile', function () {
      return this.get('deploymentController.isDisabledReview') || this.get('isMissingSubscriptions') || this.get('isDisconnected') && this.get('hasNoManifestFile') || this.get('validationErrors.length') > 0;
    }),

    validationWarnings: [],
    showValidationWarnings: _ember["default"].computed('validationWarnings', function () {
      return this.get('validationWarnings.length') > 0;
    }),

    validationErrors: [],
    showValidationErrors: _ember["default"].computed('validationErrors', function () {
      return this.get('validationErrors.length') > 0;
    }),

    foremanTasksURL: null,
    skipContent: _ember["default"].computed.alias("deploymentController.skipContent"),

    showSpinner: false,
    spinnerTextMessage: null,

    isRhevOpen: true,
    isOpenStackOpen: true,
    isCloudFormsOpen: true,
    isSubscriptionsOpen: true,
    isOpenshiftOpen: true,

    engineHostAddressDefault: 'ovirt-hypervisor.rhci.redhat.com',
    hostAddress: _ember["default"].computed.alias("rhevOptionsController.hostAddress"),
    engineHostName: _ember["default"].computed.alias("rhevOptionsController.engineHostName"),

    nameDeployment: _ember["default"].computed.alias("model.name"),
    selectedOrganization: _ember["default"].computed.alias("deploymentController.selectedOrganzation"),
    selectedEnvironment: _ember["default"].computed.alias("deploymentController.selectedEnvironment"),
    rhevSetup: _ember["default"].computed.alias("deploymentController.rhevSetup"),

    isRhev: _ember["default"].computed.alias("deploymentController.isRhev"),
    isOpenStack: _ember["default"].computed.alias("deploymentController.isOpenStack"),
    openStack: _ember["default"].computed.alias("deploymentController.openStack"),
    isOpenShift: _ember["default"].computed.alias("deploymentController.isOpenShift"),
    isCloudForms: _ember["default"].computed.alias("deploymentController.isCloudForms"),
    isSubscriptions: _ember["default"].computed.alias("deploymentController.isSubscriptions"),

    isSelfHosted: _ember["default"].computed.alias("model.rhev_is_self_hosted"),
    selectedHypervisorHosts: _ember["default"].computed.alias("model.discovered_hosts"),

    rhev_engine_host: _ember["default"].computed.alias("model.discovered_host"),
    selectedRhevEngine: _ember["default"].computed.alias("model.discovered_host"),
    isStarted: _ember["default"].computed.alias("model.isStarted"),
    subscriptions: _ember["default"].computed.alias("model.subscriptions"),
    undercloudUsername: 'admin',
    undercloudPassword: _ember["default"].computed.alias("model.openstack_undercloud_password"),

    undercloudUrl: _ember["default"].computed('model.openstack_undercloud_ip_addr', function () {
      var ipAddr = this.get('model.openstack_undercloud_ip_addr');
      return ipAddr ? "http://" + ipAddr : ipAddr;
    }),

    profiles: _ember["default"].computed('model.openstack_overcloud_compute_flavor', 'model.openstack_overcloud_compute_count', 'model.openstack_overcloud_controller_flavor', 'model.openstack_overcloud_controller_count', 'model.openstack_overcloud_ceph_storage_flavor', 'model.openstack_overcloud_ceph_storage_count', 'model.openstack_overcloud_cinder_storage_flavor', 'model.openstack_overcloud_cinder_storage_count', 'model.openstack_overcloud_swift_storage_flavor', 'model.openstack_overcloud_swift_storage_count', function () {
      var profiles = [];

      this.addFlavor(profiles, this.get('model.openstack_overcloud_controller_flavor'), this.get('model.openstack_overcloud_controller_count'), 'Controller');
      this.addFlavor(profiles, this.get('model.openstack_overcloud_compute_flavor'), this.get('model.openstack_overcloud_compute_count'), 'Compute');
      this.addFlavor(profiles, this.get('model.openstack_overcloud_ceph_storage_flavor'), this.get('model.openstack_overcloud_ceph_storage_count'), 'Ceph-Storage');
      this.addFlavor(profiles, this.get('model.openstack_overcloud_cinder_storage_flavor'), this.get('model.openstack_overcloud_cinder_storage_count'), 'Cinder-Storage');
      this.addFlavor(profiles, this.get('model.openstack_overcloud_swift_storage_flavor'), this.get('model.openstack_overcloud_swift_storage_count'), 'Swift-Storage');

      return profiles;
    }),

    addFlavor: function addFlavor(profiles, flavor, count, name) {
      if (flavor === 'baremetal' || !count) {
        return;
      }

      var profile = profiles.findBy('flavor', flavor);

      if (!profile) {
        profile = _ember["default"].Object.create({ flavor: flavor, nodes: [] });
        profiles.addObject(profile);
      }

      profile.get('nodes').addObject(_ember["default"].Object.create({ name: name, count: count }));
    },

    engineNamePlusDomain: _ember["default"].computed('selectedRhevEngine.is_discovered', 'selectedRhevEngine.name', 'engineDomain', function () {
      if (this.get("selectedRhevEngine.is_discovered")) {
        return this.get("selectedRhevEngine.name") + '.' + this.get('engineDomain');
      } else {
        // name is fqdn for managed host
        return this.get("selectedRhevEngine.name");
      }
    }),

    fullOpenshiftSubdomain: _ember["default"].computed('model.openshift_subdomain_name', 'deploymentController.defaultDomainName', function () {
      var subdomainName = this.get('model.openshift_subdomain_name');
      var defaultDomainName = this.get('deploymentController.defaultDomainName');
      return subdomainName + "." + defaultDomainName;
    }),

    nameRHCI: _ember["default"].computed.alias("deploymentController.nameRHCI"),
    nameRhev: _ember["default"].computed.alias("deploymentController.nameRhev"),
    nameOpenStack: _ember["default"].computed.alias("deploymentController.nameOpenStack"),
    nameCloudForms: _ember["default"].computed.alias("deploymentController.nameCloudForms"),
    nameSatellite: _ember["default"].computed.alias("deploymentController.nameSatellite"),

    backRouteNameonReviewInstallation: _ember["default"].computed('isSubscriptions', 'isRhev', 'isOpenStack', 'isCloudForms', 'model.upstream_consumer_uuid', function () {
      if (this.get('isSubscriptions')) {
        if (this.get('model.is_disconnected')) {
          return 'subscriptions.review-subscriptions';
        } else if (_ember["default"].isPresent(this.get('model.upstream_consumer_uuid'))) {
          return 'subscriptions.review-subscriptions';
        } else {
          return 'subscriptions.credentials';
        }
      } else {
        if (this.get('isCloudForms')) {
          return 'cloudforms.cfme-configuration';
        } else if (this.get('isOpenShift')) {
          return 'openshift.openshift-configuration';
        } else if (this.get('isOpenStack')) {
          return 'openstack.overcloud';
        } else if (this.get('isRhev')) {
          return 'storage';
        }
      }
    }),

    lifecycleEnvironmentName: _ember["default"].computed('model.lifecycle_environment.name', function () {
      var name = this.get('model.lifecycle_environment.name');
      if (name) {
        return name;
      } else {
        return "Default Organization View";
      }
    }),

    qtyLabel: _ember["default"].computed('isDisconnected', function () {
      if (this.get('isDisconnected')) {
        return 'Quantity';
      } else {
        return 'Quantity Added';
      }
    }),

    ramNeededGB: _ember["default"].computed('ramNeeded', function () {
      return this.get('ramNeeded') + ' GB';
    }),

    diskNeededGB: _ember["default"].computed('diskNeeded', function () {
      return this.get('diskNeeded') + ' GB';
    }),

    storageSizeGB: _ember["default"].computed('storageSize', function () {
      return this.get('storageSize') + ' GB';
    }),

    deploymentButtonAction: _ember["default"].computed('hasSubscriptionsToAttach', function () {
      if (this.get('showWarningMessage')) {
        return "showContinueDeployModal";
      } else if (this.get('hasSubscriptionsToAttach')) {
        return "attachSubscriptions";
        return "installDeployment";
      } else if (this.get('showWarningMessage')) {
        return "showContinueDeployModal";
      }
    }),

    closeContinueDeployModal: function closeContinueDeployModal() {
      this.set('continueDeploymentModalOpen', false);
      this.set('continueDeploymentModalClosed', true);
      this.set('modalOpen', false);
    },

    actions: {
      showContinueDeployModal: function showContinueDeployModal() {
        this.set('deploymentInModal', this.get('model'));
        this.set('continueDeploymentModalOpen', true);
        this.set('continueDeploymentModalClosed', false);
        this.set('modalOpen', true);
      },

      onDeployButton: function onDeployButton() {
        if (this.get('showWarningMessage')) {
          this.send('showContinueDeployModal');
        } else if (this.get('hasSubscriptionsToAttach')) {
          this.send('attachSubscriptions');
        } else {
          this.send('installDeployment');
        }
      }
    }
  });
});
define('fusor-ember-cli/controllers/review/progress/log', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    searchLogInputValue: null,
    scrollToEndChecked: true,
    errorChecked: true,
    warnChecked: true,
    infoChecked: true,
    debugChecked: false,
    logTypes: [{ label: 'QCI Deployment (deployment.log)', value: 'fusor_log' }, { label: 'Satellite (foreman.log)', value: 'foreman_log' },
    //{label: 'Satellite Proxy (proxy.log)', value: 'foreman_proxy_log'},
    { label: 'Subscriptions (candlepin.log)', value: 'candlepin_log' }, { label: 'System Messages (messages)', value: 'messages_log' }],

    showLogLoading: _ember['default'].computed('errorMessage', 'isLoading', function () {
      return !this.get('errorMessage') && this.get('isLoading');
    }),

    showLogUpdating: _ember['default'].computed('errorMessage', 'isLoading', 'deploymentInProgress', function () {
      return !this.get('errorMessage') && !this.get('isLoading') && this.get('deploymentInProgress');
    }),

    showLogEmpty: _ember['default'].computed('errorMessage', 'isLoading', 'logType', 'model.fusor_log.entries.[]', 'model.foreman_log.entries.[]', 'model.foreman_proxy_log.entries.[]', 'model.candlepin_log.entries.[]', 'model.messages_log.entries.[]', function () {
      var logType, entries;
      logType = this.get('logType') || 'fusor_log';
      entries = this.get('model.' + logType + '.entries');
      return !this.get('errorMessage') && !this.get('isLoading') && (!entries || !entries.length);
    }),

    logOptionsChanged: _ember['default'].observer('errorChecked', 'warnChecked', 'infoChecked', 'debugChecked', function () {
      var _this = this;

      _ember['default'].run.once(this, function () {
        return _this.send('updateDisplayedLog');
      });
    }),

    isSearchActive: _ember['default'].computed('searchLogString', function () {
      return !!this.get('searchLogString');
    }),

    logTypeChanged: (function () {
      var _this2 = this;

      this.set('displayedLogHtml', '');
      this.set('newEntries', []);
      // run later to allow the dropdown to close and log to clear before doing the real work
      _ember['default'].run.later(this, function () {
        _this2.send('changeLogType');
      });
    }).observes('logType'),

    actions: {
      scrollToEnd: function scrollToEnd() {
        if (this.get('deploymentInProgress') && this.get('scrollToEndChecked')) {
          var logOutput = _ember['default'].$('.log-output')[0];
          if (logOutput) {
            logOutput.scrollTop = logOutput.scrollHeight;
          }
        }
      },

      search: function search() {
        this.set('scrollToEndChecked', false);
        this.set('searchLogString', this.get('searchLogInputValue'));
        return true; //bubble anc execute route action
      },

      clearSearch: function clearSearch() {
        this.set('searchLogInputValue', null);
        this.set('searchLogString', null);
        return true; //bubble anc execute route action
      },

      navPreviousSearchResult: function navPreviousSearchResult() {
        this.navSearchResult(-1);
      },

      navNextSearchResult: function navNextSearchResult() {
        this.navSearchResult(1);
      }
    },

    navSearchResult: function navSearchResult(idxChange) {
      var searchResults = this.get('searchResults'),
          searchResultIdx = this.get('searchResultIdx'),
          isSearchActive = this.get('isSearchActive');

      if (!isSearchActive || searchResults.length === 0) {
        return;
      }

      searchResultIdx += idxChange;
      if (searchResultIdx > searchResults.length) {
        searchResultIdx = 1;
      }

      if (searchResultIdx < 1) {
        searchResultIdx = searchResults.length;
      }

      this.set('searchResultIdx', searchResultIdx);
      this.markAndScrollToSearchResult(idxChange < 0);
    },

    markAndScrollToSearchResult: function markAndScrollToSearchResult(showAtTop) {
      var searchResults = this.get('searchResults'),
          searchResultIdx = this.get('searchResultIdx'),
          currentlySelected,
          searchResult,
          searchTag;

      searchTag = searchResults[searchResultIdx - 1];
      currentlySelected = _ember['default'].$('.log-entry-search-selected');
      searchResult = _ember['default'].$('.' + searchTag.cssClass);

      this.set('scrollToEndChecked', false);
      currentlySelected.removeClass('log-entry-search-selected');

      if (searchResult && searchResult[0]) {
        searchResult.addClass('log-entry-search-selected');
        searchResult[0].scrollIntoView(showAtTop);
      }
    }
  });
});
define('fusor-ember-cli/controllers/review/progress/overview', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/progress-bar-mixin', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsProgressBarMixin, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsProgressBarMixin['default'], _fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    isRhev: _ember['default'].computed.alias("deploymentController.isRhev"),
    isOpenStack: _ember['default'].computed.alias("deploymentController.isOpenStack"),
    isCloudForms: _ember['default'].computed.alias("deploymentController.isCloudForms"),
    isOpenShift: _ember['default'].computed.alias("deploymentController.isOpenShift"),

    nameRHCI: _ember['default'].computed.alias("deploymentController.nameRHCI"),
    nameRhev: _ember['default'].computed.alias("deploymentController.nameRhev"),
    nameOpenStack: _ember['default'].computed.alias("deploymentController.nameOpenStack"),
    nameCloudForms: _ember['default'].computed.alias("deploymentController.nameCloudForms"),
    nameSatellite: _ember['default'].computed.alias("deploymentController.nameSatellite"),
    nameOpenShift: _ember['default'].computed.alias("deploymentController.nameOpenShift"),

    progressDeployment: _ember['default'].computed.alias("deployTask.progress"),
    resultDeployment: _ember['default'].computed.alias("deployTask.result"),
    stateDeployment: _ember['default'].computed.alias("deployTask.state"),

    deployTaskIsStopped: _ember['default'].computed('stateDeployment', function () {
      return this.get('stateDeployment') === 'stopped' || this.get('stateDeployment') === 'paused';
    }),

    deployTaskIsFinished: _ember['default'].computed('progressDeployment', 'resultDeployment', function () {
      return this.get('progressDeployment') === '1' && this.get('resultDeployment') === 'success';
    }),

    //Deploy task is not 100% but All subtasks are 100%
    showDeployTaskProgressBar: _ember['default'].computed('isRhev', 'isOpenStack', 'isCloudForms', 'isOpenShift', 'manageContentTask.progress', 'rhevTask.progress', 'openstackTask.progress', 'cfmeTask.progress', 'openshiftTask.progress', 'progressDeployment', function () {
      if (this.get('progressDeployment') === '1' || this.get('manageContentTask.progress') !== '1') {
        return false;
      }

      if (this.get('isRhev') && this.get('rhevTask.progress') !== '1') {
        return false;
      }

      if (this.get('isOpenStack') && this.get('openstackTask.progress') !== '1') {
        return false;
      }

      if (this.get('isCloudForms') && this.get('cfmeTask.progress') !== '1') {
        return false;
      }

      if (this.get('isOpenShift') && this.get('openshiftTask.progress') !== '1') {
        return false;
      }

      return true;
    }),

    isAbandonModalOpen: false,
    loadingRedeployment: false,

    actions: {
      redeploy: function redeploy() {
        var _this = this;

        this.set('loadingRedeployment', true);

        var depl = this.get('deploymentController.model');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        (0, _icAjax['default'])({
          url: '/fusor/api/v21/deployments/' + depl.get('id') + '/redeploy',
          type: "PUT",
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token,
            "Authorization": "Basic " + this.get('session.basicAuthToken')
          }
        }).then(function (response) {
          var newTaskUUID = response.id;
          depl.set('foreman_task_uuid', newTaskUUID);
          depl.set('has_content_error', false);
          depl.save();
          _this.send('refreshModelOnOverviewRoute');
        })['catch'](function (err) {
          console.log('ERROR occurred attempting a redeploy', err);
        })['finally'](function () {
          return _this.set('loadingRedeployment', false);
        });
      },
      abandon: function abandon() {
        this.set('isAbandonModalOpen', true);
      },
      executeAbandonment: function executeAbandonment() {
        var depl = this.get('deploymentController.model');
        depl.destroyRecord();
        this.transitionToRoute('deployments');
      }
    }
  });
});
define('fusor-ember-cli/controllers/review/progress', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    overviewController: _ember['default'].inject.controller('review/progress/overview'),

    isRhevOpen: true,
    isOpenStackOpen: false,
    isCloudFormsOpen: false,
    isSubscriptionsOpen: false,
    foremanTasksURL: null,

    showErrorMessage: false,
    errorMsg: null, // this should be overwritten by API response

    deployTaskIsFinished: _ember['default'].computed.alias("overviewController.deployTaskIsFinished"),
    deployTaskIsStopped: _ember['default'].computed.alias("overviewController.deployTaskIsStopped"),

    deployButtonTitle: _ember['default'].computed('deployTaskIsStopped', function () {
      if (this.get('deployTaskIsStopped')) {
        return 'Deployment Stopped';
      } else {
        return 'Deploying ...';
      }
    })
  });
});
define('fusor-ember-cli/controllers/review/summary', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    isRhev: _ember['default'].computed.alias('deploymentController.isRhev'),
    isOpenStack: _ember['default'].computed.alias('deploymentController.isOpenStack'),
    isOpenShift: _ember['default'].computed.alias('deploymentController.isOpenShift'),
    isCloudForms: _ember['default'].computed.alias('deploymentController.isCloudForms'),

    isRhevOpen: true,
    isOpenStackOpen: true,
    isCloudFormsOpen: true,
    isOpenShiftOpen: true,

    undercloudUsername: 'admin',
    undercloudPassword: _ember['default'].computed.alias("model.openstack_undercloud_password"),

    undercloudUrl: _ember['default'].computed('model.openstack_undercloud_hostname', function () {
      return 'http://' + this.get('model.openstack_undercloud_hostname');
    }),
    undercloudUrlIP: _ember['default'].computed('model.openstack_undercloud_ip_addr', function () {
      return 'http://' + this.get('model.openstack_undercloud_ip_addr');
    }),

    overcloudUsername: 'admin',
    overcloudPassword: _ember['default'].computed.alias("model.openstack_overcloud_password"),

    overcloudUrl: _ember['default'].computed('model.openstack_overcloud_hostname', function () {
      return 'http://' + this.get('model.openstack_overcloud_hostname') + '/dashboard/admin';
    }),
    overcloudUrlIP: _ember['default'].computed('model.openstack_overcloud_hostname', function () {
      return 'http://' + this.get('model.openstack_overcloud_address') + '/dashboard/admin';
    }),

    selectedRhevEngine: _ember['default'].computed.alias("deploymentController.model.discovered_host"),
    deploymentLabel: _ember['default'].computed.alias('deploymentController.model.label'),

    exampleAppUrl: _ember['default'].computed('deploymentController.defaultDomainName', function () {
      var domainName = this.get('deploymentController.defaultDomainName');
      var subdomainName = this.get('model.openshift_subdomain_name');

      return 'http://hello-openshift.' + subdomainName + '.' + domainName;
    }),

    rhevEngineUrl: _ember['default'].computed('selectedRhevEngine', function () {
      return 'https://' + this.get('selectedRhevEngine.name') + '/ovirt-engine/';
    }),
    rhevEngineUrlIP: _ember['default'].computed('selectedRhevEngine', function () {
      return 'https://' + this.get('selectedRhevEngine.ip') + '/ovirt-engine/';
    }),

    cfmeUrl: _ember['default'].computed('model.cfme_hostname', function () {
      return 'https://' + this.get('model.cfme_hostname');
    }),
    cfmeUrlIP: _ember['default'].computed('model.cfme_address', function () {
      return 'https://' + this.get('model.cfme_address');
    }),

    cfmeUrlSelfService: _ember['default'].computed('cfmeUrl', function () {
      return this.get('cfmeUrl') + '/self_service';
    }),
    cfmeUrlSelfServiceIP: _ember['default'].computed('cfmeUrlIP', function () {
      return this.get('cfmeUrlIP') + '/self_service';
    })

  });
});
define('fusor-ember-cli/controllers/review', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    subscriptionsController: _ember['default'].inject.controller('subscriptions'),
    overviewController: _ember['default'].inject.controller('review/progress/overview'),

    isUpstream: _ember['default'].computed.alias("applicationController.isUpstream"),
    disableNext: _ember['default'].computed.alias("subscriptionsController.disableNext"),

    nameSelectSubscriptions: _ember['default'].computed.alias("deploymentController.nameSelectSubscriptions"),

    stepNumberReview: _ember['default'].computed.alias("deploymentController.stepNumberReview"),

    deployTaskIsFinished: _ember['default'].computed.alias("overviewController.deployTaskIsFinished"),

    disableTabInstallation: _ember['default'].computed('disableNext', 'isUpstream', function () {
      return this.get('disableNext') && !this.get('isUpstream');
    }),

    disableTabProgress: _ember['default'].computed.not("isStarted"),

    disableTabSummary: _ember['default'].computed.not("deployTaskIsFinished")

  });
});
define('fusor-ember-cli/controllers/rhev-options', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    rhevRootPassword: _ember['default'].computed.alias("deploymentController.model.rhev_root_password"),
    rhevEngineAdminPassword: _ember['default'].computed.alias("deploymentController.model.rhev_engine_admin_password"),
    rhevDataCenterName: _ember['default'].computed.alias("deploymentController.model.rhev_data_center_name"),
    rhevClusterName: _ember['default'].computed.alias("deploymentController.model.rhev_cluster_name"),
    rhevCpuType: _ember['default'].computed.alias("deploymentController.model.rhev_cpu_type"),
    rhevIsSelfHosted: _ember['default'].computed.alias("deploymentController.model.rhev_is_self_hosted"),
    confirmRhevRootPassword: _ember['default'].computed.alias("deploymentController.confirmRhevRootPassword"),
    confirmRhevEngineAdminPassword: _ember['default'].computed.alias("deploymentController.confirmRhevEngineAdminPassword"),

    cpuTypes: ['Intel Conroe Family', 'Intel Penryn Family', 'Intel Nehalem Family', 'Intel Westmere Family', 'Intel SandyBridge Family', 'Intel Haswell', 'AMD Opteron G1', 'AMD Opteron G2', 'AMD Opteron G3', 'AMD Opteron G4', 'AMD Opteron G5', 'IBM POWER 8'],

    passwordValidator: _fusorEmberCliUtilsValidators.PasswordValidator.create({}),

    confirmRhevRootPasswordValidator: _ember['default'].computed('rhevRootPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('rhevRootPassword') });
    }),

    confirmRhevEngineAdminPasswordValidator: _ember['default'].computed('rhevEngineAdminPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('rhevEngineAdminPassword') });
    }),

    optionsBackRouteName: _ember['default'].computed('rhevIsSelfHosted', function () {
      if (this.get('rhevIsSelfHosted')) {
        return 'engine.discovered-host';
      } else {
        return 'hypervisor.discovered-host';
      }
    }),

    applicationModes: ['Both', 'Virt', 'Gluster'],
    engineLocation: ['Local', 'Remote'],
    dbSetup: ['Automatic', 'Manual'],
    yesNo: ['Yes', 'No'],
    applicationModes2: [{
      id: 1,
      name: 'Both'
    }, {
      id: 2,
      name: 'Virt'
    }, {
      id: 3,
      name: 'Gluster'
    }],

    createComputerNameValidator: function createComputerNameValidator(fieldName, otherFieldValue) {
      if (_ember['default'].isBlank(otherFieldValue) || otherFieldValue === 'Default') {
        return _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({ trim: false });
      }

      return _fusorEmberCliUtilsValidators.AllValidator.create({
        validators: [_fusorEmberCliUtilsValidators.Validator.create({
          message: 'Note: You must change the ' + fieldName + ' after changing the cluster name',
          isValid: function isValid(value) {
            return _ember['default'].isPresent(value) && value !== 'Default';
          }
        }), _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({ trim: false })]
      });
    },

    dataCenterNameValidator: _ember['default'].computed('rhevClusterName', function () {
      return this.createComputerNameValidator('data center name', this.get('rhevClusterName'));
    }),

    clusterNameValidator: _ember['default'].computed('rhevDataCenterName', function () {
      return this.createComputerNameValidator('cluster name', this.get('rhevDataCenterName'));
    }),

    validRhevOptions: _ember['default'].computed('rhevRootPassword', 'confirmRhevRootPassword', 'confirmRhevRootPasswordValidator', 'rhevEngineAdminPassword', 'confirmRhevEngineAdminPassword', 'confirmRhevEngineAdminPasswordValidator', 'rhevDataCenterName', 'dataCenterNameValidator', 'rhevClusterName', 'clusterNameValidator', function () {
      return this.get('passwordValidator').isValid(this.get('rhevRootPassword')) && this.get('passwordValidator').isValid(this.get('rhevEngineAdminPassword')) && this.get('confirmRhevRootPasswordValidator').isValid(this.get('confirmRhevRootPassword')) && this.get('confirmRhevEngineAdminPasswordValidator').isValid(this.get('confirmRhevEngineAdminPassword')) && this.get('dataCenterNameValidator').isValid(this.get('rhevDataCenterName')) && this.get('clusterNameValidator').isValid(this.get('rhevClusterName'));
    }),

    disableNextRhevOptions: _ember['default'].computed.not('validRhevOptions')
  });
});
define("fusor-ember-cli/controllers/rhev-setup", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    rhevIsSelfHosted: _ember["default"].computed.alias("deploymentController.model.rhev_is_self_hosted"),

    rhevSetup: _ember["default"].computed('rhevIsSelfHosted', function () {
      return this.get('rhevIsSelfHosted') ? "selfhost" : "rhevhost";
    }),

    rhevSetupTitle: _ember["default"].computed('rhevIsSelfHosted', function () {
      return this.get('rhevIsSelfHosted') ? "Self Hosted" : "Host + Engine";
    }),

    isSelfHosted: _ember["default"].computed('rhevSetup', function () {
      return this.get('rhevSetup') === 'selfhost';
    }),

    actions: {
      rhevSetupChanged: function rhevSetupChanged() {
        return this.get('deploymentController').set('model.rhev_is_self_hosted', this.get('isSelfHosted'));
      }
    }

  });
});
define('fusor-ember-cli/controllers/rhev', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    storageController: _ember['default'].inject.controller('storage'),
    rhevSetupController: _ember['default'].inject.controller('rhev-setup'),
    rhevOptionsController: _ember['default'].inject.controller('rhev-options'),
    engineDiscoveredHostController: _ember['default'].inject.controller('engine/discovered-host'),
    hypervisorDiscoveredHostController: _ember['default'].inject.controller('hypervisor/discovered-host'),

    rhevSetup: _ember['default'].computed.alias("rhevSetupController.rhevSetup"),

    isSelfHost: _ember['default'].computed('rhevSetup', function () {
      return this.get('rhevSetup') === 'selfhost';
    }),

    engineTabName: _ember['default'].computed('isSelfHost', function () {
      if (this.get('isSelfHost')) {
        return 'Engine/Hypervisor';
      } else {
        return 'Engine';
      }
    }),

    disableTabRhevSetupType: false,
    disableTabRhevEngine: false,

    hasEngine: _ember['default'].computed.alias('deploymentController.hasEngine'),
    hasNoEngine: _ember['default'].computed.not('hasEngine'),

    hasHypervisor: _ember['default'].computed('deploymentController.model.discovered_hosts.[]', function () {
      return this.get('deploymentController.model.discovered_hosts.length') > 0;
    }),
    hasNoHypervisor: _ember['default'].computed.not('hasHypervisor'),

    isEngineHostnameValid: _ember['default'].computed.not('engineDiscoveredHostController.isHostnameInvalid'),
    isHypervisorHostnameValid: _ember['default'].computed.not('hypervisorDiscoveredHostController.isHostnameInvalid'),

    disableTabRhevHypervisors: _ember['default'].computed('isSelfHost', 'invalidRhevEngine', function () {
      return this.get('isSelfHost') || this.get('invalidRhevEngine');
    }),

    disableTabRhevConfiguration: _ember['default'].computed('isSelfHost', 'validRhevEngine', 'invalidRhevHypervisor', function () {
      if (this.get('validRhevEngine')) {
        return !this.get('isSelfHost') && this.get('invalidRhevHypervisor');
      }
      return true;
    }),

    disableTabRhevStorage: _ember['default'].computed('rhevOptionsController.disableNextRhevOptions', 'disableTabRhevConfiguration', function () {
      return this.get('disableTabRhevConfiguration') || this.get('rhevOptionsController.disableNextRhevOptions');
    }),

    validRhevSetup: true,

    validRhevEngine: _ember['default'].computed('hasEngine', 'isEngineHostnameValid', function () {
      return this.get('hasEngine') && this.get('isEngineHostnameValid');
    }),
    invalidRhevEngine: _ember['default'].computed.not('validRhevEngine'),

    validRhevHypervisor: _ember['default'].computed('hasHypervisor', 'isHypervisorHostnameValid', function () {
      return this.get('hasHypervisor') && this.get('isHypervisorHostnameValid');
    }),
    invalidRhevHypervisor: _ember['default'].computed.not('validRhevHypervisor'),

    validRhevOptions: _ember['default'].computed.alias("rhevOptionsController.validRhevOptions"),
    validRhevStorage: _ember['default'].computed.alias("storageController.validRhevStorage"),

    validRhev: _ember['default'].computed('validRhevSetup', 'validRhevEngine', 'validRhevHypervisor', 'validRhevOptions', 'validRhevStorage', function () {
      return this.get('validRhevSetup') && this.get('validRhevEngine') && this.get('validRhevHypervisor') && this.get('validRhevOptions') && this.get('validRhevStorage');
    })
  });
});
define("fusor-ember-cli/controllers/satellite/access-insights", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    step2RouteName: _ember["default"].computed.alias("deploymentController.step2RouteName"),

    analyticsColor: _ember["default"].computed('isStarted', function () {
      if (this.get('isStarted')) {
        return 'disabled';
      } else {
        return '';
      }
    })

  });
});
define("fusor-ember-cli/controllers/satellite/index", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/mixins/validates-deployment-name-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliMixinsValidatesDeploymentNameMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], _fusorEmberCliMixinsValidatesDeploymentNameMixin["default"], {

    name: _ember["default"].computed.alias("deploymentController.name"),
    description: _ember["default"].computed.alias("deploymentController.description"),

    organizationTabRouteName: _ember["default"].computed.alias("deploymentController.organizationTabRouteName"),
    lifecycleEnvironmentTabRouteName: _ember["default"].computed.alias("deploymentController.lifecycleEnvironmentTabRouteName"),

    disableNextOnDeploymentName: _ember["default"].computed.alias("deploymentController.disableNextOnDeploymentName"),

    idSatName: 'deployment_sat_name',
    idSatDesc: 'deployment_sat_desc',

    isBackToDeployments: _ember["default"].computed.alias("deploymentController.isBackToDeployments"),

    backRouteNameOnSatIndex: _ember["default"].computed('isBackToDeployments', function () {
      if (this.get('isBackToDeployments')) {
        return 'deployments';
      } else {
        return 'deployment.start';
      }
    })
  });
});
define("fusor-ember-cli/controllers/satellite", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    satelliteTabRouteName: _ember["default"].computed.alias("deploymentController.satelliteTabRouteName"),
    organizationTabRouteName: _ember["default"].computed.alias("deploymentController.organizationTabRouteName"),
    lifecycleEnvironmentTabRouteName: _ember["default"].computed.alias("deploymentController.lifecycleEnvironmentTabRouteName"),

    disableTabDeploymentName: _ember["default"].computed.alias("deploymentController.disableTabDeploymentName"),
    disableTabConfigureOrganization: _ember["default"].computed.alias("deploymentController.disableTabConfigureOrganization"),
    disableTabLifecycleEnvironment: _ember["default"].computed.alias("deploymentController.disableTabLifecycleEnvironment"),
    disableTabAccessInsights: _ember["default"].computed.alias("deploymentController.disableTabAccessInsights")

  });
});
define('fusor-ember-cli/controllers/storage', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    step3RouteName: _ember['default'].computed.alias("deploymentController.step3RouteName"),
    isCloudForms: _ember['default'].computed.alias("deploymentController.isCloudForms"),

    hasEndingSlashInSharePath: _ember['default'].computed('deploymentController.model.rhev_share_path', function () {
      if (_ember['default'].isPresent(this.get('deploymentController.model.rhev_share_path'))) {
        return this.get('deploymentController.model.rhev_share_path').slice('-1') === '/';
      }
    }),

    hasEndingSlashInExportPath: _ember['default'].computed('deploymentController.model.rhev_export_domain_path', function () {
      if (_ember['default'].isPresent(this.get('deploymentController.model.rhev_export_domain_path'))) {
        return this.get('deploymentController.model.rhev_export_domain_path').slice('-1') === '/';
      }
    }),

    hasNoLeadingSlashInSharePath: _ember['default'].computed('deploymentController.model.rhev_share_path', function () {
      if (_ember['default'].isPresent(this.get('deploymentController.model.rhev_share_path'))) {
        return this.get('deploymentController.model.rhev_share_path').charAt(0) !== '/';
      }
    }),

    hasNoLeadingSlashInExportPath: _ember['default'].computed('deploymentController.model.rhev_export_domain_path', function () {
      if (_ember['default'].isPresent(this.get('deploymentController.model.rhev_export_domain_path'))) {
        return this.get('deploymentController.model.rhev_export_domain_path').charAt(0) !== '/';
      }
    }),

    errorsHashSharePath: _ember['default'].computed('hasEndingSlashInSharePath', 'deploymentController.model.rhev_share_path', function () {
      if (this.get('isNFS') && this.get('hasNoLeadingSlashInSharePath')) {
        return { "name": 'You must have a leading slash' };
      } else if (this.get('isGluster') && !this.get('hasNoLeadingSlashInSharePath')) {
        return { "name": 'You cannot have a leading slash' };
      } else if (this.get('hasEndingSlashInSharePath')) {
        return { "name": 'You cannot have a trailing slash' };
      } else {
        return {};
      }
    }),

    errorsHashExportPath: _ember['default'].computed('hasEndingSlashInExportPath', 'deploymentController.model.rhev_export_domain_path', function () {
      if (this.get('isNFS') && this.get('hasNoLeadingSlashInExportPath')) {
        return { "name": 'You must have a leading slash' };
      } else if (this.get('isGluster') && !this.get('hasNoLeadingSlashInExportPath')) {
        return { "name": 'You cannot have a leading slash' };
      } else if (this.get('hasEndingSlashInExportPath')) {
        return { "name": 'You cannot have a trailing slash' };
      } else {
        return {};
      }
    }),

    isNFS: _ember['default'].computed('deploymentController.model.rhev_storage_type', function () {
      return this.get('deploymentController.model.rhev_storage_type') === 'NFS';
    }),

    isLocal: _ember['default'].computed('deploymentController.model.rhev_storage_type', function () {
      return this.get('deploymentController.model.rhev_storage_type') === 'Local';
    }),

    isGluster: _ember['default'].computed('deploymentController.model.rhev_storage_type', function () {
      return this.get('deploymentController.model.rhev_storage_type') === 'glusterfs';
    }),

    isInvalidStorageFields: _ember['default'].computed('deploymentController.model.rhev_storage_type', 'invalidStorageName', 'invalidStorageAddress', 'invalidSharePath', function () {
      return _ember['default'].isBlank(this.get('deploymentController.model.rhev_storage_type')) || this.get('invalidStorageName') || this.get('invalidStorageAddress') || this.get('invalidSharePath');
    }),

    isInvalidExportDomainFields: _ember['default'].computed('invalidExportDomainName', 'invalidExportAddress', 'invalidExportPath', function () {
      return this.get('invalidExportDomainName') || this.get('invalidExportAddress') || this.get('invalidExportPath');
    }),

    computerNameValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({})]
    }),

    hostnameValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.HostnameValidator.create({})]
    }),

    invalidStorageName: _ember['default'].computed('deploymentController.model.rhev_storage_name', function () {
      return !this.get('computerNameValidator').isValid(this.get('deploymentController.model.rhev_storage_name'));
    }),

    invalidStorageAddress: _ember['default'].computed('deploymentController.model.rhev_storage_address', function () {
      return !this.get('hostnameValidator').isValid(this.get('deploymentController.model.rhev_storage_address'));
    }),

    invalidSharePath: _ember['default'].computed('deploymentController.model.rhev_share_path', 'hasEndingSlashInSharePath', 'hasNoLeadingSlashInSharePath', 'isNFS', 'isGluster', function () {
      return _ember['default'].isBlank(this.get('deploymentController.model.rhev_share_path')) || this.get('hasEndingSlashInSharePath') || this.get('isNFS') && this.get('hasNoLeadingSlashInExportPath') || this.get('isGluster') && !this.get('hasNoLeadingSlashInExportPath');
    }),

    invalidExportDomainName: _ember['default'].computed('deploymentController.model.rhev_export_domain_name', function () {
      return !this.get('computerNameValidator').isValid(this.get('deploymentController.model.rhev_export_domain_name'));
    }),

    invalidExportAddress: _ember['default'].computed('deploymentController.model.rhev_export_domain_address', function () {
      return !this.get('hostnameValidator').isValid(this.get('deploymentController.model.rhev_export_domain_address'));
    }),

    invalidExportPath: _ember['default'].computed('deploymentController.model.rhev_export_domain_path', 'hasEndingSlashInExportPath', 'hasNoLeadingSlashInExportPath', 'isNFS', 'isGluster', function () {
      return _ember['default'].isBlank(this.get('deploymentController.model.rhev_export_domain_path')) || this.get('hasEndingSlashInExportPath') || this.get('isNFS') && this.get('hasNoLeadingSlashInExportPath') || this.get('isGluster') && !this.get('hasNoLeadingSlashInExportPath');
    }),

    disableNextStorage: _ember['default'].computed('isCloudForms', 'isInvalidStorageFields', 'isInvalidExportDomainFields', 'invalidStorageName', 'invalidStorageAddress', 'invalidExportDomainName', 'invalidExportAddress', function () {
      if (this.get('isCloudForms')) {
        return this.get('isInvalidStorageFields') || this.get('isInvalidExportDomainFields') || this.get('invalidStorageName') || this.get('invalidStorageAddress') || this.get('invalidExportDomainName') || this.get('invalidExportAddress');
      } else {
        return this.get('isInvalidStorageFields') || this.get('invalidStorageName') || this.get('invalidStorageAddress');
      }
    }),

    validRhevStorage: _ember['default'].computed.not('disableNextStorage')

  });
});
define('fusor-ember-cli/controllers/subscriptions/credentials', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsNeedsDeploymentMixin) {

  var MirrorStatus = {
    VALID: 1,
    INVALID: 2,
    VALIDATING: 3
  };

  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    deploymentId: _ember['default'].computed.alias("deploymentController.model.id"),
    upstreamConsumerUuid: _ember['default'].computed.alias("deploymentController.model.upstream_consumer_uuid"),
    upstreamConsumerName: _ember['default'].computed.alias("deploymentController.model.upstream_consumer_name"),
    cdnUrl: _ember['default'].computed.alias("deploymentController.model.cdn_url"),
    manifestFile: _ember['default'].computed.alias("deploymentController.model.manifest_file"),

    isRhev: _ember['default'].computed.alias("deploymentController.model.deploy_rhev"),
    isOpenStack: _ember['default'].computed.alias("deploymentController.model.deploy_openstack"),
    isCloudForms: _ember['default'].computed.alias("deploymentController.model.deploy_cfme"),
    isOpenShift: _ember['default'].computed.alias("deploymentController.model.deploy_openshift"),

    //overwritten by setupController
    organizationUpstreamConsumerUUID: null,
    organizationUpstreamConsumerName: null,

    validCredentials: _ember['default'].computed('model.identification', 'password', function () {
      // password is not saved in the model
      return _ember['default'].isPresent(this.get('model.identification')) && _ember['default'].isPresent(this.get('password'));
    }),

    enableCredentialsNext: _ember['default'].computed('validCredentials', 'model.isAuthenticated', function () {
      return this.get('validCredentials') || this.get('model.isAuthenticated');
    }),
    disableCredentialsNext: _ember['default'].computed.not('enableCredentialsNext'),

    hasUpstreamConsumerUuid: _ember['default'].computed('upstreamConsumerUuid', function () {
      return _ember['default'].isPresent(this.get('upstreamConsumerUuid'));
    }),

    hasOrganizationUpstreamConsumerUUID: _ember['default'].computed('organizationUpstreamConsumerUUID', function () {
      return _ember['default'].isPresent(this.get('organizationUpstreamConsumerUUID'));
    }),

    backRouteNameonCredentials: _ember['default'].computed('isRhev', 'isOpenStack', 'isOpenShift', 'isCloudForms', function () {
      if (this.get('isCloudForms')) {
        return 'cloudforms.cfme-configuration';
      } else if (this.get('isOpenShift')) {
        return 'openshift.openshift-configuration';
      } else if (this.get('isOpenStack')) {
        return 'openstack.overcloud';
      } else if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'configure-environment';
      }
    }),

    nextButtonTitle: 'Next',

    actionCredentialsNext: _ember['default'].computed('model.isAuthenticated', function () {
      if (this.get('model.isAuthenticated')) {
        return 'redirectToManagementApplication';
      } else {
        return 'loginPortal';
      }
    }),

    isDisconnected: _ember['default'].computed.alias('deploymentController.model.is_disconnected'),
    hasManifestFile: _ember['default'].computed.notEmpty('manifestFile'),
    noManifestFile: _ember['default'].computed.empty('manifestFile'),

    disableNextDisconnected: _ember['default'].computed('noManifestFile', 'currentMirrorStatus', function () {
      // If currentMirrorStatus is not VALID, disable next
      var retVal = this.get('noManifestFile') || this.get('currentMirrorStatus') !== this.get('MirrorStatus').VALID;
      return retVal;
    }),

    contentProviderType: _ember['default'].computed('isDisconnected', function () {
      return this.get('isDisconnected') ? "disconnected" : "redhat_cdn";
    }),

    contentProviderTitle: _ember['default'].computed('isDisconnected', function () {
      return this.get('isDisconnected') ? "Disconnected" : "Red Hat CDN";
    }),

    isDisconnectedSelected: _ember['default'].computed('contentProviderType', function () {
      return this.get('contentProviderType') === 'disconnected';
    }),

    MirrorStatus: MirrorStatus,
    currentMirrorStatus: MirrorStatus.INVALID,

    actions: {
      providerTypeChanged: function providerTypeChanged() {
        return this.set('isDisconnected', this.get('isDisconnectedSelected'));
      },

      uploadManifest: function uploadManifest() {
        var self = this;
        var manifestFile = document.getElementById('manifest-file-field').files[0];
        var formData = new FormData();
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        formData.append('manifest_file[name]', manifestFile.name);
        formData.append('manifest_file[file]', manifestFile);
        formData.append('manifest_file[deployment_id]', this.get('deploymentId'));

        console.log('action: uploadManifest, PUT /fusor/api/v21/subscriptions/upload');
        //ic-ajax request
        (0, _icAjax['default'])({
          type: 'PUT',
          url: '/fusor/api/v21/subscriptions/upload',
          data: formData,
          processData: false,
          headers: { 'X-CSRF-Token': token },
          contentType: false
        }).then(function (result) {
          self.get('deploymentController.model').set('manifest_file', result.manifest_file);
          self.get('deploymentController.model').save().then(function () {
            return console.log('Manifest successfully uploaded');
          });
        }, function (error) {
          console.log(error);
          return console.log('ERROR on uploadManifest');
        });
      },

      uploadDifferentManifest: function uploadDifferentManifest() {
        return this.set("manifestFile", null);
      },

      mirrorStatusUpdate: function mirrorStatusUpdate(newStatus) {
        this.set('currentMirrorStatus', newStatus);
      }
    }

  });
});
define('fusor-ember-cli/controllers/subscriptions/management-application/consumer/entitlements', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/subscriptions/management-application/consumer/pools', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/subscriptions/management-application/consumer', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/subscriptions/management-application', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'ic-ajax', 'fusor-ember-cli/utils/validation-util'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _icAjax, _fusorEmberCliUtilsValidationUtil) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    subscriptionsController: _ember['default'].inject.controller('subscriptions'),

    showManagementApplications: true,

    sessionPortal: _ember['default'].computed.alias('subscriptionsController.model'),
    upstreamConsumerUuid: _ember['default'].computed.alias("deploymentController.model.upstream_consumer_uuid"),
    upstreamConsumerName: _ember['default'].computed.alias("deploymentController.model.upstream_consumer_name"),

    showAlertMessage: false,
    showWaitingMessage: false,
    showErrorMessage: false,
    errorMsg: null,

    msgWaiting: _ember['default'].computed('newSatelliteName', function () {
      return 'Adding ' + this.get('newSatelliteName') + ' ....';
    }),

    isValidMgmtAppName: _ember['default'].computed('newSatelliteName', function () {
      return _fusorEmberCliUtilsValidationUtil['default'].validateMgmtAppName(this.get('newSatelliteName'));
    }),
    isInvalidMgmtAppName: _ember['default'].computed.not('isValidMgmtAppName'),

    disableNextOnManagementApp: _ember['default'].computed('upstreamConsumerUuid', function () {
      return _ember['default'].isBlank(this.get('upstreamConsumerUuid'));
    }),

    actions: {
      registerNewSatellite: function registerNewSatellite() {
        this.set('showErrorMessage', false);
        this.set('openRegisterNewSatelliteModal', true);
      },

      selectManagementApp: function selectManagementApp(managementApp) {
        this.set('showAlertMessage', false);
        this.set('showWaitingMessage', false);
        this.set('showErrorMessage', false);
        this.get('sessionPortal').set('consumerUUID', managementApp.get('id'));
        this.get('sessionPortal').save();
        this.set('upstreamConsumerUuid', managementApp.get('id'));
        this.set('upstreamConsumerName', managementApp.get('name'));
        // show selected UUID in url
        return this.transitionTo('subscriptions.management-application.consumer', managementApp.get('id'));
      },

      createSatellite: function createSatellite() {
        this.set('showErrorMessage', false);
        this.set('showWaitingMessage', true);
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        var newSatelliteName = this.get('newSatelliteName');
        var errorMsg = this.get('errorMsg');
        var ownerKey = this.get('sessionPortal').get('ownerKey');
        var self = this;

        //POST /customer_portal/consumers?owner=#{OWNER['key']}, {"name":"#{RHCI_DISTRIBUTOR_NAME}","type":"satellite","facts":{"distributor_version":"sat-6.0","system.certificate_version":"3.2"}}
        var url = '/customer_portal/consumers?=' + ownerKey;

        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          if (self.get('isInvalidMgmtAppName')) {
            self.set('showWaitingMessage', false);
            self.set('showErrorMessage', true);
            self.set('errorMsg', newSatelliteName + ' failed to be added. Invalid application name.');
            reject();
          } else {
            (0, _icAjax['default'])({
              url: url,
              type: "POST",
              data: JSON.stringify({ name: newSatelliteName,
                type: "satellite",
                facts: { "distributor_version": "sat-6.0", "system.certificate_version": "3.2" } }),
              headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "X-CSRF-Token": token
              }
            }).then(function (response) {
              var newMgmtApp = self.store.createRecord('management-application', { name: response.name, entitlementCount: 0, id: response.uuid });
              self.get('model').addObject(newMgmtApp._internalModel);
              self.get('sessionPortal').set('consumerUUID', response.uuid);
              self.get('sessionPortal').save();
              self.set('upstreamConsumerUuid', response.uuid);
              self.set('upstreamConsumerName', response.name);
              self.set('showAlertMessage', true);
              self.set('showWaitingMessage', false);
              console.log(response);
              resolve(response);
            }, function (error) {
              console.log('error on createSatellite');
              self.set('showErrorMessage', true);
              self.set('errorMsg', newSatelliteName + ' failed to be added.');
              return self.send('error');
            });
          }
        });
      }
    }
  });
});
define('fusor-ember-cli/controllers/subscriptions/review-subscriptions', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    isDisconnected: _ember['default'].computed.alias('deploymentController.isDisconnected'),

    backRouteNameReviewSubs: _ember['default'].computed('isDisconnected', function () {
      if (this.get('isDisconnected')) {
        return 'subscriptions.credentials';
      } else {
        return 'subscriptions.select-subscriptions';
      }
    }),

    sortProps: ['contract_number'],
    sortedModel: _ember['default'].computed.sort('model', 'sortProps')

  });
});
define("fusor-ember-cli/controllers/subscriptions/select-subscriptions", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    isUpstream: _ember["default"].computed.alias("applicationController.isUpstream"),
    stepNumberSubscriptions: _ember["default"].computed.alias("deploymentController.stepNumberSubscriptions"),
    numSubscriptionsRequired: _ember["default"].computed.alias("deploymentController.numSubscriptionsRequired"),
    isStarted: _ember["default"].computed.alias("deploymentController.isStarted"),
    isDisconnected: _ember["default"].computed.alias('deploymentController.model.is_disconnected'),

    hasSubscriptionPools: _ember["default"].computed('subscriptionPools.[]', function () {
      return this.get('subscriptionPools.length') > 0;
    }),

    hasSubscriptionSavedInModel: _ember["default"].computed('model.[]', function () {
      return this.get('model.length') > 0;
    }),

    contractNumbersInPool: _ember["default"].computed('subscriptionPools.[]', 'hasSubscriptionPools', function () {
      if (this.get('hasSubscriptionPools')) {
        return this.get('subscriptionPools').getEach("contractNumber");
      }
    }),

    contractNumbersInModel: _ember["default"].computed('model.[]', 'hasSubscriptionSavedInModel', function () {
      if (this.get('hasSubscriptionSavedInModel')) {
        return this.get('model').getEach("contract_number");
      }
    }),

    contractNumbersInModelNotInPool: _ember["default"].computed('contractNumbersInPool', 'contractNumbersInModel', 'hasSubscriptionSavedInModel', function () {
      if (this.get('hasSubscriptionSavedInModel')) {
        return this.get('contractNumbersInModel').removeObjects(_ember["default"].A(this.get('contractNumbersInPool')));
      } else {
        return _ember["default"].A([]);
      }
    }),

    hasContractNumbersInModelNotInPool: _ember["default"].computed('contractNumbersInModelNotInPool', function () {
      return this.get('contractNumbersInModelNotInPool.length') > 0;
    }),

    hasSubscriptionsToAttach: _ember["default"].computed('model.[]', function () {
      return this.get('model.length') > 0;
    }),

    showErrorMessage: _ember["default"].computed.notEmpty('errorMsg')

  });
});
define("fusor-ember-cli/controllers/subscriptions", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    stepNumberSubscriptions: _ember["default"].computed.alias("deploymentController.stepNumberSubscriptions"),
    isStarted: _ember["default"].computed.alias("deploymentController.isStarted"),
    isDisconnected: _ember["default"].computed.alias("deploymentController.model.is_disconnected"),

    disableTabManagementApplication: _ember["default"].computed('model.isAuthenticated', 'isStarted', function () {
      return !this.get('isStarted') && !this.get('model.isAuthenticated');
    }),

    disableTabReviewSubsciptions: _ember["default"].computed.empty("deploymentController.model.manifest_file"),

    upstreamConsumerUuid: _ember["default"].computed.alias("deploymentController.model.upstream_consumer_uuid"),

    disableTabSelectSubsciptions: _ember["default"].computed('model.isAuthenticated', 'upstreamConsumerUuid', function () {
      return _ember["default"].isBlank(this.get('upstreamConsumerUuid')) || !this.get('model.isAuthenticated');
    })

  });
});
define('fusor-ember-cli/controllers/undercloud-deploy', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/deployment-controller-mixin', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsDeploymentControllerMixin, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsDeploymentControllerMixin['default'], _fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    deploymentId: _ember['default'].computed.alias("model.id"),
    undercloudPassword: _ember['default'].computed.alias("model.openstack_undercloud_password"),

    // these 3 attributes are not persisted by UI.
    // backend controller will persist these
    undercloudIP: null,
    sshUser: null,
    sshPassword: null,

    isRhev: _ember['default'].computed.alias("deploymentController.isRhev"),
    fullnameOpenStack: _ember['default'].computed.alias("deploymentController.fullnameOpenStack"),

    undercloudIPHelp: _ember['default'].computed('fullnameOpenStack', function () {
      return 'The IP address that the already-installed ' + this.get('fullnameOpenStack') + ' undercloud is running on.';
    }),

    undercloudIpValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.HostAddressValidator.create({})]
    }),

    isDeployed: _ember['default'].computed.notEmpty("model.openstack_undercloud_password"),

    deployDisabled: _ember['default'].computed('isDeployed', 'isDirty', 'undercloudIP', 'undercloudIpValidator', 'sshUser', 'sshPassword', function () {
      return this.get('isDeployed') && !this.get('isDirty') || this.get('undercloudIpValidator').isInvalid(this.get('undercloudIP')) || _ember['default'].isBlank(this.get('sshUser')) || _ember['default'].isBlank(this.get('sshPassword'));
    }),

    disableDeployUndercloudNext: _ember['default'].computed('isDeployed', function () {
      return !this.get('isDeployed');
    }),

    disableTabRegisterNodes: _ember['default'].computed('isDeployed', function () {
      return !this.get('isDeployed');
    }),

    disableTabAssignNodes: _ember['default'].computed('isDeployed', function () {
      return !this.get('isDeployed');
    }),

    isDirty: false,

    watchModel: _ember['default'].observer('model.openstack_undercloud_ip_addr', 'model.openstack_undercloud_user', 'model.openstack_undercloud_user_password', function () {
      this.set('isDirty', true);
    }),

    backRouteNameUndercloud: _ember['default'].computed('isRhev', function () {
      if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'satellite.access-insights';
      }
    }),

    actions: {
      resetCredentials: function resetCredentials() {
        this.set('isDeployed', false);
        this.set('model.openstack_undercloud_password', null);
        return this.get('model').save();
      },

      deployUndercloud: function deployUndercloud() {
        var self = this;
        var model = this.get('model');
        console.log('detectUndercloud');
        console.log("host " + this.get('undercloudIP'));
        console.log("user " + this.get('sshUser'));
        var data = { 'underhost': this.get('undercloudIP'),
          'underuser': this.get('sshUser'),
          'underpass': this.get('sshPassword'),
          'deployment_id': this.get('deploymentId') };

        var promiseFunction = function promiseFunction(resolve) {
          self.set('deploymentError', null);
          var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

          //ic-ajax request
          console.log('action: deployUndercloud');
          console.log('POST /fusor/api/openstack/deployments/' + self.get('deploymentId') + '/underclouds');
          (0, _icAjax['default'])({
            url: '/fusor/api/openstack/deployments/' + self.get('deploymentId') + '/underclouds',
            type: 'POST',
            data: JSON.stringify(data),
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            }
          }).then(function (response) {
            promise.then(fulfill);
            console.log('create success');
            console.log(response);
            if (self.get('applicationController.isEmberCliMode')) {
              // only used for development to enabled OSP tabs (disableOspTab: false)
              model.set('openstack_undercloud_password', 'this-passwd-is-populated by fusor/server');
              model.save();
            }
            _ember['default'].run.later(checkForDone, 3000);
          }, function (error) {
            error = error.jqXHR;
            self.set('deploymentError', error.responseJSON.errors);
            self.set('showLoadingSpinner', false);
            console.log('create failed');
            console.log(error);
          });

          var checkForDone = function checkForDone() {
            console.log("running check for done for id " + self.get('deploymentId'));
            (0, _icAjax['default'])({
              url: '/fusor/api/openstack/deployments/' + self.get('deploymentId') + '/underclouds/' + self.get('deploymentId'),
              type: 'GET',
              contentType: 'application/json'
            }).then(function (response) {
              console.log('api check success');
              console.log(response);
              if (response['deployed'] || response['failed']) {
                console.log('detection finished');
                if (response['failed']) {
                  console.log('detection failed');
                  self.set('deploymentError', 'Please check foreman logs.');
                  self.set('showLoadingSpinner', false);
                } else {
                  console.log('detection success');
                  self.set('deploymentError', null);
                  resolve(true);
                }
              } else {
                console.log('detection ongoing');
                _ember['default'].run.later(checkForDone, 3000);
              }
            }, function (error) {
              error = error.jqXHR;
              console.log('api check error');
              console.log(error);
              self.set('deploymentError', 'Status check failed');
              self.set('showLoadingSpinner', false);
            });
          };
        };

        var fulfill = function fulfill(isDone) {
          if (isDone) {
            console.log("fulfill");
            self.set('showLoadingSpinner', false);
            self.set('isDeployed', true);
            self.set('isDirty', false);
          }
        };

        var promise = new _ember['default'].RSVP.Promise(promiseFunction);
        self.set('loadingSpinnerText', "Detecting Undercloud...");
        self.set('showLoadingSpinner', true);
      }
    }
  });
});
define('fusor-ember-cli/controllers/where-install', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    cloudformsController: _ember['default'].inject.controller('cloudforms'),

    cfmeInstallLoc: _ember['default'].computed.alias("deploymentController.model.cfme_install_loc"),
    isRhev: _ember['default'].computed.alias("deploymentController.isRhev"),
    isNotRhev: _ember['default'].computed.not("isRhev"),
    isOpenStack: _ember['default'].computed.alias("deploymentController.isOpenStack"),
    isNotOpenStack: _ember['default'].computed.not("isOpenStack"),
    fullnameOpenStack: _ember['default'].computed.alias("deploymentController.fullnameOpenStack"),
    isInvalidCfmeInstallLocation: _ember['default'].computed.alias("cloudformsController.isInvalidCfmeInstallLocation"),
    isOpenShift: _ember['default'].computed.alias("deploymentController.isOpenShift"),

    disableRHEV: _ember['default'].computed('isStarted', 'isNotRhev', function () {
      return this.get('isStarted') || this.get('isNotRhev');
    }),

    disableOpenStack: _ember['default'].computed('isStarted', 'isNotOpenStack', function () {
      return this.get('isStarted') || this.get('isNotOpenStack');
    }),

    disableRHEVradio: _ember['default'].computed('disableRHEV', 'isStarted', function () {
      return this.get('disableRHEV') || this.get('isStarted');
    }),

    disableOpenstackradio: _ember['default'].computed('disableOpenStack', 'isStarted', function () {
      return this.get('disableOpenStack') || this.get('isStarted');
    }),

    backRouteName: _ember['default'].computed('isOpenStack', 'isRhev', 'isOpenShift', function () {
      if (this.get('isOpenShift')) {
        return 'openshift.openshift-configuration';
      } else if (this.get('isOpenStack')) {
        return 'openstack.overcloud';
      } else if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'satellite.access-insights';
      }
    }),

    actions: {
      cfmeLocationChanged: function cfmeLocationChanged() {}
    }

  });
});
define('fusor-ember-cli/helpers/fa-icon', ['exports', 'ember'], function (exports, _ember) {

  var FA_PREFIX = /^fa\-.+/;

  var warn = _ember['default'].Logger.warn;

  /**
   * Handlebars helper for generating HTML that renders a FontAwesome icon.
   *
   * @param  {String} name    The icon name. Note that the `fa-` prefix is optional.
   *                          For example, you can pass in either `fa-camera` or just `camera`.
   * @param  {Object} options Options passed to helper.
   * @return {Ember.Handlebars.SafeString} The HTML markup.
   */
  var faIcon = function faIcon(name, options) {
    if (_ember['default'].typeOf(name) !== 'string') {
      var message = "fa-icon: no icon specified";
      warn(message);
      return _ember['default'].String.htmlSafe(message);
    }

    var params = options.hash,
        classNames = [],
        html = "";

    classNames.push("fa");
    if (!name.match(FA_PREFIX)) {
      name = "fa-" + name;
    }
    classNames.push(name);
    if (params.spin) {
      classNames.push("fa-spin");
    }
    if (params.flip) {
      classNames.push("fa-flip-" + params.flip);
    }
    if (params.rotate) {
      classNames.push("fa-rotate-" + params.rotate);
    }
    if (params.lg) {
      warn("fa-icon: the 'lg' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\"lg\"}}");
      classNames.push("fa-lg");
    }
    if (params.x) {
      warn("fa-icon: the 'x' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\"" + params.x + "\"}}");
      classNames.push("fa-" + params.x + "x");
    }
    if (params.size) {
      if (_ember['default'].typeOf(params.size) === "string" && params.size.match(/\d+/)) {
        params.size = Number(params.size);
      }
      if (_ember['default'].typeOf(params.size) === "number") {
        classNames.push("fa-" + params.size + "x");
      } else {
        classNames.push("fa-" + params.size);
      }
    }
    if (params.fixedWidth) {
      classNames.push("fa-fw");
    }
    if (params.listItem) {
      classNames.push("fa-li");
    }
    if (params.pull) {
      classNames.push("pull-" + params.pull);
    }
    if (params.border) {
      classNames.push("fa-border");
    }
    if (params.classNames && !_ember['default'].isArray(params.classNames)) {
      params.classNames = [params.classNames];
    }
    if (!_ember['default'].isEmpty(params.classNames)) {
      Array.prototype.push.apply(classNames, params.classNames);
    }

    html += "<";
    var tagName = params.tagName || 'i';
    html += tagName;
    html += " class='" + classNames.join(" ") + "'";
    if (params.title) {
      html += " title='" + params.title + "'";
    }
    if (params.ariaHidden === undefined || params.ariaHidden) {
      html += " aria-hidden=\"true\"";
    }
    html += "></" + tagName + ">";
    return _ember['default'].String.htmlSafe(html);
  };

  exports.faIcon = faIcon;
  exports['default'] = _ember['default'].Handlebars.makeBoundHelper(faIcon);
});
define("fusor-ember-cli/helpers/log", ["exports"], function (exports) {
  exports["default"] = function () {
    //console.debug(str);
  };

  ;
});
define('fusor-ember-cli/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('fusor-ember-cli/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('fusor-ember-cli/initialize', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, _ember, _emberIdxUtilsConfig) {
  exports['default'] = {
    name: 'ember-idx-utils',
    initialize: function initialize() {
      if (!_ember['default'].IdxConfig) {
        _ember['default'].IdxConfig = _emberIdxUtilsConfig['default'].create();
      }
    }
  };
});
define('fusor-ember-cli/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'fusor-ember-cli/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _fusorEmberCliConfigEnvironment) {
  var _config$APP = _fusorEmberCliConfigEnvironment['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(name, version)
  };
});
define("fusor-ember-cli/initializers/coordinator-setup", ["exports", "fusor-ember-cli/models/coordinator"], function (exports, _fusorEmberCliModelsCoordinator) {
  exports["default"] = {
    name: "setup coordinator",

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];
      app.register("drag:coordinator", _fusorEmberCliModelsCoordinator["default"]);
      app.inject("component", "coordinator", "drag:coordinator");
    }
  };
});
define('fusor-ember-cli/initializers/ember-cli-mirage', ['exports', 'ember-cli-mirage/utils/read-modules', 'fusor-ember-cli/config/environment', 'fusor-ember-cli/mirage/config', 'ember-cli-mirage/server'], function (exports, _emberCliMirageUtilsReadModules, _fusorEmberCliConfigEnvironment, _fusorEmberCliMirageConfig, _emberCliMirageServer) {
  exports['default'] = {
    name: 'ember-cli-mirage',
    initialize: function initialize(application) {
      if (arguments.length > 1) {
        // Ember < 2.1
        var container = arguments[0],
            application = arguments[1];
      }
      var environment = _fusorEmberCliConfigEnvironment['default'].environment;

      if (_shouldUseMirage(environment, _fusorEmberCliConfigEnvironment['default']['ember-cli-mirage'])) {
        var modules = (0, _emberCliMirageUtilsReadModules['default'])(_fusorEmberCliConfigEnvironment['default'].modulePrefix);
        var options = _.assign(modules, { environment: environment, baseConfig: _fusorEmberCliMirageConfig['default'], testConfig: _fusorEmberCliMirageConfig.testConfig });

        new _emberCliMirageServer['default'](options);
      }
    }
  };

  function _shouldUseMirage(env, addonConfig) {
    var userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    var defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    var usingInDev = env === 'development' && !addonConfig.usingProxy;
    var usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }
});
define('fusor-ember-cli/initializers/ember-devtools', ['exports', 'fusor-ember-cli/services/ember-devtools', 'fusor-ember-cli/config/environment'], function (exports, _fusorEmberCliServicesEmberDevtools, _fusorEmberCliConfigEnvironment) {
  exports['default'] = {
    name: 'ember-devtools',
    after: DS !== undefined ? 'store' : null,
    initialize: function initialize(container, app) {
      Ember.deprecate("ember-devtools: 'config.APP.emberDevTools' is deprecated. Please configure ember-devtools using config['ember-devtools'].", !app.emberDevTools, { url: 'https://github.com/aexmachina/ember-devtools' });

      var devToolsConfig = app.emberDevTools || _fusorEmberCliConfigEnvironment['default']['ember-devtools'] || {};

      app.devTools = _fusorEmberCliServicesEmberDevtools['default'].create({
        container: container
      });
      container.register('service:devtools', app.devTools);
      if (devToolsConfig.global === true) {
        app.devTools.globalize();
      } else if (devToolsConfig.global) {
        window[devToolsConfig.global] = app.devTools;
      }
    }
  };
});
/* global DS */
define('fusor-ember-cli/initializers/ember-idx-modal', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, _ember, _emberIdxUtilsConfig) {
    exports['default'] = {
        name: 'ember-idx-modal',
        initialize: function initialize() {
            var Config = _ember['default'].IdxConfig = _ember['default'].IdxConfig ? _ember['default'].IdxConfig : _emberIdxUtilsConfig['default'].create();

            var defaultConfig = Config.getConfig('bs');
            if (!defaultConfig) {
                Config.addConfig('bs');
                defaultConfig = Config.getConfig('bs');
            }

            defaultConfig['modal'] = {
                classes: ['em-modal', 'modal', 'fade'],
                bodyClasses: ['modal-body'],
                titleClasses: ['modal-header'],
                footerClasses: ['modal-footer']
            };
        }
    };
});
define('fusor-ember-cli/initializers/ember-moment', ['exports', 'ember-moment/helpers/moment', 'ember-moment/helpers/ago', 'ember-moment/helpers/duration', 'ember'], function (exports, _emberMomentHelpersMoment, _emberMomentHelpersAgo, _emberMomentHelpersDuration, _ember) {
  var initialize = function initialize() /* container, app */{
    var registerHelper;

    if (_ember['default'].HTMLBars) {
      registerHelper = function (helperName, fn) {
        _ember['default'].HTMLBars._registerHelper(helperName, _ember['default'].HTMLBars.makeBoundHelper(fn));
      };
    } else {
      registerHelper = _ember['default'].Handlebars.helper;
    };

    registerHelper('moment', _emberMomentHelpersMoment['default']);
    registerHelper('ago', _emberMomentHelpersAgo['default']);
    registerHelper('duration', _emberMomentHelpersDuration['default']);
  };

  exports.initialize = initialize;
  exports['default'] = {
    name: 'ember-moment',

    initialize: initialize
  };
});
define('fusor-ember-cli/initializers/event-bus', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(registry, application) {
    // NOTE: This interface can be confusing; be sure you are
    // operating on the object you expect to be. Newer versions of
    // Ember have deprecated the first param, and newer versions of ember-cli
    // will generate boilerplate in accordance. For ember v1.13.10,
    // we continue to be passed the registry and application seperately.
    //
    // Ref:
    // https://github.com/ember-cli/ember-cli/commit/00e25f7de8075cfa01bfdb582b16a2f5611b5912

    var factoryName = 'event-bus:main';
    var injectedProp = 'eventBus';
    application.register('event-bus:main', Ember.Object.extend(Ember.Evented));
    ['adapter', 'component', 'controller', 'route'].map(function (target) {
      application.inject(target, injectedProp, factoryName);
    });
  }

  exports['default'] = {
    name: 'event-bus',
    initialize: initialize
  };
});
define('fusor-ember-cli/initializers/export-application-global', ['exports', 'ember', 'fusor-ember-cli/config/environment'], function (exports, _ember, _fusorEmberCliConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_fusorEmberCliConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _fusorEmberCliConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_fusorEmberCliConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('fusor-ember-cli/mirage/config', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = function () {

    // route to prevent js console error by ember-cli-blanket
    this.post('/write-blanket-coverage', function (db, request) {
      return {};
    });

    this.get('/fusor/api/v21/deployments');
    this.post('/fusor/api/v21/deployments');
    this.get('/fusor/api/v21/deployments/:id');
    this.put('/fusor/api/v21/deployments/:id');
    this.del('/fusor/api/v21/deployments/:id');

    this.get('/api/v21/organizations');
    this.get('/api/v21/organizations/:id');

    this.get('/api/v21/lifecycle_environments');
    this.get('/api/v21/lifecycle_environments/:id');
    this.post('/api/v21/lifecycle_environments', function (db, request) {
      var attrs = JSON.parse(request.requestBody).lifecycle_environment;
      attrs['prior_id'] = 1;
      var record = db.lifecycle_environments.insert(attrs);
      console.log(record);
      return {
        lifecycle_environment: record
      };
    });

    this.get('/api/v21/discovered_hosts');
    this.get('/api/v21/discovered_hosts/:id');
    this.put('/api/v21/discovered_hosts/:id/rename', function (db, request) {
      var id = request.params.id;
      return db.discovered_hosts.find(id);
    });

    this.get('/katello/api/v2/organizations/:id', function (db, request) {
      var id = request.params.id;
      return db.katello_organizations.find(id);
    });

    this.get('/customer_portal/owners/:owner_key/consumers', function (db, request) {
      return db.management_applications;
    });

    this.get('/customer_portal/consumers/:uuid/entitlements', function (db, request) {
      return db.entitlements;
    });

    this.get('/customer_portal/users/:username/owners', function (db, request) {
      return db.owners;
    });

    this.get('/customer_portal/pools', function (db, request) {
      return db.pools;
    });

    this.post('/customer_portal/login', function (db, request) {
      return {};
    });

    this.get('/fusor/api/v21/subscriptions', function (db, request) {
      var id = request.params.deployment_id;
      console.log(request.params);
      return db.subscriptions;
    });

    this.get('/api/v21/hostgroups');
    this.get('/api/v21/hostgroups/:id');

    this.get('/api/v21/domains');
    this.get('/api/v21/domains/:id');

    this.get('fusor/api/v21/deployments/:id/validate', function (db, request) {
      var id = request.params.id;
      return db.deployments.find(id);
    });

    this.put('fusor/api/v21/deployments/:id/deploy', function (db, request) {
      return db.foreman_tasks.find('db25a76f-e344-48ba-ac77-f29303586dbe');
    });

    this.get('/api/v21/foreman_tasks');
    this.get('/api/v21/foreman_tasks/:id', function (db, request) {
      var id = request.params.id;
      return db.foreman_tasks.find(id);
    });

    this.post('/fusor/api/openstack/deployments/:id/underclouds', function (db, request) {
      return { 'undercloud': 2 };
    });

    this.get('/fusor/api/openstack/deployments/:id/underclouds/:id', function (db, request) {
      return {
        'deployed': true,
        'failed': false
      };
    });

    this.get('/fusor/api/openstack/deployments/:id/nodes', function (db, request) {
      return { nodes: db.nodes };
    });

    this.post('/fusor/api/openstack/deployments/:id/nodes', function (db, request) {
      var id = request.params.id;
      return db.nodes.find(id);
    });

    this.get('/fusor/api/openstack/deployments/:id/node_ports', function (db, request) {
      return { ports: db.node_ports };
    });

    this.get('/fusor/api/openstack/deployments/:id/flavors', function (db, request) {
      // NOTE root node is flavor and not flavors
      return { flavor: db.flavors };
    });

    this.get('/fusor/api/openstack/deployments/:id/images', function (db, request) {
      return { images: db.images };
    });

    this.get('/fusor/api/openstack/deployments/:id/deployment_plans/overcloud', function (db, request) {
      return { deployment_plan: db.deployment_plan[0] };
    });

    this.put('/fusor/api/openstack/deployments/:id/deployment_plans/overcloud/:update_action', function (db, request) {
      // return deployment plan even though UI should update not based on response
      return { deployment_plan: db.deployment_plan[0] };
    });

    this.get('/fusor/api/v21/subscriptions');
    this.post('/fusor/api/v21/subscriptions');

    this.post('/customer_portal/consumers/:uuid/entitlements');

    this.get('/api/v2/settings', function (db, request) {
      return { results: db.settings };
    });

    /*
      Route shorthand cheatsheet
    */
    /*
      GET shorthands
       // Collections
      this.get('/contacts');
      this.get('/contacts', 'users');
      this.get('/contacts', ['contacts', 'addresses']);
       // Single objects
      this.get('/contacts/:id');
      this.get('/contacts/:id', 'user');
      this.get('/contacts/:id', ['contact', 'addresses']);
    */

    /*
      POST shorthands
       this.post('/contacts');
      this.post('/contacts', 'user'); // specify the type of resource to be created
    */

    /*
      PUT shorthands
       this.put('/contacts/:id');
      this.put('/contacts/:id', 'user'); // specify the type of resource to be updated
    */

    /*
      DELETE shorthands
       this.del('/contacts/:id');
      this.del('/contacts/:id', 'user'); // specify the type of resource to be deleted
       // Single object + related resources. Make sure parent resource is first.
      this.del('/contacts/:id', ['contact', 'addresses']);
    */

    /*
      Function fallback. Manipulate data in the db via
         - db.{collection}
        - db.{collection}.find(id)
        - db.{collection}.where(query)
        - db.{collection}.update(target, attrs)
        - db.{collection}.remove(target)
       // Example: return a single object with related models
      this.get('/contacts/:id', function(db, request) {
        var contactId = +request.params.id;
         return {
          contact: db.contacts.find(contactId),
          addresses: db.addresses.where({contact_id: contactId})
        };
      });
     */
  };

  /*
  You can optionally export a config that is only loaded during tests
  export function testConfig() {
  
  }
  */
});
define('fusor-ember-cli/mirage/factories/contact', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    // name: 'Pete',                         // strings
    // age: 20,                              // numbers
    // tall: true,                           // booleans

    // email: function(i) {                  // and functions
    //   return 'person' + i + '@test.com';
    // },

    // firstName: faker.name.firstName,       // using faker
    // lastName: faker.name.firstName,
    // zipCode: faker.address.zipCode
  });
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
/*, {faker} */
define('fusor-ember-cli/mirage/factories/deployment', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: function name(i) {
      // and functions
      return 'deployment_number_' + i;
    },
    is_disconnected: false,
    rhev_is_self_hosted: false,
    rhev_engine_admin_password: '12345678',
    rhev_data_center_name: 'Default',
    rhev_cluster_name: 'Default',
    rhev_storage_name: 'my_storage',
    rhev_storage_type: 'NFS',
    rhev_storage_address: '10.2.132.4',
    rhev_root_password: "12345678",
    // rhev_cpu_type: null,
    rhev_share_path: '/share/path',
    rhev_export_domain_name: 'my_export',
    rhev_export_domain_address: '10.22.17.4',
    rhev_export_domain_path: '/export/path',
    cfme_install_loc: "RHEV",
    cfme_root_password: "12345678",
    cfme_admin_password: "12345678",
    host_naming_scheme: "Freeform",
    custom_preprend_name: null,
    enable_access_insights: true,
    openstack_undercloud_password: "dummy password",
    openstack_overcloud_autogenerate_password: false,
    upstream_consumer_uuid: "7ffddefd-aacb-4192-a999-01beb7c2e473",
    upstream_consumer_name: "tsanders-rhci",
    openshift_storage_type: "NFS",
    openshift_storage_name: "openshift-storage",
    openshift_export_path: "/share/openshift/path",
    cloudforms_vcpu: 4,
    cloudforms_ram: 6,
    cloudforms_vm_disk_size: 40,
    cloudforms_db_disk_size: 40

  });

  //       "openstack_undercloud_ip_addr": null,
  //       "openstack_undercloud_user": null,
  //       "openstack_undercloud_user_password": null,
  //       "openstack_overcloud_address": null,
  //       "openstack_overcloud_password": null,
  //       "openstack_overcloud_private_net": null,
  //       "openstack_overcloud_float_net": null,
  //       "openstack_overcloud_float_gateway": null,
  //       "cdn_url": "10.35.3.63",
  //       "manifest_file": "/usr/share/foreman/tmp/import_10c9a9f7cc20541de373.zip",
  //       "created_at": "2015-11-30T09:31:03Z",
  //       "updated_at": "2015-12-03T13:18:19Z",
  //       "organization_id": 1,
  //       "lifecycle_environment_id": null,
  //       "discovered_host_id": 2,
  //       "discovered_host_ids": [
  //           4
  //       ],
  //       "subscription_ids": [
  //           4,
  //           3
  //       ],
  //       "introspection_task_ids": []

  // rhev_root_password: DS.attr('string'),
  // cfme_root_password: DS.attr('string'),
  // cfme_admin_password: DS.attr('string'),

  // foreman_task_uuid: DS.attr('string'),
  // upstream_consumer_uuid: DS.attr('string'),
  // upstream_consumer_name: DS.attr('string'),

  // rhev_export_domain_name: DS.attr('string'),
  // rhev_export_domain_address: DS.attr('string'),
  // rhev_export_domain_path: DS.attr('string'),

  // rhev_local_storage_path: DS.attr('string'),

  // host_naming_scheme: DS.attr('string'),
  // custom_preprend_name: DS.attr('string'),
  // enable_access_insights: DS.attr('boolean'),
  // cfme_address: DS.attr('string'),

  // openstack_undercloud_password: DS.attr('string'),
  // openstack_undercloud_ip_addr: DS.attr('string'),
  // openstack_undercloud_user: DS.attr('string'),
  // openstack_undercloud_user_password: DS.attr('string'),
  // openstack_overcloud_address: DS.attr('string'),
  // openstack_overcloud_password: DS.attr('string'),
  // openstack_overcloud_private_net: DS.attr('string'),
  // openstack_overcloud_float_net: DS.attr('string'),
  // openstack_overcloud_float_gateway: DS.attr('string'),

  // cdn_url: DS.attr('string'),
  // manifest_file: DS.attr('string'),

  // created_at: DS.attr('date'),
  // updated_at: DS.attr('date'),

  // // has one Engine - discovered_host is an alias for rhev_engine_host_id
  // discovered_host: DS.belongsTo('discovered-host', {async: true}),
  // rhev_engine_host_id: DS.attr('number'),

  // // has many Hypervisors
  // discovered_hosts: DS.hasMany('discovered-host', {async: true}),

  // // has many Subscriptions
  // subscriptions: DS.hasMany('subscription', {inverse: 'deployment', async: true}),
  // introspection_tasks: DS.hasMany('introspection-task', {async: true}),
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
/*, {faker} */
define('fusor-ember-cli/mirage/factories/discovered_host', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: function name(i) {
      // and functions
      return 'mac' + i + '254000f6568';
    },
    type: 'Host::Discovered',
    ip: function ip(i) {
      // and functions
      return '192.168.152. ' + i;
    },
    mac: function mac(i) {
      // and functions
      return i + '2:54:00:0f:65:68';
    },
    cpus: 1,
    memory_human_size: "1.96 GB",
    disks_human_size: "10 GB",
    disk_count: 1,
    subnet_to_s: "default (192.168.152.0/24)",
    is_virtual: true,
    is_managed: false,
    is_discovered: true

  });
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define('fusor-ember-cli/mirage/factories/domain', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({});
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define('fusor-ember-cli/mirage/factories/hostgroup', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({});
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define('fusor-ember-cli/mirage/factories/lifecycle_environment', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: function name(i) {
      return 'env ' + i;
    }
  });
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define('fusor-ember-cli/mirage/factories/organization', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: function name(i) {
      return 'org ' + i;
    }
  });
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define("fusor-ember-cli/mirage/fixtures/deployment_plan",["exports"],function(exports){exports["default"] = [{"created_at":"2015-10-21T13:52:42","description":null,"name":"overcloud","parameters":[{"constraints":[],"default":"","description":"If set, the contents of an SSL certificate .key file for encrypting SSL endpoints.","hidden":true,"label":null,"name":"Controller-1::SSLKey","parameter_type":"string","value":""},{"constraints":[],"default":false,"description":"Rabbit client subscriber parameter to specify an SSL connection to the RabbitMQ host.\n","hidden":null,"label":null,"name":"Compute-1::RabbitClientUseSSL","parameter_type":"string","value":false},{"constraints":[],"default":"","description":"Keystone certificate for verifying token validity.","hidden":null,"label":null,"name":"Controller-1::KeystoneSSLCertificate","parameter_type":"string","value":""},{"constraints":[],"default":3,"description":"The number of neutron dhcp agents to schedule per network","hidden":null,"label":null,"name":"Controller-1::NeutronDhcpAgentsPerNetwork","parameter_type":"number","value":3},{"constraints":[],"default":{},"description":"Contains parameters to configure Cinder backends. Typically set via parameter_defaults in the resource registry.","hidden":null,"label":null,"name":"Controller-1::CinderBackendConfig","parameter_type":"json","value":{}},{"constraints":[],"default":5000,"description":"The size of the loopback file used by the cinder LVM driver.","hidden":null,"label":null,"name":"Controller-1::CinderLVMLoopDeviceSize","parameter_type":"number","value":5000},{"constraints":[],"default":"1:1000","description":"Comma-separated list of <tun_min>:<tun_max> tuples enumerating ranges\nof GRE tunnel IDs that are available for tenant network allocation\n","hidden":null,"label":null,"name":"Controller-1::NeutronTunnelIdRanges","parameter_type":"comma_delimited_list","value":"1:1000"},{"constraints":[],"default":"unset","description":"The password for the keystone admin account, used for monitoring, querying neutron etc.","hidden":true,"label":null,"name":"Compute-1::AdminPassword","parameter_type":"string","value":"179e6e4d6167b380bd8ec5009f81b00132f91bbe"},{"constraints":[],"default":true,"description":"Whether to enable or not the Iscsi backend for Cinder","hidden":null,"label":null,"name":"Cinder-Storage-1::CinderEnableIscsiBackend","parameter_type":"boolean","value":true},{"constraints":[],"default":[],"description":null,"hidden":null,"label":null,"name":"Controller-1::removal_policies","parameter_type":"json","value":[]},{"constraints":[],"default":"unset","description":"The password for the nova service and db account, used by nova-api.","hidden":true,"label":null,"name":"Controller-1::NovaPassword","parameter_type":"string","value":"206899979d82609ad134f36c21f62b3fd6f823b6"},{"constraints":[],"default":"unset","description":"Shared secret to prevent spoofing","hidden":null,"label":null,"name":"Compute-1::NeutronMetadataProxySharedSecret","parameter_type":"string","value":"unset"},{"constraints":[{"constraint_type":"range","definition":{"min":"0"},"description":null}],"default":null,"description":null,"hidden":null,"label":null,"name":"Controller-1::count","parameter_type":"number","value":"1"},{"constraints":[],"default":"9292","description":"Glance port.","hidden":null,"label":null,"name":"Compute-1::GlancePort","parameter_type":"string","value":"9292"},{"constraints":[],"default":"","description":"VLAN tag for creating a public VLAN. The tag will be used to create an access port on the exterior bridge for each control plane node, and that port will be given the IP address returned by neutron from the public network. Set CONTROLEXTRA=overcloud-vlan-port.yaml when compiling overcloud.yaml to include the deployment of VLAN ports to the control plane.\n","hidden":null,"label":null,"name":"NeutronPublicInterfaceTag","parameter_type":"string","value":""},{"constraints":[],"default":"%stackname%-controller-%index%","description":"Format for Controller node hostnames","hidden":null,"label":null,"name":"ControllerHostnameFormat","parameter_type":"string","value":"%stackname%-controller-%index%"},{"constraints":[],"default":"ro_snmp_user","description":"The user name for SNMPd with readonly rights running on all Overcloud nodes","hidden":null,"label":null,"name":"Controller-1::SnmpdReadonlyUserName","parameter_type":"string","value":"ro_snmp_user"},{"constraints":[],"default":"openvswitch","description":"The mechanism drivers for the Neutron tenant network. To specify multiple\nvalues, use a comma separated string, like so: 'openvswitch,l2_population'\n","hidden":null,"label":null,"name":"Compute-1::NeutronMechanismDrivers","parameter_type":"string","value":"openvswitch"},{"constraints":[],"default":"","description":null,"hidden":null,"label":null,"name":"Ceph-Storage-1::NtpServer","parameter_type":"string","value":""},{"constraints":[],"default":"false","description":"Set to true to enable package installation via Puppet","hidden":null,"label":null,"name":"Ceph-Storage-1::EnablePackageInstall","parameter_type":"boolean","value":"false"},{"constraints":[{"constraint_type":"range","definition":{"min":"0"},"description":null}],"default":null,"description":null,"hidden":null,"label":null,"name":"Ceph-Storage-1::count","parameter_type":"number","value":"0"},{"constraints":[],"default":"default","description":"Name of an existing EC2 KeyPair to enable SSH access to the instances","hidden":null,"label":null,"name":"Cinder-Storage-1::KeyName","parameter_type":"string","value":"default"},{"constraints":[],"default":"REBUILD_PRESERVE_EPHEMERAL","description":"What policy to use when reconstructing instances. REBUILD for rebuilds, REBUILD_PRESERVE_EPHEMERAL to preserve /mnt.","hidden":null,"label":null,"name":"Controller-1::ImageUpdatePolicy","parameter_type":"string","value":"REBUILD_PRESERVE_EPHEMERAL"},{"constraints":[],"default":true,"description":"Whether to deploy a LoadBalancer on the Controller","hidden":null,"label":null,"name":"Controller-1::EnableLoadBalancer","parameter_type":"boolean","value":true},{"constraints":[],"default":"1:1000","description":"Comma-separated list of <tun_min>:<tun_max> tuples enumerating ranges\nof GRE tunnel IDs that are available for tenant network allocation\n","hidden":null,"label":null,"name":"Compute-1::NeutronTunnelIdRanges","parameter_type":"comma_delimited_list","value":"1:1000"},{"constraints":[],"default":"","description":"Setting to a previously unused value during stack-update will trigger package update on all nodes\n","hidden":null,"label":null,"name":"Swift-Storage-1::UpdateIdentifier","parameter_type":"string","value":""},{"constraints":[],"default":"","description":null,"hidden":null,"label":null,"name":"Compute-1::NovaComputeLibvirtType","parameter_type":"string","value":"qemu"},{"constraints":[],"default":"unset","description":"The password for the keystone admin account, used for monitoring, querying neutron etc.","hidden":true,"label":null,"name":"Controller-1::AdminPassword","parameter_type":"string","value":"179e6e4d6167b380bd8ec5009f81b00132f91bbe"},{"constraints":[],"default":1,"description":"The minimum time (in hours) before a partition in a ring can be moved following a rebalance.","hidden":null,"label":null,"name":"Controller-1::SwiftMinPartHours","parameter_type":"number","value":1},{"constraints":[],"default":{},"description":"Controller specific hiera configuration data to inject into the cluster.\n","hidden":null,"label":null,"name":"Controller-1::ControllerExtraConfig","parameter_type":"json","value":{}},{"constraints":[],"default":5672,"description":"Set rabbit subscriber port, change this if using SSL","hidden":null,"label":null,"name":"Controller-1::RabbitClientPort","parameter_type":"number","value":5672},{"constraints":[],"default":"","description":"The Ceph client key. Can be created with ceph-authtool --gen-print-key. Currently only used for external Ceph deployments to create the openstack user keyring.","hidden":null,"label":null,"name":"CephClientKey","parameter_type":"string","value":""},{"constraints":[],"default":"","description":null,"hidden":null,"label":null,"name":"Swift-Storage-1::NtpServer","parameter_type":"string","value":""},{"constraints":[],"default":"default","description":"Name of an existing EC2 KeyPair to enable SSH access to the instances","hidden":null,"label":null,"name":"Swift-Storage-1::KeyName","parameter_type":"string","value":"default"},{"constraints":[],"default":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"},"description":"Mapping of service_name -> network name. Typically set via parameter_defaults in the resource registry.","hidden":null,"label":null,"name":"Compute-1::ServiceNetMap","parameter_type":"json","value":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"}},{"constraints":[],"default":"True","description":"Allow automatic l3-agent failover","hidden":null,"label":null,"name":"Controller-1::NeutronAllowL3AgentFailover","parameter_type":"string","value":"True"},{"constraints":[],"default":"libvirt.LibvirtDriver","description":null,"hidden":null,"label":null,"name":"Compute-1::NovaComputeDriver","parameter_type":"string","value":"libvirt.LibvirtDriver"},{"constraints":[{"constraint_type":"custom_constraint","definition":"nova.flavor","description":null}],"default":null,"description":"Flavor for block storage nodes to request when deploying.","hidden":null,"label":null,"name":"Cinder-Storage-1::Flavor","parameter_type":"string","value":"baremetal"},{"constraints":[],"default":"1:1000","description":"Comma-separated list of <vni_min>:<vni_max> tuples enumerating ranges\nof VXLAN VNI IDs that are available for tenant network allocation\n","hidden":null,"label":null,"name":"Controller-1::NeutronVniRanges","parameter_type":"comma_delimited_list","value":"1:1000"},{"constraints":[],"default":"","description":"Keystone key for signing tokens.","hidden":true,"label":null,"name":"Controller-1::KeystoneSigningKey","parameter_type":"string","value":"-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDHkLoL76AZGS9d\nFKnXSKHiBuylH6+x6cBg5vW1LEMyGUE123hrw1VOR+Wkn7g9AgZFHi70rYZnYeyg\nBMGZOjDJrPAYwY0hzdjcTZPB6fysxob852a+Jb5T+4c/ZZKRuk9wAISNYe1Aoewi\nL93pugSm/WMipr9nG7i3+cMhIKVhugUv4dBeyRN/zkVpZ5Lerzy1ohtbHl9d/tZ2\n6Z443OtW3449sFCHorA9YdtIL2/V6VtQaih8obfAvuSVNpodXrmimridSeGLSXS3\nnALyRVXiZfLSSIjvDu7cwoFJziwhonfL2WJUzFwxR8CSs0n3R+pZoxmXUfQo/KPF\ny3/PwlppAgMBAAECggEAdd841FX7tPdYL11GF99RpoQ6gClgB/Ct7U5dcF4tbkjW\naG4yCUx9dVgn/n1MP9STSX3TdDeN/EAtmDJW+x8Qs/4ObkDcEExaO30iudVvpck4\n7+XpnIQEj+wv7TUcRjDKPLhBkpR1oshBBcxKAYQavVtKk6vzv33zM880/rsek8JV\npQnfdiVeWQpSdV0KOz32BEvW7HGt+IHQCtm2ohpw+/De7Micn6TlzFoa2wHM5CZT\n/4C00Ytqo2EElO/NGjtX1Ehb6Y4/qE00OCmttwixIfniq18Wx+UnsDzLUPLBBcLJ\nE0iG4iuUHc1HSa2sFvDhphd8fwSrR3Xe7ckLeLuuFQKBgQDp+pVi8ts0GH+5xnVg\nw+ia+EckBuQMtFwb96HIBUx9BbBnmg0D7PJhlwE+e1AJ3hwaGaAWDS/m5g2+kkXg\n6ZU1P7c9EC5ufmwWWsWTy348BIVphB/qwTfjMq2EvMElYt9B6Qdh0oLvzAWSiK50\n9egsVsGzrhCmlMZ+M4koZ0iVwwKBgQDaWP6Y2GrWTq42Wf8WiACahB3sK5WNfO/R\nXmS/XcwTuTwKm2nwJzUzmWi4HqTDnxFTdHz4ZYJ3oIClTQPZaosolLMp2WYe1mrH\n0XrOP4d40XT4j8kXm9Qm0Q1FhoXfxMnl1Gs6VsRrH4zWpjjhpW8bpQcyWXAcbv1y\ndHc6PNbQYwKBgFliDOd79xlzsnd5xSVuMdHhvuuYZk4kKHvWocsTmyC3p6gsRYSW\nZBG76hHAcdcTLpEZ8Pn7l60RfXar0l4VXZa1/H4rTFGRoiD4FDpdpp+u6nhgrQC1\nR3BXz8nBgdeSac94AgXwsWyB+C7+YAb2Wfd2PREzEdFRTHKxpVf1/NiZAoGAHpka\nFJE/Z4jfIP67oIyuiPi6uL3i11EKymxP8gFS9/CdWV8uGVllOzXkVuj0bfV8mBVa\n7fRLtDfpz0BbqbwkhCtScCrnBKtHi3jvnLeKZIP1wF9l7skHkej50yRm3lTVdj+u\nRx6hp+Fj+zCQCA8G4vjdaVDfRRzIp6Fqk96yu8ECgYEA3fOZeK8SAvTIQd5H2fJ+\nvgh9vhEnk8f8zMfjvaONkJcrhL/vb9TcIDCvkNH9bRJBelgjsK10ESN5iOXRS7BS\nNSwzwK3TaeED/xKID0bEV9SQBskKJCsFuUjaqa4cNGvjpYKW+mBYElEHyHl1/PJY\nDrpsKiHoBkR4CuCIHlm4/1Y=\n-----END PRIVATE KEY-----"},{"constraints":[],"default":"guest","description":null,"hidden":null,"label":null,"name":"Cinder-Storage-1::RabbitUserName","parameter_type":"string","value":"guest"},{"constraints":[{"constraint_type":"range","definition":{"min":"0"},"description":null}],"default":null,"description":null,"hidden":null,"label":null,"name":"Compute-1::count","parameter_type":"number","value":"1"},{"constraints":[],"default":"","description":"If set, the contents of an SSL certificate authority file.","hidden":null,"label":null,"name":"Controller-1::SSLCACertificate","parameter_type":"string","value":""},{"constraints":[],"default":"false","description":"Set to true to enable package installation via Puppet","hidden":null,"label":null,"name":"Compute-1::EnablePackageInstall","parameter_type":"boolean","value":"false"},{"constraints":[],"default":"","description":"Mount options for NFS mounts used by Cinder NFS backend. Effective when CinderEnableNfsBackend is true.\n","hidden":null,"label":null,"name":"Controller-1::CinderNfsMountOptions","parameter_type":"string","value":""},{"constraints":[],"default":"unset","description":"The password for the Heat service and db account, used by the Heat services.","hidden":true,"label":null,"name":"Controller-1::HeatPassword","parameter_type":"string","value":"816724863d42b9974185fae5a815f518fb96aa8c"},{"constraints":[{"constraint_type":"range","definition":{"min":"0"},"description":null}],"default":null,"description":null,"hidden":null,"label":null,"name":"Swift-Storage-1::count","parameter_type":"number","value":"0"},{"constraints":[],"default":true,"description":"Whether to enable Swift Storage on the Controller","hidden":null,"label":null,"name":"Controller-1::EnableSwiftStorage","parameter_type":"boolean","value":true},{"constraints":[],"default":3,"description":"How many replicas to use in the swift rings.","hidden":null,"label":null,"name":"Swift-Storage-1::Replicas","parameter_type":"number","value":3},{"constraints":[],"default":"vxlan","description":"The tenant network type for Neutron, either gre or vxlan.","hidden":null,"label":null,"name":"Compute-1::NeutronNetworkType","parameter_type":"string","value":"gre"},{"constraints":[],"default":"unset","description":"The password for the neutron service and db account, used by neutron agents.","hidden":true,"label":null,"name":"Controller-1::NeutronPassword","parameter_type":"string","value":"5bde587ef0f70045bb98fa74ad36baf16dd7edd1"},{"constraints":[],"default":[],"description":null,"hidden":null,"label":null,"name":"Swift-Storage-1::removal_policies","parameter_type":"json","value":[]},{"constraints":[],"default":"unset","description":"The user password for SNMPd with readonly rights running on all Overcloud nodes","hidden":true,"label":null,"name":"Cinder-Storage-1::SnmpdReadonlyUserPassword","parameter_type":"string","value":"c19d9ac749bedab0134a638fe6fed8887b985d70"},{"constraints":[],"default":"vxlan,vlan,flat,gre","description":"Comma-seperated list of network type driver entrypoints to be loaded.\n","hidden":null,"label":null,"name":"Compute-1::NeutronTypeDrivers","parameter_type":"comma_delimited_list","value":"vxlan,vlan,flat,gre"},{"constraints":[],"default":"unset","description":"The password for the swift service account, used by the swift proxy services.","hidden":true,"label":null,"name":"Controller-1::SwiftPassword","parameter_type":"string","value":"e54db56e7b513186c269ef3b80cab6f720a40ec7"},{"constraints":[],"default":"ml2","description":"The core plugin for Neutron. The value should be the entrypoint to be loaded\nfrom neutron.core_plugins namespace.\n","hidden":null,"label":null,"name":"Controller-1::NeutronCorePlugin","parameter_type":"string","value":"ml2"},{"constraints":[],"default":"","description":"The filepath of the file to use for logging messages from Glance.","hidden":null,"label":null,"name":"Controller-1::GlanceLogFile","parameter_type":"string","value":""},{"constraints":[],"default":"1:1000","description":"Comma-separated list of <vni_min>:<vni_max> tuples enumerating ranges\nof VXLAN VNI IDs that are available for tenant network allocation\n","hidden":null,"label":null,"name":"Compute-1::NeutronVniRanges","parameter_type":"comma_delimited_list","value":"1:1000"},{"constraints":[],"default":"ro_snmp_user","description":"The user name for SNMPd with readonly rights running on all Overcloud nodes","hidden":null,"label":null,"name":"Compute-1::SnmpdReadonlyUserName","parameter_type":"string","value":"ro_snmp_user"},{"constraints":[],"default":"1:1000","description":"Comma-separated list of <tun_min>:<tun_max> tuples enumerating ranges\nof GRE tunnel IDs that are available for tenant network allocation\n","hidden":null,"label":null,"name":"NeutronTunnelIdRanges","parameter_type":"comma_delimited_list","value":"1:1000"},{"constraints":[],"default":{},"description":"Additional configuration to inject into the cluster. The JSON should have\nthe following structure:\n  {\"FILEKEY\":\n    {\"config\":\n      [{\"section\": \"SECTIONNAME\",\n        \"values\":\n          [{\"option\": \"OPTIONNAME\",\n            \"value\": \"VALUENAME\"\n           }\n          ]\n       }\n      ]\n    }\n  }\nFor instance:\n  {\"nova\":\n    {\"config\":\n      [{\"section\": \"default\",\n        \"values\":\n          [{\"option\": \"force_config_drive\",\n            \"value\": \"always\"\n           }\n          ]\n       },\n       {\"section\": \"cells\",\n        \"values\":\n          [{\"option\": \"driver\",\n            \"value\": \"nova.cells.rpc_driver.CellsRPCDriver\"\n           }\n          ]\n       }\n      ]\n    }\n  }\n","hidden":null,"label":null,"name":"Compute-1::ExtraConfig","parameter_type":"json","value":{}},{"constraints":[],"default":false,"description":"Whether to make Glance file backend a mount managed by Pacemaker. Effective when GlanceBackend is 'file'.\n","hidden":null,"label":null,"name":"Controller-1::GlanceFilePcmkManage","parameter_type":"boolean","value":false},{"constraints":[],"default":"unset","description":"A random string to be used as a salt when hashing to determine mappings in the ring.","hidden":true,"label":null,"name":"Controller-1::SwiftHashSuffix","parameter_type":"string","value":"bfd720c1f5fbb4094ec04335bb42deb409da05b2"},{"constraints":[],"default":"","description":null,"hidden":null,"label":null,"name":"Controller-1::NtpServer","parameter_type":"string","value":""},{"constraints":[],"default":1,"description":"The minimum time (in hours) before a partition in a ring can be moved following a rebalance.","hidden":null,"label":null,"name":"Swift-Storage-1::MinPartHours","parameter_type":"number","value":1},{"constraints":[],"default":"unset","description":"The password for the ceilometer service  and db account.","hidden":true,"label":null,"name":"Controller-1::CeilometerPassword","parameter_type":"string","value":"4acad9f359b5b1619edf1492e3caeb85c10fe53f"},{"constraints":[],"default":"","description":"The Ceph admin client key. Can be created with ceph-authtool --gen-print-key.","hidden":null,"label":null,"name":"CephAdminKey","parameter_type":"string","value":""},{"constraints":[],"default":5000,"description":"The size of the loopback file used by the cinder LVM driver.","hidden":null,"label":null,"name":"Cinder-Storage-1::CinderLVMLoopDeviceSize","parameter_type":"number","value":5000},{"constraints":[],"default":"false","description":"Set to true to enable package installation via Puppet","hidden":null,"label":null,"name":"Controller-1::EnablePackageInstall","parameter_type":"boolean","value":"false"},{"constraints":[{"constraint_type":"range","definition":{"min":"0"},"description":null}],"default":null,"description":null,"hidden":null,"label":null,"name":"Cinder-Storage-1::count","parameter_type":"number","value":"0"},{"constraints":[],"default":"datacentre:br-ex","description":"The OVS logical->physical bridge mappings to use. See the Neutron documentation for details. Defaults to mapping br-ex - the external bridge on hosts - to a physical name 'datacentre' which can be used to create provider networks (and we use this for the default floating network) - if changing this either use different post-install network scripts or be sure to keep 'datacentre' as a mapping network name.\n","hidden":null,"label":null,"name":"Controller-1::NeutronBridgeMappings","parameter_type":"string","value":"datacentre:br-ex"},{"constraints":[],"default":"br-ex","description":"Specifies the interface where the public-facing virtual ip will be assigned. This should be int_public when a VLAN is being used.\n","hidden":null,"label":null,"name":"Controller-1::PublicVirtualInterface","parameter_type":"string","value":"br-ex"},{"constraints":[{"constraint_type":"custom_constraint","definition":"nova.flavor","description":null}],"default":null,"description":"Flavor for the nova compute node","hidden":null,"label":null,"name":"Compute-1::Flavor","parameter_type":"string","value":"baremetal"},{"constraints":[],"default":false,"description":"Rabbit client subscriber parameter to specify an SSL connection to the RabbitMQ host.\n","hidden":null,"label":null,"name":"Controller-1::RabbitClientUseSSL","parameter_type":"string","value":false},{"constraints":[],"default":3,"description":"How many replicas to use in the swift rings.","hidden":null,"label":null,"name":"Controller-1::SwiftReplicas","parameter_type":"number","value":3},{"constraints":[],"default":"%stackname%-compute-%index%","description":"Format for Compute node hostnames","hidden":null,"label":null,"name":"ComputeHostnameFormat","parameter_type":"string","value":"%stackname%-compute-%index%"},{"constraints":[],"default":"http","description":"Protocol to use when connecting to glance, set to https for SSL.","hidden":null,"label":null,"name":"Compute-1::GlanceProtocol","parameter_type":"string","value":"http"},{"constraints":[],"default":"nic1","description":"A port to add to the NeutronPhysicalBridge.","hidden":null,"label":null,"name":"Compute-1::NeutronPublicInterface","parameter_type":"string","value":"nic1"},{"constraints":[],"default":"vxlan","description":"The tunnel types for the Neutron tenant network. To specify multiple\nvalues, use a comma separated string, like so: 'gre,vxlan'\n","hidden":null,"label":null,"name":"Controller-1::NeutronTunnelTypes","parameter_type":"string","value":"gre"},{"constraints":[],"default":"vxlan","description":"The tunnel types for the Neutron tenant network. To specify multiple\nvalues, use a comma separated string, like so: 'gre,vxlan'\n","hidden":null,"label":null,"name":"Compute-1::NeutronTunnelTypes","parameter_type":"string","value":"gre"},{"constraints":[],"default":"unset","description":"The user password for SNMPd with readonly rights running on all Overcloud nodes","hidden":true,"label":null,"name":"Controller-1::SnmpdReadonlyUserPassword","parameter_type":"string","value":"c19d9ac749bedab0134a638fe6fed8887b985d70"},{"constraints":[],"default":"noop","description":"Strategy to use for Glance notification queue","hidden":null,"label":null,"name":"Controller-1::GlanceNotifierStrategy","parameter_type":"string","value":"noop"},{"constraints":[],"default":"","description":null,"hidden":null,"label":null,"name":"Compute-1::NeutronPublicInterfaceRawDevice","parameter_type":"string","value":""},{"constraints":[],"default":"","description":"Set to True to enable debugging on all services.","hidden":null,"label":null,"name":"Cinder-Storage-1::Debug","parameter_type":"string","value":""},{"constraints":[],"default":"unset","description":"The password for the cinder service and db account, used by cinder-api.","hidden":true,"label":null,"name":"Controller-1::CinderPassword","parameter_type":"string","value":"64eeb57f624ba8367778fbd846b6242c320e9af5"},{"constraints":[],"default":"guest","description":"The username for RabbitMQ","hidden":null,"label":null,"name":"Controller-1::RabbitUserName","parameter_type":"string","value":"guest"},{"constraints":[],"default":false,"description":"Whether to enable or not the NFS backend for Cinder","hidden":null,"label":null,"name":"Compute-1::CinderEnableNfsBackend","parameter_type":"boolean","value":false},{"constraints":[],"default":"ro_snmp_user","description":"The user name for SNMPd with readonly rights running on all Overcloud nodes","hidden":null,"label":null,"name":"Cinder-Storage-1::SnmpdReadonlyUserName","parameter_type":"string","value":"ro_snmp_user"},{"constraints":[],"default":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"},"description":"Mapping of service_name -> network name. Typically set via parameter_defaults in the resource registry.","hidden":null,"label":null,"name":"Ceph-Storage-1::ServiceNetMap","parameter_type":"json","value":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"}},{"constraints":[],"default":"%stackname%-blockstorage-%index%","description":"Format for BlockStorage node hostnames","hidden":null,"label":null,"name":"BlockStorageHostnameFormat","parameter_type":"string","value":"%stackname%-blockstorage-%index%"},{"constraints":[],"default":"unset","description":"Salt for the rabbit cookie, change this to force the randomly generated rabbit cookie to change.","hidden":null,"label":null,"name":"RabbitCookieSalt","parameter_type":"string","value":"unset"},{"constraints":[],"default":"guest","description":"The username for RabbitMQ","hidden":null,"label":null,"name":"Compute-1::RabbitUserName","parameter_type":"string","value":"guest"},{"constraints":[{"constraint_type":"custom_constraint","definition":"glance.image","description":null}],"default":"overcloud-ceph-storage","description":null,"hidden":null,"label":null,"name":"Ceph-Storage-1::Image","parameter_type":"string","value":"overcloud-full"},{"constraints":[],"default":"","description":"The Ceph cluster FSID. Must be a UUID.","hidden":null,"label":null,"name":"CephClusterFSID","parameter_type":"string","value":""},{"constraints":[],"default":"","description":"Keystone certificate for verifying token validity.","hidden":null,"label":null,"name":"Controller-1::KeystoneSigningCertificate","parameter_type":"string","value":"-----BEGIN CERTIFICATE-----\nMIIDJDCCAgygAwIBAgIBAjANBgkqhkiG9w0BAQUFADBTMQswCQYDVQQGEwJYWDEO\nMAwGA1UECBMFVW5zZXQxDjAMBgNVBAcTBVVuc2V0MQ4wDAYDVQQKEwVVbnNldDEU\nMBIGA1UEAxMLS2V5c3RvbmUgQ0EwHhcNMTUxMDIxMTM1MzQzWhcNMjUxMDE4MTM1\nMzQzWjBYMQswCQYDVQQGEwJYWDEOMAwGA1UECBMFVW5zZXQxDjAMBgNVBAcTBVVu\nc2V0MQ4wDAYDVQQKEwVVbnNldDEZMBcGA1UEAxMQS2V5c3RvbmUgU2lnbmluZzCC\nASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMeQugvvoBkZL10UqddIoeIG\n7KUfr7HpwGDm9bUsQzIZQTXbeGvDVU5H5aSfuD0CBkUeLvSthmdh7KAEwZk6MMms\n8BjBjSHN2NxNk8Hp/KzGhvznZr4lvlP7hz9lkpG6T3AAhI1h7UCh7CIv3em6BKb9\nYyKmv2cbuLf5wyEgpWG6BS/h0F7JE3/ORWlnkt6vPLWiG1seX13+1nbpnjjc61bf\njj2wUIeisD1h20gvb9XpW1BqKHyht8C+5JU2mh1euaKauJ1J4YtJdLecAvJFVeJl\n8tJIiO8O7tzCgUnOLCGid8vZYlTMXDFHwJKzSfdH6lmjGZdR9Cj8o8XLf8/CWmkC\nAwEAATANBgkqhkiG9w0BAQUFAAOCAQEA1vX4j6PfQf5uwoqc4PNZBeb2izqtuK/J\nOqxvzr6fv3cS6TyWGsxC7o1W4UCRCZd/edfU/BpePkTOSHiteDbHTP9NJcCAzRgP\nGvdptsAQFkddVoUl4bCsabHuHybJ9G+gFYnMkYHxhO+7bsIv1teXfrIGXd+s1g8T\nX6SoG1xRp29NB0hQJKdLGg+DbwgQ93FpUrIIax3FEEw/t8Z2UzUkJpQGBBZubzu5\nurgv2ts1sLDsszIfknYqg9YB2we1uY2gYiObuA6KpYuD46csgxdxNL0Xb5vbUS65\niSGnCUD6p23UnHkZk2X5cVC42w6dy77ym3xmvA6MvPTSoQ4HWw0dhw==\n-----END CERTIFICATE-----"},{"constraints":[{"constraint_type":"custom_constraint","definition":"nova.keypair","description":null}],"default":"default","description":"Name of an existing EC2 KeyPair to enable SSH access to the instances","hidden":null,"label":null,"name":"Compute-1::KeyName","parameter_type":"string","value":"default"},{"constraints":[],"default":5672,"description":"Set rabbit subscriber port, change this if using SSL","hidden":null,"label":null,"name":"Cinder-Storage-1::RabbitClientPort","parameter_type":"number","value":5672},{"constraints":[],"default":"unset","description":"The user password for SNMPd with readonly rights running on all Overcloud nodes","hidden":true,"label":null,"name":"Compute-1::SnmpdReadonlyUserPassword","parameter_type":"string","value":"c19d9ac749bedab0134a638fe6fed8887b985d70"},{"constraints":[],"default":"http","description":"Protocol to use when connecting to glance, set to https for SSL.","hidden":null,"label":null,"name":"Controller-1::GlanceProtocol","parameter_type":"string","value":"http"},{"constraints":[],"default":"datacentre","description":"The Neutron ML2 and OpenVSwitch vlan mapping range to support. See the Neutron documentation for permitted values. Defaults to permitting any VLAN on the 'datacentre' physical network (See NeutronBridgeMappings).\n","hidden":null,"label":null,"name":"Compute-1::NeutronNetworkVLANRanges","parameter_type":"comma_delimited_list","value":"datacentre"},{"constraints":[],"default":"dvr_snat","description":"Agent mode for the neutron-l3-agent on the controller hosts","hidden":null,"label":null,"name":"Controller-1::NeutronAgentMode","parameter_type":"string","value":"dvr_snat"},{"constraints":[],"default":"datacentre","description":"If set, flat networks to configure in neutron plugins.\n","hidden":null,"label":null,"name":"Compute-1::NeutronFlatNetworks","parameter_type":"string","value":"datacentre"},{"constraints":[],"default":"false","description":"Set to true to enable package installation via Puppet","hidden":null,"label":null,"name":"Cinder-Storage-1::EnablePackageInstall","parameter_type":"boolean","value":"false"},{"constraints":[],"default":"REBUILD_PRESERVE_EPHEMERAL","description":"What policy to use when reconstructing instances. REBUILD for rebuilds, REBUILD_PRESERVE_EPHEMERAL to preserve /mnt.","hidden":null,"label":null,"name":"Compute-1::ImageUpdatePolicy","parameter_type":"string","value":"REBUILD_PRESERVE_EPHEMERAL"},{"constraints":[],"default":"images","description":"The name of the Ceph RBD pool to use/create for Glance images","hidden":null,"label":null,"name":"GlanceRbdPoolName","parameter_type":"string","value":"images"},{"constraints":[],"default":"unset","description":"Shared secret to prevent spoofing","hidden":null,"label":null,"name":"Controller-1::NeutronMetadataProxySharedSecret","parameter_type":"string","value":"unset"},{"constraints":[],"default":{},"description":"A network mapped list of IPs to assign to Controllers in the following form: {\n  \"internal_api\": [\"a.b.c.d\", \"e.f.g.h\"],\n  ...\n}\n","hidden":null,"label":null,"name":"Controller-1::ControllerIPs","parameter_type":"json","value":{}},{"constraints":[{"constraint_type":"custom_constraint","definition":"nova.flavor","description":null}],"default":null,"description":"Flavor for the Ceph Storage node.","hidden":null,"label":null,"name":"Ceph-Storage-1::Flavor","parameter_type":"string","value":"baremetal"},{"constraints":[],"default":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"},"description":"Mapping of service_name -> network name. Typically set via parameter_defaults in the resource registry.","hidden":null,"label":null,"name":"Swift-Storage-1::ServiceNetMap","parameter_type":"json","value":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"}},{"constraints":[{"constraint_type":"allowed_values","definition":["basic","cadf"],"description":null}],"default":"basic","description":"The Keystone notification format","hidden":null,"label":null,"name":"Controller-1::KeystoneNotificationFormat","parameter_type":"string","value":"basic"},{"constraints":[],"default":"","description":null,"hidden":null,"label":null,"name":"Cinder-Storage-1::NtpServer","parameter_type":"string","value":""},{"constraints":[],"default":[],"description":"Control the IP allocation for the PublicVirtualInterface port. E.g. [{'ip_address':'1.2.3.4'}]\n","hidden":null,"label":null,"name":"PublicVirtualFixedIPs","parameter_type":"json","value":[]},{"constraints":[],"default":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"},"description":"Mapping of service_name -> network name. Typically set via parameter_defaults in the resource registry.","hidden":null,"label":null,"name":"ServiceNetMap","parameter_type":"json","value":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"}},{"constraints":[],"default":"True","description":"Allow automatic l3-agent failover","hidden":null,"label":null,"name":"Compute-1::NeutronAllowL3AgentFailover","parameter_type":"string","value":"True"},{"constraints":[],"default":"1:1000","description":"Comma-separated list of <vni_min>:<vni_max> tuples enumerating ranges\nof VXLAN VNI IDs that are available for tenant network allocation\n","hidden":null,"label":null,"name":"NeutronVniRanges","parameter_type":"comma_delimited_list","value":"1:1000"},{"constraints":[],"default":"","description":"Set to True to enable debugging on all services.","hidden":null,"label":null,"name":"Controller-1::Debug","parameter_type":"string","value":""},{"constraints":[],"default":"openstack","description":"The Ceph user to use with OpenStack clients.","hidden":null,"label":null,"name":"CephClientUserName","parameter_type":"string","value":"openstack"},{"constraints":[],"default":"REBUILD_PRESERVE_EPHEMERAL","description":"What policy to use when reconstructing instances. REBUILD for rebuilds, REBUILD_PRESERVE_EPHEMERAL to preserve /mnt.","hidden":null,"label":null,"name":"Ceph-Storage-1::ImageUpdatePolicy","parameter_type":"string","value":"REBUILD_PRESERVE_EPHEMERAL"},{"constraints":[],"default":"","description":"Setting to a previously unused value during stack-update will trigger package update on all nodes\n","hidden":null,"label":null,"name":"Ceph-Storage-1::UpdateIdentifier","parameter_type":"string","value":""},{"constraints":[],"default":"True","description":null,"hidden":null,"label":null,"name":"Compute-1::NeutronEnableTunnelling","parameter_type":"string","value":"True"},{"constraints":[],"default":"volumes","description":"The name of the Ceph RBD pool to use/create for Cinder volumes","hidden":null,"label":null,"name":"CinderRbdPoolName","parameter_type":"string","value":"volumes"},{"constraints":[],"default":"","description":"Setting to a previously unused value during stack-update will trigger package update on all nodes\n","hidden":null,"label":null,"name":"Cinder-Storage-1::UpdateIdentifier","parameter_type":"string","value":""},{"constraints":[],"default":"nfs","description":"Filesystem type for Pacemaker mount used as Glance storage. Effective when GlanceFilePcmkManage is true.\n","hidden":null,"label":null,"name":"Controller-1::GlanceFilePcmkFstype","parameter_type":"string","value":"nfs"},{"constraints":[],"default":["messaging"],"description":"Comma-separated list of Oslo notification drivers used by Keystone","hidden":null,"label":null,"name":"Controller-1::KeystoneNotificationDriver","parameter_type":"comma_delimited_list","value":["messaging"]},{"constraints":[],"default":"mongodb","description":"The ceilometer backend type.","hidden":null,"label":null,"name":"Controller-1::CeilometerBackend","parameter_type":"string","value":"mongodb"},{"constraints":[],"default":"","description":"List of externally managed Ceph Mon Host IPs. Only used for external Ceph deployments.","hidden":null,"label":null,"name":"CephExternalMonHost","parameter_type":"string","value":""},{"constraints":[],"default":{},"description":"Additional configuration to inject into the cluster. The JSON should have\nthe following structure:\n  {\"FILEKEY\":\n    {\"config\":\n      [{\"section\": \"SECTIONNAME\",\n        \"values\":\n          [{\"option\": \"OPTIONNAME\",\n            \"value\": \"VALUENAME\"\n           }\n          ]\n       }\n      ]\n    }\n  }\nFor instance:\n  {\"nova\":\n    {\"config\":\n      [{\"section\": \"default\",\n        \"values\":\n          [{\"option\": \"force_config_drive\",\n            \"value\": \"always\"\n           }\n          ]\n       },\n       {\"section\": \"cells\",\n        \"values\":\n          [{\"option\": \"driver\",\n            \"value\": \"nova.cells.rpc_driver.CellsRPCDriver\"\n           }\n          ]\n       }\n      ]\n    }\n  }\n","hidden":null,"label":null,"name":"Cinder-Storage-1::ExtraConfig","parameter_type":"json","value":{}},{"constraints":[],"default":"","description":"Keystone key for signing tokens.","hidden":true,"label":null,"name":"Controller-1::KeystoneSSLCertificateKey","parameter_type":"string","value":""},{"constraints":[{"constraint_type":"custom_constraint","definition":"nova.keypair","description":null}],"default":"default","description":"Name of an existing EC2 KeyPair to enable SSH access to the instances","hidden":null,"label":null,"name":"Ceph-Storage-1::KeyName","parameter_type":"string","value":"default"},{"constraints":[],"default":"dvr_snat","description":"Agent mode for the neutron-l3-agent on the controller hosts","hidden":null,"label":null,"name":"Compute-1::NeutronAgentMode","parameter_type":"string","value":"dvr_snat"},{"constraints":[],"default":"unset","description":"The password for the ceilometer service account.","hidden":true,"label":null,"name":"Compute-1::CeilometerPassword","parameter_type":"string","value":"4acad9f359b5b1619edf1492e3caeb85c10fe53f"},{"constraints":[],"default":"ml2","description":"The core plugin for Neutron. The value should be the entrypoint to be loaded\nfrom neutron.core_plugins namespace.\n","hidden":null,"label":null,"name":"Compute-1::NeutronCorePlugin","parameter_type":"string","value":"ml2"},{"constraints":[],"default":"","description":"Mount options for Pacemaker mount used as Glance storage. Effective when GlanceFilePcmkManage is true.\n","hidden":null,"label":null,"name":"Controller-1::GlanceFilePcmkOptions","parameter_type":"string","value":""},{"constraints":[],"default":10,"description":"Partition Power to use when building Swift rings","hidden":null,"label":null,"name":"Swift-Storage-1::PartPower","parameter_type":"number","value":10},{"constraints":[],"default":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"},"description":"Mapping of service_name -> network name. Typically set via parameter_defaults in the resource registry.","hidden":null,"label":null,"name":"Controller-1::ServiceNetMap","parameter_type":"json","value":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"}},{"constraints":[],"default":"datacentre","description":"If set, flat networks to configure in neutron plugins.","hidden":null,"label":null,"name":"Controller-1::NeutronFlatNetworks","parameter_type":"string","value":"datacentre"},{"constraints":[],"default":true,"description":"Whether to enable or not the Iscsi backend for Cinder","hidden":null,"label":null,"name":"Controller-1::CinderEnableIscsiBackend","parameter_type":"boolean","value":true},{"constraints":[],"default":"unset","description":"Secret shared by the ceilometer services.","hidden":true,"label":null,"name":"Compute-1::CeilometerMeteringSecret","parameter_type":"string","value":"31ca44623afc116aebc523dbbf0a8f0e70899e4c"},{"constraints":[],"default":[],"description":"Should be used for arbitrary ips.","hidden":null,"label":null,"name":"ControlFixedIPs","parameter_type":"json","value":[]},{"constraints":[],"default":"","description":"A custom IP address to put onto the NeutronPublicInterface.","hidden":null,"label":null,"name":"Controller-1::NeutronPublicInterfaceIP","parameter_type":"string","value":""},{"constraints":[],"default":"unset","description":"The keystone auth secret and db password.","hidden":true,"label":null,"name":"Controller-1::AdminToken","parameter_type":"string","value":"45176d29df6e7af1243b7456d770d4cd380e43ea"},{"constraints":[{"constraint_type":"custom_constraint","definition":"nova.keypair","description":null}],"default":"default","description":"Name of an existing EC2 KeyPair to enable SSH access to the instances","hidden":null,"label":null,"name":"Controller-1::KeyName","parameter_type":"string","value":"default"},{"constraints":[],"default":"guest","description":"The password for RabbitMQ","hidden":true,"label":null,"name":"Controller-1::RabbitPassword","parameter_type":"string","value":"guest"},{"constraints":[],"default":"","description":"A custom default route for the NeutronPublicInterface.","hidden":null,"label":null,"name":"Controller-1::NeutronPublicInterfaceDefaultRoute","parameter_type":"string","value":""},{"constraints":[],"default":"false","description":"Value of mount_check in Swift account/container/object -server.conf","hidden":null,"label":null,"name":"Swift-Storage-1::MountCheck","parameter_type":"boolean","value":"false"},{"constraints":[],"default":"router","description":"Comma-seperated list of service plugin entrypoints to be loaded from the\nneutron.service_plugins namespace.\n","hidden":null,"label":null,"name":"Controller-1::NeutronServicePlugins","parameter_type":"comma_delimited_list","value":"router"},{"constraints":[],"default":"","description":null,"hidden":null,"label":null,"name":"Compute-1::NtpServer","parameter_type":"string","value":""},{"constraints":[],"default":"","description":"If set, the contents of an SSL certificate .crt file for encrypting SSL endpoints.","hidden":true,"label":null,"name":"Controller-1::SSLCertificate","parameter_type":"string","value":""},{"constraints":[],"default":[],"description":null,"hidden":null,"label":null,"name":"Compute-1::removal_policies","parameter_type":"json","value":[]},{"constraints":[{"constraint_type":"allowed_values","definition":["swift","file","rbd"],"description":null}],"default":"swift","description":"The short name of the Glance backend to use. Should be one of swift, rbd, or file","hidden":null,"label":null,"name":"Controller-1::GlanceBackend","parameter_type":"string","value":"swift"},{"constraints":[],"default":"vxlan","description":"The tenant network type for Neutron, either gre or vxlan.","hidden":null,"label":null,"name":"Controller-1::NeutronNetworkType","parameter_type":"string","value":"gre"},{"constraints":[{"constraint_type":"custom_constraint","definition":"glance.image","description":null}],"default":"overcloud-compute","description":null,"hidden":null,"label":null,"name":"Compute-1::Image","parameter_type":"string","value":"overcloud-full"},{"constraints":[],"default":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"},"description":"Mapping of service_name -> network name. Typically set via parameter_defaults in the resource registry.","hidden":null,"label":null,"name":"Cinder-Storage-1::ServiceNetMap","parameter_type":"json","value":{"BlockStorageHostnameResolveNetwork":"internal_api","CeilometerApiNetwork":"internal_api","CephClusterNetwork":"storage_mgmt","CephPublicNetwork":"storage","CephStorageHostnameResolveNetwork":"storage","CinderApiNetwork":"internal_api","CinderIscsiNetwork":"storage","ComputeHostnameResolveNetwork":"internal_api","ControllerHostnameResolveNetwork":"internal_api","GlanceApiNetwork":"storage","GlanceRegistryNetwork":"internal_api","HeatApiNetwork":"internal_api","HorizonNetwork":"internal_api","KeystoneAdminApiNetwork":"ctlplane","KeystonePublicApiNetwork":"internal_api","MemcachedNetwork":"internal_api","MongoDbNetwork":"internal_api","MysqlNetwork":"internal_api","NeutronApiNetwork":"internal_api","NeutronTenantNetwork":"tenant","NovaApiNetwork":"internal_api","NovaMetadataNetwork":"internal_api","NovaVncProxyNetwork":"internal_api","ObjectStorageHostnameResolveNetwork":"internal_api","RabbitMqNetwork":"internal_api","RedisNetwork":"internal_api","SwiftMgmtNetwork":"storage_mgmt","SwiftProxyNetwork":"storage"}},{"constraints":[],"default":"","description":"Setting to a previously unused value during stack-update will trigger package update on all nodes\n","hidden":null,"label":null,"name":"Compute-1::UpdateIdentifier","parameter_type":"string","value":""},{"constraints":[],"default":"False","description":"Whether to configure Neutron Distributed Virtual Routers","hidden":null,"label":null,"name":"Controller-1::NeutronDVR","parameter_type":"string","value":"False"},{"constraints":[],"default":"unset","description":"The user password for SNMPd with readonly rights running on all Overcloud nodes","hidden":true,"label":null,"name":"Swift-Storage-1::SnmpdReadonlyUserPassword","parameter_type":"string","value":"c19d9ac749bedab0134a638fe6fed8887b985d70"},{"constraints":[],"default":"9292","description":"Glance port.","hidden":null,"label":null,"name":"Controller-1::GlancePort","parameter_type":"string","value":"9292"},{"constraints":[],"default":"router","description":"Comma-seperated list of service plugin entrypoints to be loaded from the\nneutron.service_plugins namespace.\n","hidden":null,"label":null,"name":"Compute-1::NeutronServicePlugins","parameter_type":"comma_delimited_list","value":"router"},{"constraints":[{"constraint_type":"custom_constraint","definition":"nova.flavor","description":null}],"default":null,"description":"Flavor for control nodes to request when deploying.","hidden":null,"label":null,"name":"Controller-1::Flavor","parameter_type":"string","value":"baremetal"},{"constraints":[],"default":"openvswitch","description":"The mechanism drivers for the Neutron tenant network. To specify multiple\nvalues, use a comma separated string, like so: 'openvswitch,l2_population'\n","hidden":null,"label":null,"name":"Controller-1::NeutronMechanismDrivers","parameter_type":"string","value":"openvswitch"},{"constraints":[],"default":"","description":"The DNS name of this cloud. E.g. ci-overcloud.tripleo.org","hidden":null,"label":null,"name":"Controller-1::CloudName","parameter_type":"string","value":"overcloud"},{"constraints":[],"default":"%stackname%-cephstorage-%index%","description":"Format for CephStorage node hostnames","hidden":null,"label":null,"name":"CephStorageHostnameFormat","parameter_type":"string","value":"%stackname%-cephstorage-%index%"},{"constraints":[],"default":false,"description":"If enabled services will be monitored by Pacemaker; it will manage VIPs as well, in place of Keepalived.","hidden":null,"label":null,"name":"Controller-1::EnablePacemaker","parameter_type":"boolean","value":false},{"constraints":[],"default":"unset","description":"Password for heat_stack_domain_admin user.","hidden":true,"label":null,"name":"Controller-1::HeatStackDomainAdminPassword","parameter_type":"string","value":"unset"},{"constraints":[],"default":"br-ex","description":"Name of bridge used for external network traffic.","hidden":null,"label":null,"name":"Controller-1::NeutronExternalNetworkBridge","parameter_type":"string","value":"br-ex"},{"constraints":[],"default":0,"description":"Specifies the size of the buffer pool in megabytes. Setting to zero should be interpreted as \"no value\" and will defer to the lower level default.\n","hidden":null,"label":null,"name":"Controller-1::MysqlInnodbBufferPoolSize","parameter_type":"number","value":0},{"constraints":[],"default":"tgtadm","description":"The iSCSI helper to use with cinder.","hidden":null,"label":null,"name":"Controller-1::CinderISCSIHelper","parameter_type":"string","value":"lioadm"},{"constraints":[],"default":"overcloud-swift-storage","description":null,"hidden":null,"label":null,"name":"Swift-Storage-1::Image","parameter_type":"string","value":"overcloud-full"},{"constraints":[],"default":5672,"description":"Set rabbit subscriber port, change this if using SSL","hidden":null,"label":null,"name":"Compute-1::RabbitClientPort","parameter_type":"number","value":5672},{"constraints":[],"default":"tgtadm","description":"The iSCSI helper to use with cinder.","hidden":null,"label":null,"name":"Cinder-Storage-1::CinderISCSIHelper","parameter_type":"string","value":"lioadm"},{"constraints":[],"default":"True","description":null,"hidden":null,"label":null,"name":"Controller-1::NeutronEnableTunnelling","parameter_type":"string","value":"True"},{"constraints":[],"default":"br-ex","description":"Interface where virtual ip will be assigned.","hidden":null,"label":null,"name":"Controller-1::ControlVirtualInterface","parameter_type":"string","value":"br-ex"},{"constraints":[],"default":"false","description":"Set to true to enable package installation via Puppet","hidden":null,"label":null,"name":"Swift-Storage-1::EnablePackageInstall","parameter_type":"boolean","value":"false"},{"constraints":[],"default":false,"description":"Whether to enable or not the Rbd backend for Nova","hidden":null,"label":null,"name":"Compute-1::NovaEnableRbdBackend","parameter_type":"boolean","value":false},{"constraints":[],"default":"False","description":"Whether to enable l3-agent HA","hidden":null,"label":null,"name":"Controller-1::NeutronL3HA","parameter_type":"string","value":"False"},{"constraints":[{"constraint_type":"custom_constraint","definition":"glance.image","description":null}],"default":"overcloud-control","description":null,"hidden":null,"label":null,"name":"Controller-1::Image","parameter_type":"string","value":"overcloud-full"},{"constraints":[],"default":"unset","description":"A random string to be used as a salt when hashing to determine mappings in the ring.","hidden":true,"label":null,"name":"Swift-Storage-1::HashSuffix","parameter_type":"string","value":"unset"},{"constraints":[],"default":"","description":"The Ceph monitors key. Can be created with ceph-authtool --gen-print-key.","hidden":null,"label":null,"name":"CephMonKey","parameter_type":"string","value":""},{"constraints":[],"default":"False","description":null,"hidden":null,"label":null,"name":"Compute-1::NeutronDVR","parameter_type":"string","value":"False"},{"constraints":[],"default":"False","description":"Whether to enable l3-agent HA","hidden":null,"label":null,"name":"Compute-1::NeutronL3HA","parameter_type":"string","value":"False"},{"constraints":[],"default":"overcloud-cinder-volume","description":null,"hidden":null,"label":null,"name":"Cinder-Storage-1::Image","parameter_type":"string","value":"overcloud-full"},{"constraints":[],"default":"datacentre","description":"The Neutron ML2 and OpenVSwitch vlan mapping range to support. See the Neutron documentation for permitted values. Defaults to permitting any VLAN on the 'datacentre' physical network (See NeutronBridgeMappings).\n","hidden":null,"label":null,"name":"Controller-1::NeutronNetworkVLANRanges","parameter_type":"comma_delimited_list","value":"datacentre"},{"constraints":[],"default":"","description":"Keystone self-signed certificate authority certificate.","hidden":null,"label":null,"name":"Controller-1::KeystoneCACertificate","parameter_type":"string","value":"-----BEGIN CERTIFICATE-----\nMIIDNzCCAh+gAwIBAgIBATANBgkqhkiG9w0BAQUFADBTMQswCQYDVQQGEwJYWDEO\nMAwGA1UECBMFVW5zZXQxDjAMBgNVBAcTBVVuc2V0MQ4wDAYDVQQKEwVVbnNldDEU\nMBIGA1UEAxMLS2V5c3RvbmUgQ0EwHhcNMTUxMDIxMTM1MzQzWhcNMjUxMDE4MTM1\nMzQzWjBTMQswCQYDVQQGEwJYWDEOMAwGA1UECBMFVW5zZXQxDjAMBgNVBAcTBVVu\nc2V0MQ4wDAYDVQQKEwVVbnNldDEUMBIGA1UEAxMLS2V5c3RvbmUgQ0EwggEiMA0G\nCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDc3mKGOonnH0aMXMj2mYg1wMbOenL2\nQ6+1WDbwDpdLHcu27fw9JgkMzswU4EWKLwLj/QrD/c1IfyxeoPmDeRZSLiJBmZVN\noDSfQdlep8rw3kgTatJ2+a5HXL6xhzjx1GKGcAd0zMSBlzrK4JDwdjIxxc8FRpHd\nJq5uZpMalL743UJ94X2jyVBpx8mriKnt+icAvdYBQqzXB/NeTh6w3gW6RtZVTXfO\nnq4bHBKiBGC9KzGmCICFUTDKNJPx7c14YOI1zTeA0m6D2oVqunf7ine3cD22oV+c\nOvz+K42ztcPxp1twQjB8vpxwwUDxKPQLGLh+a3D6e1HVASAnjJS2G8h/AgMBAAGj\nFjAUMBIGA1UdEwEB/wQIMAYBAf8CAQAwDQYJKoZIhvcNAQEFBQADggEBAK5WA3KR\nfTbUlzVQT65D59ZjAEUAhmFDnYoOHFBM7n1wfT8CgtthqGv4c6fC3joLCP0AyS+V\npsMvIp0Oha9TYzcg0md6SPYpI6QdQvWPjuSQF1v+Gvxv8jcJ/86snCxxq5zhtzqc\nSWUbSX7IOQ8QcvYZAvjPvnoHC8usQR8US2pgJddyx54K/WQsLX6y68BZeYaZYL7M\nB+G+eQltyYfIyGTps/smFWAm1B0EUYtDdi0Pvs74sSQICoLo2bYkgsZXM4pmoGEd\nCzv2TbYe1iLhYRSWufyj3ytCFOzsmnY4iyx+pgYK23iMIdw2dUtl5vxcbgOYYXGD\nnPycT1PzrxX56B0=\n-----END CERTIFICATE-----"},{"constraints":[],"default":[],"description":null,"hidden":null,"label":null,"name":"Ceph-Storage-1::removal_policies","parameter_type":"json","value":[]},{"constraints":[],"default":"","description":"Neutron ID for ctlplane network.","hidden":null,"label":null,"name":"NeutronControlPlaneID","parameter_type":"string","value":"7f079594-6944-48f0-be3c-ee7fa6592f7a"},{"constraints":[],"default":"","description":"If set, the public interface is a vlan with this device as the raw device.","hidden":null,"label":null,"name":"Controller-1::NeutronPublicInterfaceRawDevice","parameter_type":"string","value":""},{"constraints":[],"default":"","description":"An exported storage device that should be mounted by Pacemaker as Glance storage. Effective when GlanceFilePcmkManage is true.\n","hidden":null,"label":null,"name":"Controller-1::GlanceFilePcmkDevice","parameter_type":"string","value":""},{"constraints":[],"default":"unset","description":"Secret shared by the ceilometer services.","hidden":true,"label":null,"name":"Controller-1::CeilometerMeteringSecret","parameter_type":"string","value":"31ca44623afc116aebc523dbbf0a8f0e70899e4c"},{"constraints":[],"default":"guest","description":null,"hidden":null,"label":null,"name":"Cinder-Storage-1::RabbitPassword","parameter_type":"string","value":"guest"},{"constraints":[],"default":false,"description":"Rabbit client subscriber parameter to specify an SSL connection to the RabbitMQ host.\n","hidden":null,"label":null,"name":"Cinder-Storage-1::RabbitClientUseSSL","parameter_type":"string","value":false},{"constraints":[],"default":"unset","description":"The password for the cinder service and db account, used by cinder-api.","hidden":true,"label":null,"name":"Cinder-Storage-1::CinderPassword","parameter_type":"string","value":"unset"},{"constraints":[],"default":"","description":"VLAN tag for creating a public VLAN. The tag will be used to create an access port on the exterior bridge for each control plane node, and that port will be given the IP address returned by neutron from the public network. Set CONTROLEXTRA=overcloud-vlan-port.yaml when compiling overcloud.yaml to include the deployment of VLAN ports to the control plane.\n","hidden":null,"label":null,"name":"Controller-1::NeutronPublicInterfaceTag","parameter_type":"string","value":""},{"constraints":[],"default":"ro_snmp_user","description":"The user name for SNMPd with readonly rights running on all Overcloud nodes","hidden":null,"label":null,"name":"Swift-Storage-1::SnmpdReadonlyUserName","parameter_type":"string","value":"ro_snmp_user"},{"constraints":[],"default":"nic1","description":"What interface to bridge onto br-ex for network nodes.","hidden":null,"label":null,"name":"Controller-1::NeutronPublicInterface","parameter_type":"string","value":"nic1"},{"constraints":[],"default":"","description":"NFS servers used by Cinder NFS backend. Effective when CinderEnableNfsBackend is true.\n","hidden":null,"label":null,"name":"Controller-1::CinderNfsServers","parameter_type":"comma_delimited_list","value":""},{"constraints":[],"default":"9292","description":"Glance port.","hidden":null,"label":null,"name":"Cinder-Storage-1::GlancePort","parameter_type":"string","value":"9292"},{"constraints":[],"default":"unset","description":"The password for the glance service and db account, used by the glance services.","hidden":true,"label":null,"name":"Controller-1::GlancePassword","parameter_type":"string","value":"6b641065f1a8c98ca28b52d01527001a77cc5e6f"},{"constraints":[],"default":"","description":"Set to True to enable debugging on all services.","hidden":null,"label":null,"name":"Compute-1::Debug","parameter_type":"string","value":""},{"constraints":[],"default":"dhcp-option-force=26,1400","description":"Dnsmasq options for neutron-dhcp-agent. The default value here forces MTU to be set to 1400 to account for the gre tunnel overhead.","hidden":null,"label":null,"name":"Controller-1::NeutronDnsmasqOptions","parameter_type":"string","value":"dhcp-option-force=26,1400"},{"constraints":[],"default":false,"description":"Whether to enable or not the NFS backend for Cinder","hidden":null,"label":null,"name":"Controller-1::CinderEnableNfsBackend","parameter_type":"boolean","value":false},{"constraints":[],"default":"vxlan,vlan,flat,gre","description":"Comma-seperated list of network type driver entrypoints to be loaded.\n","hidden":null,"label":null,"name":"Controller-1::NeutronTypeDrivers","parameter_type":"comma_delimited_list","value":"vxlan,vlan,flat,gre"},{"constraints":[{"constraint_type":"allowed_values","definition":["","Present"],"description":null}],"default":"","description":"Indicates whether the Compute agent is present and expects nova-compute to be configured accordingly","hidden":null,"label":null,"name":"Compute-1::CeilometerComputeAgent","parameter_type":"string","value":""},{"constraints":[],"default":"datacentre:br-ex","description":"The OVS logical->physical bridge mappings to use. See the Neutron documentation for details. Defaults to mapping br-ex - the external bridge on hosts - to a physical name 'datacentre' which can be used to create provider networks (and we use this for the default floating network) - if changing this either use different post-install network scripts or be sure to keep 'datacentre' as a mapping network name.\n","hidden":null,"label":null,"name":"Compute-1::NeutronBridgeMappings","parameter_type":"string","value":"datacentre:br-ex"},{"constraints":[],"default":"http","description":"Protocol to use when connecting to glance, set to https for SSL.","hidden":null,"label":null,"name":"Cinder-Storage-1::GlanceProtocol","parameter_type":"string","value":"http"},{"constraints":[],"default":{},"description":"NovaCompute specific configuration to inject into the cluster. Same\nstructure as ExtraConfig.\n","hidden":null,"label":null,"name":"Compute-1::NovaComputeExtraConfig","parameter_type":"json","value":{}},{"constraints":[],"default":"%stackname%-objectstorage-%index%","description":"Format for SwiftStorage node hostnames","hidden":null,"label":null,"name":"ObjectStorageHostnameFormat","parameter_type":"string","value":"%stackname%-objectstorage-%index%"},{"constraints":[],"default":"unset","description":"The password for the neutron service account, used by neutron agents.","hidden":true,"label":null,"name":"Compute-1::NeutronPassword","parameter_type":"string","value":"5bde587ef0f70045bb98fa74ad36baf16dd7edd1"},{"constraints":[],"default":"false","description":"Value of mount_check in Swift account/container/object -server.conf","hidden":null,"label":null,"name":"Controller-1::SwiftMountCheck","parameter_type":"boolean","value":"false"},{"constraints":[],"default":4096,"description":"Configures MySQL max_connections config setting","hidden":null,"label":null,"name":"Controller-1::MysqlMaxConnections","parameter_type":"number","value":4096},{"constraints":[],"default":"","description":"Setting to a previously unused value during stack-update will trigger package update on all nodes\n","hidden":null,"label":null,"name":"Controller-1::UpdateIdentifier","parameter_type":"string","value":""},{"constraints":[],"default":4096,"description":"Configures RabbitMQ FD limit","hidden":null,"label":null,"name":"Controller-1::RabbitFDLimit","parameter_type":"string","value":4096},{"constraints":[{"constraint_type":"custom_constraint","definition":"nova.flavor","description":null}],"default":null,"description":"Flavor for Swift storage nodes to request when deploying.","hidden":null,"label":null,"name":"Swift-Storage-1::Flavor","parameter_type":"string","value":"baremetal"},{"constraints":[],"default":[],"description":null,"hidden":null,"label":null,"name":"Cinder-Storage-1::removal_policies","parameter_type":"json","value":[]},{"constraints":[],"default":10,"description":"Partition Power to use when building Swift rings","hidden":null,"label":null,"name":"Controller-1::SwiftPartPower","parameter_type":"number","value":10},{"constraints":[],"default":{},"description":"Additional hieradata to inject into the cluster, note that\nControllerExtraConfig takes precedence over ExtraConfig.\n","hidden":null,"label":null,"name":"Controller-1::ExtraConfig","parameter_type":"json","value":{}},{"constraints":[],"default":false,"description":"Whether to enable or not the Rbd backend for Cinder","hidden":null,"label":null,"name":"Controller-1::CinderEnableRbdBackend","parameter_type":"boolean","value":false},{"constraints":[],"default":false,"description":"Whether to deploy Ceph Storage (OSD) on the Controller","hidden":null,"label":null,"name":"Controller-1::EnableCephStorage","parameter_type":"boolean","value":false},{"constraints":[],"default":"br-ex","description":"An OVS bridge to create for accessing external networks.","hidden":null,"label":null,"name":"Compute-1::NeutronPhysicalBridge","parameter_type":"string","value":"br-ex"},{"constraints":[],"default":"unset","description":"The password for the nova service account, used by nova-api.","hidden":true,"label":null,"name":"Compute-1::NovaPassword","parameter_type":"string","value":"206899979d82609ad134f36c21f62b3fd6f823b6"},{"constraints":[],"default":true,"description":"Whether to use Galera instead of regular MariaDB.","hidden":null,"label":null,"name":"Controller-1::EnableGalera","parameter_type":"boolean","value":true},{"constraints":[],"default":"guest","description":"The password for RabbitMQ","hidden":true,"label":null,"name":"Compute-1::RabbitPassword","parameter_type":"string","value":"guest"},{"constraints":[],"default":"vms","description":"The name of the Ceph RBD pool to use/create for Nova ephemeral disks","hidden":null,"label":null,"name":"NovaRbdPoolName","parameter_type":"string","value":"vms"}],"roles":[{"description":"OpenStack ceph storage node configured by Puppet","name":"Ceph-Storage","uuid":"9dac69ed-c1ae-4efe-8fde-211280fa2ee3","version":1},{"description":"OpenStack cinder storage configured by Puppet","name":"Cinder-Storage","uuid":"cd6c6bd8-627b-4b37-acb7-4c2ef2e8dcfc","version":1},{"description":"OpenStack controller node configured by Puppet.\n","name":"Controller","uuid":"bcc00921-af5a-42cb-bbc4-167fa3803cc0","version":1},{"description":"OpenStack hypervisor node configured via Puppet.\n","name":"Compute","uuid":"82cc2955-e734-4757-9c6a-6e6a97b9d827","version":1},{"description":"OpenStack swift storage node configured by Puppet","name":"Swift-Storage","uuid":"96dd273c-f968-49ed-8ae7-9349fdf45195","version":1}],"updated_at":null,"uuid":"a1bd94d6-c8b3-4eee-8d45-25b2cf3665d1"}];});
define("fusor-ember-cli/mirage/fixtures/entitlements", ["exports"], function (exports) {
  exports["default"] = [{
    "id": "8a85f983510e0e2d015110e47e6b562f",
    "consumer": {
      "id": "8a85f98350fe2951015102a33a6d4e9a",
      "uuid": "7ffddefd-aacb-4192-a999-01beb7c2e473",
      "name": "tsanders-rhci",
      "href": "/consumers/7ffddefd-aacb-4192-a999-01beb7c2e473"
    },
    "pool": {
      "id": "8a85f9814c508347014c71b23f4a4775",
      "type": "NORMAL",
      "owner": {
        "id": "8a85f9814a192108014a1adef5826b38",
        "key": "7473998",
        "displayName": "7473998",
        "href": "/owners/7473998"
      },
      "activeSubscription": true,
      "sourceEntitlement": null,
      "quantity": 90,
      "startDate": "2015-03-31T04:00:00.000+0000",
      "endDate": "2016-03-31T03:59:59.000+0000",
      "productId": "RV00007",
      "derivedProductId": null,
      "providedProducts": [{
        "id": "8a85f9814c508347014c71b23f4a4789",
        "productId": "220",
        "productName": "Red Hat OpenStack Beta",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478a",
        "productId": "201",
        "productName": "Red Hat Software Collections (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478b",
        "productId": "269",
        "productName": "Red Hat Satellite Capsule",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478c",
        "productId": "150",
        "productName": "Red Hat Enterprise Virtualization",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478d",
        "productId": "239",
        "productName": "Red Hat Enterprise MRG Messaging",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478e",
        "productId": "84",
        "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478f",
        "productId": "70",
        "productName": "Red Hat Enterprise Linux Server - Extended Update Support",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4790",
        "productId": "180",
        "productName": "Red Hat Beta",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4791",
        "productId": "246",
        "productName": "Oracle Java (for RHEL Server) - Extended Update Support",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4792",
        "productId": "183",
        "productName": "JBoss Enterprise Application Platform",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4793",
        "productId": "240",
        "productName": "Oracle Java (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4795",
        "productId": "86",
        "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4794",
        "productId": "191",
        "productName": "Red Hat OpenStack",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4797",
        "productId": "69",
        "productName": "Red Hat Enterprise Linux Server",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4796",
        "productId": "83",
        "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4798",
        "productId": "250",
        "productName": "Red Hat Satellite",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4799",
        "productId": "205",
        "productName": "Red Hat Software Collections Beta (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a479a",
        "productId": "85",
        "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a479b",
        "productId": "167",
        "productName": "Red Hat CloudForms",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }],
      "derivedProvidedProducts": [],
      "attributes": [],
      "productAttributes": [{
        "id": "8a85f9814c508347014c71b23f4a4777",
        "name": "ph_product_line",
        "value": "RHCI",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4778",
        "name": "name",
        "value": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4779",
        "name": "ph_product_name",
        "value": "RHCI",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477a",
        "name": "product_family",
        "value": "Red Hat Cloud Infrastructure",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477b",
        "name": "variant",
        "value": "Cloud",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477c",
        "name": "management_enabled",
        "value": "1",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477d",
        "name": "sockets",
        "value": "2",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477e",
        "name": "multi-entitlement",
        "value": "yes",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477f",
        "name": "arch",
        "value": "x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4780",
        "name": "support_type",
        "value": "L1-L3",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4781",
        "name": "stacking_id",
        "value": "RV00007",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4782",
        "name": "description",
        "value": "Red Hat Cloud Infrastructure",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4784",
        "name": "type",
        "value": "MKT",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4783",
        "name": "enabled_consumer_types",
        "value": "satellite",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4785",
        "name": "ph_category",
        "value": "Subscriptions",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4786",
        "name": "virt_limit",
        "value": "unlimited",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4787",
        "name": "support_level",
        "value": "Premium",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4788",
        "name": "subtype",
        "value": "Premium",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }],
      "derivedProductAttributes": [],
      "restrictedToUsername": null,
      "contractNumber": "10670000",
      "accountNumber": "5530698",
      "orderNumber": null,
      "consumed": 76,
      "exported": 73,
      "productName": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
      "derivedProductName": null,
      "branding": [{
        "productId": "69",
        "name": "Red Hat Cloud Infrastructure",
        "type": "OS",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }],
      "calculatedAttributes": {
        "compliance_type": "Stackable"
      },
      "stacked": true,
      "stackId": "RV00007",
      "href": "/pools/8a85f9814c508347014c71b23f4a4775",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:19:26.000+0000",
      "subscriptionId": "3565254",
      "subscriptionSubKey": "master",
      "sourceStackId": null,
      "sourceConsumer": null
    },
    "certificates": [{
      "key": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAhkO4+XaEKzzTUno9xsMnNCc1pCtmQGMXMtNzgL+Wom+yM1b+\nCHEAjfpJF3Y5IyXu0deQnC22/aIIa6mRU0ixYJznZItIF8znRXvxcnrJmoiEbDK1\nZLhgcSBZCBk3htc/rHG3gcRh9QP6VQjbKPnA11dGj+vQpNJjj6V9S4jmLdh3/BBi\nqCN1B3d48t7odl/UHe/3W1ALfP1bYKe6xej1Uv5NX90jQOqWdfm5LbRAULsKCJ6f\nnP5wdQAR6K3p03zr6HnJl62uUu0ndj8aD+9bwLQjTWCNNXIapflG2RZg6pZV7L+e\n0CHVx3S2DPnihaPPhbrHgK/bOb8fECeuaSA6bwIDAQABAoIBAFCTphg4kztrppsx\n948ooYeAHIYo8ZWkolCDbCcRU/KqO/TpuU0RnDaYxXLKJaI9aqUOzJ+eI9r1ej46\nppen4aPMpmXF3P9Dnmwp5Q5COGmAkpBookoPCPn7YtMkZxmKZpE0MeA0HmGwAHU1\n+mkN8jiKDTPkXvP7u3qC474IK7PI8zx0WD24EsgukszlGzN4StGbnYcj3Ba73xdZ\n9GREZehrCsacw1g00msBUdsf7r/dkUNauu0EBod4lvBo5wwKYwKkDFgbJnRqVnV7\nLPLyGt0IrjGiwzib5h+u4WWpS5oY8k6/DevuIfJJaQzpALnTeabiOxxveHclvHpO\n4E8I7ekCgYEA/YheF1T51rj/MvN9J9liFphMiP0EXG2brV+XLNiULSMLqJKHhGk8\nVkH0CKIO4TBElxmV7qNqVvwzcOHcgLLY4uO5C/n1Zf8cYAkdty5zAgNLMYeNaEHF\nZfBw6duvF8Xpbr+l0NR/6qhFonYzyuU3enJBAV9QIVLABzGsp1Ft5A0CgYEAh5I4\nH/m1kZLS1NGHDCu9g/ipAHfDJV4m7OQtlD7oeTDBWCmZvhQnRcGjIHm40iVtSJ0W\nYlYl2U+QnwPxLxae7OnCoNvjp2e4ksinZPZ9Tv/V+Q3aJG3BCOkTiQF5N0YdRp/F\nhFx/O8iMc1AMVO9KK7QTeWZK31gCLKN4DJSCTWsCgYEA8X1q4h52uygLLKTwmXxe\nCdeXTwRxmvhsSH+8p2LEARpYiIDJxD3Y0vCPWYnDUot/Sc19GoldSO2Asgzw00WH\ngNYX9GhqbnTIulD0lP8RXOF2Rf8vmhbLx4V2h8pQxPwmlO7HKlq+XO1bJpwgSSp7\n5Y3ejUgUMyl272NJaTYOziECgYBX9B8Bb6nCVfT+KSlqVf5P3kUWjpxGY/zw92Ay\nq1V7OoxVPDgIP17zPJsueInVnH53+6IIDkfj4mC7KX2RxSU6IrYoUkAx3XK7l/4x\n3FCTrhsNx1TdCW+Q7lXELvaLS6u2o/Uq2C+bg5LLRQWbHNuL2vo/aoPsvlY6y5sY\n3khjHQKBgB4V9RXFzs1d5bb176NCcnL4Or+pxcPmpjewhWZdr+O5XNByoEBvUisH\n78G9YpCQ7Fa0vMctjwU+rLpDb9uIg/Z83QaJa7PPhlZcXw/oGYTW4+6/rG+hbK8W\nmmi2q8dF0Ci+XdYxmup7al0PjXgB6mew5bT/le6MLcMOUGc5AEX/\n-----END RSA PRIVATE KEY-----\n",
      "cert": "-----BEGIN CERTIFICATE-----\nMIIKfzCCCGegAwIBAgIIO7UV55+tQ8IwDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNTAzMzEwNDAwMDBaFw0xNjAzMzEwMzU5NTlaMCsx\nKTAnBgNVBAMTIDhhODVmOTgzNTEwZTBlMmQwMTUxMTBlNDdlNmI1NjJmMIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhkO4+XaEKzzTUno9xsMnNCc1pCtm\nQGMXMtNzgL+Wom+yM1b+CHEAjfpJF3Y5IyXu0deQnC22/aIIa6mRU0ixYJznZItI\nF8znRXvxcnrJmoiEbDK1ZLhgcSBZCBk3htc/rHG3gcRh9QP6VQjbKPnA11dGj+vQ\npNJjj6V9S4jmLdh3/BBiqCN1B3d48t7odl/UHe/3W1ALfP1bYKe6xej1Uv5NX90j\nQOqWdfm5LbRAULsKCJ6fnP5wdQAR6K3p03zr6HnJl62uUu0ndj8aD+9bwLQjTWCN\nNXIapflG2RZg6pZV7L+e0CHVx3S2DPnihaPPhbrHgK/bOb8fECeuaSA6bwIDAQAB\no4IGKzCCBicwEQYJYIZIAYb4QgEBBAQDAgWgMAsGA1UdDwQEAwIEsDCB3gYDVR0j\nBIHWMIHTgBR3LqXNNw2o4dPqYcVWZ0PokcdtHKGBt6SBtDCBsTELMAkGA1UEBhMC\nVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRYwFAYDVQQKDA1SZWQgSGF0LCBJ\nbmMuMRgwFgYDVQQLDA9SZWQgSGF0IE5ldHdvcmsxMTAvBgNVBAMMKFJlZCBIYXQg\nRW50aXRsZW1lbnQgT3BlcmF0aW9ucyBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEW\nFWNhLXN1cHBvcnRAcmVkaGF0LmNvbYIBPzAdBgNVHQ4EFgQUH4sIAAAAAAAAAAMA\nAAAAAAAAAAAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwEgYJKwYBBAGSCAkGBAUMAzMu\nMjCCBNoGCSsGAQQBkggJBwSCBMsEggTHeNpNUsuSozAM7I+ZK1QSHjlvbe1xqraW\nw5yFI8ATG1O2IZN8/ciEyXKQsSW51d3YDy2OeQHlxshjxOR50XxD/eH8NUSK2o2o\nfhudiuWvBi1Hgpt4lKK6Zm6KzpmAcA+RbfYAz2EFIz2yD+i04YAyL/IDVJcFRu/1\n42Hu6ChELxBQT3CpKkbnPFsawSHwF247EtpSL1D/R2v54qJlKf80u/xFe1bRefhB\nhbRoFPlJ4ohKlJbCpMpLiXRO+RL1JrCQepHXEtUO8KlQ8TRs204WZxHmNiivp0Qv\nIyEcM6EuLD2W03LTouJLJAY0//6+Nzg37BepidDNM4psjI6cXBQMMqlmGfVK7Sxx\nSE2ZoinMZtd2RIkl/Sx3mVXUi453WN9nFvU2RJya3E021ZbwAy8WV62SoT7KOWSb\n8+fVkRq0c3c/FwVOMI4uLRka1QaWidAxrttBGBcSJS68rNo4yvGAz5ZpSi3mecX2\nNr7uBWVwxktT+OGZKWet/PCXPZIbfyybp8mwFQDydzh5P2LLJy208n32VBh0P0hO\nG2q1Sd7o4PDm2TAFTkNqIdrOPZwgutnLu3trpUReDfgG9mEFioGRt9/cWY+T/4G3\nHhHgU92ehvK7ws9xvR4ws/87iRysziOJx2ZaeIe4zduevdieqa0dkencfQrV2Woc\n4IZ4gxcbv9w5/7jN256J7R3ZjibTxATxuv8OZeN89xm67PaO7McN0uM3bnr3Unon\nqmtHZHp3H0K1dlqHON9/4N9LjN25692prR349I5O5WrstQ57e4/pcU/35N5HHeq1\nZvXBfUDqF9jH+CmujTTnHmdxvf7iwPlOgu8SPVmTHccm7kHi57iwNlx4sRyRWRXR\n4zdYNuevdqa0d+PJqPKTubLUOe3uLPOU2DNxvw4x3/83WDbnr3W7Azv7Wqa0d+PS\nOJqPKTuDvTC7LUOe3uM3bnknontHdmON3uM3bnr3THonqmtHZHnlFGZ3HxKzJjtl\nqHOD2eEaXCsh9kMaGbrBtz17rcMM6k9+3GX/RPVNaOyPJqPKKMiLp3B3n0Dge4U3\nf1BbLSkKHKT3G8PxT/CXjvVas3rjCgH3cb43CCPG5bjDX/2uLJWWf4NrkfNLauN5\nnFudzd0d2Y4wvgx7j742svO/AL78bz+t+PcYP+4wj3G9Pxm6wbc9e6k8ZH4nqmtH\nU1HlFGRK6dx9DZaU9Q5xv/uHOfhB7jXK4PZBM/TKplEyzZ4wlsVXiPpxb+9xvXuC\nwACAo6O/87n7hpniymykQV/jepxy2uYeN57gh7gNLitXjDJxhA43l+JheMkVkV0e\nGxuN99xZ75b0A7jro2I5PLPLvcb2/G59xZ8ytuML+4ZM8Od7gsAAgL7HW4xF+N59\nxHP/GEXjN293R3Zbgpro1xZ8yv3GBXEZ+4QePZ4hPs3bnr3WxhnTP/9U/W0I3SXU\nmJ6prR2R55RRmdwd58Q4HuFMDqC2WocpPcYeOPuK4JkmiQZJInj1s4Ye43/7jA/8\nc3OLeS4s88Zuy7ujuzHHrlw05w09x49uCmuMnlnl3uPSfjdnjfRxk9wg9m7o7sxx\nk5x4e40d2Y437cHvcc3uLTt7vFp3jN3rO6O7McXu6O7McZu3u6O7MccZu6O7McAw\nDQYJKoZIhvcNAQEFBQADggIBAF+U/p4o2brkdYJ1cz7dE4elKB3dQP0P4HgQWJwR\nrk2SHs1pPv8OG0XgEohLMo6Enn0jl8MKhRDXxHiPN/Qtw/NdUu/QmzMWC8vSISsC\n6wyozE863MCw6k4oED+m1CHkO3xG2clMraj1w6b56i4oQwiyDraeXiRGLnjAVRPR\n2E09erbGqo0PAAYRBiIFYnVeImABjsHgz6I8rPtLx4VyHs3vOEaqQuR4XugMpCrY\nS2IvqHOgZrbR/8sQbPKylAcE2WYRFmTNI3DGnx3WeZ+DK64h5iJt7NhmerclwiKr\nfYwKdWgDXAAWGGp1AjmszA/6JWJMbjJqm6n6gH+mjT0YZxuCo7oTsEtz2AOo1hZB\nJgCmxz7yEjo3buK59uiuEbCbVlzx5FGMTgCfkVrRLnjnksidL0mLlGqzmmwTmUVc\n3LJoCZ5HF/un1zRTQiNrQdLYifsKrcJVbuY/kjJCpoeVuSFy9n0/55hX4q21X1De\nEwH6M2oG5ht0GdRiNEiAjSic5W7LDN+e6fPsQJDP3zNQjyFFdh5B95jhygy8FLn1\nSEFuo7MfBt4AdV3n0JcUupzaEK1C1yaxNCIBStuBmfDoH3Pj8H4BX7u9e2RfdCWs\nLDpNkgJSo+3+1ockqt2oijRUiI0FNPCCTsPDbT0DJJkBEZxeA9ZvKbvaB0b67NSV\n0D5T\n-----END CERTIFICATE-----\n-----BEGIN ENTITLEMENT DATA-----\neJzlfWtz40aS7V9hKPbDTITZAlB4kP7W9rbHPWtvO6wd37h7Y2MCktgtjilRS1Ky\n2xPz328BfAFkFTKzqhKoYu9OzLTdIkBVVmaefJ3859Xd8mn98jhbXX19VXz8eH8/\n+3g/Lsu723EaT5NxOZ1Ox1F8O7st7pJZWoirr67+96V82sw3n6++jr+6Wr/cru9W\n8+fNfPl09fU/r9a/vsgn/fxLJP+vkD/8VD7Oqn8xux99X25G3y6WL/ej908fV+V6\ns3q527ysZqPf5puH0c1judqMfiyfyk+zx9nT5qvRT6vZ4/zlcfSnZLxe3v0626z/\nLB+4++PV18lXV4+Hn776Wj5tJv92tnqd382qb7KYvc4W8tW7x8iPbj4/V9/lh3j8\ng7j6l/zhTXn36/zp09/n943vLP9iubqvDuSfjV91GtU/v5JvukqiOBtHYizi/4rS\nr6NI/ue/5eNnT/fbv8z3fym+zqbyP9VfymPerMq76uNxlBfVq+S/Le/uli/Vt7/K\nMhHl00n19ufV8l6ejPwV/98/r+qvlqTR8Sg/yMcsZqO/lq/l6E8fl6vRz9+/+2F0\nI3/x2ao6IPk/61oYV9ULVncP882sPufqgVe/T/K/56n8G/mHq//Zfq/6/A7vyqf5\n8aw+1wd3IsR38iOr59V8PRv9MH96+X2U7V4/Go+a3+6b2UZ+xZ9/+rEW3KK8reWx\nepgtxtl4XX9ivHmYr+6f5bl+Hi/rj47/IT86vpUfHa+eH9f1L/R0v1wd3y//1XO5\neZD/4nr37a+rH7+uHny9fex1dv1vq9liVq5n1T/92638Q3UU1413XC/XtdDK28VM\n/uIfy8V6tj0w9Ul9ev7095dV9Rt8nC9mX19fX882d9fPv86v5fccy7+9lr/p+C8/\n/WX8H+/+73g1u38oN/Xv8RXh53dfWr71UX7yvtyUf5/9/jxfyeOf5GkkL+Fq9r8v\n8p/v/74pP9Xfs3WeV//zr6+OghSOBGkmQ7z47ufrjZficyuOyVEc1XdAyCPXyOP9\nzYdzeeSAPObrpak8coQ85OMNBfKw2TxLgZBPOT8/ZZFkgnzKBeWUC75TLtydspPz\nLZTnm7s63617MDrk2j3gT/rMPRR+nm5S1KiAZLJ1JuJm+bK6m42UlhuyFOv6szYG\nHGMwtm+5vpFf8cZfU642MhOqmDp1oEtWKFUgCwytEVQh+Q6UVFqXTxOyTdMhJaU5\ng5CShc/AIKX+PbMK/xRR7Ar/dHgOyLTZeo5gkJC81YXTOK7LSKHCOXsjhbns/XqV\nAeM76YXIAu70Qubuh8Hv4KI738WmRtCZI7FZ4QZ7jIcJV/qCD27hQOoqb2JjM+0F\n5J+5dJtPmbqKlYyCJOboyOf0lgpuFBE529iJ7mziV0dww78gti+/pcaTDb9lFyV1\n4HcUkrTA7yHFS4lThTLXJGYVuqQ6jDpbRMYTOsBnhPSYIR4vUncA7Bo6lUXnh39T\nbmaLxXwzu0LXTtdiGv2urJ6KIo4BYR/eN8re5I0KrrSVn9eb2ePov/8MAsf6B8d/\njNf7Z43ls6wQ4+6JWvt4eNO1fBPe6x1Oqme4OL99PJxSQxfTKIaCr6Z4ioZ4cqx4\ncrV4Cifi0dnTpngK38WT68VTgJnYo3zyN3FDPnuT+WeopHQUinyAXbmu2L5SKQf5\n8KHLSaLIoXJS8zSj9m3fn+a/z25fPgE4vHmm0fi++gRHfNQ83ei6fo2PvkcFAooI\nKhl1+IW9KFDpBHc+oRsxG3qEgWSiQNjS2kDADGFsUDm4ts1xkXqDTI/v8lCYK+mc\nI7z1r71zdwmo7X4Z2l/aXtfE2g9jjeRJg7U4FA7Snb8aABlJgIZ8IBkoAI95zU2D\nYqStn1JOV2Psu9MjbSvPUEBum/c+kYzSVMdQMqTjvu5PFIthqrvKil6qm+pn2KyE\nLgUNRY5HH+p28HKh9pgdgFLhMJe7Z7lBlrqExvn7/IaYavcJZeAROoJKu7uLayka\n4zukUeoO2CmGiMAosRd71BWM3UqjHBpk0MF7i+g3dhH95gC499YsKVUgxruPjowo\nLRXaQw4UUATPMp+ilflEgVJ8cGUFQDHG3wyADnXhc3yOuW3zC8DmK/MJVjYfxEMe\n23wlBspNUzpG/jbmtfN+nrvayFOwZ24bnxkaeIrBCens8Xdee/Zk3O8itYyTRJC4\nP8eXgbW4nyiTyhX0IZPKIwQokzQqKDLRpPspeX7WBL+f9klZhSTV3HNdrplSbLcM\nAJx4CM9q61IMhNp6RyCmy0ur5WCV83eTm3aY89eHV0WOB0DaJKlx3sFtkhS8/oEk\nSdVOgCInjROgZbCdJIVgh+CtGJQ+ISOUyLQACZuhqLSCNUNRqUGfJTJ1upOQ4NHG\nvvgjteqdgmPfgY9TGnRoug6RxaEaij4qXH7bbHUbGyWpA/tWYlzVcq49BFht7xpg\npCUFBo1m0SrGRrXi/qrEwYRi0kdQjJrGRZDTEi463mCHEaSiRHh5aBuFKO2g7H2g\nfuqCany+IKWDYCNFbAR17FWIJst3ZVHnkfD1/I48ksHshpvRGsfZbs/yS2lEKkNo\nW0ppMzU9DNOElubLQYI2ROCCH6GxiqxxwcrgYzRxgT/SDstD6Za2zJy6aarop1s6\nN22Rs5nC6MXnhutqc3y7NSbiNgq1+4ux/QStjYDhKJp4Io7C+Os3y/W6OT3+9vl5\nMb8rq19t9NOi3EhZPF6hx5qfn+86qaHTONPF9ahvIq+KkHdhezeqa/L+mx9HPy1/\nU16Rf9yOZ+WzvAhiLH90vDuR6o/P1SeMbkf9Se3l+MetfKG8DwK6D9tzGsbl179C\nE3bFWnYBqkw6QkqVMA4RJkNMiRaFb6xEqdB2u2LFkZ6LQ+PdDlJJFVLhG/zcCycN\nlzxKTCa6ngSkmM6FpM7172WkkJB1qh8QED7J741cpProwCBVfYozD9MtoKYSFQ0/\nYy6lrbfRgcSjFsFiGsbhFDqHo0vDWDgcQDYqt8OtPtL5BKhAsbYPhSodsgKJYRQI\nIyafFEjkmS64ovkesM587nsKZ8oDSCWoArM0aboyDD2uIWHo3AGGtg5nfKOSlOKw\nBGcqDwNhaJWL4cfQIlwMLbGaroBmEergQVp/QAAD0XyTjshSSyRNztT0nKcJKUsj\npWGZOdNKA7BraqFYGDacbNBWzScpSYtmG9roo09q3MkZcXqpORq0PJlY5jfJUGAI\nIBAuDIizxM7RZGjonPUJnLPQYLPIMks8prVdaIUpXPoYKMT03Mdo0mdCOw1H9TFk\nLNB0NX2iAUqlwCc8IH2PZTINX1nrta7mtWlT+xg7pUnpGYF0kIyAfKtBy4hPgrJD\na0pBkSTELJrANEe6G8tkc8PdwKnNtN/UJhjJ+IbRUhHZdtAocmakbBlrnsxncai1\nw7Z5Rg/GqCiME355GfCrQZd0IXZJmAytIFmf6uF3PKn05bbdfnjH0avb8FoQ6sDe\nsqeMnJTsOSXpp31SB/DSPtmphSLf1R2JqNJefGPIe2sVRgyixFixK4zVMYKsTt/b\n2y7r5L0/bRXSbrlqdKF1Ig3ShxRYF1Iaa0c87BvFCL0WfWaMKd0WPskqzrR7nIyR\nGKFs3JPLCaUGpnY5tg1k+sIxIanfqzJ5n9TXFmBsO2QVGTFS5aUvhQpmQkOpUomr\n7jJ0n6wSy3F3ylK6y3wAdbmzKjPdFxXuVMdZcdkf0aSxdtmIRRszAcv1aNlC6ZtV\ntjfbormOKVqStHrsAPAeeeuma7W7HOhRkolK9WfxDFTKA5sn3ZGr3CghSd1Doiec\nNI/UEVcT6Jh8m0o5WLUiJEG4mszEQ2aVONghM2Ey0wO5xFlilx1QVDTRFYPeOpdC\nqRioh2ZtY019LpSaBOXMfgZUZpPxvysiDQLyUiUA+JEXPU0zoFVrrpRrUBHtjmP0\n7WL5cv+dFMB69I18xRWSfEhJN5QLiKv/5G06b3X3cfw4a4r2Vv4w2U1VH7quH9UQ\n7EGYfXmkrwgfud1KwB5Z5ALidjyThEbV1KIg61i3LHpWp4FEAtL9n8nkO/ljCGlU\nT3Mih/2DfLZnjQOFOO/OzhN3uV3d6l4CkT7v8vHw6w3jJ6fdcPA/zJ9eft958dF4\n9O53eVr38sf+9izfOxvdvDw/L1cbrK/56mpedvLcxYl27kP75XLw67VIErsJEWcv\n6yMVIv76yI+hkqgH7sPAGuEmE2iT8JlYMoxYqj8tZo/yCMvV586lHVlTQuvmx7Zo\nYv70cWkmKy27evMlFB6C9h0fOsRKIm0vkFZ26ejtTYfc1DqUjst1LR0DtSnX16lO\nZdZXRqf8sl5drx/K1ez6fnl33T7Xcfr2pnns5HOuftfGGecTEBGYma0T/eheEXSu\nGXgiY6wBaysFkh5aISWX65fiZlsB8vQL+PQBJu7qtM3PVxeYDky4HecZ2f+aGHqq\niTf3xDjrjnXHfpl2efPBXW5GN38XQcIKsIse3evBLo4cmn9eCO3ii+//c/Rfy+Vi\nXacdbZSjk0G9pROrh6fxpnonPWrHqsXhFQY5Zc+UI0nwTOpbSbb3LjVF97cbcNtP\nrQ4HkvOtmGiriNGmSx7UVkb4bcT+SQdEpd3SyVHSyfmk00F0byAdT+I8qTT41Uwo\npUGHdArhcAV2LQmFG9hNppCszLDaz9+Pvl0+Pi6f8NJbPYzv6o9wyezwgqDlBaXy\nreVFgBJ7gTFCib3IwocSEztnVaCcVcHnrDr25ZCdlQ8Vgzgih6mIuIeSjyzY8pFa\nWZnlI70Ql5Z5y05cQFa/cJzV10mGmNX3QCIiAvcEK5LC70ySwjPjpPCs76TwO9uk\n8KyZFI6TSQOfucsKI7LA7vO+XmR69aRwTpOTaBDVNvtsQKpt+EMHU0IIrTNwl1Oj\nJNM4s2iBZmf0hKZIGWGyzLDPdiEjndOmysgDry09ChlHYRwKnDpj6ITQeHBPEmHy\nqMHNs0Zn3VVayZ2WVrQJSlJphdeji6igYyQIiHYd8QGPmh9vByylHq3O6pue8AkC\nTWMBLfh1EiZTA2SGPIZBNdcDg57GKU8eo5ESxHjZfS6Qw8vuk4DhCCXRgx+z0lRH\nGgksUFFb5c3KVJ5v2VF4jiTSjp8at7V1yOnQ3GYsj44WN4cljT673qT1Ihc0qNYL\ntV3ecUEDtmUBDQ01KruQqyFWdvFpEoVZ40uWtOxa6MmSOALHf3hbjvjkFLpkBN34\noZKRv8xXm5dyMf9jO1WJF9Xrhk9ar5vgBZa20vEuirjo6iADrMMVdEMqEkpTR2+i\nJ9g6ZTpAZevMMy6ArRssLaBuHdZ2tjoqyaKh26Eyy4bcDgXaAIGbiAqDQAeVIeuu\n2JpLA86QOfQifZZ0pdbo+ES4KyHudUKZgPfgwqfwDCjRUaMtEUukgnPVAVqmtLUd\n4cRjuysTwlMoxzKh+0GUY5lw4FmUfEI2PSYjhl260jFpaK0luIHDMIiOVOnKqXZX\nq534oEx/7jrTrxMUNdPvjWjihD7cjqn0YrP+XBn+8HL6QghtVyLOnzjqdnDQdqJX\nE2prkCfCSRNwNJhYFsO7Gg5YhiuMBetw0jji6bkm4IWOFgA+VG2FFzxA1dIdkRPL\nRAoctOK5y8yAhDjBKlocgVx5XB2sztP8pm31PZdekgk5d0lozUP4IzbfE64S0I0W\nqhp2MFo/rZb3L3eb+et887lJO7rGD6k+Nx5hjbp1KtR8SbizqiLKG+Gqo77M7oZM\nt52Y/rRgareAWyXFsLVHrjpjUJVFQe+yNCrVo2r0LMX5MMdMkigz6f7ubuLTWJnS\n2Mp0NO4NaGVanXgSgybkg8SAULho7r5a7lOZXN5QsumALmh38bW0Lb52XNe+i69u\n200lxuQx4xiMSUSXzLgyTHMvsRBPv/Axs4GFRYfEBhc+OuQ1QgJKyWTK4kZaVSrY\npRyrVO6dy7FK5ZObkf6bg8oJHRlzBcPBxr9pnHKEbVhuLc1kA5exMiDX8sBaxTm9\nMc6kI4LaCsHdAxFY3VBEOblxBcokdQ5qzSwHtTqySr0NarltW5RRTAN4OYqzu6es\nS9spaziM8SX4FkJoL7i7rgVsN8mxd4Grr+TYwRBkh4k2hnRHPoNnzXQlK5iIJlgo\nNjFg0TJhfULMhzjarYDjefIpPknjiO5ATLpJEIzzjoSA6x8Znn9eX4Zz51tgMhoX\nHdawP/GCkiaZTHnSjFCnriYHwknMG2YeMZlqt/o666XGwy1XwTncVx0e3EozPcu/\nuwERAkeEs/0Z8LhIiK2Hgp71MiqUYwHy64YNGb9uwoXEQqTazJc7VIBuh3OoVjBG\nCLZFTmI5PYZ2F3tiyiv2WA6ON30KX+KIzpvprHKM5u9oFZDZmDxadeTQOT0kEiTT\nmFORIMEMOmOggrFgsGYwjWMOTkrCHArb5El4gC/NUsuBO5e9qu7SoTA6D6nQmTMN\nBOGXnXRUOy2XneBKnuFFvjG8Msh2igsrL2e9TuAMVzhiakCIJDoXzYfn2dPNprz7\ndfSNfMMVcru9aqF9EoH3oP2y2tzu7kEONR8s5UfX1UfHt/KjBNFWP46U7e4NzPy9\nt9tzto+y4LFX/XkXSBhxcuxkRHF2+oXyxPsCFEZnr6pWwFu5Os8egxNOjp5q0pAn\nz44OXB15AvdEd5oXVHDj/LrDxsbrq682OxBG67z6pEvv/Lp7aNrVdx1qku286xi8\n5Nq8wDfdT1OjhEr1yjgIxG7PGwuZThNKZ/hpklt0f9SXAMf/2bRs+LTombwDYgAV\nmX4PF+5k3U1nt1KfbjTP3/nsr7iVVznPndDJddvx6KqUwnz/WH6adcWb9c+N5/WP\n4SR3P19vTmxmvn1vQ2rb514fnjt0j0hEZ8+te5q3FglqX7bUgLqBuWohHrxxuf5N\nvhqk5Tmd0C98gXcchWPHURg7C67eszQGCSdxfF9Ypi8nLF8oa3IhFF9JmtF31B3u\nOO56k2/2mQCAcsnQHZZRYcMldKwTbk1G9w0/Vgjt03Xnt7pfAs6WZe85t55PCVXf\nk96jt5/kge6KWi1WQlB2s9dxWX3YzhrpClP7p1+L0Aa8EpFBuY8uFTrEEN+Vawny\nZOwOJr139YyPuw8QBLL/yKlQTFe5+yOEFEyOdNVu26XAFvzpTk21i4EM6fBh+Bz7\nsm6qNJeY2nQ3UztXLLpWCNYt+LYVMYmhbEnlaEa/JL/UYHjU2EYAZHdfk9ff5k/j\n2ObkdSBr++xwdm8KkegZKIitrVsr1j3bcmw5qU2XRQAXyHSLjOqge4yO6ujhHGsc\nF5jHTgVIO38mid2dPtt0ohNGoRWG00pSQw491JIG88sTqHFR4wGwddaDI+DzxDt/\nEKwbjsUUEsK3i+XL/XfL1eO66S12cugWwN3HnXpYWir12e+ffh2cqYoL/Z4f0A13\n5plyd3kmgFPZC++bTOhLfDIVtgfrCJkm50Rs11SU1bKOxFO/9bS+nIFq8EAkNtxD\n2FQHS4YjLNsjRGy7ZOygQcBwlMlg1JkZCmsyKknpbconVTJM1577Xr1e2maGQppp\nbjMio0io4jorT9OqVIEpTU9h1SjuQUoiTUBT3x0xZ8cgDTULyFMHVTlu2zqoZ8OA\naWGjNqoUOEZvFBlwp5bOcBImQLs3KayYnlQC7Hb4CtFx9P55S+skMkEufpu0AKLM\n3nkPoH0hyfsh6CF6AZMoJg9NN5rXwN3htrJTtK8NuzV8yC62wmbfuMmqPss1ffj2\nn9D39EnZkHnCGrJB1mmL8zwOn0zM67ReyIO+FU7d8ImIZR33OFx+V0MqwP4USrUL\nBczVNS+34LxR+bpoaJ43bB0VmgMonCHZ5hPIjvMpYc4G260IxqeqxkXembZWD2O/\nVADsMFrZ9gj6G309GFkI5qsAB1YFSNKcXG9pgC2g3lK4rrcU5HqLBwBKGCyhadP/\n1CNiOCKm7ZyYCyhbnKU1d8NiAWJYIRJtCpPIx4SNKoypGwlRRciUqNMmg+2v87tf\n1zJg3SBU49gA8R/7T+ktfvPBLq1987nhWHsJmQhpDxpkQjZFtzETH+VFCzQN0pY1\nBHaKc8oqR0DAGRoTZ2yYWF/1N8PEYWeY0yyHxHuzWa7kuYz+U8r0dTb6djGXZ9Rq\nmtfJcfxp8bKWd2Msxnf1p8byU+O2W6PKk+DL1ru3BlXDlvpGKI1i9Q1X12nomosq\nNosZ9ayQPZnot34YtAlCXU+tBkGrAmhXb6BXOZksJx8waa6Ea5rEiy7WOC9suC1V\ndXpglOS8Ts8AxfrfsjjgDPUko9NjZAgNyFxpQAip3STNyRRKqkY9fLPRoUmPg/2w\nr+a8QVsrCwtaGOK6MtNVZYY19IGZNCYF3adqu7dIjVsMBSR/e7aSNCN37ygz4Rhz\nw9cKHFT0lEYQ3rl5uV3frebP24BpvZ5tRj+WTzIgWSlHZ1Ggp3xkhDrHrzsuq687\nftx+3UvHPUIk2iKH0Xw5rgTbmjJnrMD2vJl3SBKgFKxWEZUSy1L2yDif26GYAROV\n5Va7EAhdjJqIkVNeNl2M3ggoSUEuAuroBHlogmVc4mLZCOJp1jB/lLrkMX2rr0se\ngLZtXVKHr4l1Sb/ys0LE2vIkEUMQ4YN1XcMb5OAS0kWJDf/cvm8FtU5n27ZCHKKn\nMByHd/xpPIEC0u75SNu23jexi3rfeRtRezoypIA1FTkYsELN1uY8TyzkpnSKoaAo\nJtRNMO5qtlSHcyjZMnqcwbqFndRPcnMiF7VCHQuy7svjtcZ4j6viFFyioyd3yqBj\ndUPupDvhU3In7w9bZIKMmkxmf6lDv9zTvj06jyH3fQj9ggoiaQ7cNqkg0GGe37ZZ\nBx8QKlD3BpHLPx2tQSTuMCtBdrUGXSCgUw+CEQZUaV3NtHZm7j7mHoeLhuhelsZV\n359HTQBh+YkZmBE9oyZOopi+zqRBTKE8ySMjhUkvkoKKYrBegBNqCBHpR4UI01qo\n3eyNrBfTrFZI2RV5T+l0qOno7QmBiua6lm3wZHJry/rWvlUQqAx4ect1q/+WDGJU\nG0MIEz3txjnOFba7Lrp+a4GD5qkycxKps+ouQI3XKhsyhPFmPcB+RfYxPTWlUi6i\nXvHV2AdSKZcVqix2QxVEoKk5id3cEtb0TxQ0LB2rzVz8seMSJbdDyyVZYmDPZYDj\n10lakLOU+nZtOp0n2yBhz6yeLjtPIno3V6bwL075IvkmC72hinSUFtYCb2riAtuz\nwtqtEhqNjaCkALt2u0Gnv3f+LKff555Rp5GKzeEfgTESEXNC4cBOXkSJzdHvk1Wo\n5iyrY9f2ZQV24BP6SlYDGg1e7owvZ5lMlJgkFE8ZmYH8t0VCUc/I7Es2PKbTw5Eq\naFxlswuftkqimD5uW6fK4Sy5xcYw/xPkIqITf3espSduAnaWI+9aUv/FJMgn+ZSs\nA2ccO8A8tPX2PG1CfGC9ULNLQeAGZpfSagSGXoqTK/HALxVgti7OJwTYSaN1oxG6\ncVO5fRldhHEEkrbbpvowYUYr02edkUUl+gah6nMSS4jUZjElbXfcec7DLWFErkp9\nhDcrkKQUs6jcTNFds3A5P3uxE7MJYgNFN2zIsdMzex8+djCZps/C0pko/dEIg5HN\nOuEBb5+ywGbeLZ6yzYqkmYD6rD48z55uNpWh3xZ/ijcRlmAcYiqbPa2rB4/lI+1L\nQTrAfHzNtiAkXxYQ475ILMtxBrt4XZPRFMrC3GWTyIH0xijaP1CD7AtJerUhFZI8\n0JWc3ggCcI5ifLluuSt++N+QfvTyCZwkKqbvlDqxd938i7YUpAW97Z+LXDE3oK0E\nrn/34Inb1bi4O+/FFErcTC5STxo4VIYZHi/OTOIYLQ8udW0NDcIwEv33hmScOkmb\nqpHKShiwrTFPWAxJuTagu0wTcGtzN83OPjGrI3Q5FpMUBDtW+dbz0d82tU6YYxaT\ngsz9rR97waTBFZ3JFhxUuAmYYPPgMZ2ZXdnrR8p+syX7Ak5+i4meiWInCc2azI4d\nQE0wcFiWyYYFdiszQwICSaSnOe5OsHYceZ1fNT9lRXrVoXnpM6+apPROYv3eB2QW\nyGmRp5/0z4A5OhmS6NcRUGOS7jSDE44GOA4ZOAORRPQZxm0nn8aWGLZqK3r3TAm3\nuk3GW1uTUbZNRnPhDoWv93gN9Xy9h7toy9eru4Ykvl4P/N8EJMDsaLnDgHG2NpSA\nETeZjwQ9TMaAqDU2wxPUnAhwQSrQrADyIbbaFBgucqNBIcwAP0kLm7nvxrAeLqe5\n775mzGnue69DCmViMYUSX3pWUGTLToMblC2GbzCEhhfFS/hizjaFIz7ga6oOsJM6\niSIyQ9I5xZQeedvm6PUTNL21SrXxeTvW7BPZx3lBDoz0220ohRb2fTaBDb3Ggk6J\n10jJn8wjAPDpdcMBml5DBUtC6A0WkXAYFX85LAHDJMPBxmSTgjwMoK1R4cfCGZqm\nfKxWDUklnEaOl98RWuL2eynZ1hh2LMG7/La4CR1NACqLYlNiaeHAae2XRuEe55m7\nzgHMcKTbZXveUWcOKMo0nkCFwO6mnMaWJZztZdh9Baxbouy+8iYUEJGwWWjZSTh0\nyovNw4gdTGN+khQ2/L84esyDLXNMj5mxJjD6BoX6aSIzUIjGg2xJ0859yOGZJekv\noAwFelcikE1128QJ70cMxl7FOeizDUgqkEkLd3v1UDQVwSYuEhHZpPKOTgXpTRy6\nkTDzd6lIoaAEXBlq3mHOsl/qwleGKivWmflgKqpKzVabDqkinYiU3BjQzbFCW7Xg\nGAMrWVaC3bWQRHTP0aicAiVTR7VSV+YojAppEsUGInkHiGRmIRJFK3o/InlnLBK3\nHexxNLGpDDle/MrN5hUmJJOWzGQf3ltgH15psQ9PYcp8YUxNBLiWAqZ3QvKkNhon\n+dYeWVBBeuOMY/rmnBNaZpREuCeOv5QZ41jQabn0DTT4hoHXDTOV/CuJJC3wIHBC\nyW91bIjG7vze9y3z7eCxIY32y6fHRUTAXdgd0Fi/dcg+cnqtRvoxWL+VpPTGKdWA\nJ3H3G1eErxz9DLArOhb0NTKQf0IZub2D4muJeTVBeYE7qigiS7MR3nQOqpfW7IaK\nUKe3aXVfEjepgJn2oaJAo5qM4xJS1wZ4tlE0SwQXrX6qWnQGZrEtyGGR/u6cI5Zv\nDEhFFRugExRRQt8nouhtev8oYRrc3TSvf8xYFNr+psNzB2M0mNAHls/WsgB1TraI\nKPQ4KEnpA/pKCl1M0dIdPxNIpxtSGTPuYG00RdM4GM2Dn7+MGn+cgp2t1C4/uL+v\n786+wAYPJxl5WJe03YhLab4MjUnSwsbXQEuXFQwOrNwNwTRaJgKsMcMVOUIpjrcG\nF5hJSuMpePjYTmMcfYOi4dhFLAf1HQcYwUnFAHstQXIfXL+xy01ECKKfYPuNxSSG\nmLP1LKUo/TjQlPIlOHY8pQFqhBBCvwHbaBMOlrLR5Y4If7ga05wMSLvLV9S6FUfB\nKhzgE8WJ9jZ3c2Xqe7Yc7bn2pV0rTsFCeCerF6qW0KD14qt4N3i9wq13i4mh+0MS\nrLkj6daJgUrS7c3ZCxGnWmtBpM7p8H0K5hxb3wcT5/i0NjzObHajnHB2k9YC8LKl\n9L0bYMiVYVFiwEH9Ts9BPTOb3teND3hOWy862jtxhsakOffE3vC16R7NzhfTsJuK\nlMw/0jG1iStqcjVoQDOcF92goRrJTcCxKfTGJxRtm45cxmrLELT8KdiUkYzyyM3y\n2yAPZGe1CFa8I2a1DRTzgpzK0LOr0le+2iqAV9teXXqeFITT386eHw6J7K19it8I\npw1kq4c7+ZKxfCx791j9ol2g/4be2u5BWkqKDAILdiLD0dyfSIytJ+dEYCF15iST\niT4lQJvhgXIB+5K1xeoieGrHpzSAhMzWPc22wMoVJ243Xv5yJt7SwqojFr0du1Bj\nBJc1JKON2Fx1JCFibecMldQbOUz45MyRw9nJC2iiJac09WsIaRNqjmL+QSfTBlxP\nmCTCfFtWk98ME9EcqrJUrAXSBYUXt0hoZcOvjVvqpMBXXOuaDXY6+WbG8om+94Me\n4isdtya4twC9uLgeDXydIV71lbfp84f6XxWXnZUCIEwynziNwIV+JhsbkDOVj+wc\nKfp2/i+mGpMkKZk1QOnUUUJlZAEMt48FTnF15K+AzBXD2JiyaOxBAirOKS4Dy5FM\nIFxYHblKmIkXVnaEJe68DMVoVb+dC68kstjNilOwK0YxJeOmLaawA8O+uxn1wgUb\nli5U7HjOkO0kdszMYke/oJwQ+i4kozYaUv8Ma+NMH0NOAwI0IfTmjprPxCYyWTOY\nYcZCUoG0eUvisAc4kulADPqRTJoYPMB1UgG0uM6o1RirBVwTzIOowoClLilAS99z\nIkDarlVels6hFq4OuguQPimkbsLtzns2gyiLSiXAkOtFujNOIyh21U8WZcj41Olk\nkU4frCaLPHP5mb6SbBBokkJM58Elr7sfMrIUU3KlIFdJCVWWPCmO8fA3GFTHvMll\n0vcqaptaoG1xrbIYA1Y2WQ7rAV6OOyIVOkUWlgudjamhdxp0p+32iclQ9Tv9UPXM\nbKhaMfw14FB1e8Arol/Xhv3eM0Oiyk87ekgXc9XnvKw7jsiQ61D0Bt5jUqO7+dCi\na0FnngfuM4xzcPzcoNwEJicOJSaWHF2jrBRmmk7eYaicbUEQjCPuPOcHZuTwPKcH\nDmloIEUsQIIa261Jvzj6Qm1mQAMMwuLMpjP0pKmXwlDAyU1w4YWlNM3AnJPVaBVx\nqIp/nCqcEA6UDJRgxeQyeCk+Lp/ZQ4hEizWINXUqKwXnLqRhCCncEkOB03IgVSWy\n48vpVkUEWWXoOfVJYb6/4Cw/iKP+aKUJGbcbtLKFoctJCGHZdXLCbYnteXBb/ein\n2WHI6kdEb4bcEnpAq6jMY1Z/tlAZ5CbbhI85ee7q6NIxEIytiBRe6UhEhZs6Hh4A\nu27rVWWFe6/mDbuK13ynxHnlCbvlkM+nD7Xg0GlCFFxaBIDhQuW8x58WL2spyrHY\nA2D582P24RPybgMPgvkkaq4sIhUBu9qk6loguTuqsyRI7YhirgwmE3AdBG4GlDTD\n03IJPASBA6+GHrQVVFiSc5yEFUjGLcdsnuog4wvI86cCRMSU5aooarsOIiLO1aqX\n2c6rrPuDC3NRjCxEMhbOnanhbguf5OYuj+DmmOdTvzS3FtNXlxBT/3wJ/+DS/PLV\nt6vySf7A9rw/VF97+29ULfOj908fV9Vc58vd5kW+p9k43CmnH3/+y+jH2Xpdfpo/\nfaoPfbWWdkX+8NX2WKRPqh+pPJ2dHORfHcwspZu89fJRYrGb/HH1afy4f9I4YbxJ\n9Zuuk/Bu1NETUpKpKBFhEM6phNiSgnsBBZgcTKcEC3sqGezes+1vvRdLwaA6qtWA\npmrjAVoRk6ShMGBqoy0XodaY7+RT0MoixtVLefREXO+fHZCeTED6fao8KLZL8Fkt\nfEOqL6JIp4T+4C6TZWSrmIxUOFnXVD90TPHlGaAJmc6LM5QjaELwpgQhjZKx89YY\nJTqsEtywisDW7o2NkkpCSDegAC8N6jKCXJ+VRO0ujD1321106AbkNBzMKehdR0hz\nCVIxCDlRlPdA5eXcRxyQLwkjWFd6FX33raFXMcinCPZ8ignB39AZumZt4SiWD6vy\nbjEb/bV8bZaD9qdfj3LK05Pn9rdn+dpZ3e25XG0cpN4KQd+10J4xVX2xqvjR/JW6\n2UxmL+vx5mG+un8uV5vP42X9yfE/5CcJ5Xv5ENwMy/HpfhCcJEVK7lOkSwA3BKwX\nBFmXTeQRnDofir+xgRoVbtSoYFUjbSWRrkZc48bShuXkw8/cHH7Gevg6hDKsDVO1\n0sV0qmz69e8un3dIwNxqYa5/OImfgr6lhK4nKDTP6WkwWhOGp1Frmg3FswMZYhTO\nWoYYvQuwKiQ10IaAyMZOYlSPV+d8TjupGIoKq/UPNrLCAHJeJO6zrJThdFxvHTqR\nzzdbXn1kjPz8fJenNXis/3R1aL2S/yj/ey3qnuvqN97+w+/KiDrOIojn7d/lwS+W\nz/Ka1H2gs40M978ZHZOTEOPrdgzh9NLshg3uN2t5m1cPt+SUpfzM9p7sxgiy62z7\nptbw1Otm+517zun3sE5h+2u3qEfBOqWdKHNYlLkTUebX+RckylwhyiyCstZqUTrU\nRzZN7NFYD6SGUL3aVHZoBWRTvUuSnVLvwDKqrTf8P8vVr+tNPRh5Ksbfjn/lwi82\nHvfFOcfG795WTSijYOshCeK19JVN8Uqtbbz4i5BxrpMxvFRKLeNGEsG5DpMTDCZK\nPEiSaDhdziIztEuQ8zY6PhXxnvHBgXQ7Rku/AMGeT9/AzeGWMs1hmeZuZKqaSrx4\nmaqoJLLIzOcS9BQZ0ZjLFBfYXKZM1SGOmY91qKBsmnlZIY5KH6HpNWsbSwbBbvAR\nBgVfpo5qwXA65cojGUi5B/FelvJqkS/Er2WbpEACX+PYFYd7LyxiVQHeLDIDvCxR\nKm94ekmq2ZFg4lVNNDyyVU0AJF2YaqpxElcaH21f2SzrZemiSnbMOUB0JcY65gQK\nMpeKZw8xZ4sh91yON8uPm9/K1Wz07XKxmN1V9nh9PpNwheyqUHVIpFEOXSbll4Av\nUdFeezJ697cbjUlYPazvqg6tqsHGfZda/fTrOJzO0DRvTgxVv245f5qt5o/lJ0Uz\ntfqKfLv/1PrPOJ46QDSHb8HAlFlLp/UCbikNRYI9AfGwUppY+ISUJduWp70s+5qg\nHIzLHIxQrcSYtwf+QMOZ14aTKlVsI2LfQnWCbqdgpUUpIVeFlr1cONefbKXSc9v1\nUCugIpjO085wmkAVW43zxYw6solGEuKyhnx20E8YqVYakFHdygiaaQ3bNMpAJtER\nMISqyMZBGAoSMoLBXvRlqHWSU7An3djqoQAGI7K4GLmppvwnYCOsrWlEqR0ft/QF\n40M1+oAKwbZ43wSEsNE0hOLq1KGZkatzVELai4eNZO0ScyDKGb96dyU0gvn9/NPD\n6O1rOZeymC/mm888hDrKEUEdy04sMvLQdtfvkcO/SSfZ2UN53EnUmjXlyug8yF+m\nbPwuARICxlFKJk/okmGGkWHXHH5TiK3hbjYChTMpBr8BLJ441cvCpUwLpzLVoTZr\nmXoQy0rzStgf4Mi80gxrDya1jp68tp9k6gtr+0kznD1YTJ2Q/LKLsXAtq+qP77/5\ncfTT8jdnLq/643P1PEsLWT+DwentIWKFDfsX6vz2cXs6bR2EuCnc6yASh2YucSha\nmP2uMnOqohmBxN2Rz8PqZu4UuqA9YBikXsrtwCl5wbMre4tWz7a5NdZQorWFFdQ/\nM5vGBXnpmXVYgZRj4dLMooOKkOrKUhkdO0m8MpLVkF8BTxCrj9o2IfO0WWsbTc96\n0DB1YDGgOjUUqsjPRXLeLm7cY9yRd01Tg2kgRzMj7hP9p/MGHgOaKegBzw8+cXL0\nCfvZJ96f/gT0YKrTr5fkOiR+SPYLqe236aKkcqmTGwpWDwPtqqXraJSqlqqFOHXg\n4wsaqJoYeKadirqbOk72srReGY+QaN/LVQcR63RC51BKXDIoVSLlW400vL11IqUU\nHEAztp8obGhrP7EA8UIUTekCwb3yGhG6ZbbqD998OehmktIpVoiukQBerV0jCrte\nmGtUamxGd41ulZVvNmpoPXUTs0/oVBuYmB0HWrjRik8xuxKTFIzqgYrqeoGNYaiH\nGjTS1cOxU+rTJ30BHmk6MUmTuQ2/rbvCPYy83SRIMjpxPDWHSciQ2GN8f2PqYZiJ\nCwM2KEdMUKza5jvQmII9zzZWDxdZsc3ChGT11C6JrhWE/CFOOr3ESaHkD5WhrIGU\nXHumXh3Tl+OWJuCUjxZ2OMUb3EDjkvLDSngBtseey9FpoNaHiwvQwaUG6MNx1bPP\noueFRdFqIE/PizgVZh8htOeapvZk9LUEaE9GKKBwl04uyZMpx96TunByylhQbmaL\nxXwzk6KgrLlVErKmILvv6euU/bKd8yG7m1GM1/tHuSufFo27cXi8vD19zbJWX2gg\nHpJUNHkHq+9gKrz3Nx8oUpuvl67FJR9JltLDZvMsT93JUcofd6IGHaMY+vO0RiO6\nU2WfvRjw9gt4906HyHKKyHIGkal2Alyk6BSRgGhRypMNV44zXAqpWRguSF59GjD1\nkYKMmKgTRfhxxcG6aIPqPt9L8+dqGVo4oYYMicJjlBovrd+AspLYCyQWQwEGIlRg\nAAmXISPl+FlSU6djCN9OBLQTj01klRRg05v+m7imfmQItgLgfDSKw1WEj0UGdYvo\nRel4nYL7gMFnDkFXEownYAeXvQSRZJC8bVwXJ01lm3huro+uty4wjwFcqplV8SQX\nmbmSujWwjk2rd+zWDu2qERWym1JDSwUZde8yxKeKYvKkkYgx2v21Bc6uF4DVEqVu\nAUOporebv2xVssGVrODcOBPED8vyfvRNuSif7mYrHp7kDkpkyGigv64tHfLitmc6\n5IX8RW53v4fvpWUlXRkYCrmVXVc+Uis8Nt65lvTCbWIUINByK0Sa9JjF5lOTtrLo\nH08Vu1k/PM+ebjbl3a82Oak0bW6QURdeziR/ePPop0W5kSJ7HBVvolEjmfmn7+ST\nzgV84MFayiesqyeM5QfH1WtdLyA5vuFeHvLdZil/9E10vX9VCNxzYppAnRhHSeQn\nAujwcAopyE/zreU8vOZaviYo9j8pAaiirJcA5ezZT93PrXGqvgu45IW1R/Jfr8oq\nJikX2562lni6YITGTi2f60YzxrVJx/ft3lUbrQBZ+AXcCHqUWnaiOUTRyI/3IZLr\nLFRR5FDZSSOKvNON5GpJsLW6twXhrRtRlfGnCcRPo3UjB4v2vvrlF4sKahP1o3Iw\n8/2nezFe1dtqtxOgukhETF4DgwDENDxW9IPHCp8VSblnD+TFOIoilRLoVBWFAUud\nuBLYgqUB6IbSkIkGOFNHi3pAjI4Jc/aY8GCgAosHoY4+/eEb+Iw+MFWgTiIuwCrX\nURTfSRy/fBz9tJq9zme/YdqLl+uNVL+P9ef6AFTbN/nrClSFqnRKzlhq3PQ+QWQU\nvdeeevcAXlDVymMFE89LowW1RZKwrxno7QftBiOUeJJCSZajUESFo2BrJXhN1KfV\n/I8/Fp89PWO1gSLvZELEEQZpqz78eKBpqjgDmWOPMnm3Xs9+P7pxWCWetz/K0Yhy\nPPlZ9a0uuCElnZJbAyh+3iAu33t7/gC97fO9hWcqt1806fSgSPE0AYyOFDPuSLHO\nNYYUJEp9IW+mNqqf0BVnXz7pQW+a1ZOQ1Eb6IzxaPvFH2LBy75XYGs5PfdMlN54L\nmHpeX1whJifd1Llw5RXfsZy6yoJPDiMiTXoHxTHe7MHEHaLOkOyb9E7k5eyIoIji\nhdjDID8jVBVGy/WLvauDVRz8UT2q49/2+RlYMvnh2WP51Is1270rSIuW61e3EQVE\nlUwvIvFTU1RzSFEB9Tif1B0pBUf2SmMw5ywvvDapT7zwtMaV/bXvpdayvfzeum11\nEoa8w9ooqDQJJ3sLJP1UI3UUiUfCJ1Ekgu2lHUbyDbqexpFfwMCrVDTyMA0l22lQ\nPTikO/toHGvlO31HbOpeS3z+5jQdQMkDsCcA/DR26g1x+CkJAfWEnZQ0+whQ9pVN\n36+7Ghfju7xrXEyDZWk//cSpz1kUZdKxwHcfndZWKF317O30floZ9TwDvvfu9Mhp\nmUQnTfS44/f20qtb7vAx+GnLHdrk73ru+klM1U13AZp9KQq82T8VBVoGfRy+n/ZH\niXIEvs4kAE97AnJ68LB7jOOtwVGOXU8UXIFU2owra3KMRGTk5AtmNv+7cr1ZVdeF\nzIbxcfdJ8s3Zf/D09lwKF4YAoz8DSdEJL/i812WwXQgQSZiIiapFbGY3eCVi4ALa\nklLhhcNFIHbOO8IsmAEZkRORkycpaY6LbBkPnotsImmuK2DTyMADtFU+srCYeTQH\nFNiwSknm16AppYE2cqlhj9ug3CgfVLYzwSV4eXBjEU95to7HTx7Ywdo+KjbkZYQe\nAiAOYPIaRq+Oy06E+e1i+XI/ev/0cVXZlJc6IsdG62oqNX23Vscru5pV7tZ1Omx3\nOwoXaeFiezFbPKh36z7WCxlJ9G4+zlv1cX3LInDGWvhxesgu6tzaU/Y623t+2I10\nhnqGR3Pah2zv+Tqm6iXN4973keA3Me0+gTnyueEept5POoNAGXTQWhOiOW6qKSEe\neiDWJIMCVOjY9VZFc+5k60I8+MAMDJTZhs4ff/BsJ+5hDen8nKGoXuc1YXfJ4yeD\nONRGnpLkHVVe8eRU8d6Qcqoeu8Jm92rUGXn9Ml9tXsrF/I+6jdgGscdxRKjXtN87\n+l5+avUqT1RHSnIMqx9mrw8cwXX9YB9VRZN6SmNC3eXkuH8sn8pPMsYWbwSui6w6\nnMex/HG+Qkv9imv5Ck/hjibNEceEPIdSDI/ymEZvP8n/3q37oHY7VSc3fvz0uBmX\n1VNYdpi13nDdn4wG2boTg0vbKTLFzfOdCpGv7HwuTK9hrkbvEjDIQ3mbAs4pFm3X\nw6NdDxetUdJKEiaV6VbSwD6yWcbLIA9SDkJRxs1BIWadSpfphGeNPzK0WfQWh2Qq\nn5WCFEEog7g1h2rOoFxhCQmEQYTFcJVB7IsoaJAVmwWlOqlF7zEmWqpwe8yJ2Hva\n4OcENhTWNqw694wA6qrjz5jhXCWFLEQYJ6G2OYxTQG1sLOvUo+CBtrceRYmwU9vI\ntlKVlKgqaQ+qkgapKhPKakCtPBKiPJIe5JEEKY+IwpmtkwfSgTOefjjOW544WEJH\nHTkC3VZnbsOFCR36/tlennNGWdqCCfRoIV4vwZ26fc6DSE76XXM738psEZJabCOy\n/ea2nOSqErArCnv+KIKQrQD4+EC2EvDdwSrpDRMX5v5NjjX4b3JLk58rSsVbhJP7\nbfAnlIXFXdCSUktM+GuJib+WRx1xuUhOpDQxpPxiSIMSQxwntoHWWbHCKDHB27d+\nwTVddeLPNtG0S/xhM36sqb5gYjZp0yyceBtOAYsMtkCKY4FBv/UIF9gpSWMX9QVB\nTBZxcnwd+4N8x7JKnxLHTtQAV5njylw8+A5jC/NDbuFYZMCQcOaIJHr1+bSlZbfN\nEu3QKhansiLUYDyqPHYnYTE6D/qGNRP6xu9cqGgZbutggEwfexoT8OaJwmoLVLZu\nJraZjPPYzSBq6yVeu4xOMyVxs3UEvkv8URIhuYtESFcKMKQkiEiyxNzLKBpsUcGb\ndUfZeVvtxXSRqaxdNLWP8kgRHn98573XUdsrF9E2dvXP0WC5kEaXxQpQFjIsAScJ\nkXEJEh6nrPA49RseF9atAru0KsVTZ/wliywobx1nlPXYmI6NLkOkbdywN0f4/g3f\nTZOis0O6CRdlVnC5xdE/sDmGYLIlMiB00MWKIN07Q0rMhHsDwaVBancJyCxCCkUI\nbTmOhHgellya2NTRCYFqG+7tp6VheunnD8cMRpRVWPrOWQJKY8doQSE0GZaYK4PC\nhqGNl1OrdRkZR3XTpzk0a3cpYCTD1ubpp0FST4QTiMnpE+FGxRUmbz9o4DLQpLjL\nKkwG99BpQ1I3PXT+zYyzi1U1Y55NXeps1uXKugXaiygvw9mpJkzi2OXQrS1dEevs\nSSDzt8pStoWUmh1j6KyFiymU7u4x35N26gx3I4FkXk/I0PWEjLWekHldT5AuxmXv\nfYbI+HR7Gns06G1KexAIEbuJs4j5WGeJPK/M2yDENbEFK8SZANGSYxPZZYA8NbOK\nk4QTOuXnYIi4W1Tegjd1k66LUh+WHuINJ0HEm5Dy3EXRAM3maC1Go7WYFa3FfqO1\ngrKis+uwKd0fMX/3RxyUsZFisC207cRAaj+Lexj2ioMMGW1cb3d+hZZZ6SWn4qdv\nUCVUJplt+nI3HYblN2BlNvDz3NUtOC46MvHMpIfuGy5u0iaB02XGDomDrk50jHeQ\nF2Ob1AXHeam5VTsLyPHBHj85xQVRoqt1zAHZC1FsB01jFVyfvTkDic523ON8yNBo\nSUQPWc3LTlErF5zGNTe3avvUd8vV7pBNlyQJsFH/+KLdxqt3T5/mTzOckt99HMur\nwBgh1y+4Diw+nhYgL0Tj1Bsauj/6M9Apj+FxNs4qAojjumFqIqh+yKFMJCH98Zi9\n5ZpRTb+JxO54M+Ww1f6IU4dHnAZ6xGKKXB6rP2JVRnN/xPHxiOnF55MjjkM4YlVl\nUkxQW2O3J3zzeb2ZPR7sA2iU15VR5jHH68och5MMEOACBq0DxLk+RqcXzClLk4za\nnt5pkTWIVGmXzTLBHdY5xLRvImz9oIqTZ3/ewqEfFCEYabX1gJIdWuuBCrD2RoSv\nsrG3JQFe8HiSQeW+bhitMyUtFG1nQ5ogOhhzLS0HanV6p+HQHa5wd7gixMOVwI5w\nuCfADhlzr7lj7nVwMfckQ22j19oK9ckrLYbRwXfYjZDOWSI91Db6TqTXfdap67NO\nAz1rkdmiasW+PmUMbne+sfdmWh1/EwLDEzONxXZrdmy3DhTbybsN1TTgu91tR1o3\n3IUdiUOwI6r5qyyxwtFZR6uW8rCdROdxQNG5inxHJITQUeMoUS7SnXP003gr0V5O\nSJ4q0B5wmxPnuaYkoNusjhgJ3lITMXaba+Ea9okQzLX6rAk1W81ZAxdcOL/gIswL\n3hihqJuaTw76ptzMFov5Zjb6tnxev9QpVuNivCgKyA+fvW+Uv4lG49GH56qZo1yM\n/nTozs1HN/Uv8WckHF3vHz2+2z56vNw9dCzfwYhS5YvPXnktXxnSNTlO5xaQV1eL\nUCk3TLbnXGyVtNhyPw1h1TIKyXCmUdHIAakLIirpxGrpvL/5QJRLPJ6vly4JENvS\niK/l48myeNhsnqUsHN1+KCFhZsCsLFefJisYhCxFBQE2gqEyMVE9GKeQpAFlTQnS\nMHT3vXn5UJ17Gk2gnBTkPgqUcy+6nYgDgpoCdCXeOnbVZt4ILKkR/Lqx+rhJ5cJe\nPkzVMTFwGtUxURpmdfHT1aiIDosC5A8i+Bo6CI7sQDDOuwwOhI2uuwYIFzjb1KEA\njiN53TBusJG8Wk+ghgFITawslhVARgjIY4CslIaRh9dIwxR6OcirYCUTGPyCqi0E\n+GWa9HLS8ASDL28Fo3ZDUKXAzA1Z+Z8+HU9IBs42H2MPE3pDB+GCgglI50QQkxI8\nA/KxAM9YwfQJntXIyyTNAmeRzTxLy3b1UVdpW7DA/I1Z9QvyN2aAza3kyL7HW8mp\nIVxuYtg0CRq6YbMqjWESNAMbNXnAJrV9zfka+3cXKUrMaQfo29PIqPtCE8WYxC/M\nkYufWFjZa1OHLXoKkx/mTy+/j76ff3oYvX0t5/KM5/IwPzcksZPDFbIbR57w8139\nv/Ny/4/yv+XfKht1kiInsKnC3/ao2ePRd+V6syrvftVcoYfy2Jl10PSPu88QbtD+\nI9pFMQ/y+5aNr+vp9VHx6omIwNkOSyerGQ/ff/Pj6Kflb5WQQI6jppCy+o/P1Sdt\nqY7qh2j5288EBuOP/aWvbrup4KqvR6HFMW+hnt8+bs+xyWtc5ATqI4omkoR80EQ3\nZFadesgOK/uSqCr0ywgcZLA0IX/cFOGR08p9cKe2pWcCOzicoeO4aU7g1McY0LZS\ndaHXtulsahXf5osz8VDR6wE22MivP0N6Jm9pRQmcjaZ4hmpLD6iGak/p2CakUF0K\ny6l2IsNKpYj4ksXWOumHpAh09HRwQoQlXICENzAYEI1M3VrFoxvExw47+VknLx0G\nDS59ntN5bQrJvUHUZxLwmcvNy1jPeezmNE5Xow6yTzvADrJzo+OOAJ2a1DOnEbcm\nu0LPq/SQUQE8XfjplGlO4NmnB35Ut8e7LHlg3zdkvCcypzqcKy0vPuXiKn+d28NU\nj3IwjpPY5Cgvcxfl+Z15cYpCY8cW9BSF4qV39I8WAiR6SLT8/IOjInUaP+TUYD13\nFazTstDMFrEvL6faeVnkTqsJUP+rMproIzWmriZ4ECuIzKkxxLXyKXWKrW/PBkR6\ngjSknjgVE65vT6ktbE16QWf8RQaNV1h5JiyiyB2X49AqRQeFgXoskTqtF5wKmmo0\neTdzDWU5B5Tv1G3bWEYAJJkDQELLkwUQq0VO1U2TyTQJ2GwtrM9R27AZThmgO3Wm\n5wE6SdA9hOQnyuhf4J2Q1oXTy+TkCpAjfONF5WfQ8rnT8Pu0mEAsI/RRQMAmVMKu\nHojMaf8RknlHiVD56KoGDkJchvcC3JLjoNhDFp3jMntn6Sdk2TmtAqllR40L3TZm\ndkounGya/H/5Cy+X8s37IaZykn2cTuL0LosmIi0i+acivk3Ex7RMK8K/f/3r/wM+\nbAR2\n-----END ENTITLEMENT DATA-----\n-----BEGIN RSA SIGNATURE-----\nQCBE/Px2qWjlk80BrlH8hUeoE185t8ZahITUfHuMjUqhVY92wwMhyJJrEemOqSa0\nflBgZXHAnw96kSriNowtxCA8Ay2jaoI9QAqYHI6tUdes+Xn0bvBHNvejfn0S+sbT\nhz3lEc6ltyq/rqhmhQDV9Z7DoE1iuNMMpcRzTs63lFWE5TsyBdwO6+3sCCrgkrqz\nstAPI2shkd5/B0NHMbHuRKwOupDdjWqa6kdMKh068+M6z0lEYlBQxeGnkdA3P2yo\nRlT3boR9lAUhEUqMb+tmyQy18s/o/eWjLdgLP/O+IFSdgdqgOM1YeU0/WSqgo8FV\nHtUmTevWVGjwycUIsIdb+ElE4pihce6C8CKz2TUDlhWI7tCnJRXiiWhrSPEmVtD5\nYr/gLnrxc/9MNWZmzPxJ7KVEh2Xp/tDjdnfD1lswwHRHAUqm7PEuH0Xuef26n4ig\nNjtPnO6SN6GRq+G/eMv4ze5qpFpXXMl9oPpS7eC38AJHLvMjE9QIc/TV/+MdT1H9\njCmBMIShTsrnl4Nx3jfzgOEmGm3dW7kkrhVHABg9ADFZhcs9YGQDdMJhEaFeW2l3\nkqHV6R29dBHUARdmUTnSuhegAPPsXXS9iryIk0RqHk8u/M0NQGSwK7HEAQkRklyH\nZjHhrgnFfJYmCS/15uHWdwRYgHeSR1PXpB0Sxdj7oMs=\n-----END RSA SIGNATURE-----\n",
      "id": "8a85f983510e0e2d015110e482965630",
      "serial": {
        "id": 4302369103582938050,
        "revoked": false,
        "collected": false,
        "expiration": "2016-03-31T03:59:59.000+0000",
        "serial": 4302369103582938050,
        "created": "2015-11-16T15:23:09.000+0000",
        "updated": "2015-11-16T15:23:09.000+0000"
      },
      "created": "2015-11-16T15:23:09.000+0000",
      "updated": "2015-11-16T15:23:09.000+0000"
    }],
    "quantity": 1,
    "startDate": "2015-03-31T04:00:00.000+0000",
    "endDate": "2016-03-31T03:59:59.000+0000",
    "href": "/entitlements/8a85f983510e0e2d015110e47e6b562f",
    "created": "2015-11-16T15:23:08.000+0000",
    "updated": "2015-11-16T15:23:08.000+0000"
  }];
});
define("fusor-ember-cli/mirage/fixtures/flavors", ["exports"], function (exports) {
    exports["default"] = [{
        "disabled": false,
        "disk": 40,
        "ephemeral": 0,
        "extra_specs": {
            "capabilities:boot_option": "local",
            "cpu_arch": "x86_64"
        },
        "id": "1",
        "is_public": true,
        "links": [{
            "href": "http://192.0.2.1:8774/v2/434547ba69cf4a30aa5747ff012efb4e/flavors/1",
            "rel": "self"
        }, {
            "href": "http://192.0.2.1:8774/434547ba69cf4a30aa5747ff012efb4e/flavors/1",
            "rel": "bookmark"
        }],
        "name": "Flavor-4-x86_64-6144-40",
        "ram": 6144,
        "rxtx_factor": 1.0,
        "swap": "",
        "vcpus": 4
    }];
});
define("fusor-ember-cli/mirage/fixtures/foreman_tasks", ["exports"], function (exports) {
   exports["default"] = [{
      id: "db25a76f-e344-48ba-ac77-f29303586dbe",
      type: "ForemanTasks::Task::DynflowTask",
      label: "Actions::Fusor::Deploy",
      started_at: "2015-04-07 18:16:55",
      ended_at: null,
      state: "running",
      result: "success",
      progress: 1,
      external_id: "4f7ca3e7-8828-46df-a6f1-e6b07964efb1",
      parent_task_id: null
   }, {
      id: "aaaaa76f-e344-48ba-ac77-f29303586dbe",
      type: "ForemanTasks::Task::DynflowTask",
      label: "Actions::Fusor::Deploy",
      started_at: "2015-04-14 12:31:46",
      ended_at: null,
      state: "paused",
      result: "error",
      external_id: "4f7ca3e7-8828-46df-a6f1-e6b07964efb1",
      parent_task_id: null
   }, {
      id: "55fe84db-4a95-462c-83dd-704a08d3d8fe",
      type: "ForemanTasks::Task::DynflowTask",
      label: "Actions::Candlepin::ListenOnCandlepinEvents",
      started_at: "2015-04-07 18:16:55",
      ended_at: null,
      state: "paused",
      result: "pending",
      external_id: "9ed42d73-8621-4ebd-acdc-af84a52cbd9f",
      parent_task_id: null
   }];
});
define("fusor-ember-cli/mirage/fixtures/images", ["exports"], function (exports) {
    exports["default"] = [{
        "checksum": "eafcb9601b03261a7c608bebcfdff41c",
        "container_format": "ari",
        "created_at": "2015-10-12T19:42:30.000000",
        "deleted": false,
        "deleted_at": null,
        "disk_format": "ari",
        "id": "7bcd5577-92fd-4793-a38d-acb183f4b1fb",
        "is_public": true,
        "min_disk": 0,
        "min_ram": 0,
        "name": "bm-deploy-ramdisk",
        "owner": "434547ba69cf4a30aa5747ff012efb4e",
        "properties": {},
        "protected": false,
        "size": 56355601,
        "status": "active",
        "updated_at": "2015-10-12T19:42:33.000000",
        "virtual_size": null
    }, {
        "checksum": "061e63c269d9c5b9a48a23f118c865de",
        "container_format": "aki",
        "created_at": "2015-10-12T19:42:29.000000",
        "deleted": false,
        "deleted_at": null,
        "disk_format": "aki",
        "id": "69c1410b-2e59-4bad-b6ab-9a7570744fc1",
        "is_public": true,
        "min_disk": 0,
        "min_ram": 0,
        "name": "bm-deploy-kernel",
        "owner": "434547ba69cf4a30aa5747ff012efb4e",
        "properties": {},
        "protected": false,
        "size": 5027584,
        "status": "active",
        "updated_at": "2015-10-12T19:42:29.000000",
        "virtual_size": null
    }, {
        "checksum": "5b11e671ff1f63f884382066648f2ad6",
        "container_format": "bare",
        "created_at": "2015-10-12T19:42:08.000000",
        "deleted": false,
        "deleted_at": null,
        "disk_format": "qcow2",
        "id": "4da3aa47-c02b-4ffd-b395-5fdad581fc04",
        "is_public": true,
        "min_disk": 0,
        "min_ram": 0,
        "name": "overcloud-full",
        "owner": "434547ba69cf4a30aa5747ff012efb4e",
        "properties": {
            "kernel_id": "930e26f7-0c4c-438f-9bb4-bb7558ab729c",
            "ramdisk_id": "68f8a4e7-fd20-434d-b52b-c9cebeeff925"
        },
        "protected": false,
        "size": 913954816,
        "status": "active",
        "updated_at": "2015-10-12T19:42:28.000000",
        "virtual_size": null
    }, {
        "checksum": "c0be19750ce23e07e9f8102c6b6fe748",
        "container_format": "ari",
        "created_at": "2015-10-12T19:42:05.000000",
        "deleted": false,
        "deleted_at": null,
        "disk_format": "ari",
        "id": "68f8a4e7-fd20-434d-b52b-c9cebeeff925",
        "is_public": true,
        "min_disk": 0,
        "min_ram": 0,
        "name": "overcloud-full-initrd",
        "owner": "434547ba69cf4a30aa5747ff012efb4e",
        "properties": {},
        "protected": false,
        "size": 36760304,
        "status": "active",
        "updated_at": "2015-10-12T19:42:08.000000",
        "virtual_size": null
    }, {
        "checksum": "061e63c269d9c5b9a48a23f118c865de",
        "container_format": "aki",
        "created_at": "2015-10-12T19:42:03.000000",
        "deleted": false,
        "deleted_at": null,
        "disk_format": "aki",
        "id": "930e26f7-0c4c-438f-9bb4-bb7558ab729c",
        "is_public": true,
        "min_disk": 0,
        "min_ram": 0,
        "name": "overcloud-full-vmlinuz",
        "owner": "434547ba69cf4a30aa5747ff012efb4e",
        "properties": {},
        "protected": false,
        "size": 5027584,
        "status": "active",
        "updated_at": "2015-10-12T19:42:04.000000",
        "virtual_size": null
    }];
});
define("fusor-ember-cli/mirage/fixtures/katello_environments", ["exports"], function (exports) {
    exports["default"] = [{
        "id": 3,
        "name": "Development",
        "label": "Development",
        "description": null,
        "organization": {
            "name": "Default_Organization",
            "label": "Default_Organization"
        },
        "created_at": "2014-08-03T10:25:18Z",
        "updated_at": "2014-08-03T10:25:18Z",
        "library": false,
        "prior": {
            "name": "Library",
            "id": 2
        },
        "permissions": {
            "view_lifecycle_environments": true,
            "edit_lifecycle_environments": true,
            "destroy_lifecycle_environments": true,
            "promote_or_remove_content_views_to_environments": true
        }
    }, {
        "id": 4,
        "name": "Test",
        "label": "Test",
        "description": null,
        "organization": {
            "name": "Default_Organization",
            "label": "Default_Organization"
        },
        "created_at": "2014-08-03T10:25:18Z",
        "updated_at": "2014-08-03T10:25:18Z",
        "library": false,
        "prior": {
            "name": "Development",
            "id": 3
        },
        "permissions": {
            "view_lifecycle_environments": true,
            "edit_lifecycle_environments": true,
            "destroy_lifecycle_environments": true,
            "promote_or_remove_content_views_to_environments": true
        }
    }, {
        "id": 5,
        "name": "Production",
        "label": "Production",
        "description": null,
        "organization": {
            "name": "Default_Organization",
            "label": "Default_Organization"
        },
        "created_at": "2014-08-03T10:25:18Z",
        "updated_at": "2014-08-03T10:25:18Z",
        "library": false,
        "prior": {
            "name": "Test",
            "id": 4
        },
        "permissions": {
            "view_lifecycle_environments": true,
            "edit_lifecycle_environments": true,
            "destroy_lifecycle_environments": true,
            "promote_or_remove_content_views_to_environments": true
        }
    }];
});
define("fusor-ember-cli/mirage/fixtures/katello_organizations", ["exports"], function (exports) {
  exports["default"] = [{
    "id": 1,
    "name": "Default Organization",
    "title": "Default Organization",
    "created_at": "2015-11-05T08:40:31Z",
    "updated_at": "2015-11-05T08:45:36Z",
    "select_all_types": [],
    "description": null,
    "parameters": [],
    "users": [],
    "smart_proxies": [{
      "name": "sat61dev.example.com",
      "id": 1,
      "url": "https://sat61dev.example.com:9090"
    }],
    "subnets": [{
      "id": 1,
      "name": "default",
      "network_address": "192.168.152.0/24"
    }],
    "compute_resources": [],
    "media": [{
      "id": 1,
      "name": "CentOS mirror"
    }, {
      "id": 7,
      "name": "Default_Organization/Library/Red_Hat_Server/Red_Hat_Enterprise_Linux_6_Server_Kickstart_x86_64_6_7"
    }, {
      "id": 8,
      "name": "Default_Organization/Library/Red_Hat_Server/Red_Hat_Enterprise_Linux_7_Server_Kickstart_x86_64_7_1"
    }],
    "config_templates": [{
      "id": 44,
      "name": "Boot disk iPXE - generic host",
      "template_kind_id": 1,
      "template_kind_name": "Bootdisk"
    }, {
      "id": 43,
      "name": "Boot disk iPXE - host",
      "template_kind_id": 1,
      "template_kind_name": "Bootdisk"
    }, {
      "id": 50,
      "name": "custom_deployment_repositories",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 48,
      "name": "idm_register",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 18,
      "name": "Kickstart default",
      "template_kind_id": 5,
      "template_kind_name": "provision"
    }, {
      "id": 22,
      "name": "Kickstart default iPXE",
      "template_kind_id": 4,
      "template_kind_name": "iPXE"
    }, {
      "id": 21,
      "name": "Kickstart default PXELinux",
      "template_kind_id": 2,
      "template_kind_name": "PXELinux"
    }, {
      "id": 39,
      "name": "kickstart_networking_setup",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 19,
      "name": "Kickstart RHEL default",
      "template_kind_id": 5,
      "template_kind_name": "provision"
    }, {
      "id": 40,
      "name": "puppet.conf",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 2,
      "name": "PXELinux default local boot",
      "template_kind_id": 2,
      "template_kind_name": "PXELinux"
    }, {
      "id": 1,
      "name": "PXELinux global default",
      "template_kind_id": 2,
      "template_kind_name": "PXELinux"
    }, {
      "id": 41,
      "name": "redhat_register",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 45,
      "name": "Satellite Kickstart Default",
      "template_kind_id": 5,
      "template_kind_name": "provision"
    }, {
      "id": 47,
      "name": "Satellite Kickstart Default Finish",
      "template_kind_id": 6,
      "template_kind_name": "finish"
    }, {
      "id": 46,
      "name": "Satellite Kickstart Default User Data",
      "template_kind_id": 8,
      "template_kind_name": "user_data"
    }, {
      "id": 51,
      "name": "ssh_public_key",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 49,
      "name": "subscription_manager_registration",
      "template_kind_id": null,
      "template_kind_name": null
    }],
    "domains": [{
      "id": 1,
      "name": "example.com"
    }],
    "environments": [{
      "name": "KT_Default_Organization_dev20_Fusor_Deployment___testnew_3",
      "id": 6
    }, {
      "name": "KT_Default_Organization_Library_Fusor_Deployment___testnew_3",
      "id": 5
    }, {
      "name": "KT_Default_Organization_Library_Fusor_Puppet_Content_2",
      "id": 3
    }, {
      "name": "KT_Default_Organization_Library_Fusor_RPM_Content_4",
      "id": 4
    }],
    "hostgroups": [{
      "id": 1,
      "name": "Fusor Base",
      "title": "Fusor Base"
    }, {
      "id": 5,
      "name": "aaaaa",
      "title": "Fusor Base/aaaaa"
    }, {
      "id": 6,
      "name": "RHEV-Engine",
      "title": "Fusor Base/aaaaa/RHEV-Engine"
    }, {
      "id": 7,
      "name": "RHEV-Hypervisor",
      "title": "Fusor Base/aaaaa/RHEV-Hypervisor"
    }, {
      "id": 2,
      "name": "rhev only222",
      "title": "Fusor Base/rhev only222"
    }, {
      "id": 3,
      "name": "RHEV-Engine",
      "title": "Fusor Base/rhev only222/RHEV-Engine"
    }, {
      "id": 4,
      "name": "RHEV-Hypervisor",
      "title": "Fusor Base/rhev only222/RHEV-Hypervisor"
    }, {
      "id": 8,
      "name": "testnew",
      "title": "Fusor Base/testnew"
    }, {
      "id": 9,
      "name": "OpenStack-Undercloud",
      "title": "Fusor Base/testnew/OpenStack-Undercloud"
    }],
    "locations": [],
    "label": "Default_Organization",
    "owner_details": {
      "parentOwner": null,
      "id": "ff80808150d6cd1b0150d6ce03ef0001",
      "key": "Default_Organization",
      "displayName": "Default Organization",
      "contentPrefix": "/Default_Organization/$env",
      "defaultServiceLevel": null,
      "upstreamConsumer": {
        "id": "ff80808150d6d8ad0150f0fe88d802ac",
        "uuid": "7ffddefd-aacb-4192-a999-01beb7c2e473",
        "name": "tsanders-rhci",
        "idCert": {
          "key": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAhnYNVp8bo9LdLsLS3paT24HE6le6tX4wu4TneWGRNCOtAfT0\npiAmyeH1hkKbAuEPnJGF4Qw2mot0UlWFGkaReTuY5VbWWFUk8103QWO1DcfwRDwP\nxxIP4JPaT4xOY1McO4LDa9WODk0hrIEEvM6w/lna4L4NZ5xUGaRaWRB62Jmv2u99\nVrlZ954tHpLlVmMPR8rDZyJSwnJ0WMcqul16FnJTDeZN4SVe9uwanoTmoiKZezES\nN7X2QT9GwGbpkPPyMCH8pkCJHwYdvLiG82/v1/Ilg94S5n28CnggUYXHU06jIDui\nGZdnMUxlMNnt4esRivQkrlKiIrJeVaJ/U/4K7QIDAQABAoIBAFn1y7DDnNN7db4e\nXMTNi7kV1nBPJ7zb47DiF5gvPd3bbJndkH1BD5KMWh9smpdPiolfF2pdKH83hCi9\nzOKqihPJWt89vQS2WpV0LU7TbcP9m/ObF5dBr1u6sBn+rkdnyIDMWQDhjTxmQHxQ\niaHky6gw5+7rWL6UafQJ8OSb0QTuu+1x6qJZzZkwZXxrmXqGwMAAZmy82QCeFwfO\ntwaM1iuoI7QIIyvno7vnvmM4Ez3WpPF/jp0dwJ2ADjQg1ZNSa35BULxd6tQDT/KG\nTH3Z7GHNChkzlM3EmTgbrD18imj2yqgIoJh2IO0NkFC91oxoSiAUlD01Ya7KfWCR\nSOK1nQUCgYEA0mqAXIT9SSnVvo4gecglxcPqjOQNjSKTlGOSsRh5aGQEW0uOUW+/\nBycbn5Y48nWAcit/U0rAQRvEkOVRrkap6dbYwoIZNjejnF6+h8RwtuhloDqJdEYP\n6oLwkX87Et9EdzX4h5iRVnxqHmw/YfaTnm+Uh5J4I7lrTdVTtrn0VtMCgYEAo5cn\n5HQhJ0g0TL4z4P75LH5UEb8Nbb2s7zteFkQDxJRUkvrm6rYUNxV589qtjBYb9RCB\n4BuN+hF3iTU0nvs8dBCal59/24NabNQI++5AaGAB3/BuCNadFMFjuCC3MjqSAw10\ncN3IAveyVyApcpWuKOFPvirjyg85S9xY+xTOfz8CgYAPJDLQdZF0blo/OCMGIGz3\naj26nb6L5W0RRIkNzWEPLgNSPoGjQpNQhHPsa/b1G5d+n7qt17c1+DWQ56+VBui7\nNwaqGIqP6DkRy4+SXYRu5RJLEWtKvq/uhDWjgrBRj1dx7KRRvZzXyGQqhEebWQ8O\nW6EokFWs3G7oTu2TPJZkmQKBgAqgSe4UAQdNMGB/xlzqEwNp3Uodz+B9/pq3j4AA\nwQHm5Kt7cr5yP1PoqDhHzxgXY4+Cl/0XrRw+QDaAZz+gcCfV4ETTDnoSyS/iggbj\nTfm5qsWCF5OpZSCxAyo1rdCsb0mVeSfPsCtJLaNtKmQQBvUO1aAzpwI8BOvBj2IX\n0uX/AoGBANCYxXM1mpVj/Nnav1qwkeIvDbcJZEy7gtZtx3mPwcCcsF0KPzrFzKN3\n1H1OpR91SGMinoovEmdfUOC60g7Eh16hUDY/I/xrjRKB4R52uIICIVDUUqKw0RWY\noYwVIwuGpW7YZEz8ZKxpJibx/IrEBlQlGGDfooktmdMaxLsojAoa\n-----END RSA PRIVATE KEY-----\n",
          "cert": "-----BEGIN CERTIFICATE-----\nMIIFrTCCA5WgAwIBAgIIakR3GA8CX9MwDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNTA2MTAxMjQ3MzJaFw0xNjA2MTAxMjQ3MzJaMC8x\nLTArBgNVBAMTJDE1OTAwMDMxLTI3ZGYtNDAwNC1iZTM2LTEyMDNkZjEwYjIzODCC\nASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIZ2DVafG6PS3S7C0t6Wk9uB\nxOpXurV+MLuE53lhkTQjrQH09KYgJsnh9YZCmwLhD5yRheEMNpqLdFJVhRpGkXk7\nmOVW1lhVJPNdN0FjtQ3H8EQ8D8cSD+CT2k+MTmNTHDuCw2vVjg5NIayBBLzOsP5Z\n2uC+DWecVBmkWlkQetiZr9rvfVa5WfeeLR6S5VZjD0fKw2ciUsJydFjHKrpdehZy\nUw3mTeElXvbsGp6E5qIimXsxEje19kE/RsBm6ZDz8jAh/KZAiR8GHby4hvNv79fy\nJYPeEuZ9vAp4IFGFx1NOoyA7ohmXZzFMZTDZ7eHrEYr0JK5SoiKyXlWif1P+Cu0C\nAwEAAaOCAVUwggFRMBEGCWCGSAGG+EIBAQQEAwIFoDALBgNVHQ8EBAMCBLAwgd4G\nA1UdIwSB1jCB04AUdy6lzTcNqOHT6mHFVmdD6JHHbRyhgbekgbQwgbExCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMTEwLwYDVQQDDChSZWQg\nSGF0IEVudGl0bGVtZW50IE9wZXJhdGlvbnMgQXV0aG9yaXR5MSQwIgYJKoZIhvcN\nAQkBFhVjYS1zdXBwb3J0QHJlZGhhdC5jb22CAT8wHQYDVR0OBBYEFO1aJ4WnLpWt\ntAjC8RewrfEazGhZMBMGA1UdJQQMMAoGCCsGAQUFBwMCMBoGA1UdEQQTMBGGD0NO\nPWptYWdlbjItcmhjaTANBgkqhkiG9w0BAQUFAAOCAgEAM+Mw2UkC0x5fZS5FCgcT\nQmZnm4GK1isXXDx2717qOKL/1e+J04y26Ky20r/tQDPYJxg1wCkQ2oWmTQEzmI1a\nbNxfrnEJkNLapCqcdwccSWD5EnDnQizWH22Co/OTYvCuSW9Sk9ivtsef0toRFIj1\n2eakLFfN2Jveu4EvI032fo5hufWrgD5ztPAQg+0b1vkjxtF0u4zzpNq71+3Z8yoI\nVlj3kEY+Jkl68AiGU/BsYDKMexmINH3te7i01KHBA8ZbKfl9o4sMfBLQxWClVtV+\ntIrLLHhS9U/VYASheJQrG2X6VnGyMnA/w81cWuqdAhBMGPNKMcoAseTJIjNZiJdI\nIY7x7cLGJoi0rRZXLUAt9RCaXEkYKuikUr2jzIOlInyVPCeGjtEUE298yiaqSZqO\nBSeVSJv6d9mBXhD0kHxENjWPWUc5+ID8BEVfpUcjs6CRFqhAat2PI9kiNoVzO5yh\nCStbgsH5VSa/b3KGIMz59HW6raMynBWhCqqM2B6zSk3fSXOyDv8kfKzwTaVNtch1\nGU+m/+SO78b7OypWC7SxPh1/RE8g86Xa0xAjG1j363QNpBqlIw7ncza5yHbShoyf\nU6k1GXt92SZRrEP87mYkxbGeKJFaHopq/4Hh72eP2/C0d1Vj4WTNGLuXbpSD3tFg\nO+rPEbXYpmQryBQmYP1oxt8=\n-----END CERTIFICATE-----\n",
          "id": "ff80808150d6d8ad0150f0fe88d702ab",
          "serial": {
            "id": 283230217608562925,
            "revoked": false,
            "collected": false,
            "expiration": "2016-06-10T12:47:32.000+0000",
            "serial": 283230217608562925,
            "created": "2015-11-10T10:43:44.470+0000",
            "updated": "2015-11-10T10:43:44.470+0000"
          },
          "created": "2015-11-10T10:43:44.471+0000",
          "updated": "2015-11-10T10:43:44.471+0000"
        },
        "type": {
          "id": "ff80808150d6d8ad0150e8d07ad00024",
          "label": "satellite",
          "manifest": true,
          "created": "2015-11-08T20:36:28.496+0000",
          "updated": "2015-11-08T20:36:28.496+0000"
        },
        "ownerId": "ff80808150d6cd1b0150d6ce03ef0001",
        "webUrl": "access.redhat.com/management/distributors/",
        "apiUrl": "https://subscription.rhn.redhat.com/subscription/consumers/",
        "created": "2015-11-10T10:43:44.472+0000",
        "updated": "2015-11-10T10:43:44.472+0000"
      },
      "logLevel": null,
      "href": "/owners/Default_Organization",
      "created": "2015-11-05T08:40:37.103+0000",
      "updated": "2015-11-10T10:43:44.775+0000"
    },
    "redhat_repository_url": "https://cdn.redhat.com",
    "redhat_docker_registry_url": "https://registry.access.redhat.com",
    "service_levels": ["Premium"],
    "service_level": null,
    "default_content_view_id": 1,
    "library_id": 1
  }];
});
define("fusor-ember-cli/mirage/fixtures/management_applications", ["exports"], function (exports) {
  exports["default"] = [{
    "id": "8a85f98350fe2951015102a33a6d4e9a",
    "uuid": "7ffddefd-aacb-4192-a999-01beb7c2e473",
    "name": "tsanders-rhci",
    "username": "rhci-test",
    "entitlementStatus": "valid",
    "serviceLevel": "",
    "releaseVer": {
      "releaseVer": null
    },
    "type": {
      "id": "9",
      "label": "satellite",
      "manifest": true
    },
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "environment": null,
    "entitlementCount": 1,
    "lastCheckin": null,
    "installedProducts": [],
    "canActivate": false,
    "guestIds": [],
    "capabilities": [{
      "id": "8a85f98350fe2951015102a33a6e4e9b",
      "name": "derived_product"
    }, {
      "id": "8a85f98350fe2951015102a33a6e4e9c",
      "name": "ram"
    }, {
      "id": "8a85f98350fe2951015102a33a6e4e9d",
      "name": "cert_v3"
    }, {
      "id": "8a85f98350fe2951015102a33a6e4e9e",
      "name": "cores"
    }, {
      "id": "8a85f98350fe2951015102a33a6e4e9f",
      "name": "instance_multiplier"
    }],
    "hypervisorId": null,
    "contentTags": [],
    "autoheal": true,
    "href": "/consumers/7ffddefd-aacb-4192-a999-01beb7c2e473",
    "created": "2015-11-13T20:57:10.000+0000",
    "updated": "2015-11-16T15:23:08.000+0000"
  }, {
    "id": "8a85f9844c7a3d77014c7a40b0e420b5",
    "uuid": "b9350f8a-7c67-4ca6-9557-2ef46aebfc6a",
    "name": "jmontleo-rhci",
    "username": "rhci-test",
    "entitlementStatus": "valid",
    "serviceLevel": "",
    "releaseVer": {
      "releaseVer": null
    },
    "type": {
      "id": "9",
      "label": "satellite",
      "manifest": true
    },
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "environment": null,
    "entitlementCount": 14,
    "lastCheckin": "2015-11-17T13:54:49.000+0000",
    "installedProducts": [],
    "canActivate": false,
    "guestIds": [],
    "capabilities": [{
      "id": "8a85f9874e63a3e8014e887272895529",
      "name": "derived_product"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552a",
      "name": "ram"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552b",
      "name": "guest_limit"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552c",
      "name": "cert_v3"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552d",
      "name": "cores"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552f",
      "name": "instance_multiplier"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552e",
      "name": "vcpu"
    }],
    "hypervisorId": null,
    "contentTags": [],
    "autoheal": true,
    "href": "/consumers/b9350f8a-7c67-4ca6-9557-2ef46aebfc6a",
    "created": "2015-04-02T13:10:02.000+0000",
    "updated": "2015-11-17T13:54:49.000+0000"
  }, {
    "id": "8a85f9844c7a3d77014c80336cfb436b",
    "uuid": "63170c3b-994d-4dd3-82ac-7cccf353206c",
    "name": "jmatthews-rhci",
    "username": "rhci-test",
    "entitlementStatus": "valid",
    "serviceLevel": "",
    "releaseVer": {
      "releaseVer": null
    },
    "type": {
      "id": "9",
      "label": "satellite",
      "manifest": true
    },
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "environment": null,
    "entitlementCount": 15,
    "lastCheckin": "2015-11-13T19:01:49.000+0000",
    "installedProducts": [],
    "canActivate": false,
    "guestIds": [],
    "capabilities": [{
      "id": "8a85f9814d0bf2ce014d2b41350f6474",
      "name": "derived_product"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6475",
      "name": "ram"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6476",
      "name": "guest_limit"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6477",
      "name": "cert_v3"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6478",
      "name": "cores"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f647a",
      "name": "instance_multiplier"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6479",
      "name": "vcpu"
    }],
    "hypervisorId": null,
    "contentTags": [],
    "autoheal": true,
    "href": "/consumers/63170c3b-994d-4dd3-82ac-7cccf353206c",
    "created": "2015-04-03T16:53:16.000+0000",
    "updated": "2015-11-13T19:01:49.000+0000"
  }, {
    "id": "8a85f9844df26b1c014df71601eb0bcd",
    "uuid": "1205e19f-d024-4fd8-a40b-f18e4048f861",
    "name": "unified-installer-demo",
    "username": "rhci-test",
    "entitlementStatus": "valid",
    "serviceLevel": "",
    "releaseVer": {
      "releaseVer": null
    },
    "type": {
      "id": "9",
      "label": "satellite",
      "manifest": true
    },
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "environment": null,
    "entitlementCount": 0,
    "lastCheckin": null,
    "installedProducts": [],
    "canActivate": false,
    "guestIds": [],
    "capabilities": [{
      "id": "8a85f9844df26b1c014df71601eb0bce",
      "name": "derived_product"
    }, {
      "id": "8a85f9844df26b1c014df71601eb0bcf",
      "name": "ram"
    }, {
      "id": "8a85f9844df26b1c014df71601eb0bd0",
      "name": "cert_v3"
    }, {
      "id": "8a85f9844df26b1c014df71601eb0bd1",
      "name": "cores"
    }, {
      "id": "8a85f9844df26b1c014df71601eb0bd2",
      "name": "instance_multiplier"
    }],
    "hypervisorId": null,
    "contentTags": [],
    "autoheal": true,
    "href": "/consumers/1205e19f-d024-4fd8-a40b-f18e4048f861",
    "created": "2015-06-15T11:58:44.000+0000",
    "updated": "2015-10-06T17:57:46.000+0000"
  }];
});
define("fusor-ember-cli/mirage/fixtures/node_ports", ["exports"], function (exports) {
  exports["default"] = [{
    "node_uuid": "4b2c920a-3f81-4c6e-9449-89fe6d438318",
    "address": "12:34:56:78"
  }, {
    "node_uuid": "133bcf86-63f8-4479-bba3-1eb3aa1bcfcf",
    "address": "23:45:67:89"
  }];
});
define("fusor-ember-cli/mirage/fixtures/nodes", ["exports"], function (exports) {
    exports["default"] = [{
        "console_enabled": false,
        "created_at": "2015-10-12T20:00:58+00:00",
        "driver": "pxe_ssh",
        "driver_info": {
            "deploy_kernel": "69c1410b-2e59-4bad-b6ab-9a7570744fc1",
            "deploy_ramdisk": "7bcd5577-92fd-4793-a38d-acb183f4b1fb",
            "ssh_address": "sherr-desktop.usersys.redhat.com",
            "ssh_password": "******",
            "ssh_username": "root",
            "ssh_virt_type": "virsh"
        },
        "extra": {
            "block_devices": {
                "serials": ["QM00005"]
            },
            "hardware_swift_object": "extra_hardware-4b2c920a-3f81-4c6e-9449-89fe6d438318",
            "newly_discovered": "true"
        },
        "instance_info": {},
        "instance_uuid": null,
        "last_error": null,
        "links": [{
            "href": "http://192.0.2.1:6385/v1/nodes/4b2c920a-3f81-4c6e-9449-89fe6d438318",
            "rel": "self"
        }, {
            "href": "http://192.0.2.1:6385/nodes/4b2c920a-3f81-4c6e-9449-89fe6d438318",
            "rel": "bookmark"
        }],
        "maintenance": true,
        "maintenance_reason": "During sync_power_state, max retries exceeded for node 4b2c920a-3f81-4c6e-9449-89fe6d438318, node state None does not match expected state 'power off'. Updating DB state to 'None' Switching node to maintenance mode.",
        "ports": [{
            "href": "http://192.0.2.1:6385/v1/nodes/4b2c920a-3f81-4c6e-9449-89fe6d438318/ports",
            "rel": "self"
        }, {
            "href": "http://192.0.2.1:6385/nodes/4b2c920a-3f81-4c6e-9449-89fe6d438318/ports",
            "rel": "bookmark"
        }],
        "power_state": null,
        "properties": {
            "capabilities": "boot_option:local",
            "cpu_arch": "x86_64",
            "cpus": "4",
            "local_gb": "40",
            "memory_mb": "6144"
        },
        "provision_state": null,
        "provision_updated_at": "2015-10-13T15:27:31+00:00",
        "reservation": null,
        "target_power_state": null,
        "target_provision_state": null,
        "updated_at": "2015-10-13T15:27:31+00:00",
        "uuid": "4b2c920a-3f81-4c6e-9449-89fe6d438318"
    }, {
        "console_enabled": false,
        "created_at": "2015-10-12T20:01:40+00:00",
        "driver": "pxe_ssh",
        "driver_info": {
            "deploy_kernel": "69c1410b-2e59-4bad-b6ab-9a7570744fc1",
            "deploy_ramdisk": "7bcd5577-92fd-4793-a38d-acb183f4b1fb",
            "ssh_address": "sherr-desktop.usersys.redhat.com",
            "ssh_password": "******",
            "ssh_username": "root",
            "ssh_virt_type": "virsh"
        },
        "extra": {
            "block_devices": {
                "serials": ["QM00005"]
            },
            "hardware_swift_object": "extra_hardware-133bcf86-63f8-4479-bba3-1eb3aa1bcfcf",
            "newly_discovered": "true"
        },
        "instance_info": {},
        "instance_uuid": null,
        "last_error": null,
        "links": [{
            "href": "http://192.0.2.1:6385/v1/nodes/133bcf86-63f8-4479-bba3-1eb3aa1bcfcf",
            "rel": "self"
        }, {
            "href": "http://192.0.2.1:6385/nodes/133bcf86-63f8-4479-bba3-1eb3aa1bcfcf",
            "rel": "bookmark"
        }],
        "maintenance": true,
        "maintenance_reason": "During sync_power_state, max retries exceeded for node 133bcf86-63f8-4479-bba3-1eb3aa1bcfcf, node state None does not match expected state 'power off'. Updating DB state to 'None' Switching node to maintenance mode.",
        "ports": [{
            "href": "http://192.0.2.1:6385/v1/nodes/133bcf86-63f8-4479-bba3-1eb3aa1bcfcf/ports",
            "rel": "self"
        }, {
            "href": "http://192.0.2.1:6385/nodes/133bcf86-63f8-4479-bba3-1eb3aa1bcfcf/ports",
            "rel": "bookmark"
        }],
        "power_state": null,
        "properties": {
            "capabilities": "boot_option:local",
            "cpu_arch": "x86_64",
            "cpus": "4",
            "local_gb": "40",
            "memory_mb": "6144"
        },
        "provision_state": null,
        "provision_updated_at": "2015-10-13T15:27:32+00:00",
        "reservation": null,
        "target_power_state": null,
        "target_provision_state": null,
        "updated_at": "2015-10-13T15:27:32+00:00",
        "uuid": "133bcf86-63f8-4479-bba3-1eb3aa1bcfcf"
    }];
});
define("fusor-ember-cli/mirage/fixtures/owners", ["exports"], function (exports) {
        exports["default"] = [{
                "parentOwner": null,
                "id": "8a85f9814a192108014a1adef5826b38",
                "key": "7473998",
                "displayName": "7473998",
                "contentPrefix": null,
                "defaultServiceLevel": null,
                "upstreamConsumer": null,
                "logLevel": null,
                "href": "/owners/7473998",
                "created": "2014-12-05T14:33:47.000+0000",
                "updated": "2014-12-05T14:33:47.000+0000"
        }];
});
define("fusor-ember-cli/mirage/fixtures/pools", ["exports"], function (exports) {
    exports["default"] = [{
        "id": "8a85f9814a192108014a1adf1c7b6b39",
        "owner": {
            "id": "8a85f9814a192108014a1adef5826b38",
            "key": "7473998",
            "displayName": "7473998",
            "href": "/owners/7473998"
        },
        "activeSubscription": true,
        "sourceEntitlement": null,
        "quantity": 10,
        "startDate": "2014-12-05T05:00:00.000+0000",
        "endDate": "2015-12-05T04:59:59.000+0000",
        "productId": "RV00007",
        "derivedProductId": null,
        "providedProducts": [{
            "id": "8a85f9894adf01b8014adfd14ae81246",
            "productId": "220",
            "productName": "Red Hat OpenStack Beta",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae81247",
            "productId": "201",
            "productName": "Red Hat Software Collections (for RHEL Server)",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae81248",
            "productId": "269",
            "productName": "Red Hat Satellite Capsule",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae81249",
            "productId": "150",
            "productName": "Red Hat Enterprise Virtualization",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae9124a",
            "productId": "239",
            "productName": "Red Hat Enterprise MRG Messaging",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae9124b",
            "productId": "84",
            "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae9124c",
            "productId": "180",
            "productName": "Red Hat Beta",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae9124d",
            "productId": "70",
            "productName": "Red Hat Enterprise Linux Server - Extended Update Support",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae9124e",
            "productId": "246",
            "productName": "Oracle Java (for RHEL Server) - Extended Update Support",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae9124f",
            "productId": "183",
            "productName": "JBoss Enterprise Application Platform",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae91250",
            "productId": "240",
            "productName": "Oracle Java (for RHEL Server)",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae91252",
            "productId": "191",
            "productName": "Red Hat OpenStack",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae91251",
            "productId": "86",
            "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae91254",
            "productId": "83",
            "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server)",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae91253",
            "productId": "69",
            "productName": "Red Hat Enterprise Linux Server",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae91255",
            "productId": "250",
            "productName": "Red Hat Satellite",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae91256",
            "productId": "205",
            "productName": "Red Hat Software Collections Beta (for RHEL Server)",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae91257",
            "productId": "85",
            "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server)",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }, {
            "id": "8a85f9894adf01b8014adfd14ae91258",
            "productId": "167",
            "productName": "Red Hat CloudForms",
            "created": "2015-01-12T20:24:03.000+0000",
            "updated": "2015-01-12T20:24:03.000+0000"
        }],
        "derivedProvidedProducts": [],
        "attributes": [],
        "productAttributes": [{
            "id": "8a85f9874a65e793014a70f74d145dce",
            "name": "ph_product_line",
            "value": "RHCI",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dcf",
            "name": "name",
            "value": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd0",
            "name": "product_family",
            "value": "Red Hat Cloud Infrastructure",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd1",
            "name": "ph_product_name",
            "value": "RHCI",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd2",
            "name": "management_enabled",
            "value": "1",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd3",
            "name": "variant",
            "value": "Cloud",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd4",
            "name": "sockets",
            "value": "2",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd5",
            "name": "multi-entitlement",
            "value": "yes",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd6",
            "name": "support_type",
            "value": "L1-L3",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd7",
            "name": "arch",
            "value": "x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd8",
            "name": "description",
            "value": "Red Hat Cloud Infrastructure",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dd9",
            "name": "stacking_id",
            "value": "RV00007",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145ddb",
            "name": "type",
            "value": "MKT",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dda",
            "name": "enabled_consumer_types",
            "value": "satellite",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145ddc",
            "name": "ph_category",
            "value": "Subscriptions",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145ddd",
            "name": "virt_limit",
            "value": "unlimited",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145dde",
            "name": "support_level",
            "value": "Premium",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }, {
            "id": "8a85f9874a65e793014a70f74d145ddf",
            "name": "subtype",
            "value": "Premium",
            "productId": "RV00007",
            "created": "2014-12-22T07:47:42.000+0000",
            "updated": "2014-12-22T07:47:42.000+0000"
        }],
        "derivedProductAttributes": [],
        "restrictedToUsername": null,
        "contractNumber": "10593540",
        "accountNumber": "5530698",
        "orderNumber": null,
        "consumed": 7,
        "exported": 6,
        "productName": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
        "derivedProductName": null,
        "branding": [{
            "productId": "69",
            "name": "Red Hat Cloud Infrastructure",
            "type": "OS",
            "created": "2014-12-05T14:33:57.000+0000",
            "updated": "2014-12-05T14:33:57.000+0000"
        }],
        "calculatedAttributes": {
            "quantity_increment": "1",
            "suggested_quantity": "1",
            "compliance_type": "Stackable"
        },
        "stacked": true,
        "stackId": "RV00007",
        "href": "/pools/8a85f9814a192108014a1adf1c7b6b39",
        "type": "NORMAL",
        "created": "2014-12-05T14:33:57.000+0000",
        "updated": "2015-01-12T20:24:03.000+0000",
        "sourceStackId": null,
        "subscriptionId": "3456439",
        "sourceConsumer": null,
        "subscriptionSubKey": "master"
    }, {
        "id": "8a85f9814c508347014c71b23f4a4775",
        "owner": {
            "id": "8a85f9814a192108014a1adef5826b38",
            "key": "7473998",
            "displayName": "7473998",
            "href": "/owners/7473998"
        },
        "activeSubscription": true,
        "sourceEntitlement": null,
        "quantity": 90,
        "startDate": "2015-03-31T04:00:00.000+0000",
        "endDate": "2016-03-31T03:59:59.000+0000",
        "productId": "RV00007",
        "derivedProductId": null,
        "providedProducts": [{
            "id": "8a85f9814c508347014c71b23f4a4789",
            "productId": "220",
            "productName": "Red Hat OpenStack Beta",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a478a",
            "productId": "201",
            "productName": "Red Hat Software Collections (for RHEL Server)",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a478b",
            "productId": "269",
            "productName": "Red Hat Satellite Capsule",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a478c",
            "productId": "150",
            "productName": "Red Hat Enterprise Virtualization",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a478d",
            "productId": "239",
            "productName": "Red Hat Enterprise MRG Messaging",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a478e",
            "productId": "84",
            "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a478f",
            "productId": "70",
            "productName": "Red Hat Enterprise Linux Server - Extended Update Support",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4790",
            "productId": "180",
            "productName": "Red Hat Beta",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4791",
            "productId": "246",
            "productName": "Oracle Java (for RHEL Server) - Extended Update Support",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4792",
            "productId": "183",
            "productName": "JBoss Enterprise Application Platform",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4793",
            "productId": "240",
            "productName": "Oracle Java (for RHEL Server)",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4795",
            "productId": "86",
            "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4794",
            "productId": "191",
            "productName": "Red Hat OpenStack",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4797",
            "productId": "69",
            "productName": "Red Hat Enterprise Linux Server",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4796",
            "productId": "83",
            "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server)",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4798",
            "productId": "250",
            "productName": "Red Hat Satellite",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4799",
            "productId": "205",
            "productName": "Red Hat Software Collections Beta (for RHEL Server)",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a479a",
            "productId": "85",
            "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server)",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a479b",
            "productId": "167",
            "productName": "Red Hat CloudForms",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }],
        "derivedProvidedProducts": [],
        "attributes": [],
        "productAttributes": [{
            "id": "8a85f9814c508347014c71b23f4a4777",
            "name": "ph_product_line",
            "value": "RHCI",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4778",
            "name": "name",
            "value": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4779",
            "name": "ph_product_name",
            "value": "RHCI",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a477a",
            "name": "product_family",
            "value": "Red Hat Cloud Infrastructure",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a477b",
            "name": "variant",
            "value": "Cloud",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a477c",
            "name": "management_enabled",
            "value": "1",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a477d",
            "name": "sockets",
            "value": "2",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a477e",
            "name": "multi-entitlement",
            "value": "yes",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a477f",
            "name": "arch",
            "value": "x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4780",
            "name": "support_type",
            "value": "L1-L3",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4781",
            "name": "stacking_id",
            "value": "RV00007",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4782",
            "name": "description",
            "value": "Red Hat Cloud Infrastructure",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4784",
            "name": "type",
            "value": "MKT",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4783",
            "name": "enabled_consumer_types",
            "value": "satellite",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4785",
            "name": "ph_category",
            "value": "Subscriptions",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4786",
            "name": "virt_limit",
            "value": "unlimited",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4787",
            "name": "support_level",
            "value": "Premium",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }, {
            "id": "8a85f9814c508347014c71b23f4a4788",
            "name": "subtype",
            "value": "Premium",
            "productId": "RV00007",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }],
        "derivedProductAttributes": [],
        "restrictedToUsername": null,
        "contractNumber": "10670000",
        "accountNumber": "5530698",
        "orderNumber": null,
        "consumed": 89,
        "exported": 89,
        "productName": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
        "derivedProductName": null,
        "branding": [{
            "productId": "69",
            "name": "Red Hat Cloud Infrastructure",
            "type": "OS",
            "created": "2015-03-31T21:17:29.000+0000",
            "updated": "2015-03-31T21:17:29.000+0000"
        }],
        "calculatedAttributes": {
            "quantity_increment": "1",
            "suggested_quantity": "1",
            "compliance_type": "Stackable"
        },
        "stacked": true,
        "stackId": "RV00007",
        "href": "/pools/8a85f9814c508347014c71b23f4a4775",
        "type": "NORMAL",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:19:26.000+0000",
        "sourceStackId": null,
        "subscriptionId": "3565254",
        "sourceConsumer": null,
        "subscriptionSubKey": "master"
    }];
});
define("fusor-ember-cli/mirage/fixtures/settings", ["exports"], function (exports) {
    exports["default"] = [{
        "id": 102,
        "name": "openshift_master_disk",
        "value": 30,
        "description": "Amount of Storage (GB) for each OSE Master Node",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 30,
        "created_at": "2016-02-18T14:36:44Z",
        "updated_at": "2016-02-18T15:16:33Z"
    }, {
        "id": 101,
        "name": "openshift_master_ram",
        "value": 8,
        "description": "Amount of RAM (GB) for each OSE Master Node",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 8,
        "created_at": "2016-02-18T14:36:44Z",
        "updated_at": "2016-02-18T15:16:37Z"
    }, {
        "id": 100,
        "name": "openshift_master_vcpu",
        "value": 2,
        "description": "Number of vCPU's for each OSE Master Node",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 2,
        "created_at": "2016-02-18T14:36:44Z",
        "updated_at": "2016-02-18T15:16:40Z"
    }, {
        "id": 105,
        "name": "openshift_node_disk",
        "value": 16,
        "description": "Amount of Storage (GB) for each OSE Worker Node",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 16,
        "created_at": "2016-02-18T14:36:44Z",
        "updated_at": "2016-02-18T15:16:43Z"
    }, {
        "id": 104,
        "name": "openshift_node_ram",
        "value": 8,
        "description": "Amount of RAM (GB) for each OSE Worker Node",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 8,
        "created_at": "2016-02-18T14:36:44Z",
        "updated_at": "2016-02-18T15:16:46Z"
    }, {
        "id": 103,
        "name": "openshift_node_vcpu",
        "value": 1,
        "description": "Number of vCPU's for each OSE Worker Node",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 1,
        "created_at": "2016-02-18T14:36:44Z",
        "updated_at": "2016-02-18T15:16:49Z"
    }, {
        "id": 111,
        "name": "cloudforms_db_disk_size",
        "value": 40,
        "description": "Size of Storage (GB) for DB for CloudForms",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 40,
        "created_at": "2016-02-25T15:32:31Z",
        "updated_at": "2016-02-25T15:32:31Z"
    }, {
        "id": 112,
        "name": "cloudforms_ram",
        "value": 6,
        "description": "Amount of RAM (GB) for CloudForms",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 6,
        "created_at": "2016-02-25T15:32:31Z",
        "updated_at": "2016-02-25T15:32:31Z"
    }, {
        "id": 113,
        "name": "cloudforms_vcpu",
        "value": 4,
        "description": "Number of vCPU's for CloudForms",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 4,
        "created_at": "2016-02-25T15:32:31Z",
        "updated_at": "2016-02-25T15:32:31Z"
    }, {
        "id": 110,
        "name": "cloudforms_vm_disk_size",
        "value": 40,
        "description": "Size of Storage (GB) for VM for CloudForms",
        "category": "Setting::Openshift",
        "settings_type": "integer",
        "default": 40,
        "created_at": "2016-02-25T15:32:31Z",
        "updated_at": "2016-02-25T15:32:31Z"
    }];
});
define("fusor-ember-cli/mirage/fixtures/subscriptions",["exports"],function(exports){exports["default"] = [{"id":"8a85f9834e009a85014e01e1f11737ea","consumer":{"id":"8a85f9874df26cde014dfcf1b4f65e08","uuid":"50f73b81-0242-4f9e-bcd5-d9fac11715af","name":"tzach","href":"/consumers/50f73b81-0242-4f9e-bcd5-d9fac11715af"},"pool":{"id":"8a85f9814c508347014c71b23f4a4775","owner":{"id":"8a85f9814a192108014a1adef5826b38","key":"7473998","displayName":"7473998","href":"/owners/7473998"},"activeSubscription":true,"sourceEntitlement":null,"quantity":90,"startDate":"2015-03-31T04:00:00.000+0000","endDate":"2016-03-31T03:59:59.000+0000","productId":"RV00007","derivedProductId":null,"providedProducts":[{"id":"8a85f9814c508347014c71b23f4a4789","productId":"220","productName":"Red Hat OpenStack Beta","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478a","productId":"201","productName":"Red Hat Software Collections (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478b","productId":"269","productName":"Red Hat Satellite Capsule","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478c","productId":"150","productName":"Red Hat Enterprise Virtualization","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478d","productId":"239","productName":"Red Hat Enterprise MRG Messaging","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478e","productId":"84","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478f","productId":"70","productName":"Red Hat Enterprise Linux Server - Extended Update Support","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4790","productId":"180","productName":"Red Hat Beta","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4791","productId":"246","productName":"Oracle Java (for RHEL Server) - Extended Update Support","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4792","productId":"183","productName":"JBoss Enterprise Application Platform","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4793","productId":"240","productName":"Oracle Java (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4795","productId":"86","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4794","productId":"191","productName":"Red Hat OpenStack","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4797","productId":"69","productName":"Red Hat Enterprise Linux Server","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4796","productId":"83","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4798","productId":"250","productName":"Red Hat Satellite","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4799","productId":"205","productName":"Red Hat Software Collections Beta (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a479a","productId":"85","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a479b","productId":"167","productName":"Red Hat CloudForms","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"}],"derivedProvidedProducts":[],"attributes":[],"productAttributes":[{"id":"8a85f9814c508347014c71b23f4a4777","name":"ph_product_line","value":"RHCI","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4778","name":"name","value":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4779","name":"ph_product_name","value":"RHCI","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477a","name":"product_family","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477b","name":"variant","value":"Cloud","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477c","name":"management_enabled","value":"1","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477d","name":"sockets","value":"2","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477e","name":"multi-entitlement","value":"yes","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477f","name":"arch","value":"x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4780","name":"support_type","value":"L1-L3","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4781","name":"stacking_id","value":"RV00007","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4782","name":"description","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4784","name":"type","value":"MKT","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4783","name":"enabled_consumer_types","value":"satellite","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4785","name":"ph_category","value":"Subscriptions","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4786","name":"virt_limit","value":"unlimited","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4787","name":"support_level","value":"Premium","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4788","name":"subtype","value":"Premium","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"}],"derivedProductAttributes":[],"restrictedToUsername":null,"contractNumber":"10670000","accountNumber":"5530698","orderNumber":null,"consumed":89,"exported":89,"productName":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","derivedProductName":null,"branding":[{"productId":"69","name":"Red Hat Cloud Infrastructure","type":"OS","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"}],"calculatedAttributes":{"compliance_type":"Stackable"},"type":"NORMAL","stacked":true,"stackId":"RV00007","href":"/pools/8a85f9814c508347014c71b23f4a4775","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:19:26.000+0000","subscriptionSubKey":"master","sourceStackId":null,"subscriptionId":"3565254","sourceConsumer":null},"certificates":[{"key":"-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAqGQybHnChDrZhX25NFLMsR78scdXSuOumCnlupAdiFevlEXM\nbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQC9eGRUvsZ006yHpBuJmO\nv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLoeFDhGYI2OYavaOGDe/VT\nSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIaI4d3O286/nichOcp37+J\nd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSVZn3lX9xR5p+UsSgfa5J3\n4uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQABAoIBAB1e9KiVCEeWGDC/\ngBlPQ+K0+/BqS6CFXAOwcyB6WJxaZwaesgyBhv9uuJFBS99WeewkisykmtoSUqur\n5TiDkpki9EkU4JZgLkxR9NcD0nf7UxFGv25MMaoyhAyEkDXffRObsPgFoGJ7/jO4\nBaJmvgOpYT2XJiMuQET5wEmCY4AQY9uz3zc+38pJFd/uLDAm9r2t+mfrKJ1jSJne\nEU2gVWc9zMPh/AhjKwnhY5GAMZMO/2c7FsPc2q5A5H3Mj9otS/j0pnp1rsQt7Olr\nPo5qZ+WSPWY89HmsDj4WuYUICRL1ey8pXkKZIjSoca0NpqkwGE3WpZk1QLO5fgiF\nVB88pPUCgYEA+/FASGum7vBABwkkLaIgY2gizyGr0yKbUso7mm2ziyG0paq5s05I\n4bWSS8og+ER/zMWoUtN3ytWVf+SJ0Sa5+N01FsJpgi91zKbv5wj4QF9xN9+GTivw\nX9CrjMElkVKokfuNl2AR5CkWYM9FK5WP50LlawZirmGS1G1nYvmSuC8CgYEAqxp3\n4gKth057r7afaOCBDcY6TaySNCfZAXRkuuxcT8Y9AplLCmZFhF33r8iaqzu12UGK\nQgTpCc5+xuEfTTOyfhPgcx7UaiaU3acfRrdPuvzeU7YNE0e1lrX61CgbWJsFKMdq\nUWf5zXNpSg/9xK57jGNn+8tR6LrXTgI+mAlLfHsCgYBBgKzU52BEeSQ8cAz+7Er9\nbWK3daqlvzag5MFwWhs3DjFYbTXQv4bFYB7EI65EvhJ4G9+ygRaBHty6nqGSRj5N\nzL1zyGIEHfDDn5d5+uQIYIggHbZedqANWURw2Pq6eMIpCjz64VhleKU/0EPMnBsI\n5mSdWdCoQ+gX4MXjfr29swKBgCqdrgxBxHy15IKQRsX1XM9UdwMPn16UKi19kvUn\nl5pa8qkqCxGtBVWBngZPPY62kYVqGIh29p/1qYfZXFV7MdLLGpUxsZA6ycsnK9gO\nIjKddrZ82mbZ7nV6H94lmyIHglJ00Jsz/XjZbPkAYKFTH/yIacbCDkWb+7I3RuXR\nMtbvAoGAdUdLQNRlUSH1ZY1yjlsc2ZKSsyVZ1tSkF9JNnX2OPv6JzkWST5bDSYvX\nBeNZwXG6us2GLnsI1LSqMpzeCLKjpH24337rO8fbbN9g5SuenOSlq3Tne1gXwGpW\nc0PemYSdl20++metc/5y74lqo+0hbiDc8guaQpOITff5k/1kqdE=\n-----END RSA PRIVATE KEY-----\n","cert":"-----BEGIN CERTIFICATE-----\nMIIKcjCCCFqgAwIBAgIIQXnq7rnlhcowDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNTAzMzEwNDAwMDBaFw0xNjAzMzEwMzU5NTlaMCsx\nKTAnBgNVBAMTIDhhODVmOTgzNGUwMDlhODUwMTRlMDFlMWYxMTczN2VhMIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqGQybHnChDrZhX25NFLMsR78scdX\nSuOumCnlupAdiFevlEXMbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQ\nC9eGRUvsZ006yHpBuJmOv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLo\neFDhGYI2OYavaOGDe/VTSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIa\nI4d3O286/nichOcp37+Jd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSV\nZn3lX9xR5p+UsSgfa5J34uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQAB\no4IGHjCCBhowEQYJYIZIAYb4QgEBBAQDAgWgMAsGA1UdDwQEAwIEsDCB3gYDVR0j\nBIHWMIHTgBR3LqXNNw2o4dPqYcVWZ0PokcdtHKGBt6SBtDCBsTELMAkGA1UEBhMC\nVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRYwFAYDVQQKDA1SZWQgSGF0LCBJ\nbmMuMRgwFgYDVQQLDA9SZWQgSGF0IE5ldHdvcmsxMTAvBgNVBAMMKFJlZCBIYXQg\nRW50aXRsZW1lbnQgT3BlcmF0aW9ucyBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEW\nFWNhLXN1cHBvcnRAcmVkaGF0LmNvbYIBPzAdBgNVHQ4EFgQUH4sIAAAAAAAAAAMA\nAAAAAAAAAAAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwEgYJKwYBBAGSCAkGBAUMAzMu\nMjCCBM0GCSsGAQQBkggJBwSCBL4EggS6eNpNkk2T2jAMht8fs1dnFvLBudPpcWc6\n5dCzYkTixY4zlhMWfn1loAsHOY4s6X0sOY09NlWNOZ45Gc+wcco8ZcyJV8dndH9j\nOkmm7OKE9qd35fDAa47RC2c0P/boORPkIpmDuYIXQVPV1TuG5K5Xf8GRJCeyJ9h7\n+jEmDjSBRfgL5xcBF2hgQZx5Upc9GadfHJwuza890milLA51tVXboFX2RqXaqtH/\nBt2DsFZ/XXVqLSzPo7nxqrKXGCBLLza5uWgaUopslEelE9btenaK9qXEgg32f35/\n7HF0XrF2e06rxtijES6rZbRPX2B0ipRGMY+LttVOrVBu1d6xRYO19DYeFpvd6vIF\nIQ0moHuUURWh/KC9DQUnZ0t/UinXgV66cwu1NMuig6sLwj1P3ey9y2zi7Yrk4SMd\nevI0Wa2YRl6N3lYJy1bVtVuddu+l3jO1U/DPnmkuwf6WMd5LhCHk7zpi/VNY/42N\nIehId7qf/oMt8+w5aAKlC6K+CRX6pJXwrSb3PrQY3TDqifPUO18a5STiLbFnEi4h\nnT7DfhkQtW5cks7irdcjSnbEPxp+71+BlFex9zODmdwhF/55DfiQhPx3+c79e/Z3\nd/rTX3Sb76p99I3edQS77cU72bwcybscrY3bmcoajT4Xqa72byb3b4X7v96SU+G7\n2bwcUcsc3b4W7f0d3WO5/N2ri++uvtIPZvBzJt6iKbD3VsbthOTNLJRJUNc3JCuF\n6mgHO/6vu/VpV99W+wbnxxk4bufdzvqt3s3g5k3Wxu2E5M1Q1wvU0A53nOEVd7Nq\nzm7fC3d+DRnp9runl9vTffkP3dn7eC7vRaUJ6Xd/7QFPL7Nmf6+d3UZ2i+/XL3yB\nchXLvqV2YAN0I+Xcfu/1ob760/t9670QYQaQ7+yF6GjjDjTndz32If3iTtJpJ7N4\nOZNqOHcaxytjdtZKJKBxfNQ1Gnwuzcqa768u+rP3f5xBTvZvJuxzdvhfvoH7SD2b\nwcybrY3bCcWSiSoa4XqaAc76v9vw+8xVOj9mSYaTEfLkfuT672bwcybUcscrY3bm\ncoajT4Xqa7LY8Md5wbvO13067f6u70NEGEGkOxe53rx/edfvqz/3mX3iTtJpJ7N4\nOZNvEim1HA8I6zWOVsbtzOLJRJQOLyKGubkaZ4zfeS4n34XZp1NOnO1UbZvBzJt4\nIps69LSdY5Wxu3M5ElA5Q1GmeM33kGT78L1NOnO53/d8fT77MAG6EM10KXvO+sru\nQru/Fppp+Lu7Tu+oP3r+53nk7QU+lPNQ0oSURqd4Od5+f760u+mXerg/FQE3ed13\nns7maHM76su9m8HLHN2+Fu+sP3p2n7d9A3cIQOz7WHX/nkN+JCE/HZbHhhxrv4o4\n53s3g5k2c5Y5Wxu3M5ElA5Q1GmOZwvU13nMx+e7zidy6fbc9cLFttX/O1+mu+oHa\nCnenac7u4n94z+yZ/fUn9/kO7cvu5n3fSneqqffQE7v/v7zO7cc75Odi4/vpzu/9\n3nBdolO/7O70cYcac7hod7Nu7e7fC3bjXejXfJrstjvqzu9HO+rPd9Gu92+Fu0HO\n4bnezdJvdvhbuU33Kbyb7yb3b4W72byb3b4W772b3b4W7DANBgkqhkiG9w0BAQUF\nAAOCAgEAEEkGEEq5dFGFH2pB/YGnwNnDhnxHJM3CvA11hsxV4P4VbiEbGM/QQ3e9\nh2QkAKhwtIz/kgk5p76ca1/G23Q6W1hna6u5iFlEFyc82soduIRrlsH9klSw65Di\nMZMNu6Fz2DE0nHLDatL5hEUCwgCaSZfzri4TMx4KR2vG3jplGW13QNOB7Ii8xBYD\nj9b/rb+F7hpajwaKtz+qLvFk+4KOX6IGRCePHB5UvZV8bPlVhu33PbM7ohQCYHMq\n9y9IFtQMdxjupLR2fEXlb49oVUpzcFgBQxUmNVDjVpiKCceBbMhnlDRtW8Ax+7BV\nL7Oqu3cGDgRJBN6oo2w/BRMIV9FZY0vlBzGe9xFRGIQ+m3QDYINT4pabll2NFX5q\nLIWgFaFZulQogwDlhQLunCbgX7xQ5nXO/dvHut4woM1f6qsWr2Ud6KdpGgePWRbO\nUGplsjR4vRw8i7OgN5wyoXsdEPlKharRhvZ1Iqw5xR4WAeuwDxz2YVz6ExDIlCpg\ntZcFqHSTv9Zc30nrXligJ23IzhJKE7JH4LaNcOGnG2kSqHn6ahTVWQlggsOMhaDp\n4s8hdrO81KxzfyU9Pe+R3TAYDOSDRhU4oQcrTqrTjj/rtzX0CkEM8SZ7V6iNOs68\nHPbowVqGnTZQnXDQQ/SdIGyje3Pw8iaVwZi+w20QSjHswFfzQKg=\n-----END CERTIFICATE-----\n-----BEGIN ENTITLEMENT DATA-----\neJzlff1zI8eN9r/CUt0PcZW5mpmeD9K/rX3reHP22ZW95K333rpKjSTuirEk6khK\n9iaV//1tDr9myO4G0N2Y6ebepZK1V/wQMAAeAA+Af17dLp5WL4+z5dU3V0XysRI3\nk3ScZHk2zj9OZ+Ob27tifDf9WN+maZUW9cerr6/+96V+Ws/Xn6++Kb6+Wr3crG6X\n8+f1fPF09c0/r1a/vsh3+vNfE/l/lfzhp/pxtvkXs7vRD/V69N3D4uVu9P7p47Je\nrZcvt+uX5Wz023x9P/rwWC/Xo5/qp/rT7HH2tP569Mty9jh/eRz9IRuvFre/ztar\nr+Qb7v549U329dXj4aevvpHvNpN/O1u+zm9nm2/yMHudPciP3r2NfOn68/Pmu/yY\njn8UV/+SP7yub3+dP3362/yu9Z3lXyyWdxuB/LP1q06T5ueX8pOusiQtxokYi/S/\nkvybJJH/+W/59rOnu+1flvu/FN8UU/mfzV9KMa+X9e3m5WlSVpuPkv+2vr1dvGy+\n/VVRiKScTjaf/rxc3EnJyF/x//3zqvlqWZ4cRfmzfJuH2ehP9Ws9+sPHxXL05x/e\n/Tj6IH/x2XIjIPk/q0YZV5sPWN7ez9ezRs6bN7z6fVL+rczl38g/XP3P9ns18jt8\nVjktj7L63AjuRInv5EuWz8v5ajb6cf708vuo2H38aDxqf7tvZ2v5Ff/8y0+N4h7q\nm0Yfy/vZw7gYr5pXjNf38+Xds5Tr5/Gieen47/Kl4xv50vHy+XHV/EJPd4vl8fPl\nv3qu1/fyX1zvvv315sevN298vX3b6+L635azh1m9mm3+6d9u5B82orhufcb1YtUo\nrb55mMlf/GP9sJptBaaW1KfnT397WW5+g4/zh9k319fXs/Xt9fOv82v5Pcfyb6/l\nbzr+4y9/HP/Hu/87Xs7u7ut183t8Tfj53ZeWn/ooX3lXr+u/zX5/ni+l+CdlnsiH\ncDn73xf5z3d/W9efmu/ZkefV//zr66MiJ0dFbr4DQpOlWpN/eP/h53MlloAS56sF\nUn9389W6o78SoT/59pYKvF+vn6VCyFIulVIWnszFzlLwRnIm5FCMxONDL7KiJD/0\nlcl9KZ/8CuO+8I//mfuq3B55Lw97pZSu8CVdO8E6uJTKn0vhkm9WNaiA5Ex0HvvD\n4mV5OxspfQrkuFfNa11cC8Z/bz/l+oP8ih/CdTIKny/NYEJVk9HHmHSFcjVkhaE9\nDlVJoQMlldWV04zs1XQxXOnVoBju4NUwMbx/oKSCo1WS+oKjhsgMuTbXyBwTMK28\n5nEmJ4VK59ydFOZh7zeqDJjfyShEVrAxCtmHH4a4g8s7QlebGkMXntTmhBvcMR4G\nUPcFH/zCgdxXRu/iM90VFJ679FvemvrKlaySJObsKOTCiwpuVAm5DmZEdy75qye4\nEV4S21fcUuPJVtxyy5IM+B2FJB3we0z5UubVoOwtidmELqkPo64WkfGEDvBZIT1m\niMeL1D0Au5ZNFcm58D/U69nDw3w9u0L3Tldimvyu7J7mSQqh+8PnjYo3VauDK433\n82o9exz991dg9Gt+cPyP8Wr/XmP5Xk6IcfeOWoM9fNK1/CR81DtIqmd8Mr95PEip\nbYtVmhLUU7bUU2DVU6jVU3pRjy58tdVThq6eQqeePKnw1lO+STfusWGe1A8tTe2d\n51eQvzyqZ7F7l7F8Uzd/WW0/W6Waw6dcy08J3222lAKWx7taUarC3O47CmmjAacu\nn0EDjeCH7qFWJdTja0sz6UaIvTT/fXbz8glIjtoyTcZ3m1dwJK1t6SbXzceE+GQr\nkJl8siGqE83dGLQCOR1n9RBcT7A6UnsfCD0jnA+qUNr1QT7qo5ArirA6KqoE6n0b\nEBRGH8W5PlzRkzn1t8ROA+lEUSqQSQfYWkVlHbqOqjrdsIrStDwDitUK/GrfQtWC\n0jQhStfcmfYgRWxExsgwpHhcQiV9RDy2Rkl+43F5XUYfj1XVrCqZUqxBEwDMtd+u\n52dgx3Rdfp8Zgdp9Q5Veg/c2proan8OaBWx8TpjJrfJxrmjZGFsK4CFD01VrlW4n\n4FRNmQakUHsRYSOonqK/mirFYkKHnUrbAWmwiEoGpYbBXr2Ixm9JqEQrXXipInHD\noujQkFQDxQRgxGqFVftBqdHYhuj04FAQFZ+wOcFRTCiwg6NDRYAUj54M7TRaH62H\nBhrwrAfXNitta6RWgZjP40TmaKqS0q5M3HqUjgAITA4CBkDKOjQpIShdk2ZLt0Px\n+2HKXu328f5GK3tyMuajB4DTRJTJWIlntmiTMaJONi6pD51sPFOEOsmTiqITTe+S\n0rRk7VaG6Z/UsYHAWDHgUl2VWo1LnfphfirVHvthWrQppUuhOJa6ZiOF2+gI+r3E\n3+CojCUeAGkr1z6aZX1wiyKpXKuDAEVPmiBAayvwE4rCrtQpY0JB6FtqARK2ULSx\nCtZC0cYM+uxbqiEnNICMSH+pT3YffbKwnYyyPVYSSp7aEhD+6Xbi6MIloOGfbEpB\nDY6txLyqE1x7SLC60TXOTIviimAmL5Ew2mnHMDNHu12Z0JWlpvRSOBdw08zeunwo\ni9BCC11Z6g4nzbL81JXYFROrPmRoonAkYcKSFVWpP5JSREWnBG8oWl4khRHPToUP\nU/aqVUgVqdAKG4V9+PeB14gmEroXU1do8fQlQw3RYkzazxyu5z5SYLXFPCE1+LTz\nJLTx9R7m1mMr8aatkELrY1jP9Tj2MfxQnPqY65FIClwVjahf4eeanSqCuJrV8LPN\ntoxgl2HNXmJuvKG2xE+XYGpZVkWs/qpXYYLWViZ3VE06EUdl/OnbxWrV3gT09vn5\nYX5bb3610S8P9Vrq4vEKvaLm+fnWeOYjTwtdHon6JvJREfJZ2D4bm8fk/bc/jX5Z\n/KZ8RP5+M57Vz/JBEGP5o+OdRDZ/fN68wurpaF6pfTj+fiM/UD4PAnoetnIaJuQ3\nv0IbdqXaTVFUnRhSSpUyDhkmQ06JVkVoGyZzoWU3Y9WRn6tDE90OWskVWuGbfd8r\nJ493EaiYTHR8FKSazpWkbkrudaTQkHNPElAQvhsZjF6k+ejAINV8qrMIY1ZQ24iq\nVpyx19I22uhA4tGKYDUNE3AqXcDRlWEcAg6gG1XY4TYfGXwiNKBUu+CdDtFIcKD0\nAAeckVloG47zVEu4o6qD7M/EMP4MYzUh+TNRFrpclwYFQH7SORSovPkyQCtxEZNS\n7bUDhwgDYWhViOHH0CJeDC2xmq6B5pDq4EFaf0AAA9FC044ockckTa7U9FynialK\nI7XhWDnTagPwa2qlODg2nG7QXi0oLU0mjrU0ctgZIuhEHXJcc099eYBaGOAsCQTp\n2tT4OS0yt0BToPPNos9ss4gt1xRF4YjHtKaBdmKVzxgD5TSBxxhN+UxoJyGpLoyM\nBdqerE80QOkUBIYHHKs3+M5ar321oF2bIu7LGOMGzHJCkzPvt8kpPw7NQAhGIdKL\nORbNWl4MLjPn/ZaZQfwVWuiX9uEWVJT2YY4majPhTl621hJxApO4MmgUNTNStYy1\nThay3ajdmCt5Rg/GqCiME34FmU+qQZf0ZW45foE2kKJP8wg7n1SCLle2Hz7C9xrf\ng1aEOrF35JSRa149V7zC9E/aepebWSjqXWakpSp78Q34771VHBhLbS6+Gvo0xsUg\nfIvI2BYScfkCwIZ5ZHXp3j2wOBfuQyJZaEc83JlJBK5FnxVjCtsiJKNJC+35R2sk\nRmgb9xRyYulLqmh+InVlXer7koSifq/GFHxRXxuBXCmZitIlqfPSl0FFM6GhNKnM\nF7sMTcxUwgVuaiaFXRYEbtAe8HEgmBMAQ4/mEws5U5UEld7IAHTIUPlTkTcOQEgW\n5IrmDFO0JEPqkQEQPPLWMABKb6U3Qg20h1Q1qkTV14AzpmIg+q0YYCeawlCEr7EM\nfFBR6oM9rFhE/jAU5GsyEw+ZVfphh8yEycwA9JIWmVt1QNHRRHcMemNmxNIxUA7N\nau/guNdCqUVQzupnRG02mf/7WqRBiDaqAgB/tKGXaQb0akcVNRuZT9ZCtbTy4/zp\n5fed6Efj0bvfpXDu5I/95Vl+7mz04eX5ebFcX6G3E81r43KiNNOSdbVfrgS/Xmez\nlXmL1exlddxfhX9a5MtQRYnDwqrI2AvlBLwyYKeXzZ8eZo9ShvXyM3SHYKOcVfsF\nhL16WA113h+7Vk+hJ49HCSYTaGv6mewLC9kb7nEUeg00GG7+9HFhpwbtPuKOGgiT\nu10HMzQoyRItjUGru3z09oNBb2oHlo/rVaMdC59Vr65znb9aXVlJ+WW1vF7d18vZ\n9d3i9ror13H+9kNb7GQ5b37XDvBr94KQzqmCDQRY8LkRtr370aGJgfd4pmVBjr82\nvobqZewjMc7BYMNxWN5FPvngaSurJ3+HsGED2MFq/3aww9JDr7UVQrut/If/HP3X\nYvGwanJFF+Mwrr3t2MTy/mm83nwmPZ3BmsXhIywKAWEZRzaZQqcB7FzZn38Yfbd4\nfJRpKhoyLe/Ht81LuODS4QMihkqTKbR63llfBEvbK4zR0vYqi93S8jQhgwZEFKIk\nKBVbgqINUHYJSgCVbIkaoDO+duoCaiyV5xqLTjPEGksAGhEJeNpJkSW+s8kSZ9ZZ\n4qzvLPGda5Y4a2eJaTZpwQF/JSxEycp/kSqQslQvqSI6ZnfdPlvc7jr+2GO3zHC0\nwcBfhkNJbThzmjjTfOm6yAEb47ngTghDA0QTKgLpc+T69UtIc8CUV2B45MMcdPiI\nag4BACRpAeA9LCsTMBW6Sq+FLm2/iVTo4o3oIqnoGAkCoiYRH/CovXgNsJQqWp3X\nt5XwCQLNUwHdyPKSJlMTZP8exqa2HoCXydOcp47RqkBhXP++9MTh+vc1p2iUkiVa\n8rZ1B9VQSDr0Uan0R0w31WNttt8Ga06uzFLtAnX6z3NlFraSiBhdB6iUCI4yOiEN\nZ0u8I0+1U0E3I1TB5K/z5fqlfpj/Y0uexKvqdc2nrdd1/ApLBJ31RrAlJSRW2ZJ9\n1gHY0mDQWE1mgC6Du7Yl0EHm0J1gizGHJkWEIUamiRaQDJUlmrsW9tqAs0SPXqrP\ntoa0Gt1YCneJyr9NKGuDATzweWd320kg8FcWhOlWx7Kgf8bVsSw4MOmqnJCfaBuq\nucnjGBjnzhEBRzyPYwxLUUPMptpLEm7qg4oope8iik5R1CJKMKpJM/ogAaaIbiin\ndJRiXVIBFBL4XS9VoV0ILeEDF0889fc8tJn0ZkLtugainDxNePhRhABkKNezpSRu\nASgAmCb9GzmDJDQJEUiBDRvEigbSRHuMza3mdUjqf1ku7l5u1/PX+fpze4Z4hWdn\nP7fewjlI6Sou7Q+Jl6SdJoKD9IUhCHnXiC1rsXfyD9mCiBPRaP/mrywGzkdH6/FE\nUrbyH08cCjN5wi9rIhy6hPY6kVOVBTtF4BoIdDArplGBVNAZEVYtK1SviqVJFScl\nNEsKG6aWmRah8TK1tZcxUCEG9DIdboMENBlZkBhEAzf3/Hf1QmrnySeU7DqgB9Tc\nJKpdm0SGx7XvJpFfAk82mbI85J2iLPzAH4uy/h/9Y1E2JCOQ6S9P/MSkv8TElznl\njTPOShDKQ307Zl9YPHpIvriA6SH3igqhJoJjyh9dO+IqF0VbIcrTnCNtw65d0HBF\nuWzGYu9CCEZT0gk8Ni12am+du6keWSNKJCWZCQFVkozU95kj9d1QVeqN+u6XXiWE\nvt7tbzwWv0Zm367lCjvHpm20AUhqTGs1/nrrWM6DP5XBffb4eBBZUrTgtacylnng\nsHYdOISrBKHUtiYWGy9sNjQgeOyelrbidjKEVAHI04T+hNuwSRC7+jwpAccfGXqR\npaCnIVadC2zsfl2zBe3XdbzROptMeSpkEF1UU5nk3PMWZwksm2oPX3gj9OLRlK+E\nHib3xoemcv3NbI9TCoRJXW/bSuGZhQjpijJR0TNF/GUq8G4TH1MlcHYSxoYTkWsr\nX/5EjiZUeTQRWAHxUqqE0GNof1UYTAPT3VDgyktI6Uua0FePeWtgoufYO31Mton2\nTjsz9tl2ierIK0epqI7gBr3t9IBxXbRuME9Tjv1RhDkUtsmT+MBbXuSOE1w+uar+\nqsww0o6p0Vkycefxi8kN3U7HxeS4lmd8WWyaTciVO+LAA1Zf3ig34LhDPGpqQYhM\ncTrw5+fZ04d1ffvr6Fv5CVfIu4CqU4BZAj4H3Q9r3O3uOSgh8sFCvnS1een4Rr6U\noNrNjyN1u/sE5l17N1s5u2dZ8NirXt4VEkaciJ2MKM6kXykl3hegsJK9qhQEX9Aw\nyh6DE05ET3VpSMmzowNfIs9gaq7RvaCSG++PO+xsgn701W4HwmjGR5/00Ht/3AN0\n7epnHSLJGp91DF7y7V7gJz1MV6OESs15F9yRZSxkAk8pT0oH9kfzEOD2FLY9G74s\neqbviDYVikJ/MwMnWX/7CzqlTz+WF+4Gg6+5jVel7CRzPX29rKUy3z/Wn2amfLP5\nufG8+TGc5s5O1JfX5fZzW1rbvu/14X0HbsBlCX3LZ8Np3nokiL7saAENgXlDIR6c\nuNz8Jl8PQXnOcotb7xU+cFSeA0dlHSy4uGdZXtCvlRwkiBMeWW5nziLwy7tJ5bLL\n6diF2j6QZux67D+5F4POPXC/+wI7fqPnym05JfQUT4iUbz9Jge5aJj+8+/GoTFB3\ns9dxvXkxQW+KyKlre+zf/VrENj4kHTl5NLLVlOr2ODp+3Zxzd7scDHW+YRbV9WVY\nqoAiCpc+1iHX+L5eSTAoc3ywOL7re3zcvYCguf1LTs3L9jxrMOYkJuDZ3I1LG/01\n+2vT/j26MrBK9Zq9/jZ/GqcuHkwXzrfvHdG9HzF1oRtT6ScO1BNCEImeeyJEpt8g\nQiRObkOJmZZ6JDQ08cMhPYiEmJoLcDfzh3o9e3iYr2c7aZc7Sbb8zFbCX0H+ZrV/\np52MS6/VcfnuO8mWPdTHBwvJE4iMpYkG2N7RISjwOaZdbIjWK6ViCinhu4fFy933\ni+Xjqu2jdnowK+D24848nOKyTvb7d79OYwNCaaU/hgE6f9zFVffqRgznVrMJ/dJF\noYI6YG200FQ6iBQ0RaugMJQ7+u0R9BUMVGRqkbnsU8GmZSzZWFy+R4jU9RLPwYKA\ngQ+bYY8zNxTXtEeW06mXJ5V/DBPJP/+oFyrAUEgzL11o/4riD44tdloCoipM6Xoq\nJ/JrCOWJvHLRhqqoilGHoqbq1YAsSeMRmtPE4sR9YVagOY4oVMdBkwl2A4ooBLmT\nZ8OWQU0LntNl3FsTwc8LDkGbyZKUPF/Y4nmA50Bddadgegx7CHRIwkflckLU5qqV\n40UrPJch9pNWUjfk9TiVqkSA04vPbgi8MjVKfdBPjKm5UYgUyXPX/PL75LkAGQ+U\nJgoKmKtbKX7BeauhctHQvGz5Oio0B1A4Qw0nJJCdllMCJR1LvQLzUxULi3f8o0PI\n6ndqlh1Gq3oteQJhM32Hq0BEnELR7WLOi1qdry8uK8pLcqOgBeeARkHlu1FQkRsF\nIUA0AUI0fWce2ZLn68XH1o+xOL/RXXzSDMfgVtBsJ2R8ZCaVbkwmwpREiExbkSZu\nosEmidZL6whJYsSLHWXQhjwQHLRp0Zo3TPe/uHaI4JxO2+tTf53f/rpa18s1wqMd\n2S3/sX+VPoi039hnAGm/bzwBRCYuhOIjLXFBEoC7mQvfjoZO6jII526QDKaknMAD\nFFygM9OCLTPVUzrsMtPInWYJ8mAt1ItLWVuqdUciKLVGv/VzMqEfJzdQDiEGVYds\n6NT1NvEMgyrEFSVZwKTJCK55iCAYsWlZuez+U5EzzNFfQc5giPz9X6EbcAp4UtDX\nBxQICyh8WUAM9fwsL8krZlSkPzzD7ED449gO1xfRb1CaZuWwNoN4zsn2lJMlcWLg\nXRCTih5TtZQ9EluPoWsYLlEvywsyZUvZnMC4Gz5acUxs4jRPILzz4eVmdbucP28T\nptVqth79VD/JhGTZIi3sMdBXONBTPzJCnePXHdebrzt+3H7dS8c9QmTaVojVhDSu\n796Zk2Zsu/d8ZHTINTY52NMiGiWuErkxS75ZX4Nh2vThAykfl0674gnUVU3GyKkv\nF+pqMArKcnCvAXVehjwpwzIjc7GbDdJp0XJ/lDbYsXyrb4MdgLZrG0yHr4ltsLDq\ns0Kkvm6XE+EDFTkQlt/Ee55cJJnL3q09uwV1bmRLbiEO5FM2wMYn/lyUYHYE0blb\nIAxCX7534qh0Qd+NE9VuBHWD31+DkOrdDv1BRvc2GB/ZS7G+tN9AAlCUGHqxjcUE\nH8TTHLxoYaJ/4ZlfDBI+JX0FL2xRCHKItpkupo4Vc88TfxmUPImHtUxK4rYXwijE\nSVGNbxLC5TZzRKhATUQh9xoMPBTS0isnRZp4KBcI6NSjZoQRWBpjk0bV5OZo9jiL\nMQQzM0tS+pmC1o4GZSP1uJzBhqGh2MowWIf0ZEuCDEV66hy1NoNdfsuwADGwvbci\n0U+vEAaIUIeSWyUWpvGhmHrP0vzpezzz0duTFS0aL1B3wZONM6gbZ/BWsaJlQJ9Q\nrzpkTzKIUa3lJ0wrdFlanPckd5StfhtPg9apCvs1VWetRDMg7faoGNJ4O8JpWJl9\nSi9NqYyLaFd8Dd2BTMpnO6RI/SwjIizCOcnd/K7E6X8V0bB7RF1GtY/0PpTeDvw+\nssZAgl+EE8FZXpGrlHpuMH1hqAfMiwk0McHfNKFThwpFfPG6kZJvjC2YZZSeysJa\n4E1NxbEECVZqRGRbPzJBKQGabjRB0t8Hf9arTJFJPy1dhH8ExkhEzAmFI5P8hH6G\nz2JinXdM/Ys5yiGSzMVO9pVFFG3LyUa0jK3IrCNLMpuC4unOZ6Ct4FBQ1O98DqXJ\nkNLXw5E6aFxtswsf7cmSlD7b2ZTK4Sq5w6mr8AvkIqGvFjdc8SZe9PRWIzfd9P5y\nCuR5AnU7TMf28DNtp7vN2IbaWmS3y98kOymnZBd2to8HmJ12vtqn7WcM7NbUi48I\nyQBtrxVtoxX3Lqsvg2qYJuDueNd6ICb565QDncu2qGrgILvKfKgsE7nL2UXaZbTz\nwojfFQalqj4S30BBllPcovJAhrmx4XOi82JnODPEIYz1Yik9/Og/pXd6nUnoNpfi\n6uzCxo3YrMa3zUslWmMcstl/SowWYTFE2FRF4CNYDu2i4O5fuZZOhMgce0IWl0x9\nr9+olN2hy16b1T76Yr/oDIgaProZuh44sZsRQO+7pLMRgC2LmFihu2HqcH8ctzzj\n8lfWSNRFP5104u/MG+dcly5WdEo/1zq50mJRH/D4m/n8fi/A4p75IMj9aZnbSxoQ\nKsNoRBAykzhGu/mTes6DBmHYSGI9IhmvQdKldaHyEhb7pZhp/kMumRpyRXFFXq6r\np/pjqnoKNqbDkhcc6z/asl5KX32s5DeRinlstYuIa3liop++32lCc0mtwsWewz01\nttCzu6oWU9zJEv0eUXO9yCDyplxkL2VFtcije+n32DmdPalfrE5Zqe57mfrFFq8l\nAtbv+6ZCYHNW62XSGoa9Aye8WUKf29qylzS+xJLxqOAr2S4ZMruMt64uo+66jPZF\nC8pCzONjqF+IeXgWXRdi6h5D0kLMAOLfBFz6Z+CpYMA4W1c9YsRN3sGAHqBhQNQa\nnxEIas4EePAO6L2CO+A6XVeWm2eHfmucs+NZXrnMurYGlHAltD3jlLGEtuebxpTK\npGLqQhmlskXZcvjBiKJe/FFe2G/YwQ17892BjnHWOwF50oi1Onrk7VoS1k8N9Mb8\n6OLzbq7ZJ7JPy4qcGOnPR1Dq+uwHIyKbHUsNR+wRJfkTejUAn17XHKDpNVawJITe\nYRGXrCIvMnvrOMKLVaPNySYVmdus7VHhZ48ZODohdquGXJ+aJ56vSxEYWPvDb2wj\nVYYrU5fPwprQ0QRgsqgNMiyMAZzVfmlrq9Oy8MccwMx6+b1mFdy6wEHXQwiXw2TG\n9RCnK2d5ls1GQzfOsspltSZu89zBZDxvnitY8+S+sYd+RsIOe6BhB1ttznjXMr5q\nXVpO/G3Xp+Zl/s4loQaLo83NMpG4VCuODg3pyTy6sDhLFLnIIdwFXoIrjk4LwFze\nL8GpzoZc+CU49X15+1EvVCOOrf0WU9MtS+jOqdV/ABoPnjoOvp74OPoMmcjJ7Wjz\nogLaUnPPkFi5qiDareZZklrYyzvAXmYO9qJg2/ZjL++s7cUvSTdN6EfDibtYCFtY\nuPevxAnJMgHuz4ZXTCAXurXYTnz3GVqkp4h9WWJz0ustcNKrdjjppQj+oWwnTOkH\nEU62baKeX+4Zvi9lai8V9EUqeo4Avif6umZeyfxKWmsTeRI4odS3DIc/sadc99RM\nvtMKLrtAw4rpaZUQcBf6Vjsyyh+qj5wxvlV+jDfK53RuiGqGjXjShyudVE63RUj8\nTAV94TwUn1BObh+g+Lr+rzaYOPJAlSRkbbaQtHEWt3beF6ZA1b0N5IZSVctFCeFB\nsCnQ6mTitnOoewM8S8bbLYKLNj/1XWD6vmoFP+P9owz3MENj3vyYdddAy9E4vO9g\nw78T+mzf2dpvoF/Ghqxjx9NZTp9lVS43xDS//K0yARcdxtQOSw37tGxRGQ6O8eCw\nL6NXnOYgO4/KVII5Sn2zk2Kb0clTSCfwARAUyjq9AMJXPG1Ndg5SDhjkEgj9aj3p\nPgWX8/syPF+WVy6YAbqtqRhaZx1Xj4ekLMCeM9zPJDQyeTuYkYUWKXyQ3wfuzMBx\nXH3eK0Dsz4iW4yqE0F9ztFqoj13F5XPVdDA7uMQkhdbJ6ncposrzh2WKfNsYdtsU\nI6zNy0ycDHrMLRNqr4SjSRJPcE3STOtMzCvo9JQUTyczg2Gj5GDz1bgsh5pZ8XVZ\nh06qPCESS3+N3Fvkb/etTg3U3bfByF6INNd6C+JGCgP0UCykcIUe8D6KoE5YFi4b\n7k9W4ZK2bfMuIeh75faQbTIDJw5nKTaMxhOD4SvPHe3mi2E5Zklmsaz3nX5Z78xu\n/lw3hBD4fu9c5BBtgzIpiGuAcpECoLnBiyYFKDk5qdbbmbMIcKueAxoObqGeayZS\nVuRcWb8Vj34ZzvU8SlBH4TxGhjwH8dp3s+f7Q6V0693SNwK7Kx9VZlre38oPGcu3\n3Xk7vnJT80G7TPINna8bQN1DqgyKRm4qw60nPtEYG0HkRGEx0USyyUSfc9IGE6Bk\nc993czg5AY8ihJRnSkzmTNRsYTLUHkM1JHPfZWgGZF/OGE9eOdEz0Uc0KzVG8Nkj\nsjqcydYnEqm2/U9dxoqckHryFsjh8tcFMDrJNTP9+Sja2I2npHLQcZshL41nwv7K\nSXtpEyajObT9qFgLXLgRX95STvREAno+STm1zHAjOMAryxK6uuydxR07UeBXrjOm\nFrdOQgsTaQ7uYIKpsjSOLC85tkc+2RCUWGlCLkMCEOlSYTysc+hxbpSRRgMezrLZ\njI4c7HvkP7atnQX4crpbWU4eXVeCMJRSGfeexUtsgUuShnojUGlkmDlT9hwDKBim\nJSVkYBf1Eqb+l8eFGczT/0u3rRn+ogw7NFBl/FnlsnUIlTaeb/z1kjYWdmljWKhA\nFKmfU44gTUkxGuOHp1S5JTehh3n1CW8tlLOiJZH4SKxEpD4yoUEJZXpzo9afsYVn\n1opznLmQNCBtnZk4fAPOAXpQg34OkKaGAHCdNAAtrrPiHmOtgGtsdhBTGPKwj0gd\nY8+JAmk3DXlXRQ512HDQm1v00SE1qdncOmgnUQ6dZWBNaxAdgzRPoNxVX54ukPmp\n11EjnT04jRqFFfIzMSXXoEtVooNqUHq8Wa/HzBZ9nECqZDLr9LOFwYABdPmm90yT\nF3sN2dLP6YfltCQkQEne7ndrT91bHGEMAC+nhkyFvl8Lu5CbbXVD77u4vY5HZDZT\n1u/0U9YzuylrxezQgFPWnfkgkdAf11aU3a+VRLWfdrslfQxany8H3S2YjLkPRSdc\nH4saZrKoA/FH554H5oWmJTiPbtFuAosThxYTS42u1VaKs0yXI47gQMz2/TMNTBse\ngQjXtGGlIbV/AdzQtHChhp6weikz8JzT7xfeqchz8Ba722wVcaqKf54qnpwA1AxU\nscOUMHiXSHwRuyO0XCxik5a6NoLzwsswGyP8rh4Cx+XAZYhICpHXy3qIdYixF2kn\nlcvh75OCE265RKfuxLhrv1N+il1PQghHGsPJ8kpsE91vBbef7vmQFdyEzu7abvSA\nDuzYVwjDua1jUew6OXBJHgw6hnQMBGPrHUXYMUoqP+07PAD2zVNUlRl7b+INe2DU\nfjP+eSsDe7uNL6YPdbbN673Qqcsp8FOzIh4NZdzjNfDV0EEJWsJxxcEJNkPuLfK8\ns1CN1L6AYmmWtC8qkdqMJiJW020k86+MTUcq54q595gLEI9RDhaiNqsZ9uBwniu8\nTHai6phOaR+eCCGJecLrSwtBWQ6eDkWtcSFucOFblRf13WT6aQZi4Zmv3BxdkVl+\n9M2yfpI/sJX3z5uvvf03Kgbw6P3Tx+VmtvDldv0iP6fNVjXq6ac//3H002y1qj/N\nnz41Ql+u5BMqf/hqKxYZk5q3VEpnpwf5VweDpfAxOx8+yhzu/T4uP40f9+80zhif\npOaTrrP4nqgDrM+nBDs+VRH23M32t96rp2JQkOqar61yAvCu0nIIFVaU5WCA56le\n2CqFe9VEWDGcZC3NgHlUVzVCrZrv5bugtSLGmw/lUYi43r93TApJCd09lD4oRiL4\nzAPPrwtFFfmUQHc0BROrKMIUPqIh8MigQegc6YNGAVhCoQsXDMVwmhKCKYBLp2QN\nqzROiR6/BXf8JiwLD8lHWYeLro8yKATyVB52uev9VVQL3OHr5FScS0O4jNg2ZJel\nHO2gnGlBRQ9UkdR/LgjFkjiSdWVU0XM/LaOKRT1FsNdTbPaVDV2ha1epj2r5eVnf\nPsxGf6pf2+2gvfSbyTQpPSm3vzzLj501XMPFcu2h9FYJ+qr/7sic6ottyujtX8m8\nnGH2shqv7+fLu+d6uf48XjSvHP9dvpLQK5RvgpugOL57GPsasions+ToGsDNNOoV\nQbZlG31EZ86H5m9qYUaVHzOqWM1I25OimxHX9KT0YSVZ+IUf4ReswtchlGF9mGpU\nMqVv/qU//uZGrEED9l4L8/jHU/ip6Ecy6HaCQvOckQZjNXFEGrWluWxM9aBDjME5\n6xBjdzH26yqnDekufhID8njRXWyFjkq47L5x0RXGTfL6x5B1VajS6bS5Q3Sin2+3\na8KROfLz822ZN+Cx+dPVgQcn/3H3q359tRINZX3zP78rM+oUbm79uxT8w+JZPiYN\nD3S2lun+t6NjnRiay91OhJ4+NLtZz7v1hgi6vL8hV4/la7bPyW6cs7wut5/UGd15\nXW+/c881/R4Ox2x/7XYdbZqTp36qRnnvv/1p9MviN6nhH9+ZZwzlT4+fNz85lqZH\nnC88KGz/Bt3zb2YT3j/toRM8q/H85vEgoq52LHKOM+2cbfgwLpHvqKu77cPa3NTa\n23M+YTO7BE1aYFpYk3QdetfepRthWiQQdVMd7VoZBhTu/s9i+etq3czdnSrzt+Nf\ntQIfOfs4KLP1fpvw1/pkdQwcJI3sIRS25NDZLDyF7FStbIyWt8D5VMH7UeSDbi2U\naphqaanywo/gSR9LL5JqwYxp1EuFaciTX2b3ihz9UnpX+8Kz3gVCHB5bqygovq+w\ntY+20yuuCxPmvyQjKTReTlqKxRVos6Ggwb996DIZChyfLgGI2MUmAhBB5t32OsQl\n3pcKOlT5t80WWY0pooOVrygVTHiC1qi71aMK2C4KL/UoIDZdWD2qOLcHqUqIemeP\nNJBKZFPfZUGLc93lU4h0b587IQMTW0S6JN0p4lBagOxjVxdKxvnWzpSA9i/Oo2rL\nGhAtwrVjQy5heVEvpoJ1YTrWlq7gQ7OO6YGFDfupUwJGfJnZgtaWi8Su+0rQM1ip\ndNWuYbHYF6DY8xUi8O4B59QeWX121ilQhL5Mnaq2MRaJXcwl2Ckyo3Eu13yhDlhV\nriFvpNVWa/BdeIbm+xfQc5dOlauWYAF3ewC6l5WjatEPRFhyTVSR4MfaHnHY58Ky\nFtUM5zS3uFEKc2IIDakuNcZzZ4q+0+4SXC6vdaJhrKt1Aij2wqxTDV+5qrloF8vm\nXC8pUiq54lnTKj5dzrv4uP6tXs5G3y0eHma3G++0Op/FvkKyyVXM8DwpoRqU8kvA\nz0zVPTY4eveXD5rHZ3m/ut24qM1ggf/pnObdr9OIJuISEDApVYL3yJ1FCqBiykYx\nVPeMHcbZqyfYzS+qKZwJyK5y0lBldrd7e/GwiScMnQx1g3MK1vCUavRVwtubF+dt\nuq0ie55KHOo+ZwJvu3czS5uI5uo4QzFST6HNSkNcQY0vnIWJNtRGAx6UdnKCdlbD\nNqw9kEv0Yj0TsD9hjdVRgIMRavRiL8PhDKj/a+31UACDEVlcjN5UMD8BqY2u+NAm\naLFtvYrFNSozMpAN5xrFUB6S797KBUN5tcu0CnWeqtJ7c2PbQXyJGbZyo2RzWBzq\nEf0w/3Q/evtaz6Uu5g/z9WeefZPaDRrKlRmiIM9/m36PEv5NjASD+7pphJ2vzeEq\nzN3LX6Zu/S4R7stOk5y8W8ykwwKjQ1Mzs63Ezj4dtv1iZ1qM/Txrnk682mXlU6eV\nV53qoICzTgPIZaV7JVMJnN0rzbH24FKb7Clo/0meOnb2nzTH2YPH1CkpLL+YCt+6\n6vB2PIW8I5fHzUM278EQ9PYQcYMN+1fqgaPTtUFoVNa/DSJxaOETh6KV2e+lX78m\nSl7d5stE0RrtWqi1UokGiiQ3h2WZoiBTy50hDNbVll6RKBrQxLHCWLksvyLfBHZO\nK5BGWfl0s+ikIqa+svSsnoMk3rOSfSq/Nz1BrOG5zny7Gbdfa6PZWQ8Wpk4sBjSn\nduurQFbctwx+n5TUrCqs2qXNN/Hd0LEbM9i86vSZiKmTY0VrVq6WLyC/rFelZ7ak\n1UgeSpEhNnF8aTCdlFZkZJIGkd04PxqMsSXnbURkUtrbo2/aqyfXGhibYQi1Sjdr\nb6R+Haxn1xocvcijX7XiFiFVRjFBRtu7DPWpiQ3lucbO1PDjor4bfVs/1E+3s2W/\nRzRTUUAPGPrrunIXHm565i48yF/kZvd7xMhbECBs9qs7U1VRqzy2qmJHe9FWFKUS\nydV+JyXStMestkA7222GoWLe9ufn2dOHdX37q0v9QkwziKFy+JxR+SYZtcpY5hUz\nO/Ut5KtXm1eP5av5pgAPH3MtPyaqcrDUAEQu0WuAInt2qYc5RqQSeV5B3u4o8uJE\n5KjLjkfJy5czEq2PCpCfEyO1SuQlVD/VqKI0+p9SrQk2jnRXEcH6H+VdkwxqJmr9\nzy8P9Vr+4+Po/eaXl4nfkmwfG88037+6D0tpPq3xVxGaS5ZUeHPJpbJwZ+uPwsm9\nuCvYSvII5K82FohGoQ/WFpbRR+SI1BTEVLTasurbFnpdfC9/Hq2FzZv34I/2HxOD\n9NMKLAkehf/94mG1eBz9spy9zme/GeP2Xv6rtTS/j83r+gja20+KLW5D8yKkuG0X\nsPuJ1NFkFukEPKl6VIrYxGfYCgTvo/9pOf/HPx4+Bypj5eq4Eg9Y361Ws9+PngeW\n9vP2RzkaDUeZzzbf6vIaDgfXVE3AU4n6BBsdmgvu0NzkcjFFZZlN403jNJsmZgp+\nChu4fDp0eKr2UvjwfOKlsPho76vYaCanHuuS6SYST+FTawSeohfHj6iKv0x+xFbB\nYl6Vfyv11OmNJo4KUmhko69tZ2rj7bBuTr5q9lg/cacfzYfEg8GkIrTGQlQEMezs\n9dFH6NmrJcLwkyUV1JU/KRRSKoTspcGYDEHbSiIaAq2bsbeDXoojWzMINlKo4Rc+\nmp/AL5NHUuIvPl7oKQD7Avih6STHMxIE1OI4qaT0ETX2BZUIo4bMH/FJy2n+SEkc\n2TPGaAKIDNR4LkITqGlxIu+n652HnEkon/QK38g7rVDRUjsvvANcrSpYDahJOPgO\n0qkGKLJnl3qYvkbdtMMnBadNO3SU3XXt+knQmrZdhJFWqgLv9k9VgdZBH8IP8+lX\nAkuBL44LINKe4MoeIuweVgbr49WTJ4rRbOrkyZXzfIkAYa0Fu50+iMDnEi9jCkGA\n4clGTdRZHzZbjnzQJxMFeesMZkbk+3q1Xm58LllTH3evJKts/8JTtV2KqgRIzrLQ\n1HZ5Bl47XPOa56M7zIrp6+6l0ubAi3eONkcOYgejI0czmtVFHMUYRung27N6G+Qr\nTw+osGGNkrwQimaUFtbIZYY93jL1Y3zkNYdY46OiE94NMEMglAFtToDtPJvUAK9M\n7nQg+BHkrEmhT2T+3cPi5W70/unjcuNTXpqMHJutKw/85uBqRNVHmrrnt6umHHbY\nmuehEl9tn5/OCpHbldRzmKWZ2/m4bK8zzMHd2zoZa+HHqZB9jC1ppRx0tfdc2K3K\nk5oJrZH2odr7/sPPp+Ked8W95yHMVwukvHevwIh8LkUu3zh8SRcQKIMErXUhGnFT\nXQlR6JF4E/DyECR2vVfRyJ3sXYiCj8zBQEU5SP54wbNJPMAe0rmcoaxeFzXhcMkT\nJ6MQaqtOSYqOqqh4IlV8NKRINeBQ2GY/JsYE6a/z5fqlfpj/o94s6nNB7CJNCQl3\n93NHP9VP9afZo3zD0dtP8r93GwOpVBv5T6/jx0+P63G9eReW5bmdT7gWlzMJo1oy\nkaeEPpxSp8uReCNwVLWNbB/H8sc5D1jKj7iWHxEoptLwFVLwgrZeDT/IVy1fpbPS\nTXZ35H/PJfX7EKOQTtxpCgUjnLzVA6wnArcYXJXSBES+f9Mw5ZsQWllgpMDNDZ2G\nBj4GxnmICDqN0FRZMzCJRplABZfMq6458MTs+4uO02kxJZylBC2qMOqr0JmUc9TW\nXYoZDnSRlaO4nyaBsU/lnAFjC0jMBoYvY5GFmjBNaDtpkXCKwWAbDJxyot+eNpx7\niUOVs2fbyL0goISN+AtmfLDRQhEjLpDYzR4XKLAbNi/0GmfwyC3YOKOEbLlrAWZj\nKjnRVPIeTCWP0lQmlHX4Wn1kRH1kPegji1IfyZRAx9PpAxnAGaUfT/CWEgd73iiR\nI+ooG5m7rACDhB5yQUUm65m9nBXZOrB4rZWoE0S+TyWOxatKUbC6yOShmPoseBUa\nH6RNzHtJycM4C6rKvzPKlV2TcRCqWGxj3v0Ws3w8/VL+9qlzV/6ovdlbBfDty965\nsMABkEIReZ75CMdvSmxAflM6huRS0XvfItAy6IAsob8HqLmB/pS+acbfN83C9TwK\nNeS5cC1W7J53xcluRN11awLeOT17CwgzD1BHAB9FvJxmDjm/OeRRmUOaZq4FibNG\nhFUBj/si8sVSdNQ+rlX1cwrqKieHyATdA73ZzQUT6FWerZr6iDC6jE7Rl2BtSIQZ\nUVSDl3nqox0niLVVzrWBR2pa6KmFGvBWPrxQhk4tMs5qn8S5wXgddSB3TS/OA7lF\nCO8leF8GpUDdr3OtCu5QMRYPsyLhmGKHlzIIui/xhrUz8Sbw3kSHTOvsq8hX9E4d\nF29dMC7ep7pG6KNpjVxifkwfPKTqpmJhTGm6jAsO/qlbMEc18pwI6DpriOlYUppM\n3bMJUibBn0cE73yUtQzw8A7S+ZCyutKLNkzuJ0JdSC8ETmQi4SkSJeWsKCkPGyVV\nzgyBXR2JEnYL/gp5EVXoTYupzxlWgHWs5Wu4uyM8bSN016QgdMgw4aO7Ch6q8NLC\nMweGaJLmNAXPnWOYfPDywjOkxLy4cCC4NEzBCdzQQmIJEtg4npR4PtV3aWpTZyeE\nbcvwyAWt0NvLmEU8bjCZeiiPkFAaO0aLCqHJtMTeGBQ+DO28vHqty+hpqJk+9tCs\nW7rCaIaN3RmmQ1IJPE0JC97pw8VWNXamaD9o4jLQ3IDPPm8BU7a0KakfylZ4A/7s\nalXkr1KtPm22MIUys0J7UeVlBDtlHUL4KNppmHfYWRNP/TMzBy9YiKjymml73seh\nf2aahSsVENFpFg5a5BS9Aam5AT6XCbhuC2Sd2Ypkr4CSEiB8sPc1bg4NMH116syO\nLvRyuNLfOVhRe1sduizrY7rOvCswdDWoW3heiPgFumFasDZMi6AbphJD+5xlKRAl\nbTOUdk93g+3ZDZIjpQ7LbM4wHMalcTKaL6Xip2wM+qn4ETuD3lpKQcWhYRSYeKmo\no3saHpYjmJUWLLhWk9F9cBmwa4necC4mehNTI6+qWqDZHq2laLSWsqK1NGy0VlHO\nbpuETaG3pfz0tjQqZyPV4Mok2KmBxK9Ne5iaTKNMGV1Cr7n+Rat89VLzCjM2qAoq\nk8K1P7ObZcXubWHd2BKm3NUcQx+Uc3zd/kAvtKjckxcHXmbukHnogKGT9IO+GHmg\nl5yo23u1s0Qdn+zxL3u5oNsOahvz0H4hqu1gaayK65N8OJDqXOfZzvc0WF276aFY\ndtklauUl7LS5CaE6U/j9YrkTsuU1vVSAI6nHD9qdRnz39Gn+NKM8Jrcfx/KBSLkf\nj+ZjrntP0QZZxyUycBFOS3EtI99pr1BOTEoJPs7GxWZG8niQnlpPat7k0G16k8cw\nra3yqgIc0tOZBir+7Y2CrXi0N4eoSkcCpKKa/RHBETF6oMtF9wK8k6M1CpxqGA0h\nngqFmKBOy2+l/OHzaj17xIt5xSfmVVRilkEUInfAMVQDgJSR1K4+bYinERaj5bMN\n1Qe0zzY+udw/5rzJ5f6Jv+TkUmTCFWmqNpjt7UN4RJoiVqQ5KaC2pVHCZy5/L9ys\nLVw3r5O1ZBuNg0+nFbjiyihZTYlfKV+rCr9ByjE9wTKSEmC7JpKq/boykFrlTIY4\nGlOKJApX1KK4DrqXcnqUMnkH9Il80+A9huqIT5FBrXLYYeAlbJOHDi3mQUbgREYA\njRr/gvIs/nxKmM+8GuERcnoNwDM7b+HbeYtInbdEJG5oGglGHJF0rDhETOGdpnBw\n1Iq447sdRZzGIGLVxIQAJ2LMFVpKbZw9fe+1QD5MwXZC6GKoyi2EQgtjieUyoI26\nok6ANt2KOqn5ykeOHajv6gn7QMwyGPugUI8/vBMNsJS+hyDckzYGpcrL2ULttcDr\nSeqEWozK42PdyqofTsfqC+F0iAI8I4msPZiTsfMKhBXCMuDZiwFUKvw7KZwqRIBy\nMt+ZchZrpiwmhKrESfAgeTBWYDSE8/JUZSYQAzWJNMEP+XjUh3BBnorOTv2/wjAq\npxS2Fx5CGhEPQSl0N+R/jLYUyTugpXDEP0zYLZ3AEaSlzDtPJ4vIPtSZMaFwpMmM\nAaEL70IXcQq9taihGZ0+EfSHej17eJivZ6Pv6ufVS1PVtqb850nVArDqGvnZB47K\njac7TP6Wow/NV/9q9If3H342YKzV/o3Gt9s3Gss3Gs9XC593LuSH7N/+Wr79tXx7\nsr7v1+tnqW8vllNVUAKukm+ili8KyqrEnDAC267Ek5hM7dBSTiYQwIWsgLhFVW0L\nLBtVTy0iWDSs2gOZgPUrgmJsVMKsjDDrt8qr81aaSEbj0c/Pm+HC+sFhGee5bha7\nN/Xk3HQrJVr6OnxkFF5OaUzgwTe1MfGr0EfhBTC3tvrCr8KoLRAC4XYW6GR6fdpc\nRM6yssETGlWVKGhhwH8dhbH1x7RqCxZwqJEgVH4jAA5Lx9iLP4zVDcqU1VVDJeD7\ngIzVyXbgjDVML6fObW00AXs5yzTXMyQk+7nQjUnp7qZQJdUOEtrlwB1EyJ0MdwFh\nsEFKDS8gmhihqGSHKfqCEtEhCKkciBNr5xWd3GGffjCmAAbRCgh2ZGNBPdhONNqQ\n0NtGG5pY5MdwOMFeN/7EpCa7KpLfjoYfqg6MxiMEddKtgVdhCH6N3tRL3Jp6OL82\nfGMPov5BMnbqTHBX3gKOHeraqI1T0mjDtoHnARFjNRMsIlY38eySTK/pipfJADhe\nBKsYpQ+zQlwaq7EudvbUv4uiRqP2beDZEIKalOEc0I9DOMcqps9wrhayXUmFvRDW\nT1CJpGOjji7g6V1Cy4ZuHk4UNkyTZmDTkAK26TvDeblzM5M/pEdSI1an6TYODdaa\ne3Omh9Q9LrKHWn026SXcmHFqyfTVjAk+7zwqqvGN+gX7P86fXn4f/TD/dD96+1rP\npdTnUryfW7rZaeYKyeKWon6+bf53Xu//Uf63/FslwTurSsKtP/jbHp+k8ej7erVe\n1re/ah6q+/rI6D88YB93ryE8SvuXnEKaw2N0L79v3fq64T8+x7nGhHBRGNZO0dzj\nev/tT6NfFr9tlARuWWkrqWj++Lx5peuyleZNtNeFzxQGB9b9Q7952m0Vt/l6lHEl\n+wGz+c3jVo7dwT6fqob6G23FHk90+G83qY3vzNgOHmrowCodIuE+CsUhkmzt4BD9\nbDUyukN22NqXYSk86LSEchOiA+1q0wR2u66zrU6+u+xnuqVC2wNscDHH/hypynwJ\nF8Vs8QzViA+ohmrIdGwTbA6qNE6vuipQpQOlWTrXCTxCGZ+W6NeyvLpSZGdAaU98\n/QBnBxqAWWWky9Z0CEMEL1ywhTeLGxCzyKyPcILZIuuzSfjsPWSQuZ7f3E1anNc8\nXY06yG7yADvI/pKOOyL0k9LOvKZ6muoKva7SQ0UFcJ7xl1OmJeEKND3xowJMP2l8\noChzyHxPFF5tuFR6XnwFzVf9unRHPsGU1KZ+g2NBTxwKf4lD2JUXr7vbU88e9BSF\n4rV3jI8OCiRGSLT+woOjIveaP5TU/K/0lf/RmgrMHrGvKKdcsOnVFHEcG6VG2Ub6\nXCBMIHFOZoFeW3gQK0OZ8/VRE1O38ALI6KQGvBoKjqep1AMbKTPqir/IvVYmTyMT\n1ZvxnowZyqUNGqigSQ4n/WIRY+m53YrWMB30R6roqV/aWEEIdYWHUEerk0WQqyVe\n/aqmkmmTsLlaYMhZ27AVTpmge3W25wk6SdE9pOQnxhhe4i3xp9fM+7TzSu4AeYp/\nQXR+BuzIisIr9QE5LaFENHx7qwYGM17Bidc8/LT3Q+z69NHvwda/om/2MKWPNm32\n856Pnza7sfUTrU1K3XntAql1Ry0A+CVmGjUXTz1T/r/8hRcL+cn7IaZ6UnycTtL8\ntkgmIq8S+acqvcnEx7zONxcM/vWv/w9UI5b8\n-----END ENTITLEMENT DATA-----\n-----BEGIN RSA SIGNATURE-----\nYpDSebGd/NMfCOD3Hh41423TP3LhIWdrLN+FztAi9GzKOHr95Q6Nu3+7H4DK+5IS\n76RjEoV5fDd9JprYuNDhe+QePjHAlJW6F6EXr1soikg0veXwlGakK7hCPBkvpjS3\nAlbzuB4i+g+CycaNMiPDs/dUJcGsj/lXq4Pj2Aqpjc2OHF7kxoLiTM5Lb2DAmNaO\nyWQEDct8PD6nkQQ8YKXwJM7LrXgfBpFYyYGs/+YtXyYEPP33/666lHZlX17Dhy5D\ngg8cyE9w86WfDQ0HBbv4HDbf6kdobgkVXZNMY4m+qfke7bOHYPZ8FAuaoW6QA6Pf\nszqz1Kv3lMxV75zPpwq0zY5JBY16PIjwyrx7oyMZirQijGW9/dDamDzowH4keh3f\nq/rphE+78tN5QgDi1LynaYRnIkyTSh4ozz+4YUu2YOotQK0UNv2G7N69DLa+VlyJ\ndt+W12x6/Gt/wBj5+rNvv80AQ1UVCe/zkCs57EDaxa6pp98ZnBDfr7XDNjsjnIbK\nHFDOdkeEsWXL3284F9vDEvbc4INqqRBy1w85fxwMplAMiop76b7rnM944c2XW/De\njD60LA8Uro5a4mtFkaw+wuJrraYyrmYYCJqwdOYk7RZQ3byPoEq8xRBsJpCAqn4J\nhyXWotl+O5JwZavDQc1Nb9GVBmCTOjJgX9nwBnyFMew=\n-----END RSA SIGNATURE-----\n","id":"8a85f98a4e009a5b014e1529b8927f19","serial":{"id":4718060395689248000,"revoked":false,"collected":false,"expiration":"2016-03-31T03:59:59.000+0000","serial":4718060395689248000,"created":"2015-06-21T08:08:52.000+0000","updated":"2015-06-21T08:08:52.000+0000"},"created":"2015-06-21T08:08:52.000+0000","updated":"2015-06-21T08:08:52.000+0000"}],"quantity":5,"startDate":"2015-03-31T04:00:00.000+0000","endDate":"2016-03-31T03:59:59.000+0000","href":"/entitlements/8a85f9834e009a85014e01e1f11737ea","created":"2015-06-17T14:17:41.000+0000","updated":"2015-06-21T08:08:52.000+0000"},{"id":"8a85f9844df26b1c014e152980df7f85","consumer":{"id":"8a85f9874df26cde014dfcf1b4f65e08","uuid":"50f73b81-0242-4f9e-bcd5-d9fac11715af","name":"tzach","href":"/consumers/50f73b81-0242-4f9e-bcd5-d9fac11715af"},"pool":{"id":"8a85f9814a192108014a1adf1c7b6b39","owner":{"id":"8a85f9814a192108014a1adef5826b38","key":"7473998","displayName":"7473998","href":"/owners/7473998"},"activeSubscription":true,"sourceEntitlement":null,"quantity":10,"startDate":"2014-12-05T05:00:00.000+0000","endDate":"2015-12-05T04:59:59.000+0000","productId":"RV00007","derivedProductId":null,"providedProducts":[{"id":"8a85f9894adf01b8014adfd14ae81246","productId":"220","productName":"Red Hat OpenStack Beta","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81247","productId":"201","productName":"Red Hat Software Collections (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81248","productId":"269","productName":"Red Hat Satellite Capsule","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81249","productId":"150","productName":"Red Hat Enterprise Virtualization","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124a","productId":"239","productName":"Red Hat Enterprise MRG Messaging","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124b","productId":"84","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124c","productId":"180","productName":"Red Hat Beta","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124d","productId":"70","productName":"Red Hat Enterprise Linux Server - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124e","productId":"246","productName":"Oracle Java (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124f","productId":"183","productName":"JBoss Enterprise Application Platform","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91250","productId":"240","productName":"Oracle Java (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91252","productId":"191","productName":"Red Hat OpenStack","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91251","productId":"86","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91254","productId":"83","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91253","productId":"69","productName":"Red Hat Enterprise Linux Server","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91255","productId":"250","productName":"Red Hat Satellite","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91256","productId":"205","productName":"Red Hat Software Collections Beta (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91257","productId":"85","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91258","productId":"167","productName":"Red Hat CloudForms","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"}],"derivedProvidedProducts":[],"attributes":[],"productAttributes":[{"id":"8a85f9874a65e793014a70f74d145dce","name":"ph_product_line","value":"RHCI","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dcf","name":"name","value":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd0","name":"product_family","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd1","name":"ph_product_name","value":"RHCI","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd2","name":"management_enabled","value":"1","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd3","name":"variant","value":"Cloud","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd4","name":"sockets","value":"2","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd5","name":"multi-entitlement","value":"yes","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd6","name":"support_type","value":"L1-L3","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd7","name":"arch","value":"x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd8","name":"description","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd9","name":"stacking_id","value":"RV00007","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddb","name":"type","value":"MKT","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dda","name":"enabled_consumer_types","value":"satellite","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddc","name":"ph_category","value":"Subscriptions","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddd","name":"virt_limit","value":"unlimited","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dde","name":"support_level","value":"Premium","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddf","name":"subtype","value":"Premium","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"}],"derivedProductAttributes":[],"restrictedToUsername":null,"contractNumber":"10593540","accountNumber":"5530698","orderNumber":null,"consumed":7,"exported":6,"productName":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","derivedProductName":null,"branding":[{"productId":"69","name":"Red Hat Cloud Infrastructure","type":"OS","created":"2014-12-05T14:33:57.000+0000","updated":"2014-12-05T14:33:57.000+0000"}],"calculatedAttributes":{"compliance_type":"Stackable"},"type":"NORMAL","stacked":true,"stackId":"RV00007","href":"/pools/8a85f9814a192108014a1adf1c7b6b39","created":"2014-12-05T14:33:57.000+0000","updated":"2015-01-12T20:24:03.000+0000","subscriptionSubKey":"master","sourceStackId":null,"subscriptionId":"3456439","sourceConsumer":null},"certificates":[{"key":"-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAqGQybHnChDrZhX25NFLMsR78scdXSuOumCnlupAdiFevlEXM\nbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQC9eGRUvsZ006yHpBuJmO\nv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLoeFDhGYI2OYavaOGDe/VT\nSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIaI4d3O286/nichOcp37+J\nd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSVZn3lX9xR5p+UsSgfa5J3\n4uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQABAoIBAB1e9KiVCEeWGDC/\ngBlPQ+K0+/BqS6CFXAOwcyB6WJxaZwaesgyBhv9uuJFBS99WeewkisykmtoSUqur\n5TiDkpki9EkU4JZgLkxR9NcD0nf7UxFGv25MMaoyhAyEkDXffRObsPgFoGJ7/jO4\nBaJmvgOpYT2XJiMuQET5wEmCY4AQY9uz3zc+38pJFd/uLDAm9r2t+mfrKJ1jSJne\nEU2gVWc9zMPh/AhjKwnhY5GAMZMO/2c7FsPc2q5A5H3Mj9otS/j0pnp1rsQt7Olr\nPo5qZ+WSPWY89HmsDj4WuYUICRL1ey8pXkKZIjSoca0NpqkwGE3WpZk1QLO5fgiF\nVB88pPUCgYEA+/FASGum7vBABwkkLaIgY2gizyGr0yKbUso7mm2ziyG0paq5s05I\n4bWSS8og+ER/zMWoUtN3ytWVf+SJ0Sa5+N01FsJpgi91zKbv5wj4QF9xN9+GTivw\nX9CrjMElkVKokfuNl2AR5CkWYM9FK5WP50LlawZirmGS1G1nYvmSuC8CgYEAqxp3\n4gKth057r7afaOCBDcY6TaySNCfZAXRkuuxcT8Y9AplLCmZFhF33r8iaqzu12UGK\nQgTpCc5+xuEfTTOyfhPgcx7UaiaU3acfRrdPuvzeU7YNE0e1lrX61CgbWJsFKMdq\nUWf5zXNpSg/9xK57jGNn+8tR6LrXTgI+mAlLfHsCgYBBgKzU52BEeSQ8cAz+7Er9\nbWK3daqlvzag5MFwWhs3DjFYbTXQv4bFYB7EI65EvhJ4G9+ygRaBHty6nqGSRj5N\nzL1zyGIEHfDDn5d5+uQIYIggHbZedqANWURw2Pq6eMIpCjz64VhleKU/0EPMnBsI\n5mSdWdCoQ+gX4MXjfr29swKBgCqdrgxBxHy15IKQRsX1XM9UdwMPn16UKi19kvUn\nl5pa8qkqCxGtBVWBngZPPY62kYVqGIh29p/1qYfZXFV7MdLLGpUxsZA6ycsnK9gO\nIjKddrZ82mbZ7nV6H94lmyIHglJ00Jsz/XjZbPkAYKFTH/yIacbCDkWb+7I3RuXR\nMtbvAoGAdUdLQNRlUSH1ZY1yjlsc2ZKSsyVZ1tSkF9JNnX2OPv6JzkWST5bDSYvX\nBeNZwXG6us2GLnsI1LSqMpzeCLKjpH24337rO8fbbN9g5SuenOSlq3Tne1gXwGpW\nc0PemYSdl20++metc/5y74lqo+0hbiDc8guaQpOITff5k/1kqdE=\n-----END RSA PRIVATE KEY-----\n","cert":"-----BEGIN CERTIFICATE-----\nMIIKcjCCCFqgAwIBAgIIUF0cdyO4/2MwDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNDEyMDUwNTAwMDBaFw0xNTEyMDUwNDU5NTlaMCsx\nKTAnBgNVBAMTIDhhODVmOTg0NGRmMjZiMWMwMTRlMTUyOTgwZGY3Zjg1MIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqGQybHnChDrZhX25NFLMsR78scdX\nSuOumCnlupAdiFevlEXMbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQ\nC9eGRUvsZ006yHpBuJmOv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLo\neFDhGYI2OYavaOGDe/VTSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIa\nI4d3O286/nichOcp37+Jd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSV\nZn3lX9xR5p+UsSgfa5J34uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQAB\no4IGHjCCBhowEQYJYIZIAYb4QgEBBAQDAgWgMAsGA1UdDwQEAwIEsDCB3gYDVR0j\nBIHWMIHTgBR3LqXNNw2o4dPqYcVWZ0PokcdtHKGBt6SBtDCBsTELMAkGA1UEBhMC\nVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRYwFAYDVQQKDA1SZWQgSGF0LCBJ\nbmMuMRgwFgYDVQQLDA9SZWQgSGF0IE5ldHdvcmsxMTAvBgNVBAMMKFJlZCBIYXQg\nRW50aXRsZW1lbnQgT3BlcmF0aW9ucyBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEW\nFWNhLXN1cHBvcnRAcmVkaGF0LmNvbYIBPzAdBgNVHQ4EFgQUH4sIAAAAAAAAAAMA\nAAAAAAAAAAAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwEgYJKwYBBAGSCAkGBAUMAzMu\nMjCCBM0GCSsGAQQBkggJBwSCBL4EggS6eNpNkk2T2jAMht8fs1dnFvLBudPpcWc6\n5dCzYkTixY4zlhMWfn1loAsHOY4s6X0sOY09NlWNOZ45Gc+wcco8ZcyJV8dndH9j\nOkmm7OKE9qd35fDAa47RC2c0P/boORPkIpmDuYIXQVPV1TuG5K5Xf8GRJCeyJ9h7\n+jEmDjSBRfgL5xcBF2hgQZx5Upc9GadfHJwuza890milLA51tVXboFX2RqXaqtH/\nBt2DsFZ/XXVqLSzPo7nxqrKXGCBLLza5uWgaUopslEelE9btenaK9qXEgg32f35/\n7HF0XrF2e06rxtijES6rZbRPX2B0ipRGMY+LttVOrVBu1d6xRYO19DYeFpvd6vIF\nIQ0moHuUURWh/KC9DQUnZ0t/UinXgV66cwu1NMuig6sLwj1P3ey9y2zi7Yrk4SMd\nevI0Wa2YRl6N3lYJy1bVtVuddu+l3jO1U/DPnmkuwf6WMd5LhCHk7zpi/VNY/42N\nIehId7qf/oMt8+w5aAKlC6K+CRX6pJXwrSb3PrQY3TDqifPUO18a5STiLbFnEi4h\nnT7DfhkQtW5cks7irdcjSnbEPxp+71+BlFej9vBd3zNLc6vvQOcPv4o453s3k3u3\nwv3s3g5Y5u3wt2l62bwcybrY3bCcWTiToa4XqaAc72bwcybrY3bCcmaoa4XqaAc7\n1/c76yu9D2D2j++vPd9RfZNDu8jQm7/k/vMvvqV3fhaYae52bVevuq7U7ed3qin9\nkGbufS7pN9lseGO8/Lv8f3+cQU72bwcybUcscrY3bmcoajS4Xqa72bVnN2+Fu9m8\nm7HN2+F++qXfQLvXkO+nrt/B2gp3M4OZ3C8LlH92x5O6Y/ee/u6F2l62bwcybemi\nmw8PWxu2E5M0snEnQ1zckE4XqaAc7heA5Gt2XKP7tjyd0x+/sfefo4w4053nj76+\n+85Opxu7yNNP72bwcybscrY3bmcoajS4Xqa76Nd3/9IKeb7zFdqme2bwcybeCKbO\nZ9LcrHK2N25nIk4HKGo0j/jY0nxMbhepp0529J/dO/3np3ed13m+Ed9z5+7cvvrj\ndiId4OdzNDmd9ef7F7nd+1pxT1Xclm7BufHGThu593O8SVpJJLZvBzJtRw7j2OVs\nbtrJxJwOLs1DUaXC7Nyprt+D99Q+1cX3dr76e+82d31L76s92/a79Aezu9m8HMmz\nnLHK2N25nIk4HKGo0hzOF6mu73mm331Jdy6TW07XcxaAr6Pr8q7/OdyCd4krSSSW\nzeDmTb1MptRwPTHG7HK2N25nFk4k4HF7FDXNyNI/42NJuTG4XZpVNOnO87Oxg/ep\n0/kg0d40OzCcMTiOl0G72bwcUcsc3b4W7vP0PYPaP78u3d4GgNO/70DnO7QU+lPN\nQ0oSURqd3Vu8+AiN3ne76su+qnd1G76U76s/dmexvxF3cSl8Tu6v315u7rPu75+n\n136xe8QLEKxdmexvxHS6z/2Wx4Yca76y++kXbinb9Du//3o13ya72bd292+Fu4Z/\nf9l2413/6+86LvpzvRxhxpzvM7stjtxzvk52LkO0SnfTP+9HO+qP3u3wt30L7hud\noOd7N0m92+Fu5TfcpvJvvJvdvhbvZvJvdvhbvvZvdvhbsDANBgkqhkiG9w0BAQUF\nAAOCAgEAPZi2gLv97xjFoN+rZSY4Z8YoWbqz1BGh1PVHexUnOSq0fk3m6s5BH75t\nkc9aotvkViaWkp4yed/7Nr7sC0fgP4vwwQLQDGdxsr0Ac+PdOnJ1uR09W/+YgA+E\n4D4eZ4VaommfRs17ITY4mwOPfEKkc7FeZOksihCMKYFdrIhdFDx6sGxKRxVH0MaX\nl+DX8IXOxQ6guemWA/Z7tZQ6iB7ET45d0fo9xLZ2aC9OhQoDCmcPyklq2Jzuroet\n5nq7hV2/RvBXP6WJOJjKActci3aWu7HPVRCvnWU/RrZfMnDBX0ahTc5OayuhfBOi\nlOb2NHboeXyMV5TPLVPCeM5UqoVejKsIcK/4t6T2SoRaxv25sGQXd0mc+Nv5LxhZ\nO6ZQywAUeSlMD3IRAbH5AEOQutE/Yqyt8x60OUFN8rdvWkJsFqu2BuKumHSNef/C\nhnxF8dgQaTJ9/MoYR9LBnF8gGjT4Y6SD1zQ0/oW4ApkzoobOxBbepzrl3rdtzphN\ngIP97jnNoq4u0vsyVft3DMynK/5JmIXV2xt1LR1GsaQi5i8Bd8KlU1FvevrucFRO\nj8/KSOmI2ekVs+iVfX51FMe+ZvEn1yDoEvTQo2nbBvRRNyVdIHUxm3f+v+w8ZY2X\nD+duzspDP5ClQ2AN25R7qHUrcNx1LJsK4gUGaOec2FT60zpE4KU=\n-----END CERTIFICATE-----\n-----BEGIN ENTITLEMENT DATA-----\neJzlff1zI8eN9r/CUt0PcZW5mpmeD9K/rX3reHP22ZW95K333rpKjSTuirEk6khK\n9iaV//1tDr9myO4G0N2Y6ebepZK1V/wQMAAeAA+Af17dLp5WL4+z5dU3V0XysRI3\nk3ScZHk2zj9OZ+Ob27tifDf9WN+maZUW9cerr6/+96V+Ws/Xn6++Sb++Wr3crG6X\n8+f1fPF09c0/r1a/vsh3+vNfE/l/lfzhp/pxtvkXs7vRD/V69N3D4uVu9P7p47Je\nrZcvt+uX5Wz023x9P/rwWC/Xo5/qp/rT7HH2tP569Mty9jh/eRz9IRuvFre/ztar\nr+Qb7v549U329dXj4aevvpHvNpN/O1u+zm9nm2/yMHudPciP3r2NfOn68/Pmu/yY\njn8UV/+SP7yub3+dP3362/yu9Z3lXyyWdxuB/LP9qybNzy/lJ11lSZqP02ycFP+V\nFN8kifzPf8u3nz3dbf+y2P9l/k0xlf/Z/KUU83pZ325enibFVBR5Iv9tfXu7eNl8\n+6uiEEk5nWw+/Xm5uJOSkb/i//vnVfPVsuaHd6L8Wb7Nw2z0p/q1Hv3h42I5+vMP\n734cfZC/+Gy5EZD8n1WjjKvNByxv7+frWSPnzRte/T4p/1bm8m/kH67+Z/u9Gvkd\nPquclkdZfW4Ed6LEd/Ily+flfDUb/Th/evl9VOw+fjQetb/dt7O1/Ip//uWnRnEP\n9U2jj+X97GFcjFfNK8br+/ny7lnK9fN40bx0/Hf50vGNfOl4+fy4an6hp7vF8vj5\n8l891+t7+S+ud9/+evPj15s3vt6+7XVx/W/L2cOsXs02//RvN/IPG1Fctz7jerFq\nlFbfPMzkL/6xfljNtgJTS+rT86e/vSw3v8HH+cPsm+vr69n69vr51/m1/J5j+bfX\n8jcd//GXP47/493/HS9nd/f1uvk9vib8/O5Ly099lK+8q9f132a/P8+XUvyTMk/k\nQ7ic/e+L/Oe7v63rT8337Mjz6n/+9fVRkZOjIjffAaHJUq3JP7z/8PO5EktAifPV\nAqm/u/lq3dFfidCffHtLBd6v189SIWQpl0opC0/mYmcpeCM5E3IoRuLxoRdZUZIf\n+srkvpRPfoVxX/jH/8x9VW6PvJeHvVJKV/iSrp1gHVxK5c+lcMk3q5KE6kx0HvvD\n4mV5OxspfQrkuFfNa11cC8Z/bz/l+oP8ih/CdTIKny/NYEJVk9HHmHSFcjVkhaE9\nDlVJoQMlldWV04zs1XQxXOnVoBju4NUwMbx/oKSCo1WS+oKjhsgMuTbXyBwTMK28\n5nEmJ4VK59ydFOZh7zeqDJjfyShEVrAxCtmHH4a4g8s7QlebGkMXntTmhBvcMR4G\nUPcFH/zCgdxXRu/iM90VFJ679FvemvrKlaySJObsKOTCiwpuVAm5DmZEdy75qye4\nEV4S21fcUuPJVtxyy5IM+B2FJB3we0z5UubVoOwtidmELqkPo64WkfGEDvBZIT1m\niMeL1D0Au5ZNFcm58D/U69nDw3w9u0L3Tldimvyu7J7mSQqh+8PnjYo3VauDK433\n82o9exz991dg9Gt+cPyP8Wr/XmP5Xk6IcfeOWoM9fNK1/CR81DtIqmd8Mr95PEip\nbYtVmhLUU7bUU2DVU6jVU3pRjy58tdVThq6eQqeePKnw1lO+STfusWGe1A8tTe2d\n51eQvzyqZ7F7l7F8Uzd/WW0/W6Waw6dcy08J3222lAKWx7taUarC3O47CmmjAacu\nn0EDjeCH7qFWJdTja0sz6UaIvTT/fXbz8glIjtoyTcZ3m1dwJK1t6SbXzceE+GQr\nkJl8siGqE83dGLQCOR1n9RBcT7A6UnsfCD0jnA+qUNr1QT7qo5ArirA6KqoE6n0b\nEBRGH8W5PlzRkzn1t8ROA+lEUSqQSQfYWkVlHbqOqjrdsIrStDwDitUK/GrfQtWC\n0jQhStfcmfYgRWxExsgwpHhcQiV9RDy2Rkl+43F5XUYfj1XVrCqZUqxBEwDMtd+u\n52dgx3Rdfp8Zgdp9Q5Veg/c2proan8OaBWx8TpjJrfJxrmjZGFsK4CFD01VrlW4n\n4FRNmQakUHsRYSOonqK/mirFYkKHnUrbAWmwiEoGpYbBXr2Ixm9JqEQrXXipInHD\noujQkFQDxQRgxGqFVftBqdHYhuj04FAQFZ+wOcFRTCiwg6NDRYAUj54M7TRaH62H\nBhrwrAfXNitta6RWgZjP40TmaKqS0q5M3HqUjgAITA4CBkDKOjQpIShdk2ZLt0Px\n+2HKXu328f5GK3tyMuajB4DTRJTJWIlntmiTMaJONi6pD51sPFOEOsmTiqITTe+S\n0rRk7VaG6Z/UsYHAWDHgUl2VWo1LnfphfirVHvthWrQppUuhOJa6ZiOF2+gI+r3E\n3+CojCUeAGkr1z6aZX1wiyKpXKuDAEVPmiBAayvwE4rCrtQpY0JB6FtqARK2ULSx\nCtZC0cYM+uxbqiEnNICMSH+pT3YffbKwnYyyPVYSSp7aEhD+6Xbi6MIloOGfbEpB\nDY6txLyqE1x7SLC60TXOTIviimAmL5Ew2mnHMDNHu12Z0JWlpvRSOBdw08zeunwo\ni9BCC11Z6g4nzbL81JXYFROrPmRoonAkYcKSFVWpP5JSREWnBG8oWl4khRHPToUP\nU/aqVUgVqdAKG4V9+PeB14gmEroXU1do8fQlQw3RYkzazxyu5z5SYLXFPCE1+LTz\nJLTx9R7m1mMr8aatkELrY1jP9Tj2MfxQnPqY65FIClwVjahf4eeanSqCuJrV8LPN\ntoxgl2HNXmJuvKG2xE+XYGpZVkWs/qpXYYLWViZ3VE06EUdl/OnbxWrV3gT09vn5\nYX5bb3610S8P9Vrq4vEKvaLm+fnWeOYjTwtdHon6JvJREfJZ2D4bm8fk/bc/jX5Z\n/KZ8RP5+M57Vz/JBEGP5o+OdRDZ/fN68wurpaF6pfTj+fiM/UD4PAnoetnIaJuQ3\nv0IbdqXaTVFUnRhSSpUyDhkmQ06JVkVoGyZzoWU3Y9WRn6tDE90OWskVWuGbfd8r\nJ493EaiYTHR8FKSazpWkbkrudaTQkHNPElAQvhsZjF6k+ejAINV8qrMIY1ZQ24iq\nVpyx19I22uhA4tGKYDUNE3AqXcDRlWEcAg6gG1XY4TYfGXwiNKBUu+CdDtFIcKD0\nAAeckVloG47zVEu4o6qD7M/EMP4MYzUh+TNRFrpclwYFQH7SORSovPkyQCtxEZNS\n7bUDhwgDYWhViOHH0CJeDC2xmq6B5pDq4EFaf0AAA9FC044ockckTa7U9FynialK\nI7XhWDnTagPwa2qlODg2nG7QXi0oLU0mjrU0ctgZIuhEHXJcc099eYBaGOAsCQTp\n2tT4OS0yt0BToPPNos9ss4gt1xRF4YjHtKaBdmKVzxgD5TSBxxhN+UxoJyGpLoyM\nBdqerE80QOkUBIYHHKs3+M5ar321oF2bIu7LGOMGzHJCkzPvt8kpPw7NQAhGIdKL\nORbNWl4MLjPn/ZaZQfwVWuiX9uEWVJT2YY4majPhTl621hJxApO4MmgUNTNStYy1\nThay3ajdmCt5Rg/GqCiME34FmU+qQZf0ZW45foE2kKJP8wg7n1SCLle2Hz7C9xrf\ng1aEOrF35JSRa149V7zC9E/aepebWSjqXWakpSp78Q34771VHBhLbS6+Gvo0xsUg\nfIvI2BYScfkCwIZ5ZHXp3j2wOBfuQyJZaEc83JlJBK5FnxVjCtsiJKNJC+35R2sk\nRmgb9xRyYulLqmh+InVlXer7koSifq/GFHxRXxuBXCmZitIlqfPSl0FFM6GhNKnM\nF7sMTcxUwgVuaiaFXRYEbtAe8HEgmBMAQ4/mEws5U5UEld7IAHTIUPlTkTcOQEgW\n5IrmDFO0JEPqkQEQPPLWMABKb6U3Qg20h1Q1qkTV14AzpmIg+q0YYCeawlCEr7EM\nfFBR6oM9rFhE/jAU5GsyEw+ZVfphh8yEycwA9JIWmVt1QNHRRHcMemNmxNIxUA7N\nau/guNdCqUVQzupnRG02mf/7WqRBiDaqAgB/tKGXaQb0akcVNRuZT9ZCtbTy4/zp\n5fed6Efj0bvfpXDu5I/95Vl+7mz04eX5ebFcX6G3E81r43KiNNOSdbVfrgS/Xmez\nlXmL1exlddxfhX9a5MtQRYnDwqrI2AvlBLwyYKeXzZ8eZo9ShvXyM3SHYKOcVfsF\nhL16WA113h+7Vk+hJ49HCSYTaGv6mewLC9kb7nEUeg00GG7+9HFhpwbtPuKOGgiT\nu10HMzQoyRItjUGru3z09oNBb2oHlo/rVaMdC59Vr65znb9aXVlJ+WW1vF7d18vZ\n9d3i9ror13H+9kNb7GQ5b37XDvBr94KQzqmCDQRY8LkRtr370aGJgfd4pmVBjr82\nvobqZewjMc7BYMNxWN5FPvngaSurJ3+HsGED2MFq/3aww9JDr7UVQrut/If/HP3X\nYvGwanJFF+Mwrr3t2MTy/mm83nwmPZ3BmsXhIywKAWEZRzaZQqcB7FzZn38Yfbd4\nfJRpKhoyLe/Ht81LuODS4QMihkqTKbR63llfBEvbK4zR0vYqi93S8jQhgwZEFKIk\nKBVbgqINUHYJSgCVbIkaoDO+duoCaiyV5xqLTjPEGksAGhEJeNpJkSW+s8kSZ9ZZ\n4qzvLPGda5Y4a2eJaTZpwQF/JSxEycp/kSqQslQvqSI6ZnfdPlvc7jr+2GO3zHC0\nwcBfhkNJbThzmjjTfOm6yAEb47ngTghDA0QTKgLpc+T69UtIc8CUV2B45MMcdPiI\nag4BACRpAeA9LCsTMBW6Sq+FLm2/iVTo4o3oIqnoGAkCoiYRH/CovXgNsJQqWp3X\nt5XwCQLNUwHdyPKSJlMTZP8exqa2HoCXydOcp47RqkBhXP++9MTh+vc1p2iUkiVa\n8rZ1B9VQSDr0Uan0R0w31WNttt8Ga06uzFLtAnX6z3NlFraSiBhdB6iUCI4yOiEN\nZ0u8I0+1U0E3I1TB5K/z5fqlfpj/Y0uexKvqdc2nrdd1/ApLBJ31RrAlJSRW2ZJ9\n1gHY0mDQWE1mgC6Du7Yl0EHm0J1gizGHJkWEIUamiRaQDJUlmrsW9tqAs0SPXqrP\ntoa0Gt1YCneJyr9NKGuDATzweWd320kg8FcWhOlWx7Kgf8bVsSw4MOmqnJCfaBuq\nucnjGBjnzhEBRzyPYwxLUUPMptpLEm7qg4oope8iik5R1CJKMKpJM/ogAaaIbiin\ndJRiXVIBFBL4XS9VoV0ILeEDF0889fc8tJn0ZkLtugainDxNePhRhABkKNezpSRu\nASgAmCb9GzmDJDQJEUiBDRvEigbSRHuMza3mdUjqf1ku7l5u1/PX+fpze4Z4hWdn\nP7fewjlI6Sou7Q+Jl6SdJoKD9IUhCHnXiC1rsXfyD9mCiBPRaP/mrywGzkdH6/FE\nUrbyH08cCjN5wi9rIhy6hPY6kVOVBTtF4BoIdDArplGBVNAZEVYtK1SviqVJFScl\nNEsKG6aWmRah8TK1tZcxUCEG9DIdboMENBlZkBhEAzf3/Hf1QmrnySeU7DqgB9Tc\nJKpdm0SGx7XvJpFfAk82mbI85J2iLPzAH4uy/h/9Y1E2JCOQ6S9P/MSkv8TElznl\njTPOShDKQ307Zl9YPHpIvriA6SH3igqhJoJjyh9dO+IqF0VbIcrTnCNtw65d0HBF\nuWzGYu9CCEZT0gk8Ni12am+du6keWSNKJCWZCQFVkozU95kj9d1QVeqN+u6XXiWE\nvt7tbzwWv0Zm367lCjvHpm20AUhqTGs1/nrrWM6DP5XBffb4eBBZUrTgtacylnng\nsHYdOISrBKHUtiYWGy9sNjQgeOyelrbidjKEVAHI04T+hNuwSRC7+jwpAccfGXqR\npaCnIVadC2zsfl2zBe3XdbzROptMeSpkEF1UU5nk3PMWZwksm2oPX3gj9OLRlK+E\nHib3xoemcv3NbI9TCoRJXW/bSuGZhQjpijJR0TNF/GUq8G4TH1MlcHYSxoYTkWsr\nX/5EjiZUeTQRWAHxUqqE0GNof1UYTAPT3VDgyktI6Uua0FePeWtgoufYO31Mton2\nTjsz9tl2ierIK0epqI7gBr3t9IBxXbRuME9Tjv1RhDkUtsmT+MBbXuSOE1w+uar+\nqsww0o6p0Vkycefxi8kN3U7HxeS4lmd8WWyaTciVO+LAA1Zf3ig34LhDPGpqQYhM\ncTrw5+fZ04d1ffvr6Fv5CVfIu4CqU4BZAj4H3Q9r3O3uOSgh8sFCvnS1een4Rr6U\noNrNjyN1u/sE5l17N1s5u2dZ8NirXt4VEkaciJ2MKM6kXykl3hegsJK9qhQEX9Aw\nyh6DE05ET3VpSMmzowNfIs9gaq7RvaCSG++PO+xsgn701W4HwmjGR5/00Ht/3AN0\n7epnHSLJGp91DF7y7V7gJz1MV6OESs15F9yRZSxkAk8pT0oH9kfzEOD2FLY9G74s\neqbviDYVikJ/MwMnWX/7CzqlTz+WF+4Gg6+5jVel7CRzPX29rKUy3z/Wn2amfLP5\nufG8+TGc5s5O1JfX5fZzW1rbvu/14X0HbsBlCX3LZ8Np3nokiL7saAENgXlDIR6c\nuNz8Jl8PQXnOcotb7xU+cFSeA0dlHSy4uGdZXtCvlRwkiBMeWW5nziLwy7tJ5bLL\n6diF2j6QZux67D+5F4POPXC/+wI7fqPnym05JfQUT4iUbz9Jge5aJj+8+/GoTFB3\ns9dxvXkxQW+KyKlre+zf/VrENj4kHTl5NLLVlOr2ODp+3Zxzd7scDHW+YRbV9WVY\nqoAiCpc+1iHX+L5eSTAoc3ywOL7re3zcvYCguf1LTs3L9jxrMOYkJuDZ3I1LG/01\n+2vT/j26MrBK9Zq9/jZ/GqcuHkwXzrfvHdG9HzF1oRtT6ScO1BNCEImeeyJEpt8g\nQiRObkOJmZZ6JDQ08cMhPYiEmJoLcDfzh3o9e3iYr2c7aZc7Sbb8zFbCX0H+ZrV/\np52MS6/VcfnuO8mWPdTHBwvJE4iMpYkG2N7RISjwOaZdbIjWK6ViCinhu4fFy933\ni+Xjqu2jdnowK+D24848nOKyTvb7d79OYwNCaaU/hgE6f9zFVffqRgznVrMJ/dJF\noYI6YG200FQ6iBQ0RaugMJQ7+u0R9BUMVGRqkbnsU8GmZSzZWFy+R4jU9RLPwYKA\ngQ+bYY8zNxTXtEeW06mXJ5V/DBPJP/+oFyrAUEgzL11o/4riD44tdloCoipM6Xoq\nJ/JrCOWJvHLRhqqoilGHoqbq1YAsSeMRmtPE4sR9YVagOY4oVMdBkwl2A4ooBLmT\nZ8OWQU0LntNl3FsTwc8LDkGbyZKUPF/Y4nmA50Bddadgegx7CHRIwkflckLU5qqV\n40UrPJch9pNWUjfk9TiVqkSA04vPbgi8MjVKfdBPjKm5UYgUyXPX/PL75LkAGQ+U\nJgoKmKtbKX7BeauhctHQvGz5Oio0B1A4Qw0nJJCdllMCJR1LvQLzUxULi3f8o0PI\n6ndqlh1Gq3oteQJhM32Hq0BEnELR7WLOi1qdry8uK8pLcqOgBeeARkHlu1FQkRsF\nIUA0AUI0fWce2ZLn68XH1o+xOL/RXXzSDMfgVtBsJ2R8ZCaVbkwmwpREiExbkSZu\nosEmidZL6whJYsSLHWXQhjwQHLRp0Zo3TPe/uHaI4JxO2+tTf53f/rpa18s1wqMd\n2S3/sX+VPoi039hnAGm/bzwBRCYuhOIjLXFBEoC7mQvfjoZO6jII526QDKaknMAD\nFFygM9OCLTPVUzrsMtPInWYJ8mAt1ItLWVuqdUciKLVGv/VzMqEfJzdQDiEGVYds\n6NT1NvEMgyrEFSVZwKTJCK55iCAYsWlZuez+U5EzzNFfQc5giPz9X6EbcAp4UtDX\nBxQICyh8WUAM9fwsL8krZlSkPzzD7ED449gO1xfRb1CaZuWwNoN4zsn2lJMlcWLg\nXRCTih5TtZQ9EluPoWsYLlEvywsyZUvZnMC4Gz5acUxs4jRPILzz4eVmdbucP28T\nptVqth79VD/JhGTZIi3sMdBXONBTPzJCnePXHdebrzt+3H7dS8c9QmTaVojVhDSu\n796Zk2Zsu/d8ZHTINTY52NMiGiWuErkxS75ZX4Nh2vThAykfl0674gnUVU3GyKkv\nF+pqMArKcnCvAXVehjwpwzIjc7GbDdJp0XJ/lDbYsXyrb4MdgLZrG0yHr4ltsLDq\ns0Kkvm6XE+EDFTkQlt/Ee55cJJnL3q09uwV1bmRLbiEO5FM2wMYn/lyUYHYE0blb\nIAxCX7534qh0Qd+NE9VuBHWD31+DkOrdDv1BRvc2GB/ZS7G+tN9AAlCUGHqxjcUE\nH8TTHLxoYaJ/4ZlfDBI+JX0FL2xRCHKItpkupo4Vc88TfxmUPImHtUxK4rYXwijE\nSVGNbxLC5TZzRKhATUQh9xoMPBTS0isnRZp4KBcI6NSjZoQRWBpjk0bV5OZo9jiL\nMQQzM0tS+pmC1o4GZSP1uJzBhqGh2MowWIf0ZEuCDEV66hy1NoNdfsuwADGwvbci\n0U+vEAaIUIeSWyUWpvGhmHrP0vzpezzz0duTFS0aL1B3wZONM6gbZ/BWsaJlQJ9Q\nrzpkTzKIUa3lJ0wrdFlanPckd5StfhtPg9apCvs1VWetRDMg7faoGNJ4O8JpWJl9\nSi9NqYyLaFd8Dd2BTMpnO6RI/SwjIizCOcnd/K7E6X8V0bB7RF1GtY/0PpTeDvw+\nssZAgl+EE8FZXpGrlHpuMH1hqAfMiwk0McHfNKFThwpFfPG6kZJvjC2YZZSeysJa\n4E1NxbEECVZqRGRbPzJBKQGabjRB0t8Hf9arTJFJPy1dhH8ExkhEzAmFI5P8hH6G\nz2JinXdM/Ys5yiGSzMVO9pVFFG3LyUa0jK3IrCNLMpuC4unOZ6Ct4FBQ1O98DqXJ\nkNLXw5E6aFxtswsf7cmSlD7b2ZTK4Sq5w6mr8AvkIqGvFjdc8SZe9PRWIzfd9P5y\nCuR5AnU7TMf28DNtp7vN2IbaWmS3y98kOymnZBd2to8HmJ12vtqn7WcM7NbUi48I\nyQBtrxVtoxX3Lqsvg2qYJuDueNd6ICb565QDncu2qGrgILvKfKgsE7nL2UXaZbTz\nwojfFQalqj4S30BBllPcovJAhrmx4XOi82JnODPEIYz1Yik9/Og/pXd6nUnoNpfi\n6uzCxo3YrMa3zUslWmMcstl/SowWYTFE2FRF4CNYDu2i4O5fuZZOhMgce0IWl0x9\nr9+olN2hy16b1T76Yr/oDIgaProZuh44sZsRQO+7pLMRgC2LmFihu2HqcH8ctzzj\n8lfWSNRFP5104u/MG+dcly5WdEo/1zq50mJRH/D4m/n8fi/A4p75IMj9aZnbSxoQ\nKsNoRBAykzhGu/mTes6DBmHYSGI9IhmvQdKldaHyEhb7pZhp/kMumRpyRXFFXq6r\np/pjqnoKNqbDkhcc6z/asl5KX32s5DeRinlstYuIa3liop++32lCc0mtwsWewz01\nttCzu6oWU9zJEv0eUXO9yCDyplxkL2VFtcije+n32DmdPalfrE5Zqe57mfrFFq8l\nAtbv+6ZCYHNW62XSGoa9Aye8WUKf29qylzS+xJLxqOAr2S4ZMruMt64uo+66jPZF\nC8pCzONjqF+IeXgWXRdi6h5D0kLMAOLfBFz6Z+CpYMA4W1c9YsRN3sGAHqBhQNQa\nnxEIas4EePAO6L2CO+A6XVeWm2eHfmucs+NZXrnMurYGlHAltD3jlLGEtuebxpTK\npGLqQhmlskXZcvjBiKJe/FFe2G/YwQ17892BjnHWOwF50oi1Onrk7VoS1k8N9Mb8\n6OLzbq7ZJ7JPy4qcGOnPR1Dq+uwHIyKbHUsNR+wRJfkTejUAn17XHKDpNVawJITe\nYRGXrCIvMnvrOMKLVaPNySYVmdus7VHhZ48ZODohdquGXJ+aJ56vSxEYWPvDb2wj\nVYYrU5fPwprQ0QRgsqgNMiyMAZzVfmlrq9Oy8MccwMx6+b1mFdy6wEHXQwiXw2TG\n9RCnK2d5ls1GQzfOsspltSZu89zBZDxvnitY8+S+sYd+RsIOe6BhB1ttznjXMr5q\nXVpO/G3Xp+Zl/s4loQaLo83NMpG4VCuODg3pyTy6sDhLFLnIIdwFXoIrjk4LwFze\nL8GpzoZc+CU49X15+1EvVCOOrf0WU9MtS+jOqdV/ABoPnjoOvp74OPoMmcjJ7Wjz\nogLaUnPPkFi5qiDareZZklrYyzvAXmYO9qJg2/ZjL++s7cUvSTdN6EfDibtYCFtY\nuPevxAnJMgHuz4ZXTCAXurXYTnz3GVqkp4h9WWJz0ustcNKrdjjppQj+oWwnTOkH\nEU62baKeX+4Zvi9lai8V9EUqeo4Avif6umZeyfxKWmsTeRI4odS3DIc/sadc99RM\nvtMKLrtAw4rpaZUQcBf6Vjsyyh+qj5wxvlV+jDfK53RuiGqGjXjShyudVE63RUj8\nTAV94TwUn1BObh+g+Lr+rzaYOPJAlSRkbbaQtHEWt3beF6ZA1b0N5IZSVctFCeFB\nsCnQ6mTitnOoewM8S8bbLYKLNj/1XWD6vmoFP+P9owz3MENj3vyYdddAy9E4vO9g\nw78T+mzf2dpvoF/Ghqxjx9NZTp9lVS43xDS//K0yARcdxtQOSw37tGxRGQ6O8eCw\nL6NXnOYgO4/KVII5Sn2zk2Kb0clTSCfwARAUyjq9AMJXPG1Ndg5SDhjkEgj9aj3p\nPgWX8/syPF+WVy6YAbqtqRhaZx1Xj4ekLMCeM9zPJDQyeTuYkYUWKXyQ3wfuzMBx\nXH3eK0Dsz4iW4yqE0F9ztFqoj13F5XPVdDA7uMQkhdbJ6ncposrzh2WKfNsYdtsU\nI6zNy0ycDHrMLRNqr4SjSRJPcE3STOtMzCvo9JQUTyczg2Gj5GDz1bgsh5pZ8XVZ\nh06qPCESS3+N3Fvkb/etTg3U3bfByF6INNd6C+JGCgP0UCykcIUe8D6KoE5YFi4b\n7k9W4ZK2bfMuIeh75faQbTIDJw5nKTaMxhOD4SvPHe3mi2E5Zklmsaz3nX5Z78xu\n/lw3hBD4fu9c5BBtgzIpiGuAcpECoLnBiyYFKDk5qdbbmbMIcKueAxoObqGeayZS\nVuRcWb8Vj34ZzvU8SlBH4TxGhjwH8dp3s+f7Q6V0693SNwK7Kx9VZlre38oPGcu3\n3Xk7vnJT80G7TPINna8bQN1DqgyKRm4qw60nPtEYG0HkRGEx0USyyUSfc9IGE6Bk\nc993czg5AY8ihJRnSkzmTNRsYTLUHkM1JHPfZWgGZF/OGE9eOdEz0Uc0KzVG8Nkj\nsjqcydYnEqm2/U9dxoqckHryFsjh8tcFMDrJNTP9+Sja2I2npHLQcZshL41nwv7K\nSXtpEyajObT9qFgLXLgRX95STvREAno+STm1zHAjOMAryxK6uuydxR07UeBXrjOm\nFrdOQgsTaQ7uYIKpsjSOLC85tkc+2RCUWGlCLkMCEOlSYTysc+hxbpSRRgMezrLZ\njI4c7HvkP7atnQX4crpbWU4eXVeCMJRSGfeexUtsgUuShnojUGlkmDlT9hwDKBim\nJSVkYBf1Eqb+l8eFGczT/0u3rRn+ogw7NFBl/FnlsnUIlTaeb/z1kjYWdmljWKhA\nFKmfU44gTUkxGuOHp1S5JTehh3n1CW8tlLOiJZH4SKxEpD4yoUEJZXpzo9afsYVn\n1opznLmQNCBtnZk4fAPOAXpQg34OkKaGAHCdNAAtrrPiHmOtgGtsdhBTGPKwj0gd\nY8+JAmk3DXlXRQ512HDQm1v00SE1qdncOmgnUQ6dZWBNaxAdgzRPoNxVX54ukPmp\n11EjnT04jRqFFfIzMSXXoEtVooNqUHq8Wa/HzBZ9nECqZDLr9LOFwYABdPmm90yT\nF3sN2dLP6YfltCQkQEne7ndrT91bHGEMAC+nhkyFvl8Lu5CbbXVD77u4vY5HZDZT\n1u/0U9YzuylrxezQgFPWnfkgkdAf11aU3a+VRLWfdrslfQxany8H3S2YjLkPRSdc\nH4saZrKoA/FH554H5oWmJTiPbtFuAosThxYTS42u1VaKs0yXI47gQMz2/TMNTBse\ngQjXtGGlIbV/AdzQtHChhp6weikz8JzT7xfeqchz8Ba722wVcaqKf54qnpwA1AxU\nscOUMHiXSHwRuyO0XCxik5a6NoLzwsswGyP8rh4Cx+XAZYhICpHXy3qIdYixF2kn\nlcvh75OCE265RKfuxLhrv1N+il1PQghHGsPJ8kpsE91vBbef7vmQFdyEzu7abvSA\nDuzYVwjDua1jUew6OXBJHgw6hnQMBGPrHUXYMUoqP+07PAD2zVNUlRl7b+INe2DU\nfjP+eSsDe7uNL6YPdbbN673Qqcsp8FOzIh4NZdzjNfDV0EEJWsJxxcEJNkPuLfK8\ns1CN1L6AYmmWtC8qkdqMJiJW020k86+MTUcq54q595gLEI9RDhaiNqsZ9uBwniu8\nTHai6phOaR+eCCGJecLrSwtBWQ6eDkWtcSFucOFblRf13WT6aQZi4Zmv3BxdkVl+\n9M2yfpI/sJX3z5uvvf03Kgbw6P3Tx+VmtvDldv0iP6fNVjXq6ac//3H002y1qj/N\nnz41Ql+u5BMqf/hqKxYZk5q3VEpnpwf5VweDpfAxOx8+yhzu/T4uP40f9+80zhif\npOaTrrP4nqgDrM+nBDs+VRH23M32t96rp2JQkOqar61yAvCu0nIIFVaU5WCA56le\n2CqFe9VEWDGcZC3NgHlUVzVCrZrv5bugtSLGmw/lUYi43r93TApJCd09lD4oRiL4\nzAPPrwtFFfmUQHc0BROrKMIUPqIh8MigQegc6YNGAVhCoQsXDMVwmhKCKYBLp2QN\nqzROiR6/BXf8JiwLD8lHWYeLro8yKATyVB52uev9VVQL3OHr5FScS0O4jNg2ZJel\nHO2gnGlBRQ9UkdR/LgjFkjiSdWVU0XM/LaOKRT1FsNdTbPaVDV2ha1epj2r5eVnf\nPsxGf6pf2+2gvfSbyTQpPSm3vzzLj501XMPFcu2h9FYJ+qr/7sic6ottyujtX8m8\nnGH2shqv7+fLu+d6uf48XjSvHP9dvpLQK5RvgpugOL57GPsasions+ToGsDNNOoV\nQbZlG31EZ86H5m9qYUaVHzOqWM1I25OimxHX9KT0YSVZ+IUf4ReswtchlGF9mGpU\nMqVv/qU//uZGrEED9l4L8/jHU/ip6Ecy6HaCQvOckQZjNXFEGrWluWxM9aBDjME5\n6xBjdzH26yqnDekufhID8njRXWyFjkq47L5x0RXGTfL6x5B1VajS6bS5Q3Sin2+3\na8KROfLz822ZN+Cx+dPVgQcn/3H3q359tRINZX3zP78rM+oUbm79uxT8w+JZPiYN\nD3S2lun+t6NjnRiay91OhJ4+NLtZz7v1hgi6vL8hV4/la7bPyW6cs7wut5/UGd15\nXW+/c881/R4Ox2x/7XYdbZqTp36qRnnvv/1p9MviN6nhH9+ZZwzlT4+fNz85lqZH\nnC88KGz/Bt3zb2YT3j/toRM8q/H85vEgoq52LHKOM+2cbfgwLpHvqKu77cPa3NTa\n23M+YTO7BE1aYFpYk3QdetfepRthWiQQdVMd7VoZBhTu/s9i+etq3czdnSrzt+Nf\ntQIfOfs4KLP1fpvw1/pkdQwcJI3sIRS25NDZLDyF7FStbIyWt8D5VMH7UeSDbi2U\naphqaanywo/gSR9LL5JqwYxp1EuFaciTX2b3ihz9UnpX+8Kz3gVCHB5bqygovq+w\ntY+20yuuCxPmvyQjKTReTlqKxRVos6Ggwb996DIZChyfLgGI2MUmAhBB5t32OsQl\n3pcKOlT5t80WWY0pooOVrygVTHiC1qi71aMK2C4KL/UoIDZdWD2qOLcHqUqIemeP\nNJBKZFPfZUGLc93lU4h0b587IQMTW0S6JN0p4lBagOxjVxdKxvnWzpSA9i/Oo2rL\nGhAtwrVjQy5heVEvpoJ1YTrWlq7gQ7OO6YGFDfupUwJGfJnZgtaWi8Su+0rQM1ip\ndNWuYbHYF6DY8xUi8O4B59QeWX121ilQhL5Mnaq2MRaJXcwl2Ckyo3Eu13yhDlhV\nriFvpNVWa/BdeIbm+xfQc5dOlauWYAF3ewC6l5WjatEPRFhyTVSR4MfaHnHY58Ky\nFtUM5zS3uFEKc2IIDakuNcZzZ4q+0+4SXC6vdaJhrKt1Aij2wqxTDV+5qrloF8vm\nXC8pUiq54lnTKj5dzrv4uP6tXs5G3y0eHma3G++0Op/FvkKyyVXM8DwpoRqU8kvA\nz0zVPTY4eveXD5rHZ3m/ut24qM1ggf/pnObdr9OIJuISEDApVYL3yJ1FCqBiykYx\nVPeMHcbZqyfYzS+qKZwJyK5y0lBldrd7e/GwiScMnQx1g3MK1vCUavRVwtubF+dt\nuq0ie55KHOo+ZwJvu3czS5uI5uo4QzFST6HNSkNcQY0vnIWJNtRGAx6UdnKCdlbD\nNqw9kEv0Yj0TsD9hjdVRgIMRavRiL8PhDKj/a+31UACDEVlcjN5UMD8BqY2u+NAm\naLFtvYrFNSozMpAN5xrFUB6S797KBUN5tcu0CnWeqtJ7c2PbQXyJGbZyo2RzWBzq\nEf0w/3Q/evtaz6Uu5g/z9WeefZPaDRrKlRmiIM9/m36PEv5NjASD+7pphJ2vzeEq\nzN3LX6Zu/S4R7stOk5y8W8ykwwKjQ1Mzs63Ezj4dtv1iZ1qM/Txrnk682mXlU6eV\nV53qoICzTgPIZaV7JVMJnN0rzbH24FKb7Clo/0meOnb2nzTH2YPH1CkpLL+YCt+6\n6vB2PIW8I5fHzUM278EQ9PYQcYMN+1fqgaPTtUFoVNa/DSJxaOETh6KV2e+lX78m\nSl7d5stE0RrtWqi1UokGiiQ3h2WZoiBTy50hDNbVll6RKBrQxLHCWLksvyLfBHZO\nK5BGWfl0s+ikIqa+svSsnoMk3rOSfSq/Nz1BrOG5zny7Gbdfa6PZWQ8Wpk4sBjSn\nVtm2RGjkx0V9N/q2fqifbjeH0fs8ESRjL+Hgl/nrulZmH256rsw+yF/kZvd7xFiV\nFQXZWTvpzoSZtMpjw0wd7UWLl6QSybmMkxJp2mNWW6B1uzZ1oThXiLJjup3A8jlS\nkFWFFd2l+Sa+G/J2Y2KbV53G9Jg68VZjKcrTIKCr1qvSM9vdaqQapcgQm/C+NJhO\nSqthEpIGkWwKPxqMkVLhbcRvUtrbo++xBU+uNTA22hBqlW7W3kj9OljPrjU4eqhH\nv2rFDUWqjGKCjLZ3GepTIuR0qpi3/fl59vRhXd/+6oJ/xTSDGCqHzxmVb5JRq4xl\nXjGz0/5Cvnq1efVYvppvCvDwMdfyY6IqB0sNQOQSvQYosmeXephjRCqR5xUUwo4i\nL05EjrrseJS8fDkj0fqoAPk5MVKrRF5C+bdGFaXR/5RqTbBxpLuKCNb/KO+aZFAz\nUet/fnmo1/IfH0fvN7+8BA5Lsn1sPNN8/+o+LKX5tMZfRWguWVLhzSWXysKdrT8K\nJ/firmArySOQv9pYIBqFPlhbWEYfkSNSUxBT0WrLqm9b6HXxvfx5tBY2b96DP9p/\nTAzSTyswpTwK//vFw2rxOPplOXudz34zxu29/FdraX4fm9f1EbS3nxRb3IbmRUhx\n2y5g9xOpo8ks0gl4UvWoFLGJz7AVCN5H/9Ny/o9/PHwOVMbK1XElHrC+W61mvx89\nDyzt5+2PchSqjjKfbb7V5RWsDq6pmoCnEvUJNjo0F9yhucnlYorKMpvGm8ZpNk3M\nFPwUNnD5dOjwVO2l8OH5xEth8dHeV7G1KU891iW3KyWewqfWCDxFL44fURV/mfyI\nrYLFvCr/Vuqp0xtNHBWk0MhGX9tG1cbbYd2cfNXssX7iTj+aD4kHg0lFaI2FqAhi\n2Nnro4/Qs1dLhOEnSyqIfHFSKKRUCNlLgzEZgraVRDQEWjdjbwe9FEe2ZhBspFDD\nL3w0P4FfJo+kxF98vKJTAPYF8IvSSY5nJAioxXFSSekjauwLKhFGDZk/4pOW0/yR\nkjiyZ4zRBBAZqPFchCZQ0+JE3k/XOw85k1A+6RW+kXdaoaKldl54B7haVbAaUJNw\n8B2kUw1QZM8u9TB9jbpph08KTpt26Ci769r1k6A1bbsII61UBd7tn6oCrYM+hB/m\n068ElgJfHBdApD3BlT1E2D2sDNbHq1dqKkb7qLPZV84T2AKEtRbzn/RRXT6XeBlz\nugIMTzZqok7Ds9ly5KPwmSjIW2cwU9Tf16v1cuNzyZr6uHslWWX7F56q7VJUJUBy\nloWmtsPXeO1wzfucD7czK6avu5dKmwMv3jnaHDmIHYyOHM1oVhdxFGNYNgHfntXb\nIF95ekCFDWuU5IVQNKO0sEYuM+zxlqkf4yOvOcQaHxWd8G4QGAKhDGhzAmzn2aQG\neGVypwPhL+lpUugTmX/3sHi5G71/+rjc+JSXJiPHZuvKA785uBpR9ZGm7vntqimH\nHbbmeajEV9vnpzOCfruSeg6zNHM7H5ftdYY5uHtbJ2Mt/DgVso+xJa2Ug672ngu7\nVXlSM6E10j5Ue99/+PlU3POuuPc8hPlqgZT37hUYkc+lyOUbhy/pAgJlkKC1LkQj\nbqorIQo9Em8CXh6CxK73Khq5k70LUfCRORioKAfJHy94NokH2EM6lzOU1euiJhwu\neeJkFEJt1SlJ0VEVFU+kio+GFKkGHArb7MfEmCD9db5cv9QP83/Um0VPLohdpCkh\n4e5+7uin+qn+NHuUbzh6+0n+927jFJVqI//pdfz46XE9rjfvwrJ8sfMJ1+JyJmFU\nSybylNCHU+p0ORJvBI6qtpHt41j+OOcBS/kR1/IjAsVUGr5CCl7Q1qvhB/mq5at0\nVrrJ7o7877mkfh9iFNKJO02hYISTt3qA9UTgFoOrUpqAyPdvGqZ8E0IrC4wUuLmh\n09DAx8A4DxFBpxGaKmsGJtEoE6jgknnVNQeemH1/0XE6LaaEs5SgRRVGfRU6k3KO\n2rpLMcOBLrJyFPfTJDD2qZwzYGwBidnA8GUsslATpgltJy0STjEYbIOBU07029OG\nXC9xqHL2bBu5FwSUsBF/wYwPNlooYsQFErvZ4wIFdsPmhV7jDB65BRtnlJAtdy3A\nbEwlJ5pK3oOp5FGayoRyMEqrj4yoj6wHfWRR6iOZEuh4On0gAzij9OMJ3lLiYM8b\nJXJEHWUjc5cVYJDQQy6oyGQ9s5ezIlsHFq+1EnWCyPepxLF4VSkKVheZPBRTnwWv\nQuODtIl5Lyl5GGdBVfl3RrmyazIOQhWLbcy732KWj6dfyt8+de7KH7U3e6sAvn3Z\nOxcWOABSKCLPMx/h+E2JDchvSseQXCp671sEWgYdkCX09wA1N9Cf0jfN+PumWbie\nR6GGPBeuxYrd86442Y2ou25NwDunZ28BYeYB6gjgo4iX08wh5zeHPCpzSNPMtSBx\n1oiwKuBxX9S8WIqO2se1qn5OQV3l5BCZoHugN7u5YAK9yrNVUx8RRpfRKfoSrA2J\nMCOKavAyT3204wSxtsq5NvBITQs9tVAD3sqHF8rQqUXGWe2TODcYr6MO5K7pxXkg\ntwjhvQTvy6AUqPt1rlXBHSrG4mFWJBxT7PBSBkH3Jd6wdibeBN6b6JBpnX0V+Yre\nqePirQvGxftU1wh9NK2RS8yP6YOHVN1ULIwpTZdxwcE/dQvmqEaeEwFdZw0xHUtK\nk6l7NkHKJPjziOCdj7KWAR7eQTofUlZXetGGyf1EqAvphcCJTCQ8RaKknBUl5WGj\npMqZIbCrI1HCbsFfIS+iCr1pMfU5wwqwjrV8DXd3hKdthO6aFIQOGSZ8dFfBQxVe\nWnjmwBBN0pym4LlzDJMPXl54hpSYFxcOBJeGKTiBG1pILEECG8eTEs+n+i5Nbers\nhLBtGR65oBV6exmziMcNJlMP5RESSmPHaFEhNJmW2BuDwoehnZdXr3UZPQ0108ce\nmnVLVxjNsLE7w3RIKoGnKWHBO3242KrGzhTtB01cBpob8NnnLWDKljYl9UPZCm/A\nn12tivxVqtWnzRamUGZWaC+qvIxgp6xDCB9FOw3zDjtr4ql/ZubgBQsRVV4zbc/7\nOPTPTLNwpQIiOs3CQYucojcgNTfA5zIB122BrDNbkewVUFIChA/2vsbNoQGmr06d\n2dGFXg5X+jsHK2pvq0OXZX1M15l3BYauBnULzwsRv0A3TAvWhmkRdMNUYmifsywF\noqRthtLu6W6wPbtBcqTUYZnNGYbDuDRORvOlVPyUjUE/FT9iZ9BbSymoODSMAhMv\nFXV0T8PDcgSz0oIF12oyug8uA3Yt0RvOxURvYmrkVVULNNujtRSN1lJWtJaGjdYq\nytltk7Ap9LaUn96WRuVspBpcmQQ7NZD4tWkPU5NplCmjS+g1179ola9eal5hxgZV\nQWVSuPZndrOs2L0trBtbwpS7mmPog3KOr9sf6IUWlXvy4sDLzB0yDx0wdJJ+0Bcj\nD/SSE3V7r3aWqOOTPf5lLxd020FtYx7aL0S1HSyNVXF9kg8HUp3rPNv5ngarazc9\nFMsuu0StvISdNjchVGcKv18sd0K2vKaXCnAk9fhBu9OI754+zZ9mlMfk9uNYPhAp\n9+PRfMx17ynaIOu4RAYuwmkprmXkO+0VyolJKcHH2bjYzEgeD9JT60nNmxy6TW/y\nGKa1VV5VgEN6OtNAxb+9UbAVj/bmEFXpSIBUVLM/IjgiRg90uehegHdytEaBUw2j\nIcRToRAT1Gn5rZQ/fF6tZ494Ma/4xLyKSswyiELkDjiGagCQMpLa1acN8TTCYrR8\ntqH6gPbZxieX+8ecN7ncP/GXnFyKTLgiTdUGs719CI9IU8SKNCcF1LY0SvjM5e+F\nm7WF6+Z1spZso3Hw6bQCV1wZJasp8Svla1XhN0g5pidYRlICbNdEUrVfVwZSq5zJ\nEEdjSpFE4YpaFNdB91JOj1Im74A+kW8avMdQHfEpMqhVDjsMvIRt8tChxTzICJzI\nCKBR419QnsWfTwnzmVcjPEJOrwF4ZuctfDtvEanzlojEDU0jwYgjko4Vh4gpvNMU\nDo5aEXd8t6OI0xhErJqYEOBEjLlCS6mNs6fvvRbIhynYTghdDFW5hVBoYSyxXAa0\nUVfUCdCmW1EnNV/5yLED9V09YR+IWQZjHxTq8Yd3ogGW0vcQhHvSxqBUeTlbqL0W\neD1JnVCLUXl8rFtZ9cPpWH0hnA5RgGckkbUHczJ2XoGwQlgGPHsxgEqFfyeFU4UI\nUE7mO1POYs2UxYRQlTgJHiQPxgqMhnBenqrMBGKgJpEm+CEfj/oQLshT0dmp/1cY\nRuWUwvbCQ0gj4iEohe6G/I/RliJ5B7QUjviHCbulEziCtJR55+lkEdmHOjMmFI40\nmTEgdOFd6CJOobcWNTSj0yeC/lCvZw8P8/Vs9F39vHppqtrWlP88qVoAVl0jP/vA\nUbnxdIfJ33L0ofnqX43+8P7DzwaMtdq/0fh2+0Zj+Ubj+Wrh886F/JD921/Lt7+W\nb0/W9/16/Sz17cVyqgpKwFXyTdTyRUFZlZgTRmDblXgSk6kdWsrJBAK4kBUQt6iq\nbYFlo+qpRQSLhlV7IBOwfkVQjI1KmJURZv1WeXXeShPJaDz6+XkzXFg/OCzjPNfN\nYvemnpybbqVES1+Hj4zCyymNCTz4pjYmfhX6KLwA5tZWX/hVGLUFQiDczgKdTK9P\nm4vIWVY2eEKjqhIFLQz4r6Mwtv6YVm3BAg41EoTKbwTAYekYe/GHsbpBmbK6aqgE\nfB+QsTrZDpyxhunl1LmtjSZgL2eZ5nqGhGQ/F7oxKd3dFKqk2kFCuxy4gwi5k+Eu\nIAw2SKnhBUQTIxSV7DBFX1AiOgQhlQNxYu28opM77NMPxhTAIFoBwY5sLKgH24lG\nGxJ622hDE4v8GA4n2OvGn5jUZFdF8tvR8EPVgdF4hKBOujXwKgzBr9GbeolbUw/n\n14Zv7EHUP0jGTp0J7spbwLFDXRu1cUoabdg28DwgYqxmgkXE6iaeXZLpNV3xMhkA\nx4tgFaP0YVaIS2M11sXOnvp3UdRo1L4NPBtCUJMynAP6cQjnWMX0Gc7VQrYrqbAX\nwvoJKpF0bNTRBTy9S2jZ0M3DicKGadIMbBpSwDZ9Zzgvd25m8of0SGrE6jTdxqHB\nWnNvzvSQusdF9lCrzya9hBszTi2ZvpoxweedR0U1vlG/YP/H+dPL76Mf5p/uR29f\n67mU+lyK93NLNzvNXCFZ3FLUz7fN/87r/T/K/5Z/qyR4Z1VJuPUHf9vjkzQefV+v\n1sv69lfNQ3VfHxn9hwfs4+41hEdp/5JTSHN4jO7l961bXzf8x+c415gQLgrD2ima\ne1zvv/1p9Mvit42SwC0rbSUVzR+fN690XbbSvIn2uvCZwuDAun/oN0+7reI2X48y\nrmQ/YDa/edzKsTvY51PVUH+jrdjjiQ7/7Sa18Z0Z28FDDR1YpUMk3EehOESSrR0c\nop+tRkZ3yA5b+zIshQedllBuQnSgXW2awG7XdbbVyXeX/Uy3VGh7gA0u5tifI1WZ\nL+GimC2eoRrxAdVQDZmObYLNQZXG6VVXBap0oDRL5zqBRyjj0xL9WpZXV4rsDCjt\nia8f4OxAAzCrjHTZmg5hiOCFC7bwZnEDYhaZ9RFOMFtkfTYJn72HDDLX85u7SYvz\nmqerUQfZTR5gB9lf0nFHhH5S2pnXVE9TXaHXVXqoqADOM/5yyrQkXIGmJ35UgOkn\njQ8UZQ6Z74nCqw2XSs+Lr6D5ql+X7sgnmJLa1G9wLOiJQ+EvcQi78uJ1d3vq2YOe\nolC89o7x0UGBxAiJ1l94cFTkXvOHkpr/lb7yP1pTgdkj9hXllAs2vZoijmOj1Cjb\nSJ8LhAkkzsks0GsLD2JlKHO+Pmpi6hZeABmd1IBXQ8HxNJV6YCNlRl3xF7nXyuRp\nZKJ6M96TMUO5tEEDFTTJ4aRfLGIsPbdb0Rqmg/5IFT31SxsrCKGu8BDqaHWyCHK1\nxKtf1VQybRI2VwsMOWsbtsIpE3SvzvY8QScpuoeU/MQYw0u8Jf70mnmfdl7JHSBP\n8S+Izs+AHVlReKU+IKcllIiGb2/VwGDGKzjxmoef9n6IXZ8++j3Y+lf0zR6m9NGm\nzX7e8/HTZje2fqK1Sak7r10gte6oBQC/xEyj5uKpZ8r/l7/wYiE/eT/EVE+Kj9NJ\nmtfpNEuTSbL5U333Mb2tbsobMb3617/+P7+Kl4E=\n-----END ENTITLEMENT DATA-----\n-----BEGIN RSA SIGNATURE-----\nB4DymaXten9DL+pFWjjx/8qC9n5c42qTEUgTdJpYh7oFBwBjUTVrycYiQipmRs02\nl7+lEEv9n8lIP9GPcHbNaQ3mDnm5arH9yfvzl9+ig7pqmcjhk8ND2tqSpO2Hln95\nJN7KlzUgjyTsE0zmmX4wbX1Lg7zsT3t1BEKQRiz90WLDq+kadXeUdBFR7YCptiZS\nvvSQxLNV7kvn4OTjKPdRchsf4gyezOaAmmzkgxis7kNbFrRxLUMVCAVzj9fZRhBv\nEQnhEwefkObYY6M5qfKyqsOkCSNt1gAkj+zDbG9K94P3gPmGIOHwi0iVlrUMa2Dr\nmZH5rtac4N6MCruJFSB1VIEIdPPqyElL2h08VKm7QzCzMI7MFWAeqmGEHbBgGEPa\nhqd1QYb3gOXn6pbOxXry+d3Ig5x72WyGpZomQVXelnhnMyfAHzOj5Xi9EuvERWCK\nySm0d7VH0UC1BiWw5HIumwRHzgERgM69bw7sIeOTT3eso8X0zyUD73fBADZH4UX1\nqRpTOs35j+44GsCBMThWeImUXRwEbDy0MBjULcCpxtzlX07XT4guhuAuFCcIa5To\n0mFvtGml55vidqytpv356OjDKQzQ48ZejxkCEChZ9UDlYmZTl2IP+Uo7cwYSEhPW\nFn5eUhtX7YYAmbLc78gtYZjEbWpoEOJFYxq35rN6U0Q=\n-----END RSA SIGNATURE-----\n","id":"8a85f9844df26b1c014e15299b0c7f86","serial":{"id":5790815993894339000,"revoked":false,"collected":false,"expiration":"2015-12-05T04:59:59.000+0000","serial":5790815993894339000,"created":"2015-06-21T08:08:44.000+0000","updated":"2015-06-21T08:08:44.000+0000"},"created":"2015-06-21T08:08:45.000+0000","updated":"2015-06-21T08:08:45.000+0000"}],"quantity":1,"startDate":"2014-12-05T05:00:00.000+0000","endDate":"2015-12-05T04:59:59.000+0000","href":"/entitlements/8a85f9844df26b1c014e152980df7f85","created":"2015-06-21T08:08:38.000+0000","updated":"2015-06-21T08:08:38.000+0000"},{"id":"8a85f98a4e009a5b014e1528052877d8","consumer":{"id":"8a85f9874df26cde014dfcf1b4f65e08","uuid":"50f73b81-0242-4f9e-bcd5-d9fac11715af","name":"tzach","href":"/consumers/50f73b81-0242-4f9e-bcd5-d9fac11715af"},"pool":{"id":"8a85f9814a192108014a1adf1c7b6b39","owner":{"id":"8a85f9814a192108014a1adef5826b38","key":"7473998","displayName":"7473998","href":"/owners/7473998"},"activeSubscription":true,"sourceEntitlement":null,"quantity":10,"startDate":"2014-12-05T05:00:00.000+0000","endDate":"2015-12-05T04:59:59.000+0000","productId":"RV00007","derivedProductId":null,"providedProducts":[{"id":"8a85f9894adf01b8014adfd14ae81246","productId":"220","productName":"Red Hat OpenStack Beta","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81247","productId":"201","productName":"Red Hat Software Collections (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81248","productId":"269","productName":"Red Hat Satellite Capsule","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81249","productId":"150","productName":"Red Hat Enterprise Virtualization","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124a","productId":"239","productName":"Red Hat Enterprise MRG Messaging","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124b","productId":"84","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124c","productId":"180","productName":"Red Hat Beta","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124d","productId":"70","productName":"Red Hat Enterprise Linux Server - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124e","productId":"246","productName":"Oracle Java (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124f","productId":"183","productName":"JBoss Enterprise Application Platform","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91250","productId":"240","productName":"Oracle Java (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91252","productId":"191","productName":"Red Hat OpenStack","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91251","productId":"86","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91254","productId":"83","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91253","productId":"69","productName":"Red Hat Enterprise Linux Server","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91255","productId":"250","productName":"Red Hat Satellite","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91256","productId":"205","productName":"Red Hat Software Collections Beta (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91257","productId":"85","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91258","productId":"167","productName":"Red Hat CloudForms","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"}],"derivedProvidedProducts":[],"attributes":[],"productAttributes":[{"id":"8a85f9874a65e793014a70f74d145dce","name":"ph_product_line","value":"RHCI","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dcf","name":"name","value":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd0","name":"product_family","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd1","name":"ph_product_name","value":"RHCI","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd2","name":"management_enabled","value":"1","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd3","name":"variant","value":"Cloud","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd4","name":"sockets","value":"2","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd5","name":"multi-entitlement","value":"yes","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd6","name":"support_type","value":"L1-L3","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd7","name":"arch","value":"x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd8","name":"description","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd9","name":"stacking_id","value":"RV00007","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddb","name":"type","value":"MKT","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dda","name":"enabled_consumer_types","value":"satellite","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddc","name":"ph_category","value":"Subscriptions","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddd","name":"virt_limit","value":"unlimited","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dde","name":"support_level","value":"Premium","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddf","name":"subtype","value":"Premium","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"}],"derivedProductAttributes":[],"restrictedToUsername":null,"contractNumber":"10593540","accountNumber":"5530698","orderNumber":null,"consumed":7,"exported":6,"productName":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","derivedProductName":null,"branding":[{"productId":"69","name":"Red Hat Cloud Infrastructure","type":"OS","created":"2014-12-05T14:33:57.000+0000","updated":"2014-12-05T14:33:57.000+0000"}],"calculatedAttributes":{"compliance_type":"Stackable"},"type":"NORMAL","stacked":true,"stackId":"RV00007","href":"/pools/8a85f9814a192108014a1adf1c7b6b39","created":"2014-12-05T14:33:57.000+0000","updated":"2015-01-12T20:24:03.000+0000","subscriptionSubKey":"master","sourceStackId":null,"subscriptionId":"3456439","sourceConsumer":null},"certificates":[{"key":"-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAqGQybHnChDrZhX25NFLMsR78scdXSuOumCnlupAdiFevlEXM\nbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQC9eGRUvsZ006yHpBuJmO\nv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLoeFDhGYI2OYavaOGDe/VT\nSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIaI4d3O286/nichOcp37+J\nd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSVZn3lX9xR5p+UsSgfa5J3\n4uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQABAoIBAB1e9KiVCEeWGDC/\ngBlPQ+K0+/BqS6CFXAOwcyB6WJxaZwaesgyBhv9uuJFBS99WeewkisykmtoSUqur\n5TiDkpki9EkU4JZgLkxR9NcD0nf7UxFGv25MMaoyhAyEkDXffRObsPgFoGJ7/jO4\nBaJmvgOpYT2XJiMuQET5wEmCY4AQY9uz3zc+38pJFd/uLDAm9r2t+mfrKJ1jSJne\nEU2gVWc9zMPh/AhjKwnhY5GAMZMO/2c7FsPc2q5A5H3Mj9otS/j0pnp1rsQt7Olr\nPo5qZ+WSPWY89HmsDj4WuYUICRL1ey8pXkKZIjSoca0NpqkwGE3WpZk1QLO5fgiF\nVB88pPUCgYEA+/FASGum7vBABwkkLaIgY2gizyGr0yKbUso7mm2ziyG0paq5s05I\n4bWSS8og+ER/zMWoUtN3ytWVf+SJ0Sa5+N01FsJpgi91zKbv5wj4QF9xN9+GTivw\nX9CrjMElkVKokfuNl2AR5CkWYM9FK5WP50LlawZirmGS1G1nYvmSuC8CgYEAqxp3\n4gKth057r7afaOCBDcY6TaySNCfZAXRkuuxcT8Y9AplLCmZFhF33r8iaqzu12UGK\nQgTpCc5+xuEfTTOyfhPgcx7UaiaU3acfRrdPuvzeU7YNE0e1lrX61CgbWJsFKMdq\nUWf5zXNpSg/9xK57jGNn+8tR6LrXTgI+mAlLfHsCgYBBgKzU52BEeSQ8cAz+7Er9\nbWK3daqlvzag5MFwWhs3DjFYbTXQv4bFYB7EI65EvhJ4G9+ygRaBHty6nqGSRj5N\nzL1zyGIEHfDDn5d5+uQIYIggHbZedqANWURw2Pq6eMIpCjz64VhleKU/0EPMnBsI\n5mSdWdCoQ+gX4MXjfr29swKBgCqdrgxBxHy15IKQRsX1XM9UdwMPn16UKi19kvUn\nl5pa8qkqCxGtBVWBngZPPY62kYVqGIh29p/1qYfZXFV7MdLLGpUxsZA6ycsnK9gO\nIjKddrZ82mbZ7nV6H94lmyIHglJ00Jsz/XjZbPkAYKFTH/yIacbCDkWb+7I3RuXR\nMtbvAoGAdUdLQNRlUSH1ZY1yjlsc2ZKSsyVZ1tSkF9JNnX2OPv6JzkWST5bDSYvX\nBeNZwXG6us2GLnsI1LSqMpzeCLKjpH24337rO8fbbN9g5SuenOSlq3Tne1gXwGpW\nc0PemYSdl20++metc/5y74lqo+0hbiDc8guaQpOITff5k/1kqdE=\n-----END RSA PRIVATE KEY-----\n","cert":"-----BEGIN CERTIFICATE-----\nMIIKcjCCCFqgAwIBAgIICkY9q4aY/OcwDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNDEyMDUwNTAwMDBaFw0xNTEyMDUwNDU5NTlaMCsx\nKTAnBgNVBAMTIDhhODVmOThhNGUwMDlhNWIwMTRlMTUyODA1Mjg3N2Q4MIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqGQybHnChDrZhX25NFLMsR78scdX\nSuOumCnlupAdiFevlEXMbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQ\nC9eGRUvsZ006yHpBuJmOv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLo\neFDhGYI2OYavaOGDe/VTSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIa\nI4d3O286/nichOcp37+Jd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSV\nZn3lX9xR5p+UsSgfa5J34uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQAB\no4IGHjCCBhowEQYJYIZIAYb4QgEBBAQDAgWgMAsGA1UdDwQEAwIEsDCB3gYDVR0j\nBIHWMIHTgBR3LqXNNw2o4dPqYcVWZ0PokcdtHKGBt6SBtDCBsTELMAkGA1UEBhMC\nVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRYwFAYDVQQKDA1SZWQgSGF0LCBJ\nbmMuMRgwFgYDVQQLDA9SZWQgSGF0IE5ldHdvcmsxMTAvBgNVBAMMKFJlZCBIYXQg\nRW50aXRsZW1lbnQgT3BlcmF0aW9ucyBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEW\nFWNhLXN1cHBvcnRAcmVkaGF0LmNvbYIBPzAdBgNVHQ4EFgQUH4sIAAAAAAAAAAMA\nAAAAAAAAAAAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwEgYJKwYBBAGSCAkGBAUMAzMu\nMjCCBM0GCSsGAQQBkggJBwSCBL4EggS6eNpNkk2T2jAMht8fs1dnFvLBudPpcWc6\n5dCzYkTixY4zlhMWfn1loAsHOY4s6X0sOY09NlWNOZ45Gc+wcco8ZcyJV8dndH9j\nOkmm7OKE9qd35fDAa47RC2c0P/boORPkIpmDuYIXQVPV1TuG5K5Xf8GRJCeyJ9h7\n+jEmDjSBRfgL5xcBF2hgQZx5Upc9GadfHJwuza890milLA51tVXboFX2RqXaqtH/\nBt2DsFZ/XXVqLSzPo7nxqrKXGCBLLza5uWgaUopslEelE9btenaK9qXEgg32f35/\n7HF0XrF2e06rxtijES6rZbRPX2B0ipRGMY+LttVOrVBu1d6xRYO19DYeFpvd6vIF\nIQ0moHuUURWh/KC9DQUnZ0t/UinXgV66cwu1NMuig6sLwj1P3ey9y2zi7Yrk4SMd\nevI0Wa2YRl6N3lYJy1bVtVuddu+l3jO1U/DPnmkuwf6WMd5LhCHk7zpi/VNY/42N\nIehId7qf/oMt8+w5aAKlC6K+CRX6pJXwrSb3PrQY3TDqifPUO18a5STiLbFnEi4h\nnT7DfhkQtW5cks7irdcjSnbEPxp+71+BlFeu+y2PDDjXfWm76k/v84gp2kFs3g5k\n29oKbD8/Wxu2E5M0slElQ1zckD4XqaAc7wc70/T/u/x/dPZ3e96Ou4RC/o8RvvII\nn37e7dmUcajkDXcXapVs3g5k292KbOFy11Y5Wxu3M5ElA5Q1Gmf0b8SdE/HC9TTp\nztXF9v9Xf5zvQ9g9o/u/5pEny++rPdvwO9eQ7/9ffWn9zs92TQ72bwcybOcscrY3\nbmciSgcoajTHM4Xqa7u4d6op/yg43aCn0p5qGlCSiNTvZvBxRyxzdvhbvy99zODm\nd9A3fVbvrJ2+87zod7N4OZN1sbthOTNUNcL1NAOd3bfYNz44ycN3Pu52YAMORBrq\nKXyd2kFs3g5k3Wxu2E4slElQ1wvU0A53npd3v9Oc+buEQGT9b2v6PEb7yCJ9+5mh\nzO+qrtxTuXce2va4ULSZX3rX4nd3ee72byb3b4X7zBd9QXezeTdjm7fC/fr/7O7v\nm9M8/32bRtfcrsDtq7zL7MAGHIGu399TXedvvqzu39O7+KOOd40O+t3d1PvM0Ir7\n1/c76Ju0FO88ffVTu7Ddi9zvOd3da76U72bwcybUcscrY3bmcoajT4Xqa7zZu7yt\nMP3bl9iId7N4OZN2OVsbtzOUNRp8L1NdyUu5A++mf99bXfUzstjwx36he4QKEKhd\n7N4OWObt8Ld4k7SaSezeDmTb2sptRwNnx0XY5Wxu3M4slElA4v5qGubkaZ/RvxJZ\n+T8cLs06mnTnezas5u3wt31V93/9Ead331K76h96jb8lBhd5/WOx3eS0kd0m++pf\nbzO7zs1Oy7zud/Y+8/Rxhxpzu8rSjd3n6HsHtH99A/eJO0mkns3g5k2o4dXscrY3\nbWSiSgcXZUNRp8Ls3Kmu77+iKez/3p+nO7nn95o4ln3bjXejjDjTnfJztxztEp3o\n13nB+8zu+nO//ndwz+y2O+TXd/zv/H72bd292+Fuxch31ld6Od9Yu92+Fu+n3aDn\ncNzvZuk3u3wt3Kb7lN5N95N7t8Ld7N5N7t8Ld97N7t8LdjANBgkqhkiG9w0BAQUF\nAAOCAgEAqFlHQoP568EGy03dINsV7iQnsq4U63lkjchg/mhNx0mmkDGrZW/Tkx1d\n7wHuv83D1iJyKzjFIrB3vkGP5PxV53WqkI8HlUxgmGs2NCvVwb3D3VpJtygAYXwi\n6gsnplPEjPLHGQ7VuPAY8t1eahJ/ipaTKgw64pN8f1gmo/wlUsQ+05DN63/k2HoE\n65ZRcZJyrgCcGNS/jJgkuNqRry7+Yugwp+F9ei6HbbsaP8rs3W/EIym4Tnuce0Az\ngJaxKPpyMqepp7O5w7I2IRK3Eq2r59LN2gB2nYLEWodp2R1PdIKvb2bwF7ZtCkWk\nkD61geJpzpm/8J5aUOA1HxkRCC4E3fzOqJM6JamnhWqXHmLUMAfahssTKSc1jG6D\nd2YZuWkEKUwVe4pl71WEaP2zkmQm/XHsQW2/DJGvEy2LKZTBVOmRsfdKTXBp8mk1\nq/8/hVIlLZqiqsnIZTpsJwcYWW2VHWiPCqw1ZxbXh2080Q3VOZAky0mAiwzr3Y1s\nb/A/mXVS4QK8F7ltt2+uU0OEGhgQf0udAUovN95Kntybh7RI0t5dUgImp/bA6q0+\nf/rHMng7GVapTkpRwd9RNn11Z3U2Sav2bexBq8HlSXo5fSWaw9BFfNU7Yze9r8wV\n9wuQDnTpjG7vSfg3oXP0Xw+j5OqnhmQloRLJsW6Neipf6idUPf0=\n-----END CERTIFICATE-----\n-----BEGIN ENTITLEMENT DATA-----\neJzlff1zI8eN9r/CUt0PcZW5mpmeD9K/rX3reHP22ZW95K333rpKjSTuirEk6khK\n9iaV//1tDr9myO4G0N2Y6ebepZK1V/wQMAAeAA+Af17dLp5WL4+z5dU3V0XysRI3\nk3ScZHk2zj9OZ+Ob27tifDf9WN+maZUW9cerr6/+96V+Ws/Xn6++Sb++Wr3crG6X\n8+f1fPF09c0/r1a/vsh3+vNfE/l/lfzhp/pxtvkXs7vRD/V69N3D4uVu9P7p47Je\nrZcvt+uX5Wz023x9P/rwWC/Xo5/qp/rT7HH2tP569Mty9jh/eRz9IRuvFre/ztar\nr+Qb7v549U329dXj4aevvpHvNpN/O1u+zm9nm2/yMHudPciP3r2NfOn68/Pmu/yY\njn8UV/+SP7yub3+dP3362/yu9Z3lXyyWdxuB/LP9qybNzy/lJ11lSZqP02ycFP+V\nFN8kifzPf8u3nz3dbf+y2P9l/k0xlf/Z/KUU83pZ325enibFVBR5Iv9tfXu7eNl8\n+6uiEEk5nWw+/Xm5uJOSkb/i//vnVfPVsuaHd6L8Wb7Nw2z0p/q1Hv3h42I5+vMP\n734cfZC/+Gy5EZD8n1WjjKvNByxv7+frWSPnzRte/T4p/1bm8m/kH67+Z/u9Gvkd\nPquclkdZfW4Ed6LEd/Ily+flfDUb/Th/evl9VOw+fjQetb/dt7O1/Ip//uWnRnEP\n9U2jj+X97GFcjFfNK8br+/ny7lnK9fN40bx0/Hf50vGNfOl4+fy4an6hp7vF8vj5\n8l891+t7+S+ud9/+evPj15s3vt6+7XVx/W/L2cOsXs02//RvN/IPG1Fctz7jerFq\nlFbfPMzkL/6xfljNtgJTS+rT86e/vSw3v8HH+cPsm+vr69n69vr51/m1/J5j+bfX\n8jcd//GXP47/493/HS9nd/f1uvk9vib8/O5Ly099lK+8q9f132a/P8+XUvyTMk/k\nQ7ic/e+L/Oe7v63rT8337Mjz6n/+9fVRkZOjIjffAaHJUq3JP7z/8PO5EktAifPV\nAqm/u/lq3dFfidCffHtLBd6v189SIWQpl0opC0/mYmcpeCM5E3IoRuLxoRdZUZIf\n+srkvpRPfoVxX/jH/8x9VW6PvJeHvVJKV/iSrp1gHVxK5c+lcMk3q5KE6kx0HvvD\n4mV5OxspfQrkuFfNa11cC8Z/bz/l+oP8ih/CdTIKny/NYEJVk9HHmHSFcjVkhaE9\nDlVJoQMlldWV04zs1XQxXOnVoBju4NUwMbx/oKSCo1WS+oKjhsgMuTbXyBwTMK28\n5nEmJ4VK59ydFOZh7zeqDJjfyShEVrAxCtmHH4a4g8s7QlebGkMXntTmhBvcMR4G\nUPcFH/zCgdxXRu/iM90VFJ679FvemvrKlaySJObsKOTCiwpuVAm5DmZEdy75qye4\nEV4S21fcUuPJVtxyy5IM+B2FJB3we0z5UubVoOwtidmELqkPo64WkfGEDvBZIT1m\niMeL1D0Au5ZNFcm58D/U69nDw3w9u0L3Tldimvyu7J7mSQqh+8PnjYo3VauDK433\n82o9exz991dg9Gt+cPyP8Wr/XmP5Xk6IcfeOWoM9fNK1/CR81DtIqmd8Mr95PEip\nbYtVmhLUU7bUU2DVU6jVU3pRjy58tdVThq6eQqeePKnw1lO+STfusWGe1A8tTe2d\n51eQvzyqZ7F7l7F8Uzd/WW0/W6Waw6dcy08J3222lAKWx7taUarC3O47CmmjAacu\nn0EDjeCH7qFWJdTja0sz6UaIvTT/fXbz8glIjtoyTcZ3m1dwJK1t6SbXzceE+GQr\nkJl8siGqE83dGLQCOR1n9RBcT7A6UnsfCD0jnA+qUNr1QT7qo5ArirA6KqoE6n0b\nEBRGH8W5PlzRkzn1t8ROA+lEUSqQSQfYWkVlHbqOqjrdsIrStDwDitUK/GrfQtWC\n0jQhStfcmfYgRWxExsgwpHhcQiV9RDy2Rkl+43F5XUYfj1XVrCqZUqxBEwDMtd+u\n52dgx3Rdfp8Zgdp9Q5Veg/c2proan8OaBWx8TpjJrfJxrmjZGFsK4CFD01VrlW4n\n4FRNmQakUHsRYSOonqK/mirFYkKHnUrbAWmwiEoGpYbBXr2Ixm9JqEQrXXipInHD\noujQkFQDxQRgxGqFVftBqdHYhuj04FAQFZ+wOcFRTCiwg6NDRYAUj54M7TRaH62H\nBhrwrAfXNitta6RWgZjP40TmaKqS0q5M3HqUjgAITA4CBkDKOjQpIShdk2ZLt0Px\n+2HKXu328f5GK3tyMuajB4DTRJTJWIlntmiTMaJONi6pD51sPFOEOsmTiqITTe+S\n0rRk7VaG6Z/UsYHAWDHgUl2VWo1LnfphfirVHvthWrQppUuhOJa6ZiOF2+gI+r3E\n3+CojCUeAGkr1z6aZX1wiyKpXKuDAEVPmiBAayvwE4rCrtQpY0JB6FtqARK2ULSx\nCtZC0cYM+uxbqiEnNICMSH+pT3YffbKwnYyyPVYSSp7aEhD+6Xbi6MIloOGfbEpB\nDY6txLyqE1x7SLC60TXOTIviimAmL5Ew2mnHMDNHu12Z0JWlpvRSOBdw08zeunwo\ni9BCC11Z6g4nzbL81JXYFROrPmRoonAkYcKSFVWpP5JSREWnBG8oWl4khRHPToUP\nU/aqVUgVqdAKG4V9+PeB14gmEroXU1do8fQlQw3RYkzazxyu5z5SYLXFPCE1+LTz\nJLTx9R7m1mMr8aatkELrY1jP9Tj2MfxQnPqY65FIClwVjahf4eeanSqCuJrV8LPN\ntoxgl2HNXmJuvKG2xE+XYGpZVkWs/qpXYYLWViZ3VE06EUdl/OnbxWrV3gT09vn5\nYX5bb3610S8P9Vrq4vEKvaLm+fnWeOYjTwtdHon6JvJREfJZ2D4bm8fk/bc/jX5Z\n/KZ8RP5+M57Vz/JBEGP5o+OdRDZ/fN68wurpaF6pfTj+fiM/UD4PAnoetnIaJuQ3\nv0IbdqXaTVFUnRhSSpUyDhkmQ06JVkVoGyZzoWU3Y9WRn6tDE90OWskVWuGbfd8r\nJ493EaiYTHR8FKSazpWkbkrudaTQkHNPElAQvhsZjF6k+ejAINV8qrMIY1ZQ24iq\nVpyx19I22uhA4tGKYDUNE3AqXcDRlWEcAg6gG1XY4TYfGXwiNKBUu+CdDtFIcKD0\nAAeckVloG47zVEu4o6qD7M/EMP4MYzUh+TNRFrpclwYFQH7SORSovPkyQCtxEZNS\n7bUDhwgDYWhViOHH0CJeDC2xmq6B5pDq4EFaf0AAA9FC044ockckTa7U9FynialK\nI7XhWDnTagPwa2qlODg2nG7QXi0oLU0mjrU0ctgZIuhEHXJcc099eYBaGOAsCQTp\n2tT4OS0yt0BToPPNos9ss4gt1xRF4YjHtKaBdmKVzxgD5TSBxxhN+UxoJyGpLoyM\nBdqerE80QOkUBIYHHKs3+M5ar321oF2bIu7LGOMGzHJCkzPvt8kpPw7NQAhGIdKL\nORbNWl4MLjPn/ZaZQfwVWuiX9uEWVJT2YY4majPhTl621hJxApO4MmgUNTNStYy1\nThay3ajdmCt5Rg/GqCiME34FmU+qQZf0ZW45foE2kKJP8wg7n1SCLle2Hz7C9xrf\ng1aEOrF35JSRa149V7zC9E/aepebWSjqXWakpSp78Q34771VHBhLbS6+Gvo0xsUg\nfIvI2BYScfkCwIZ5ZHXp3j2wOBfuQyJZaEc83JlJBK5FnxVjCtsiJKNJC+35R2sk\nRmgb9xRyYulLqmh+InVlXer7koSifq/GFHxRXxuBXCmZitIlqfPSl0FFM6GhNKnM\nF7sMTcxUwgVuaiaFXRYEbtAe8HEgmBMAQ4/mEws5U5UEld7IAHTIUPlTkTcOQEgW\n5IrmDFO0JEPqkQEQPPLWMABKb6U3Qg20h1Q1qkTV14AzpmIg+q0YYCeawlCEr7EM\nfFBR6oM9rFhE/jAU5GsyEw+ZVfphh8yEycwA9JIWmVt1QNHRRHcMemNmxNIxUA7N\nau/guNdCqUVQzupnRG02mf/7WqRBiDaqAgB/tKGXaQb0akcVNRuZT9ZCtbTy4/zp\n5fed6Efj0bvfpXDu5I/95Vl+7mz04eX5ebFcX6G3E81r43KiNNOSdbVfrgS/Xmez\nlXmL1exlddxfhX9a5MtQRYnDwqrI2AvlBLwyYKeXzZ8eZo9ShvXyM3SHYKOcVfsF\nhL16WA113h+7Vk+hJ49HCSYTaGv6mewLC9kb7nEUeg00GG7+9HFhpwbtPuKOGgiT\nu10HMzQoyRItjUGru3z09oNBb2oHlo/rVaMdC59Vr65znb9aXVlJ+WW1vF7d18vZ\n9d3i9ror13H+9kNb7GQ5b37XDvBr94KQzqmCDQRY8LkRtr370aGJgfd4pmVBjr82\nvobqZewjMc7BYMNxWN5FPvngaSurJ3+HsGED2MFq/3aww9JDr7UVQrut/If/HP3X\nYvGwanJFF+Mwrr3t2MTy/mm83nwmPZ3BmsXhIywKAWEZRzaZQqcB7FzZn38Yfbd4\nfJRpKhoyLe/Ht81LuODS4QMihkqTKbR63llfBEvbK4zR0vYqi93S8jQhgwZEFKIk\nKBVbgqINUHYJSgCVbIkaoDO+duoCaiyV5xqLTjPEGksAGhEJeNpJkSW+s8kSZ9ZZ\n4qzvLPGda5Y4a2eJaTZpwQF/JSxEycp/kSqQslQvqSI6ZnfdPlvc7jr+2GO3zHC0\nwcBfhkNJbThzmjjTfOm6yAEb47ngTghDA0QTKgLpc+T69UtIc8CUV2B45MMcdPiI\nag4BACRpAeA9LCsTMBW6Sq+FLm2/iVTo4o3oIqnoGAkCoiYRH/CovXgNsJQqWp3X\nt5XwCQLNUwHdyPKSJlMTZP8exqa2HoCXydOcp47RqkBhXP++9MTh+vc1p2iUkiVa\n8rZ1B9VQSDr0Uan0R0w31WNttt8Ga06uzFLtAnX6z3NlFraSiBhdB6iUCI4yOiEN\nZ0u8I0+1U0E3I1TB5K/z5fqlfpj/Y0uexKvqdc2nrdd1/ApLBJ31RrAlJSRW2ZJ9\n1gHY0mDQWE1mgC6Du7Yl0EHm0J1gizGHJkWEIUamiRaQDJUlmrsW9tqAs0SPXqrP\ntoa0Gt1YCneJyr9NKGuDATzweWd320kg8FcWhOlWx7Kgf8bVsSw4MOmqnJCfaBuq\nucnjGBjnzhEBRzyPYwxLUUPMptpLEm7qg4oope8iik5R1CJKMKpJM/ogAaaIbiin\ndJRiXVIBFBL4XS9VoV0ILeEDF0889fc8tJn0ZkLtugainDxNePhRhABkKNezpSRu\nASgAmCb9GzmDJDQJEUiBDRvEigbSRHuMza3mdUjqf1ku7l5u1/PX+fpze4Z4hWdn\nP7fewjlI6Sou7Q+Jl6SdJoKD9IUhCHnXiC1rsXfyD9mCiBPRaP/mrywGzkdH6/FE\nUrbyH08cCjN5wi9rIhy6hPY6kVOVBTtF4BoIdDArplGBVNAZEVYtK1SviqVJFScl\nNEsKG6aWmRah8TK1tZcxUCEG9DIdboMENBlZkBhEAzf3/Hf1QmrnySeU7DqgB9Tc\nJKpdm0SGx7XvJpFfAk82mbI85J2iLPzAH4uy/h/9Y1E2JCOQ6S9P/MSkv8TElznl\njTPOShDKQ307Zl9YPHpIvriA6SH3igqhJoJjyh9dO+IqF0VbIcrTnCNtw65d0HBF\nuWzGYu9CCEZT0gk8Ni12am+du6keWSNKJCWZCQFVkozU95kj9d1QVeqN+u6XXiWE\nvt7tbzwWv0Zm367lCjvHpm20AUhqTGs1/nrrWM6DP5XBffb4eBBZUrTgtacylnng\nsHYdOISrBKHUtiYWGy9sNjQgeOyelrbidjKEVAHI04T+hNuwSRC7+jwpAccfGXqR\npaCnIVadC2zsfl2zBe3XdbzROptMeSpkEF1UU5nk3PMWZwksm2oPX3gj9OLRlK+E\nHib3xoemcv3NbI9TCoRJXW/bSuGZhQjpijJR0TNF/GUq8G4TH1MlcHYSxoYTkWsr\nX/5EjiZUeTQRWAHxUqqE0GNof1UYTAPT3VDgyktI6Uua0FePeWtgoufYO31Mton2\nTjsz9tl2ierIK0epqI7gBr3t9IBxXbRuME9Tjv1RhDkUtsmT+MBbXuSOE1w+uar+\nqsww0o6p0Vkycefxi8kN3U7HxeS4lmd8WWyaTciVO+LAA1Zf3ig34LhDPGpqQYhM\ncTrw5+fZ04d1ffvr6Fv5CVfIu4CqU4BZAj4H3Q9r3O3uOSgh8sFCvnS1een4Rr6U\noNrNjyN1u/sE5l17N1s5u2dZ8NirXt4VEkaciJ2MKM6kXykl3hegsJK9qhQEX9Aw\nyh6DE05ET3VpSMmzowNfIs9gaq7RvaCSG++PO+xsgn701W4HwmjGR5/00Ht/3AN0\n7epnHSLJGp91DF7y7V7gJz1MV6OESs15F9yRZSxkAk8pT0oH9kfzEOD2FLY9G74s\neqbviDYVikJ/MwMnWX/7CzqlTz+WF+4Gg6+5jVel7CRzPX29rKUy3z/Wn2amfLP5\nufG8+TGc5s5O1JfX5fZzW1rbvu/14X0HbsBlCX3LZ8Np3nokiL7saAENgXlDIR6c\nuNz8Jl8PQXnOcotb7xU+cFSeA0dlHSy4uGdZXtCvlRwkiBMeWW5nziLwy7tJ5bLL\n6diF2j6QZux67D+5F4POPXC/+wI7fqPnym05JfQUT4iUbz9Jge5aJj+8+/GoTFB3\ns9dxvXkxQW+KyKlre+zf/VrENj4kHTl5NLLVlOr2ODp+3Zxzd7scDHW+YRbV9WVY\nqoAiCpc+1iHX+L5eSTAoc3ywOL7re3zcvYCguf1LTs3L9jxrMOYkJuDZ3I1LG/01\n+2vT/j26MrBK9Zq9/jZ/GqcuHkwXzrfvHdG9HzF1oRtT6ScO1BNCEImeeyJEpt8g\nQiRObkOJmZZ6JDQ08cMhPYiEmJoLcDfzh3o9e3iYr2c7aZc7Sbb8zFbCX0H+ZrV/\np52MS6/VcfnuO8mWPdTHBwvJE4iMpYkG2N7RISjwOaZdbIjWK6ViCinhu4fFy933\ni+Xjqu2jdnowK+D24848nOKyTvb7d79OYwNCaaU/hgE6f9zFVffqRgznVrMJ/dJF\noYI6YG200FQ6iBQ0RaugMJQ7+u0R9BUMVGRqkbnsU8GmZSzZWFy+R4jU9RLPwYKA\ngQ+bYY8zNxTXtEeW06mXJ5V/DBPJP/+oFyrAUEgzL11o/4riD44tdloCoipM6Xoq\nJ/JrCOWJvHLRhqqoilGHoqbq1YAsSeMRmtPE4sR9YVagOY4oVMdBkwl2A4ooBLmT\nZ8OWQU0LntNl3FsTwc8LDkGbyZKUPF/Y4nmA50Bddadgegx7CHRIwkflckLU5qqV\n40UrPJch9pNWUjfk9TiVqkSA04vPbgi8MjVKfdBPjKm5UYgUyXPX/PL75LkAGQ+U\nJgoKmKtbKX7BeauhctHQvGz5Oio0B1A4Qw0nJJCdllMCJR1LvQLzUxULi3f8o0PI\n6ndqlh1Gq3oteQJhM32Hq0BEnELR7WLOi1qdry8uK8pLcqOgBeeARkHlu1FQkRsF\nIUA0AUI0fWce2ZLn68XH1o+xOL/RXXzSDMfgVtBsJ2R8ZCaVbkwmwpREiExbkSZu\nosEmidZL6whJYsSLHWXQhjwQHLRp0Zo3TPe/uHaI4JxO2+tTf53f/rpa18s1wqMd\n2S3/sX+VPoi039hnAGm/bzwBRCYuhOIjLXFBEoC7mQvfjoZO6jII526QDKaknMAD\nFFygM9OCLTPVUzrsMtPInWYJ8mAt1ItLWVuqdUciKLVGv/VzMqEfJzdQDiEGVYds\n6NT1NvEMgyrEFSVZwKTJCK55iCAYsWlZuez+U5EzzNFfQc5giPz9X6EbcAp4UtDX\nBxQICyh8WUAM9fwsL8krZlSkPzzD7ED449gO1xfRb1CaZuWwNoN4zsn2lJMlcWLg\nXRCTih5TtZQ9EluPoWsYLlEvywsyZUvZnMC4Gz5acUxs4jRPILzz4eVmdbucP28T\nptVqth79VD/JhGTZIi3sMdBXONBTPzJCnePXHdebrzt+3H7dS8c9QmTaVojVhDSu\n796Zk2Zsu/d8ZHTINTY52NMiGiWuErkxS75ZX4Nh2vThAykfl0674gnUVU3GyKkv\nF+pqMArKcnCvAXVehjwpwzIjc7GbDdJp0XJ/lDbYsXyrb4MdgLZrG0yHr4ltsLDq\ns0Kkvm6XE+EDFTkQlt/Ee55cJJnL3q09uwV1bmRLbiEO5FM2wMYn/lyUYHYE0blb\nIAxCX7534qh0Qd+NE9VuBHWD31+DkOrdDv1BRvc2GB/ZS7G+tN9AAlCUGHqxjcUE\nH8TTHLxoYaJ/4ZlfDBI+JX0FL2xRCHKItpkupo4Vc88TfxmUPImHtUxK4rYXwijE\nSVGNbxLC5TZzRKhATUQh9xoMPBTS0isnRZp4KBcI6NSjZoQRWBpjk0bV5OZo9jiL\nMQQzM0tS+pmC1o4GZSP1uJzBhqGh2MowWIf0ZEuCDEV66hy1NoNdfsuwADGwvbci\n0U+vEAaIUIeSWyUWpvGhmHrP0vzpezzz0duTFS0aL1B3wZONM6gbZ/BWsaJlQJ9Q\nrzpkTzKIUa3lJ0wrdFlanPckd5StfhtPg9apCvs1VWetRDMg7faoGNJ4O8JpWJl9\nSi9NqYyLaFd8Dd2BTMpnO6RI/SwjIizCOcnd/K7E6X8V0bB7RF1GtY/0PpTeDvw+\nssZAgl+EE8FZXpGrlHpuMH1hqAfMiwk0McHfNKFThwpFfPG6kZJvjC2YZZSeysJa\n4E1NxbEECVZqRGRbPzJBKQGabjRB0t8Hf9arTJFJPy1dhH8ExkhEzAmFI5P8hH6G\nz2JinXdM/Ys5yiGSzMVO9pVFFG3LyUa0jK3IrCNLMpuC4unOZ6Ct4FBQ1O98DqXJ\nkNLXw5E6aFxtswsf7cmSlD7b2ZTK4Sq5w6mr8AvkIqGvFjdc8SZe9PRWIzfd9P5y\nCuR5AnU7TMf28DNtp7vN2IbaWmS3y98kOymnZBd2to8HmJ12vtqn7WcM7NbUi48I\nyQBtrxVtoxX3Lqsvg2qYJuDueNd6ICb565QDncu2qGrgILvKfKgsE7nL2UXaZbTz\nwojfFQalqj4S30BBllPcovJAhrmx4XOi82JnODPEIYz1Yik9/Og/pXd6nUnoNpfi\n6uzCxo3YrMa3zUslWmMcstl/SowWYTFE2FRF4CNYDu2i4O5fuZZOhMgce0IWl0x9\nr9+olN2hy16b1T76Yr/oDIgaProZuh44sZsRQO+7pLMRgC2LmFihu2HqcH8ctzzj\n8lfWSNRFP5104u/MG+dcly5WdEo/1zq50mJRH/D4m/n8fi/A4p75IMj9aZnbSxoQ\nKsNoRBAykzhGu/mTes6DBmHYSGI9IhmvQdKldaHyEhb7pZhp/kMumRpyRXFFXq6r\np/pjqnoKNqbDkhcc6z/asl5KX32s5DeRinlstYuIa3liop++32lCc0mtwsWewz01\nttCzu6oWU9zJEv0eUXO9yCDyplxkL2VFtcije+n32DmdPalfrE5Zqe57mfrFFq8l\nAtbv+6ZCYHNW62XSGoa9Aye8WUKf29qylzS+xJLxqOAr2S4ZMruMt64uo+66jPZF\nC8pCzONjqF+IeXgWXRdi6h5D0kLMAOLfBFz6Z+CpYMA4W1c9YsRN3sGAHqBhQNQa\nnxEIas4EePAO6L2CO+A6XVeWm2eHfmucs+NZXrnMurYGlHAltD3jlLGEtuebxpTK\npGLqQhmlskXZcvjBiKJe/FFe2G/YwQ17892BjnHWOwF50oi1Onrk7VoS1k8N9Mb8\n6OLzbq7ZJ7JPy4qcGOnPR1Dq+uwHIyKbHUsNR+wRJfkTejUAn17XHKDpNVawJITe\nYRGXrCIvMnvrOMKLVaPNySYVmdus7VHhZ48ZODohdquGXJ+aJ56vSxEYWPvDb2wj\nVYYrU5fPwprQ0QRgsqgNMiyMAZzVfmlrq9Oy8MccwMx6+b1mFdy6wEHXQwiXw2TG\n9RCnK2d5ls1GQzfOsspltSZu89zBZDxvnitY8+S+sYd+RsIOe6BhB1ttznjXMr5q\nXVpO/G3Xp+Zl/s4loQaLo83NMpG4VCuODg3pyTy6sDhLFLnIIdwFXoIrjk4LwFze\nL8GpzoZc+CU49X15+1EvVCOOrf0WU9MtS+jOqdV/ABoPnjoOvp74OPoMmcjJ7Wjz\nogLaUnPPkFi5qiDareZZklrYyzvAXmYO9qJg2/ZjL++s7cUvSTdN6EfDibtYCFtY\nuPevxAnJMgHuz4ZXTCAXurXYTnz3GVqkp4h9WWJz0ustcNKrdjjppQj+oWwnTOkH\nEU62baKeX+4Zvi9lai8V9EUqeo4Avif6umZeyfxKWmsTeRI4odS3DIc/sadc99RM\nvtMKLrtAw4rpaZUQcBf6Vjsyyh+qj5wxvlV+jDfK53RuiGqGjXjShyudVE63RUj8\nTAV94TwUn1BObh+g+Lr+rzaYOPJAlSRkbbaQtHEWt3beF6ZA1b0N5IZSVctFCeFB\nsCnQ6mTitnOoewM8S8bbLYKLNj/1XWD6vmoFP+P9owz3MENj3vyYdddAy9E4vO9g\nw78T+mzf2dpvoF/Ghqxjx9NZTp9lVS43xDS//K0yARcdxtQOSw37tGxRGQ6O8eCw\nL6NXnOYgO4/KVII5Sn2zk2Kb0clTSCfwARAUyjq9AMJXPG1Ndg5SDhjkEgj9aj3p\nPgWX8/syPF+WVy6YAbqtqRhaZx1Xj4ekLMCeM9zPJDQyeTuYkYUWKXyQ3wfuzMBx\nXH3eK0Dsz4iW4yqE0F9ztFqoj13F5XPVdDA7uMQkhdbJ6ncposrzh2WKfNsYdtsU\nI6zNy0ycDHrMLRNqr4SjSRJPcE3STOtMzCvo9JQUTyczg2Gj5GDz1bgsh5pZ8XVZ\nh06qPCESS3+N3Fvkb/etTg3U3bfByF6INNd6C+JGCgP0UCykcIUe8D6KoE5YFi4b\n7k9W4ZK2bfMuIeh75faQbTIDJw5nKTaMxhOD4SvPHe3mi2E5Zklmsaz3nX5Z78xu\n/lw3hBD4fu9c5BBtgzIpiGuAcpECoLnBiyYFKDk5qdbbmbMIcKueAxoObqGeayZS\nVuRcWb8Vj34ZzvU8SlBH4TxGhjwH8dp3s+f7Q6V0693SNwK7Kx9VZlre38oPGcu3\n3Xk7vnJT80G7TPINna8bQN1DqgyKRm4qw60nPtEYG0HkRGEx0USyyUSfc9IGE6Bk\nc993czg5AY8ihJRnSkzmTNRsYTLUHkM1JHPfZWgGZF/OGE9eOdEz0Uc0KzVG8Nkj\nsjqcydYnEqm2/U9dxoqckHryFsjh8tcFMDrJNTP9+Sja2I2npHLQcZshL41nwv7K\nSXtpEyajObT9qFgLXLgRX95STvREAno+STm1zHAjOMAryxK6uuydxR07UeBXrjOm\nFrdOQgsTaQ7uYIKpsjSOLC85tkc+2RCUWGlCLkMCEOlSYTysc+hxbpSRRgMezrLZ\njI4c7HvkP7atnQX4crpbWU4eXVeCMJRSGfeexUtsgUuShnojUGlkmDlT9hwDKBim\nJSVkYBf1Eqb+l8eFGczT/0u3rRn+ogw7NFBl/FnlsnUIlTaeb/z1kjYWdmljWKhA\nFKmfU44gTUkxGuOHp1S5JTehh3n1CW8tlLOiJZH4SKxEpD4yoUEJZXpzo9afsYVn\n1opznLmQNCBtnZk4fAPOAXpQg34OkKaGAHCdNAAtrrPiHmOtgGtsdhBTGPKwj0gd\nY8+JAmk3DXlXRQ512HDQm1v00SE1qdncOmgnUQ6dZWBNaxAdgzRPoNxVX54ukPmp\n11EjnT04jRqFFfIzMSXXoEtVooNqUHq8Wa/HzBZ9nECqZDLr9LOFwYABdPmm90yT\nF3sN2dLP6YfltCQkQEne7ndrT91bHGEMAC+nhkyFvl8Lu5CbbXVD77u4vY5HZDZT\n1u/0U9YzuylrxezQgFPWnfkgkdAf11aU3a+VRLWfdrslfQxany8H3S2YjLkPRSdc\nH4saZrKoA/FH554H5oWmJTiPbtFuAosThxYTS42u1VaKs0yXI47gQMz2/TMNTBse\ngQjXtGGlIbV/AdzQtHChhp6weikz8JzT7xfeqchz8Ba722wVcaqKf54qnpwA1AxU\nscOUMHiXSHwRuyO0XCxik5a6NoLzwsswGyP8rh4Cx+XAZYhICpHXy3qIdYixF2kn\nlcvh75OCE265RKfuxLhrv1N+il1PQghHGsPJ8kpsE91vBbef7vmQFdyEzu7abvSA\nDuzYVwjDua1jUew6OXBJHgw6hnQMBGPrHUXYMUoqP+07PAD2zVNUlRl7b+INe2DU\nfjP+eSsDe7uNL6YPdbbN673Qqcsp8FOzIh4NZdzjNfDV0EEJWsJxxcEJNkPuLfK8\ns1CN1L6AYmmWtC8qkdqMJiJW020k86+MTUcq54q595gLEI9RDhaiNqsZ9uBwniu8\nTHai6phOaR+eCCGJecLrSwtBWQ6eDkWtcSFucOFblRf13WT6aQZi4Zmv3BxdkVl+\n9M2yfpI/sJX3z5uvvf03Kgbw6P3Tx+VmtvDldv0iP6fNVjXq6ac//3H002y1qj/N\nnz41Ql+u5BMqf/hqKxYZk5q3VEpnpwf5VweDpfAxOx8+yhzu/T4uP40f9+80zhif\npOaTrrP4nqgDrM+nBDs+VRH23M32t96rp2JQkOqar61yAvCu0nIIFVaU5WCA56le\n2CqFe9VEWDGcZC3NgHlUVzVCrZrv5bugtSLGmw/lUYi43r93TApJCd09lD4oRiL4\nzAPPrwtFFfmUQHc0BROrKMIUPqIh8MigQegc6YNGAVhCoQsXDMVwmhKCKYBLp2QN\nqzROiR6/BXf8JiwLD8lHWYeLro8yKATyVB52uev9VVQL3OHr5FScS0O4jNg2ZJel\nHO2gnGlBRQ9UkdR/LgjFkjiSdWVU0XM/LaOKRT1FsNdTbPaVDV2ha1epj2r5eVnf\nPsxGf6pf2+2gvfSbyTQpPSm3vzzLj501XMPFcu2h9FYJ+qr/7sic6ottyujtX8m8\nnGH2shqv7+fLu+d6uf48XjSvHP9dvpLQK5RvgpugOL57GPsasions+ToGsDNNOoV\nQbZlG31EZ86H5m9qYUaVHzOqWM1I25OimxHX9KT0YSVZ+IUf4ReswtchlGF9mGpU\nMqVv/qU//uZGrEED9l4L8/jHU/ip6Ecy6HaCQvOckQZjNXFEGrWluWxM9aBDjME5\n6xBjdzH26yqnDekufhID8njRXWyFjkq47L5x0RXGTfL6x5B1VajS6bS5Q3Sin2+3\na8KROfLz822ZN+Cx+dPVgQcn/3H3q359tRINZX3zP78rM+oUbm79uxT8w+JZPiYN\nD3S2lun+t6NjnRiay91OhJ4+NLtZz7v1hgi6vL8hV4/la7bPyW6cs7wut5/UGd15\nXW+/c881/R4Ox2x/7XYdbZqTp36qRnnvv/1p9MviN6nhH9+ZZwzlT4+fNz85lqZH\nnC88KGz/Bt3zb2YT3j/toRM8q/H85vEgoq52LHKOM+2cbfgwLpHvqKu77cPa3NTa\n23M+YTO7BE1aYFpYk3QdetfepRthWiQQdVMd7VoZBhTu/s9i+etq3czdnSrzt+Nf\ntQIfOfs4KLP1fpvw1/pkdQwcJI3sIRS25NDZLDyF7FStbIyWt8D5VMH7UeSDbi2U\naphqaanywo/gSR9LL5JqwYxp1EuFaciTX2b3ihz9UnpX+8Kz3gVCHB5bqygovq+w\ntY+20yuuCxPmvyQjKTReTlqKxRVos6Ggwb996DIZChyfLgGI2MUmAhBB5t32OsQl\n3pcKOlT5t80WWY0pooOVrygVTHiC1qi71aMK2C4KL/UoIDZdWD2qOLcHqUqIemeP\nNJBKZFPfZUGLc93lU4h0b587IQMTW0S6JN0p4lBagOxjVxdKxvnWzpSA9i/Oo2rL\nGhAtwrVjQy5heVEvpoJ1YTrWlq7gQ7OO6YGFDfupUwJGfJnZgtaWi8Su+0rQM1ip\ndNWuYbHYF6DY8xUi8O4B59QeWX121ilQhL5Mnaq2MRaJXcwl2Ckyo3Eu13yhDlhV\nriFvpNVWa/BdeIbm+xfQc5dOlauWYAF3ewC6l5WjatEPRFhyTVSR4MfaHnHY58Ky\nFtUM5zS3uFEKc2IIDakuNcZzZ4q+0+4SXC6vdaJhrKt1Aij2wqxTDV+5qrloF8vm\nXC8pUiq54lnTKj5dzrv4uP6tXs5G3y0eHma3G++0Op/FvkKyyVXM8DwpoRqU8kvA\nz0zVPTY4eveXD5rHZ3m/ut24qM1ggf/pnObdr9OIJuISEDApVYL3yJ1FCqBiykYx\nVPeMHcbZqyfYzS+qKZwJyK5y0lBldrd7e/GwiScMnQx1g3MK1vCUavRVwtubF+dt\nuq0ie55KHOo+ZwJvu3czS5uI5uo4QzFST6HNSkNcQY0vnIWJNtRGAx6UdnKCdlbD\nNqw9kEv0Yj0TsD9hjdVRgIMRavRiL8PhDKj/a+31UACDEVlcjN5UMD8BqY2u+NAm\naLFtvYrFNSozMpAN5xrFUB6S797KBUN5tcu0CnWeqtJ7c2PbQXyJGbZyo2RzWBzq\nEf0w/3Q/evtaz6Uu5g/z9WeefZPaDRrKlRmiIM9/m36PEv5NjASD+7pphJ2vzeEq\nzN3LX6Zu/S4R7stOk5y8W8ykwwKjQ1Mzs63Ezj4dtv1iZ1qM/Txrnk682mXlU6eV\nV53qoICzTgPIZaV7JVMJnN0rzbH24FKb7Clo/0meOnb2nzTH2YPH1CkpLL+YCt+6\n6vB2PIW8I5fHzUM278EQ9PYQcYMN+1fqgaPTtUFoVNa/DSJxaOETh6KV2e+lX78m\nSl7d5stE0RrtWqi1UokGiiQ3h2WZoiBTy50hDNbVll6RKBrQxLHCWLksvyLfBHZO\nK5BGWfl0s+ikIqa+svSsnoMk3rOSfSq/Nz1BrOG5zny7Gbdfa6PZWQ8Wpk4sBjSn\nduurQFbctwx+n5TUrCqs2qXNN/Hd0LEbM9i86vSZiKmTY0VrVq6WLyC/rFelZ7ak\n1UgeSpEhNnF8aTCdlFZkZJIGkd04PxqMsSXnbURkUtrbo2/aqyfXGhibYQi1Sjdr\nb6R+Haxn1xocvcijX7XiFiFVRjFBRtu7DPWpiQ3lucbO1PDjor4bfVs/1E+3s2W/\nRzRTUUAPGPrrunIXHm565i48yF/kZvd7xMhbECBs9qs7U1VRqzy2qmJHe9FWFKUS\nydV+JyXStMestkA7222GoWLe9ufn2dOHdX37q0v9QkwziKFy+JxR+SYZtcpY5hUz\nO/Ut5KtXm1eP5av5pgAPH3MtPyaqcrDUAEQu0WuAInt2qYc5RqQSeV5B3u4o8uJE\n5KjLjkfJy5czEq2PCpCfEyO1SuQlVD/VqKI0+p9SrQk2jnRXEcH6H+VdkwxqJmr9\nzy8P9Vr+4+Po/eaXl4nfkmwfG88037+6D0tpPq3xVxGaS5ZUeHPJpbJwZ+uPwsm9\nuCvYSvII5K82FohGoQ/WFpbRR+SI1BTEVLTasurbFnpdfC9/Hq2FzZv34I/2HxOD\n9NMKLAkehf/94mG1eBz9spy9zme/GeP2Xv6rtTS/j83r+gja20+KLW5D8yKkuG0X\nsPuJ1NFkFukEPKl6VIrYxGfYCgTvo/9pOf/HPx4+Bypj5eq4Eg9Y361Ws9+PngeW\n9vP2RzkaDUeZzzbf6vIaDgfXVE3AU4n6BBsdmgvu0NzkcjFFZZlN403jNJsmZgp+\nChu4fDp0eKr2UvjwfOKlsPho76vYaCanHuuS6SYST+FTawSeohfHj6iKv0x+xFbB\nYl6Vfyv11OmNJo4KUmhko69tZ2rj7bBuTr5q9lg/cacfzYfEg8GkIrTGQlQEMezs\n9dFH6NmrJcLwkyUV1JU/KRRSKoTspcGYDEHbSiIaAq2bsbeDXoojWzMINlKo4Rc+\nmp/AL5NHUuIvPl7oKQD7Avih6STHMxIE1OI4qaT0ETX2BZUIo4bMH/FJy2n+SEkc\n2TPGaAKIDNR4LkITqGlxIu+n652HnEkon/QK38g7rVDRUjsvvANcrSpYDahJOPgO\n0qkGKLJnl3qYvkbdtMMnBadNO3SU3XXt+knQmrZdhJFWqgLv9k9VgdZBH8IP8+lX\nAkuBL44LINKe4MoeIuweVgbr49WTJ4rRbOrkyZXzfIkAYa0Fu50+iMDnEi9jCkGA\n4clGTdRZHzZbjnzQJxMFeesMZkbk+3q1Xm58LllTH3evJKts/8JTtV2KqgRIzrLQ\n1HZ5Bl47XPOa56M7zIrp6+6l0ubAi3eONkcOYgejI0czmtVFHMUYRung27N6G+Qr\nTw+osGGNkrwQimaUFtbIZYY93jL1Y3zkNYdY46OiE94NMEMglAFtToDtPJvUAK9M\n7nQg+BHkrEmhT2T+3cPi5W70/unjcuNTXpqMHJutKw/85uBqRNVHmrrnt6umHHbY\nmuehEl9tn5/OCpHbldRzmKWZ2/m4bK8zzMHd2zoZa+HHqZB9jC1ppRx0tfdc2K3K\nk5oJrZH2odr7/sPPp+Ked8W95yHMVwukvHevwIh8LkUu3zh8SRcQKIMErXUhGnFT\nXQlR6JF4E/DyECR2vVfRyJ3sXYiCj8zBQEU5SP54wbNJPMAe0rmcoaxeFzXhcMkT\nJ6MQaqtOSYqOqqh4IlV8NKRINeBQ2GY/JsYE6a/z5fqlfpj/o94s6nNB7CJNCQl3\n93NHP9VP9afZo3zD0dtP8r93GwOpVBv5T6/jx0+P63G9eReW5bmdT7gWlzMJo1oy\nkaeEPpxSp8uReCNwVLWNbB/H8sc5D1jKj7iWHxEoptLwFVLwgrZeDT/IVy1fpbPS\nTXZ35H/PJfX7EKOQTtxpCgUjnLzVA6wnArcYXJXSBES+f9Mw5ZsQWllgpMDNDZ2G\nBj4GxnmICDqN0FRZMzCJRplABZfMq6458MTs+4uO02kxJZylBC2qMOqr0JmUc9TW\nXYoZDnSRlaO4nyaBsU/lnAFjC0jMBoYvY5GFmjBNaDtpkXCKwWAbDJxyot+eNpx7\niUOVs2fbyL0goISN+AtmfLDRQhEjLpDYzR4XKLAbNi/0GmfwyC3YOKOEbLlrAWZj\nKjnRVPIeTCWP0lQmlHX4Wn1kRH1kPegji1IfyZRAx9PpAxnAGaUfT/CWEgd73iiR\nI+ooG5m7rACDhB5yQUUm65m9nBXZOrB4rZWoE0S+TyWOxatKUbC6yOShmPoseBUa\nH6RNzHtJycM4C6rKvzPKlV2TcRCqWGxj3v0Ws3w8/VL+9qlzV/6ovdlbBfDty965\nsMABkEIReZ75CMdvSmxAflM6huRS0XvfItAy6IAsob8HqLmB/pS+acbfN83C9TwK\nNeS5cC1W7J53xcluRN11awLeOT17CwgzD1BHAB9FvJxmDjm/OeRRmUOaZq4FibNG\nhFUBj/si8sVSdNQ+rlX1cwrqKieHyATdA73ZzQUT6FWerZr6iDC6jE7Rl2BtSIQZ\nUVSDl3nqox0niLVVzrWBR2pa6KmFGvBWPrxQhk4tMs5qn8S5wXgddSB3TS/OA7lF\nCO8leF8GpUDdr3OtCu5QMRYPsyLhmGKHlzIIui/xhrUz8Sbw3kSHTOvsq8hX9E4d\nF29dMC7ep7pG6KNpjVxifkwfPKTqpmJhTGm6jAsO/qlbMEc18pwI6DpriOlYUppM\n3bMJUibBn0cE73yUtQzw8A7S+ZCyutKLNkzuJ0JdSC8ETmQi4SkSJeWsKCkPGyVV\nzgyBXR2JEnYL/gp5EVXoTYupzxlWgHWs5Wu4uyM8bSN016QgdMgw4aO7Ch6q8NLC\nMweGaJLmNAXPnWOYfPDywjOkxLy4cCC4NEzBCdzQQmIJEtg4npR4PtV3aWpTZyeE\nbcvwyAWt0NvLmEU8bjCZeiiPkFAaO0aLCqHJtMTeGBQ+DO28vHqty+hpqJk+9tCs\nW7rCaIaN3RmmQ1IJPE0JC97pw8VWNXamaD9o4jLQ3IDPPm8BU7a0KakfylZ4A/7s\nalXkr1KtPm22MIUys0J7UeVlBDtlHUL4KNppmHfYWRNP/TMzBy9YiKjymml73seh\nf2aahSsVENFpFg5a5BS9Aam5AT6XCbhuC2Sd2Ypkr4CSEiB8sPc1bg4NMH116syO\nLvRyuNLfOVhRe1sduizrY7rOvCswdDWoW3heiPgFumFasDZMi6AbphJD+5xlKRAl\nbTOUdk93g+3ZDZIjpQ7LbM4wHMalcTKaL6Xip2wM+qn4ETuD3lpKQcWhYRSYeKmo\no3saHpYjmJUWLLhWk9F9cBmwa4necC4mehNTI6+qWqDZHq2laLSWsqK1NGy0VlHO\nbpuETaG3pfz0tjQqZyPV4Mok2KmBxK9Ne5iaTKNMGV1Cr7n+Rat89VLzCjM2qAoq\nk8K1P7ObZcXubWHd2BKm3NUcQx+Uc3zd/kAvtKjckxcHXmbukHnogKGT9IO+GHmg\nl5yo23u1s0Qdn+zxL3u5oNsOahvz0H4hqu1gaayK65N8OJDqXOfZzvc0WF276aFY\ndtklauUl7LS5CaE6U/j9YrkTsuU1vVSAI6nHD9qdRnz39Gn+NKM8Jrcfx/KBSLkf\nj+ZjrntP0QZZxyUycBFOS3EtI99pr1BOTEoJPs7GxWZG8niQnlpPat7k0G16k8cw\nra3yqgIc0tOZBir+7Y2CrXi0N4eoSkcCpKKa/RHBETF6oMtF9wK8k6M1CpxqGA0h\nngqFmKBOy2+l/OHzaj17xIt5xSfmVVRilkEUInfAMVQDgJSR1K4+bYinERaj5bMN\n1Qe0zzY+udw/5rzJ5f6Jv+TkUmTCFWmqNpjt7UN4RJoiVqQ5KaC2pVHCZy5/L9ys\nLVw3r5O1ZBuNg0+nFbjiyihZTYlfKV+rCr9ByjE9wTKSEmC7JpKq/boykFrlTIY4\nGlOKJApX1KK4DrqXcnqUMnkH9Il80+A9huqIT5FBrXLYYeAlbJOHDi3mQUbgREYA\njRr/gvIs/nxKmM+8GuERcnoNwDM7b+HbeYtInbdEJG5oGglGHJF0rDhETOGdpnBw\n1Iq447sdRZzGIGLVxIQAJ2LMFVpKbZw9fe+1QD5MwXZC6GKoyi2EQgtjieUyoI26\nok6ANt2KOqn5ykeOHajv6gn7QMwyGPugUI8/vBMNsJS+hyDckzYGpcrL2ULttcDr\nSeqEWozK42PdyqofTsfqC+F0iAI8I4msPZiTsfMKhBXCMuDZiwFUKvw7KZwqRIBy\nMt+ZchZrpiwmhKrESfAgeTBWYDSE8/JUZSYQAzWJNMEP+XjUh3BBnorOTv2/wjAq\npxS2Fx5CGhEPQSl0N+R/jLYUyTugpXDEP0zYLZ3AEaSlzDtPJ4vIPtSZMaFwpMmM\nAaEL70IXcQq9taihGZ0+EfSHej17eJivZ6Pv6ufVS1PVtqb850nVArDqGvnZB47K\njac7TP6Wow/NV/9q9If3H342YKzV/o3Gt9s3Gss3Gs9XC593LuSH7N/+Wr79tXx7\nsr7v1+tnqW8vllNVUAKukm+ili8KyqrEnDAC267Ek5hM7dBSTiYQwIWsgLhFVW0L\nLBtVTy0iWDSs2gOZgPUrgmJsVMKsjDDrt8qr81aaSEbj0c/Pm+HC+sFhGee5bha7\nN/Xk3HQrJVr6OnxkFF5OaUzgwTe1MfGr0EfhBTC3tvrCr8KoLRAC4XYW6GR6fdpc\nRM6yssETGlWVKGhhwH8dhbH1x7RqCxZwqJEgVH4jAA5Lx9iLP4zVDcqU1VVDJeD7\ngIzVyXbgjDVML6fObW00AXs5yzTXMyQk+7nQjUnp7qZQJdUOEtrlwB1EyJ0MdwFh\nsEFKDS8gmhihqGSHKfqCEtEhCKkciBNr5xWd3GGffjCmAAbRCgh2ZGNBPdhONNqQ\n0NtGG5pY5MdwOMFeN/7EpCa7KpLfjoYfqg6MxiMEddKtgVdhCH6N3tRL3Jp6OL82\nfGMPov5BMnbqTHBX3gKOHeraqI1T0mjDtoHnARFjNRMsIlY38eySTK/pipfJADhe\nBKsYpQ+zQlwaq7EudvbUv4uiRqP2beDZEIKalOEc0I9DOMcqps9wrhayXUmFvRDW\nT1CJpGOjji7g6V1Cy4ZuHk4UNkyTZmDTkAK26TvDeblzM5M/pEdSI1an6TYODdaa\ne3Omh9Q9LrKHWn026SXcmHFqyfTVjAk+7zwqqvGN+gX7P86fXn4f/TD/dD96+1rP\npdTnUryfW7rZaeYKyeKWon6+bf53Xu//Uf63/FslwTurSsKtP/jbHp+k8ej7erVe\n1re/ah6q+/rI6D88YB93ryE8SvuXnEKaw2N0L79v3fq64T8+x7nGhHBRGNZO0dzj\nev/tT6NfFr9tlARuWWkrqWj++Lx5peuyleZNtNeFzxQGB9b9Q7952m0Vt/l6lHEl\n+wGz+c3jVo7dwT6fqob6G23FHk90+G83qY3vzNgOHmrowCodIuE+CsUhkmzt4BD9\nbDUyukN22NqXYSk86LSEchOiA+1q0wR2u66zrU6+u+xnuqVC2wNscDHH/hypynwJ\nF8Vs8QzViA+ohmrIdGwTbA6qNE6vuipQpQOlWTrXCTxCGZ+W6NeyvLpSZGdAaU98\n/QBnBxqAWWWky9Z0CEMEL1ywhTeLGxCzyKyPcILZIuuzSfjsPWSQuZ7f3E1anNc8\nXY06yG7yADvI/pKOOyL0k9LOvKZ6muoKva7SQ0UFcJ7xl1OmJeEKND3xowJMP2l8\noChzyHxPFF5tuFR6XnwFzVf9unRHPsGU1KZ+g2NBTxwKf4lD2JUXr7vbU88e9BSF\n4rV3jI8OCiRGSLT+woOjIveaP5TU/K/0lf/RmgrMHrGvKKdcsOnVFHEcG6VG2Ub6\nXCBMIHFOZoFeW3gQK0OZ8/VRE1O38ALI6KQGvBoKjqep1AMbKTPqir/IvVYmTyMT\n1ZvxnowZyqUNGqigSQ4n/WIRY+m53YrWMB30R6roqV/aWEEIdYWHUEerk0WQqyVe\n/aqmkmmTsLlaYMhZ27AVTpmge3W25wk6SdE9pOQnxhhe4i3xp9fM+7TzSu4AeYp/\nQXR+BuzIisIr9QE5LaFENHx7qwYGM17Bidc8/LT3Q+z69NHvwda/om/2MKWPNm32\n856Pnza7sfUTrU1K3XntAql1Ry0A+CVmGjUXTz1T/r/8hRcL+cn7IaZ6UnycTtK8\nTqdZmkySzZ/qu4/pbXVT3ojp1b/+9f8BUgCXgQ==\n-----END ENTITLEMENT DATA-----\n-----BEGIN RSA SIGNATURE-----\nQd5q5cQw0XpDAdKD9HzrWltdqfPYrmP7LGp1a3rJhq+Tk3P+kqVByrrYJHaJm521\nGYDmsc3rK7oB+zXEzdPNo4PzwuqVuDUsVkgV0vhI7FEn2ouee95snKcbDSd42D3U\nOM3ozV90fCP0YhMEOr0xSuAzxePHoRuwtsocxEndzcHfHPJL2C2o8CrJF1GqKOFa\njqW4MEX69HX0ElF/9UZuKh5w7U1Xk0X+jmzAcSBfgZQqXdou6bUFmqk/v1tlA23X\njoJQyzECPyH+pVg8MFN9Z44ujqHCbod+zp+Ok+70meWrjmNRcsYfPnpJw6XAZv08\n7KXDA0RNFCzIwGu2FrWUXXRs4Oh88J1J4ecy4Ly/MSF6wKsKmpLTzvkepQ/DTTNa\nSJgHeGbjciN/EcnofI0/wPCs/JBXOc69GjaT69dVZN7Rf7QAbbq5AT4I2Q07gU9f\nRr79mLC0if5Gma0Yb3KE0fNR94B3D1nZdVZGYbGbowqMqG1WzxLIs+Xz+PsLOl/k\nmvT9X8ZaUKkn0s9VuW0uHIQ2LSYWBtNL8xfFzJ+t2C3FtsYXGvCfxc0ZnPPoa9TS\nRn6VIzzMFF7Qpm8QiVeeN9amf40IapsRTn1IgEFn4elKp0iThLAdilxiXng29max\nWtGe8jz8ZS6Z5rzwPWWsjZbfjMI/mgOUEElnS6yKZOU=\n-----END RSA SIGNATURE-----\n","id":"8a85f98a4e009a5b014e1529b66c7f18","serial":{"id":740346995655900400,"revoked":false,"collected":false,"expiration":"2015-12-05T04:59:59.000+0000","serial":740346995655900400,"created":"2015-06-21T08:08:51.000+0000","updated":"2015-06-21T08:08:51.000+0000"},"created":"2015-06-21T08:08:52.000+0000","updated":"2015-06-21T08:08:52.000+0000"}],"quantity":1,"startDate":"2014-12-05T05:00:00.000+0000","endDate":"2015-12-05T04:59:59.000+0000","href":"/entitlements/8a85f98a4e009a5b014e1528052877d8","created":"2015-06-21T08:07:01.000+0000","updated":"2015-06-21T08:08:52.000+0000"}];});
define('fusor-ember-cli/mirage/scenarios/default', ['exports'], function (exports) {
                                    exports['default'] = function (server) {

                                                                        // Seed your development database using your factories. This
                                                                        // data will not be loaded in your tests.

                                                                        server.loadFixtures();

                                                                        var org = server.create('organization', { name: 'Default Organization' });
                                                                        var env = server.create('lifecycle_environment', { name: 'Library',
                                                                                                            label: 'Library',
                                                                                                            library: true });

                                                                        var engine = server.create('discovered_host', { is_virtual: true });
                                                                        var hypervisor1 = server.create('discovered_host', { is_virtual: false, memory_human_size: '7.8 GB' });
                                                                        var hypervisor2 = server.create('discovered_host', { is_virtual: true, memory_human_size: '7.8 GB' });

                                                                        server.createList('discovered_host', 2, { is_virtual: true });
                                                                        server.createList('discovered_host', 2, { is_virtual: false });

                                                                        var domain = server.create('domain', { name: 'example.com' });
                                                                        var hostgroup = server.create('hostgroup', { name: 'Fusor Base', domain_id: domain.id });

                                                                        server.create('deployment', { name: 'rhev_only',
                                                                                                            deploy_rhev: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            discovered_host_id: engine.id,
                                                                                                            discovered_host_ids: [hypervisor1.id, hypervisor2.id]
                                                                        });

                                                                        server.create('deployment', { name: 'osp_only',
                                                                                                            deploy_openstack: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id
                                                                        });

                                                                        server.create('deployment', { name: 'rhev_and_cfme_deployment',
                                                                                                            deploy_rhev: true,
                                                                                                            deploy_cfme: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            discovered_host_id: engine.id,
                                                                                                            discovered_host_ids: [hypervisor2.id]
                                                                        });

                                                                        server.create('deployment', { name: 'osp_and_cfme_deployment',
                                                                                                            deploy_openstack: true,
                                                                                                            deploy_cfme: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id
                                                                        });

                                                                        server.create('deployment', { name: 'rhev_and_openshift_deployment',
                                                                                                            deploy_rhev: true,
                                                                                                            deploy_openshift: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            discovered_host_id: engine.id,
                                                                                                            discovered_host_ids: [hypervisor1.id, hypervisor2.id]
                                                                        });

                                                                        server.create('deployment', { name: 'rhev_openshift_cfme_deployment',
                                                                                                            deploy_rhev: true,
                                                                                                            deploy_openshift: true,
                                                                                                            deploy_cfme: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            discovered_host_id: engine.id,
                                                                                                            discovered_host_ids: [hypervisor1.id, hypervisor2.id]
                                                                        });
                                    };
});
define("fusor-ember-cli/mixins/configure-environment-mixin", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Mixin.create(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    selectedEnvironment: _ember["default"].computed.alias("model"),

    step1DRouteName: 'satellite.access-insights',

    useDefaultOrgViewForEnv: _ember["default"].computed('model', function () {
      return _ember["default"].isBlank(this.get('model'));
    }),

    nonLibraryEnvironments: _ember["default"].computed.filterBy('lifecycleEnvironments', 'library', false),
    libraryEnvironments: _ember["default"].computed.filterBy('lifecycleEnvironments', 'library', true),
    libraryEnv: _ember["default"].computed('libraryEnvironments', function () {
      return this.get('libraryEnvironments').get('firstObject');
    }),

    priorLibraryEnvironments: _ember["default"].computed.filter('lifecycleEnvironments', function (item) {
      return item.get('prior_id') === 1;
    }),

    fields_env: {},

    showAlertMessage: false,

    envLabelName: _ember["default"].computed('newEnvName', function () {
      if (this.get('newEnvName')) {
        var label = this.get('newEnvName').underscore();
        return label.replace(/[^A-Z0-9]/ig, "_");
      }
    }),

    hasNoEnvironments: _ember["default"].computed('lifecycleEnvironments.[]', function () {
      return _ember["default"].isEmpty(this.get('lifecycleEnvironments'));
    }),

    hasOnlyLibraryEnvironment: _ember["default"].computed('lifecycleEnvironments.[]', function () {
      return this.get('lifecycleEnvironments.length') === 1;
    }),

    envSetup: _ember["default"].computed('useDefaultOrgViewForEnv', function () {
      return this.get('useDefaultOrgViewForEnv') ? "immediately" : "after_publishing";
    }),

    isImmediate: _ember["default"].computed('envSetup', function () {
      return this.get('envSetup') === 'immediately';
    }),

    actions: {
      envSetupChanged: function envSetupChanged() {
        return this.set('useDefaultOrgViewForEnv', this.get('isImmediate'));
      }
    }

  });
});
define("fusor-ember-cli/mixins/configure-organization-mixin", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Mixin.create(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    selectedOrganization: _ember["default"].computed.alias("model"),

    fields_org: {},

    showAlertMessage: false,

    // default Organization name for New Organizations
    defaultOrgName: _ember["default"].computed(function () {
      return this.getWithDefault('defaultOrg', this.get('deploymentName'));
    }),

    orgLabelName: _ember["default"].computed('defaultOrgName', function () {
      if (this.get('fields_org.name')) {
        return this.get('defaultOrgName').underscore();
      }
    }),

    actions: {
      createOrganization: function createOrganization() {
        var self = this;
        this.set('fields_org.name', this.get('defaultOrgName'));
        var organization = this.store.createRecord('organization', this.get('fields_org'));
        self.set('fields_org', {});
        self.set('defaultOrgName', null);
        self.set('selectedOrganization', organization);
        organization.save().then(function (org) {
          //success
          self.set('organization', org);
          return self.set('showAlertMessage', true);
        }, function (error) {
          self.get('deploymentController').set('errorMsg', 'error saving organization' + error);
        });
      }
    }

  });
});
define('fusor-ember-cli/mixins/deployment-controller-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    applicationController: _ember['default'].inject.controller('application'),
    subscriptionsController: _ember['default'].inject.controller('subscriptions'),
    configureOrganizationController: _ember['default'].inject.controller('configure-organization'),
    configureEnvironmentController: _ember['default'].inject.controller('configure-environment'),
    selectSubscriptionsController: _ember['default'].inject.controller('subscriptions/select-subscriptions'),

    isRhev: _ember['default'].computed.alias("model.deploy_rhev"),
    isOpenStack: _ember['default'].computed.alias("model.deploy_openstack"),
    isCloudForms: _ember['default'].computed.alias("model.deploy_cfme"),
    isOpenShift: _ember['default'].computed.alias("model.deploy_openshift"),

    // default is downstream
    isUpstream: false,
    hideSubscriptions: false,
    isSubscriptions: _ember['default'].computed('isUpstream', 'hideSubscriptions', function () {
      return !(this.get('hideSubscriptions') && !this.get('isUpstream'));
    }),

    // will be overwritten be routes
    isHideWizard: null,

    // declared in controllers, and not in mixin
    // isRhev
    // isOpenStack
    // isCloudForms

    disableNextOnStart: _ember['default'].computed('isRhev', 'isOpenStack', 'isCloudForms', 'isOpenShift', function () {
      return !(this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms') || this.get('isOpenShift'));
    }),

    // names
    nameRHCI: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "Fusor";
      } else {
        return "QCI";
      }
    }),

    nameRedHat: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "";
      } else {
        return "Red Hat";
      }
    }),

    nameSatellite: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "Foreman";
      } else {
        return "Satellite";
      }
    }),

    nameRhev: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "oVirt";
      } else {
        return "RHEV";
      }
    }),

    nameOpenStack: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "RDO";
      } else {
        return "RHOSP";
      }
    }),

    nameCloudForms: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "CloudForms";
      }
    }),

    nameOpenShift: "OpenShift",

    fullnameRhev: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "oVirt Project";
      } else {
        return "Red Hat Enterprise Virtualization";
      }
    }),

    fullnameOpenStack: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "RDO Project";
      } else {
        return "Red Hat OpenStack Platform";
      }
    }),

    fullnameCloudForms: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "Red Hat Cloud Forms Management Engine";
      }
    }),

    fullnameOpenShift: "OpenShift Enterprise by Red Hat",

    // logo
    logoPath: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "assets/foreman.png";
      } else {
        return "assets/Header-logotype.png";
      }
    }),

    currentStepNumber: null, //set by setupController,

    numberProducts: _ember['default'].computed('isRhev', 'isOpenStack', 'isCloudForms', 'isOpenShift', function () {
      var rhev = this.get('isRhev') ? 1 : 0;
      var osp = this.get('isOpenStack') ? 1 : 0;
      var cfme = this.get('isCloudForms') ? 1 : 0;
      var osh = this.get('isOpenShift') ? 1 : 0;
      return rhev + osp + cfme + osh;
    }),

    // steps
    stepNumberRhev: _ember['default'].computed('isRhev', function () {
      if (this.get('isRhev')) {
        return 2;
      }
    }),

    stepNumberOpenstack: _ember['default'].computed('stepNumberRhev', 'isOpenStack', function () {
      if (this.get('isOpenStack')) {
        if (this.get('stepNumberRhev')) {
          return this.get('stepNumberRhev') + 1;
        } else {
          return 2;
        }
      }
    }),

    stepNumberOpenShift: _ember['default'].computed('stepNumberOpenstack', 'isOpenShift', function () {
      if (this.get('isOpenShift')) {
        if (this.get('stepNumberOpenstack')) {
          return this.get('stepNumberOpenstack') + 1;
        } else if (this.get('stepNumberRhev')) {
          return this.get('stepNumberRhev') + 1;
        } else {
          return 2;
        }
      }
    }),

    stepNumberCloudForms: _ember['default'].computed('stepNumberOpenShift', 'isCloudForms', function () {
      if (this.get('isCloudForms')) {
        if (this.get('stepNumberOpenShift')) {
          return this.get('stepNumberOpenShift') + 1;
        } else if (this.get('stepNumberOpenstack')) {
          return this.get('stepNumberOpenstack') + 1;
        } else if (this.get('stepNumberRhev')) {
          return this.get('stepNumberRhev') + 1;
        } else {
          return 2;
        }
      }
    }),

    stepNumberSubscriptions: _ember['default'].computed('numberProducts', 'isSubscriptions', function () {
      if (this.get('isSubscriptions')) {
        return this.get('numberProducts') + 2;
      }
    }),

    // calculate temporary without isSubscriptions
    stepNumberReviewTemp: _ember['default'].computed('numberProducts', 'isSubscriptions', function () {
      if (this.get('isSubscriptions')) {
        return this.get('numberProducts') + 3;
      } else {
        return this.get('numberProducts') + 2;
      }
    }),

    stepNumberReview: _ember['default'].computed('stepNumberReviewTemp', 'isSubscriptions', function () {
      if (this.get('isSubscriptions')) {
        return this.get('stepNumberReviewTemp');
      } else {
        return this.get('stepNumberReviewTemp') - 1;
      }
    }),

    step2RouteName: _ember['default'].computed('isRhev', 'isOpenStack', function () {
      if (this.get('isRhev')) {
        return 'rhev';
      } else if (this.get('isOpenStack')) {
        return 'openstack';
      }
    }),

    step3RouteName: _ember['default'].computed('step2RouteName', 'isOpenStack', 'isOpenShift', 'isCloudForms', 'isSubscriptions', function () {
      if (this.get('step2RouteName') === 'rhev') {
        if (this.get('isOpenStack')) {
          return 'openstack';
        } else if (this.get('isOpenShift')) {
          return 'openshift';
        } else if (this.get('isCloudForms')) {
          return 'cloudforms';
        } else if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      } else if (this.get('step2RouteName') === 'openstack') {
        if (this.get('isOpenShift')) {
          return 'openshift';
        } else if (this.get('isCloudForms')) {
          return 'cloudforms';
        } else if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      }
    })

  });
});
define('fusor-ember-cli/mixins/deployment-new-controller-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    beforeModel: function beforeModel() {
      if (this.controllerFor('deployment-new').get('disableNextOnStart')) {
        return this.transitionTo('deployment-new.start');
      }
    }

  });
});
define('fusor-ember-cli/mixins/deployment-new-satellite-route-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    beforeModel: function beforeModel() {
      if (this.controllerFor('deployment-new').get('disableNextOnStart')) {
        return this.transitionTo('deployment-new.start');
      }
    }

  });
});
define('fusor-ember-cli/mixins/deployment-route-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    actions: {
      saveDeployment: function saveDeployment(routeNameForTransition) {
        var deployment = this.get('controller.model');
        var self = this;
        deployment.save().then(function (result) {
          if (routeNameForTransition) {
            if (routeNameForTransition === 'deployments') {
              return self.transitionTo('deployments');
            } else {
              return self.transitionTo(routeNameForTransition, result);
            }
          }
        }, function (error) {
          self.set('errorMsg', 'error saving organization' + error);
        });
      }
    }

  });
});
define('fusor-ember-cli/mixins/disable-tab-mixin', ['exports', 'ember', 'fusor-ember-cli/mixins/validates-deployment-name-mixin'], function (exports, _ember, _fusorEmberCliMixinsValidatesDeploymentNameMixin) {
  exports['default'] = _ember['default'].Mixin.create(_fusorEmberCliMixinsValidatesDeploymentNameMixin['default'], {

    deploymentController: _ember['default'].inject.controller('deployment'),
    applicationController: _ember['default'].inject.controller('application'),
    configureOrganizationController: _ember['default'].inject.controller('configure-organization'),
    configureEnvironmentController: _ember['default'].inject.controller('configure-environment'),

    hasName: _ember['default'].computed('model.name', function () {
      return this.get('model.name.length') > 0;
    }),
    hasNoName: _ember['default'].computed.not('hasName'),

    hasOrganization: _ember['default'].computed('model.organization.id', function () {
      return !!this.get('model.organization.id');
    }),
    hasNoOrganization: _ember['default'].computed.not('hasOrganization'),

    isValidDeploymentName: _ember['default'].computed('model.name', 'deploymentNameValidator', function () {
      return this.get('deploymentNameValidator').isValid(this.get('model.name'));
    }),

    // disable Next on Deployment Name if there is no deployment name
    disableNextOnDeploymentName: _ember['default'].computed.not('isValidDeploymentName'),

    // disable Next on Configure Organization if no organization is selected
    disableNextOnConfigureOrganization: _ember['default'].computed.not('isValidDeploymentName'),

    // disable Next on Lifecycle Environment if no lifecycle environment is selected
    // note: hasNoLifecycleEnvironment and hasNoLifecycleEnvironment is defined in /app/controllers/deployment.js
    //       and app/controllers/deployment-new.js rather than in this mixin
    disableNextOnLifecycleEnvironment: _ember['default'].computed.or('hasNoLifecycleEnvironment', 'disableAll', 'model.isSaving'),

    // Satellite Tabs Only
    disableTabDeploymentName: false, // always enable tab for entering deployment name
    disableTabConfigureOrganization: _ember['default'].computed.alias('disableNextOnDeploymentName'),
    disableTabLifecycleEnvironment: _ember['default'].computed.alias("disableNextOnConfigureOrganization"),
    disableTabAccessInsights: _ember['default'].computed.or("disableNextOnDeploymentName", 'hasNoOrganization', 'disableNextOnLifecycleEnvironment')

  });
});
define('fusor-ember-cli/mixins/discovered-host-route-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      if (this.modelFor('deployment').get('isNotStarted')) {
        controller.set('isLoadingHosts', true);
        this.store.findAll('discovered-host').then(function (results) {
          controller.set('allDiscoveredHosts', results.filterBy('is_discovered', true));
          controller.set('isLoadingHosts', false);
        });
      }
    },

    actions: {
      refreshDiscoveredHosts: function refreshDiscoveredHosts() {
        console.log('refresh allDiscoveredHosts');
        var controller = this.get('controller');
        controller.set('isLoadingHosts', true);
        this.store.findAll('discovered-host').then(function (results) {
          controller.set('allDiscoveredHosts', results.filterBy('is_discovered', true));
          controller.set('isLoadingHosts', false);
        });
      }
    }

  });
});
define('fusor-ember-cli/mixins/needs-deployment-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    deploymentController: _ember['default'].inject.controller('deployment'),
    applicationController: _ember['default'].inject.controller('application'),

    isStarted: _ember['default'].computed.alias("deploymentController.isStarted"),
    isNotStarted: _ember['default'].computed.alias("deploymentController.isNotStarted"),

    isNew: false,

    deploymentName: _ember['default'].computed.alias("deploymentController.model.name")
  });
});
define('fusor-ember-cli/mixins/needs-deployment-new-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    deploymentNewController: _ember['default'].inject.controller('deployment-new'),
    applicationController: _ember['default'].inject.controller('application'),

    isStarted: _ember['default'].computed.alias("deploymentNewController.isStarted"),
    isNotStarted: _ember['default'].computed.alias("deploymentNewController.isNotStarted"),

    isNew: true,

    deploymentName: _ember['default'].computed.alias("deploymentNewController.model.name")

  });
});
define("fusor-ember-cli/mixins/openshift-mixin", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Mixin.create({

        openshiftInstallLoc: _ember["default"].computed.alias("model.openshift_install_loc"),
        cfmeInstallLoc: _ember["default"].computed.alias("model.cfme_install_loc"),
        isRhev: _ember["default"].computed.alias("model.deploy_rhev"),
        isOpenStack: _ember["default"].computed.alias("model.deploy_openstack"),
        isCloudForms: _ember["default"].computed.alias("model.deploy_cfme"),

        numNodes: _ember["default"].computed.alias("model.numNodes"),
        numMasterNodes: _ember["default"].computed.alias("model.openshift_number_master_nodes"),
        numWorkerNodes: _ember["default"].computed.alias("model.openshift_number_worker_nodes"),

        storageSize: _ember["default"].computed.alias("model.openshift_storage_size"),

        masterVcpu: _ember["default"].computed.alias("model.openshift_master_vcpu"),
        nodeVcpu: _ember["default"].computed.alias("model.openshift_node_vcpu"),
        cfmeVcpu: _ember["default"].computed.alias("model.cloudforms_vcpu"),

        masterRam: _ember["default"].computed.alias("model.openshift_master_ram"),
        nodeRam: _ember["default"].computed.alias("model.openshift_node_ram"),
        cfmeRam: _ember["default"].computed.alias("model.cloudforms_ram"),

        masterDisk: _ember["default"].computed.alias("model.openshift_master_disk"),
        nodeDisk: _ember["default"].computed.alias("model.openshift_node_disk"),
        cfmeDisk: _ember["default"].computed.alias("model.cfmeDisk"),

        ignoreCfme: _ember["default"].computed("isCloudForms", "isRhev", "isOpenStack", "openshiftInstallLoc", "cfmeInstallLoc", function () {
            // ignore if CFME is not selected OR if both RHEV and OSP are selected
            // but locations of CFME and OSE are different
            return !this.get('isCloudForms') || this.get('isRhev') && this.get('isOpenStack') && (this.get('openshiftInstallLoc') === 'RHEV' && this.get('cfmeInstallLoc') === 'OpenStack' || this.get('openshiftInstallLoc') === 'OpenStack' && this.get('cfmeInstallLoc') === 'RHEV');
        }),
        substractCfme: _ember["default"].computed.not('ignoreCfme'),

        diskAvailableMinusCfme: _ember["default"].computed("model.openshift_available_disk", "cfmeDisk", function () {
            return this.get("model.openshift_available_disk") - this.get("cfmeDisk");
        }),

        diskAvailable: _ember["default"].computed("model.openshift_available_disk", "ignoreCfme", "diskAvailableMinusCfme", function () {
            if (this.get('ignoreCfme')) {
                return this.get('model.openshift_available_disk');
            } else {
                return this.get('diskAvailableMinusCfme');
            }
        }),

        ramAvailableMinusCfme: _ember["default"].computed("model.openshift_available_ram", "model.cloudforms_ram", function () {
            return this.get("model.openshift_available_ram") - this.get("model.cloudforms_ram");
        }),

        ramAvailable: _ember["default"].computed("model.openshift_available_ram", "ignoreCfme", "ramAvailableMinusCfme", function () {
            if (this.get('ignoreCfme')) {
                return this.get('model.openshift_available_ram');
            } else {
                return this.get('ramAvailableMinusCfme');
            }
        }),

        vcpuAvailableMinusCfme: _ember["default"].computed("model.openshift_available_vcpu", "model.cloudforms_vcpu", function () {
            return this.get("model.openshift_available_vcpu") - this.get("model.cloudforms_vcpu");
        }),

        vcpuAvailable: _ember["default"].computed("model.openshift_available_vcpu", "ignoreCfme", "vcpuAvailableMinusCfme", function () {
            if (this.get('ignoreCfme')) {
                return this.get('model.openshift_available_vcpu');
            } else {
                return this.get('vcpuAvailableMinusCfme');
            }
        }),

        vcpuNeeded: _ember["default"].computed('numMasterNodes', 'numWorkerNodes', 'masterVcpu', 'nodeVcpu', function () {
            if (this.get('numMasterNodes') > 0 && this.get('masterVcpu') > 0 && this.get('numWorkerNodes') >= 0 && this.get('nodeVcpu') > 0) {
                return this.get('numMasterNodes') * this.get('masterVcpu') + this.get('numWorkerNodes') * this.get('nodeVcpu');
            } else {
                return 0;
            }
        }),

        ramNeeded: _ember["default"].computed('numMasterNodes', 'numWorkerNodes', 'masterRam', 'nodeRam', function () {
            if (this.get('numMasterNodes') > 0 && this.get('masterRam') > 0 && this.get('numWorkerNodes') >= 0 && this.get('nodeRam') > 0) {
                return this.get('numMasterNodes') * this.get('masterRam') + this.get('numWorkerNodes') * this.get('nodeRam');
            } else {
                return 0;
            }
        }),

        diskNeeded: _ember["default"].computed('numMasterNodes', 'numWorkerNodes', 'masterDisk', 'nodeDisk', 'storageSize', function () {
            if (this.get('numMasterNodes') > 0 && this.get('masterDisk') > 0 && this.get('numWorkerNodes') >= 0 && this.get('nodeDisk') > 0 && this.get('storageSize') > 0) {
                return this.get('numMasterNodes') * this.get('masterDisk') + this.get('numWorkerNodes') * this.get('nodeDisk') + this.get('numWorkerNodes') * this.get('storageSize');
            } else {
                return 0;
            }
        }),

        vcpu1Needed: _ember["default"].computed('masterVcpu', function () {
            return parseInt(this.get('masterVcpu'));
        }),
        vcpu2Needed: _ember["default"].computed('vcpu1Needed', 'nodeVcpu', function () {
            return this.get('vcpu1Needed') + parseInt(this.get('nodeVcpu'));
        }),
        vcpu3Needed: _ember["default"].computed('vcpu2Needed', 'nodeVcpu', function () {
            return this.get('vcpu2Needed') + parseInt(this.get('nodeVcpu'));
        }),
        vcpu4Needed: _ember["default"].computed('vcpu3Needed', 'nodeVcpu', function () {
            return this.get('vcpu3Needed') + parseInt(this.get('nodeVcpu'));
        }),
        vcpu5Needed: _ember["default"].computed('vcpu4Needed', 'nodeVcpu', function () {
            return this.get('vcpu4Needed') + parseInt(this.get('nodeVcpu'));
        }),

        ram1Needed: _ember["default"].computed('masterRam', function () {
            return parseInt(this.get('masterRam'));
        }),
        ram2Needed: _ember["default"].computed('ram1Needed', 'nodeRam', function () {
            return this.get('ram1Needed') + parseInt(this.get('nodeRam'));
        }),
        ram3Needed: _ember["default"].computed('ram2Needed', 'nodeRam', function () {
            return this.get('ram2Needed') + parseInt(this.get('nodeRam'));
        }),
        ram4Needed: _ember["default"].computed('ram3Needed', 'nodeRam', function () {
            return this.get('ram3Needed') + parseInt(this.get('nodeRam'));
        }),
        ram5Needed: _ember["default"].computed('ram4Needed', 'nodeRam', function () {
            return this.get('ram4Needed') + parseInt(this.get('nodeRam'));
        }),

        disk1Needed: _ember["default"].computed('masterDisk', function () {
            return parseInt(this.get('masterDisk'));
        }),
        disk2Needed: _ember["default"].computed('disk1Needed', 'nodeDisk', function () {
            return this.get('disk1Needed') + parseInt(this.get('nodeDisk'));
        }),
        disk3Needed: _ember["default"].computed('disk2Needed', 'nodeDisk', function () {
            return this.get('disk2Needed') + parseInt(this.get('nodeDisk'));
        }),
        disk4Needed: _ember["default"].computed('disk3Needed', 'nodeDisk', function () {
            return this.get('disk3Needed') + parseInt(this.get('nodeDisk'));
        }),
        disk5Needed: _ember["default"].computed('disk4Needed', 'nodeDisk', function () {
            return this.get('disk4Needed') + parseInt(this.get('nodeDisk'));
        }),

        isVcpu1OverCapacity: _ember["default"].computed('vcpu1Needed', 'vcpuAvailable', function () {
            return this.get('vcpu1Needed') > this.get('vcpuAvailable');
        }),
        isVcpu2OverCapacity: _ember["default"].computed('vcpu2Needed', 'vcpuAvailable', function () {
            return this.get('vcpu2Needed') > this.get('vcpuAvailable');
        }),
        isVcpu3OverCapacity: _ember["default"].computed('vcpu3Needed', 'vcpuAvailable', function () {
            return this.get('vcpu3Needed') > this.get('vcpuAvailable');
        }),
        isVcpu4OverCapacity: _ember["default"].computed('vcpu4Needed', 'vcpuAvailable', function () {
            return this.get('vcpu4Needed') > this.get('vcpuAvailable');
        }),
        isVcpu5OverCapacity: _ember["default"].computed('vcpu5Needed', 'vcpuAvailable', function () {
            return this.get('vcpu5Needed') > this.get('vcpuAvailable');
        }),

        isRam1OverCapacity: _ember["default"].computed('ram1Needed', 'ramAvailable', function () {
            return this.get('ram1Needed') > this.get('ramAvailable');
        }),
        isRam2OverCapacity: _ember["default"].computed('ram2Needed', 'ramAvailable', function () {
            return this.get('ram2Needed') > this.get('ramAvailable');
        }),
        isRam3OverCapacity: _ember["default"].computed('ram3Needed', 'ramAvailable', function () {
            return this.get('ram3Needed') > this.get('ramAvailable');
        }),
        isRam4OverCapacity: _ember["default"].computed('ram4Needed', 'ramAvailable', function () {
            return this.get('ram4Needed') > this.get('ramAvailable');
        }),
        isRam5OverCapacity: _ember["default"].computed('ram5Needed', 'ramAvailable', function () {
            return this.get('ram5Needed') > this.get('ramAvailable');
        }),

        isDisk1OverCapacity: _ember["default"].computed('disk1Needed', 'diskAvailable', function () {
            return this.get('disk1Needed') > this.get('diskAvailable');
        }),
        isDisk2OverCapacity: _ember["default"].computed('disk2Needed', 'diskAvailable', function () {
            return this.get('disk2Needed') > this.get('diskAvailable');
        }),
        isDisk3OverCapacity: _ember["default"].computed('disk3Needed', 'diskAvailable', function () {
            return this.get('disk3Needed') > this.get('diskAvailable');
        }),
        isDisk4OverCapacity: _ember["default"].computed('disk4Needed', 'diskAvailable', function () {
            return this.get('disk4Needed') > this.get('diskAvailable');
        }),
        isDisk5OverCapacity: _ember["default"].computed('disk5Needed', 'diskAvailable', function () {
            return this.get('disk5Needed') > this.get('diskAvailable');
        }),

        isOver1Capacity: _ember["default"].computed('isVcpu1OverCapacity', 'isRam1OverCapacity', 'isDisk1OverCapacity', function () {
            return this.get('isVcpu1OverCapacity') || this.get('isRam1OverCapacity') || this.get('isDisk1OverCapacity');
        }),
        isOver2Capacity: _ember["default"].computed('isVcpu2OverCapacity', 'isRam2OverCapacity', 'isDisk2OverCapacity', function () {
            return this.get('isVcpu2OverCapacity') || this.get('isRam2OverCapacity') || this.get('isDisk2OverCapacity');
        }),
        isOver3Capacity: _ember["default"].computed('isVcpu3OverCapacity', 'isRam3OverCapacity', 'isDisk3OverCapacity', function () {
            return this.get('isVcpu3OverCapacity') || this.get('isRam3OverCapacity') || this.get('isDisk3OverCapacity');
        }),
        isOver4Capacity: _ember["default"].computed('isVcpu4OverCapacity', 'isRam4OverCapacity', 'isDisk4OverCapacity', function () {
            return this.get('isVcpu4OverCapacity') || this.get('isRam4OverCapacity') || this.get('isDisk4OverCapacity');
        }),
        isOver5Capacity: _ember["default"].computed('isVcpu5OverCapacity', 'isRam5OverCapacity', 'isDisk5OverCapacity', function () {
            return this.get('isVcpu5OverCapacity') || this.get('isRam5OverCapacity') || this.get('isDisk5OverCapacity');
        })

    });
});
define('fusor-ember-cli/mixins/progress-bar-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    intervalPolling: _ember['default'].computed(function () {
      return 5000; // Time between refreshing (in ms)
    }).readOnly(),

    scheduleNextRefresh: function scheduleNextRefresh(f) {
      return _ember['default'].run.later(this, function () {
        f.apply(this);
        this.set('timer', this.scheduleNextRefresh(f));
      }, this.get('intervalPolling'));
    },

    // executes `refreshModelOnRoute` for every intervalPolling.
    startPolling: function startPolling() {
      this.set('timer', this.scheduleNextRefresh(this.get('refreshModelOnRoute'))); //and then repeats
    },

    stopPolling: function stopPolling() {
      _ember['default'].run.cancel(this.get('timer'));
    },

    refreshModelOnRoute: function refreshModelOnRoute() {
      return this.send('refreshModelOnOverviewRoute');
    }

  });
});
define('fusor-ember-cli/mixins/start-controller-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    isUpstream: false,

    // declared in controllers, and not in mixin
    // isRhev
    // isOpenStack
    // isCloudForms

    // route of Next button. It will be overwrriten by active hook in routes/start.js and routes/deployment-new/start.js
    satelliteTabRouteName: null,

    // disable Next button if none selected
    disableNextOnStart: _ember['default'].computed('isRhev', 'isOpenStack', 'isCloudForms', 'isOpenShift', function () {
      return !(this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms') || this.get('isOpenShift'));
    }),

    // names
    nameRHCI: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "Fusor";
      } else {
        return "QCI";
      }
    }),

    nameRedHat: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "";
      } else {
        return "Red Hat";
      }
    }),

    nameSatellite: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "Foreman";
      } else {
        return "Satellite";
      }
    }),

    nameRhev: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "oVirt";
      } else {
        return "RHEV";
      }
    }),

    nameOpenStack: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "RDO";
      } else {
        return "RHOSP";
      }
    }),

    nameCloudForms: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "CloudForms";
      }
    }),

    nameOpenShift: "OpenShift",

    // TODO DRY names mixins
    fullnameRhev: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "oVirt Project";
      } else {
        return "Red Hat Enterprise Virtualization";
      }
    }),

    fullnameOpenStack: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "RDO Project";
      } else {
        return "Red Hat OpenStack Platform";
      }
    }),

    fullnameCloudForms: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "Red Hat CloudForms";
      }
    }),

    fullnameOpenShift: "OpenShift Enterprise by Red Hat"

  });
});
define('fusor-ember-cli/mixins/tr-engine-hypervisor-mixin', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Mixin.create({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    bgColor: _ember['default'].computed('isChecked', function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }),

    cssHostHostId: _ember['default'].computed('host.id', function () {
      return 'host_' + this.get('host.id');
    }),

    cssIdHostId: _ember['default'].computed('host.id', function () {
      return 'id_' + this.get('host.id');
    }),

    selectedIds: _ember['default'].computed('model.[]', function () {
      if (this.get('model')) {
        return this.get('model').getEach("id");
      }
    }),

    isInvalidHostname: _ember['default'].computed('host.name', function () {
      // HOST_REGEXP taken from Foreman code HOST_REGEXP in file /lib/net/validations.rb
      // But replaced /A with ^ and /z with $
      var hostnameRegex = new RegExp(/^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$/);
      var invalidHostname = _ember['default'].isEmpty(this.get('host.name').match(hostnameRegex));

      this.sendAction('setIfHostnameInvalid', invalidHostname, this.get('host.id'));

      return invalidHostname;
    }),
    isValidHostname: _ember['default'].computed.not('isInvalidHostname'),

    actions: {
      saveHostname: function saveHostname() {
        var host = this.get('host');
        var self = this;
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        if (this.get('isValidHostname')) {
          (0, _icAjax['default'])({
            url: '/api/v21/discovered_hosts/' + host.get('id') + '/rename',
            type: "PUT",
            data: JSON.stringify({ 'discovered_host': { 'name': host.get('name') } }),
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token,
              "Authorization": "Basic " + self.get('session.basicAuthToken')
            }
          }).then(function (response) {
            self.sendAction('setIfHostnameInvalid', false, host.get('id'));
          }, function (error) {
            console.log(error);
          });
        } else {
          this.sendAction('setIfHostnameInvalid', true, host.get('id'));
        }
      }
    }

  });
});
define('fusor-ember-cli/mixins/validates-deployment-name-mixin', ['exports', 'ember', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Mixin.create({
    applicationController: _ember['default'].inject.controller('application'),
    deployments: _ember['default'].computed.alias('applicationController.model'),

    deploymentNameValidator: _ember['default'].computed('deployments', 'model.id', function () {
      var otherNames = [],
          otherLabels = [],
          deploymentId = this.get('model.id');

      this.get('deployments').forEach(function (otherDeployment) {
        var otherDeploymentId = otherDeployment.get('id');

        if (otherDeploymentId && deploymentId !== otherDeploymentId) {
          otherNames.pushObject(otherDeployment.get('name'));
          otherLabels.pushObject(otherDeployment.get('label'));
        }
      });

      var LabelValidator = _fusorEmberCliUtilsValidators.UniquenessValidator.extend({
        isValid: function isValid(value) {
          return this._super(this.labelize(value));
        },

        labelize: function labelize(value) {
          return _ember['default'].isPresent(value) ? value.trim().replace(/([^a-z0-9_])/gi, '_') : '';
        },

        getMessages: function getMessages(value) {
          if (this.isValid(value)) {
            return [];
          }
          return ['generated label "' + this.labelize(value) + '" is not unique'];
        }
      });

      return _fusorEmberCliUtilsValidators.AllValidator.create({
        validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.UniquenessValidator.create({ existingValues: otherNames }), LabelValidator.create({ existingValues: otherLabels })]
      });
    })
  });
});
define('fusor-ember-cli/models/base/base-discovered-host', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    ip: _emberData['default'].attr('string'),
    mac: _emberData['default'].attr('string'),
    memory: _emberData['default'].attr('number'),
    disk_count: _emberData['default'].attr('number'),
    disks_size: _emberData['default'].attr('number'),
    cpus: _emberData['default'].attr('number'),
    memory_human_size: _emberData['default'].attr('string'),
    disks_human_size: _emberData['default'].attr('string'),
    subnet_to_s: _emberData['default'].attr('string'),
    is_virtual: _emberData['default'].attr('boolean'),

    type: _emberData['default'].attr('string'),
    is_managed: _emberData['default'].attr('boolean'),
    is_discovered: _emberData['default'].attr('boolean'),

    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),

    environment_name: _emberData['default'].attr('string'),
    hostgroup_name: _emberData['default'].attr('string'),
    compute_resource_name: _emberData['default'].attr('string'),
    domain_name: _emberData['default'].attr('string')
  });
});
define('fusor-ember-cli/models/consumer', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    type: _emberData['default'].attr('string'),
    entitlementCount: _emberData['default'].attr('number'),
    uuid: _emberData['default'].attr('string')
  });
});
define('fusor-ember-cli/models/coordinator', ['exports', 'ember', 'fusor-ember-cli/models/obj-hash'], function (exports, _ember, _fusorEmberCliModelsObjHash) {
  exports['default'] = _ember['default'].Object.extend(_ember['default'].Evented, {
    objectMap: _ember['default'].computed(function () {
      return _fusorEmberCliModelsObjHash['default'].create();
    }),

    getObject: function getObject(id, ops) {
      ops = ops || {};
      var payload = this.get('objectMap').getObj(id);

      if (payload.ops.source) {
        payload.ops.source.sendAction('action', payload.obj);
      }

      if (payload.ops.target) {
        payload.ops.target.sendAction('action', payload.obj);
      }

      this.trigger("objectMoved", { obj: payload.obj, source: payload.ops.source, target: ops.target });

      return payload.obj;
    },

    setObject: function setObject(obj, ops) {
      ops = ops || {};
      return this.get('objectMap').add({ obj: obj, ops: ops });
    }
  });
});
define('fusor-ember-cli/models/deployment-plan-parameter', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        description: _emberData['default'].attr('string'),
        value: _emberData['default'].attr('string'),
        hidden: _emberData['default'].attr('boolean'),
        parameter_type: _emberData['default'].attr('string')
    });
});
define('fusor-ember-cli/models/deployment-plan', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    uuid: _emberData['default'].attr('string'),
    roles: _emberData['default'].hasMany('deployment-role', { inverse: null, async: false }),
    parameters: _emberData['default'].hasMany('deployment-plan-parameter', { inverse: null, async: false }),

    externalNetworkInterface: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Controller-1::NeutronPublicInterface');
      },
      set: function set(key, value) {
        this.updateParam('Controller-1::NeutronPublicInterface', value);
      }
    }),

    overcloudPassword: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Controller-1::AdminPassword');
      },
      set: function set(key, value) {
        this.updateParam('Controller-1::AdminPassword', value);
      }
    }),

    computeRoleFlavor: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Compute-1::Flavor');
      },
      set: function set(key, value) {
        this.updateParam('Compute-1::Flavor', value);
      }
    }),

    computeRoleCount: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Compute-1::count');
      },
      set: function set(key, value) {
        this.updateParam('Compute-1::count', value);
      }
    }),

    controllerRoleFlavor: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Controller-1::Flavor');
      },
      set: function set(key, value) {
        this.updateParam('Controller-1::Flavor', value);
      }
    }),

    controllerRoleCount: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Controller-1::count');
      },
      set: function set(key, value) {
        this.updateParam('Controller-1::count', value);
      }
    }),

    cephStorageRoleFlavor: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Ceph-Storage-1::Flavor');
      },
      set: function set(key, value) {
        this.updateParam('Ceph-Storage-1::Flavor', value);
      }
    }),

    cephStorageRoleCount: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Ceph-Storage-1::count');
      },
      set: function set(key, value) {
        this.updateParam('Ceph-Storage-1::count', value);
      }
    }),

    cinderStorageRoleFlavor: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Cinder-Storage-1::Flavor');
      },
      set: function set(key, value) {
        this.updateParam('Cinder-Storage-1::Flavor', value);
      }
    }),

    cinderStorageRoleCount: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Cinder-Storage-1::count');
      },
      set: function set(key, value) {
        this.updateParam('Cinder-Storage-1::count', value);
      }
    }),

    swiftStorageRoleFlavor: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Swift-Storage-1::Flavor');
      },
      set: function set(key, value) {
        this.updateParam('Swift-Storage-1::Flavor', value);
      }
    }),

    swiftStorageRoleCount: _ember['default'].computed('parameters.@each.value', {
      get: function get(key) {
        return this.getParamValue('Swift-Storage-1::count');
      },
      set: function set(key, value) {
        this.updateParam('Swift-Storage-1::count', value);
      }
    }),

    getParam: function getParam(paramName, paramsOverride) {
      var params = paramsOverride || this.get('parameters');
      return params ? params.findBy('id', paramName) : null;
    },

    getParamValue: function getParamValue(paramName, paramsOverride) {
      var param = this.getParam(paramName, paramsOverride);
      return param ? param.get('value') : null;
    },

    updateParam: function updateParam(name, value) {
      var param = this.getParam(name);

      if (param) {
        param.set('value', value);
      }
    }
  });
});
define('fusor-ember-cli/models/deployment-role', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    version: _emberData['default'].attr('number'),

    parameterPrefix: _ember['default'].computed('name', 'version', function () {
      return this.get('name') + '-' + this.get('version') + '::';
    }),

    countParameterName: _ember['default'].computed('name', 'version', function () {
      return this.get('parameterPrefix') + 'count';
    }),

    flavorParameterName: _ember['default'].computed('name', 'version', function () {
      return this.get('parameterPrefix') + 'Flavor';
    }),

    imageParameterName: _ember['default'].computed('name', 'version', function () {
      return this.get('parameterPrefix') + 'Image';
    }),

    snakeCaseName: _ember['default'].computed('name', function () {
      return this.get('name').toLowerCase().replace('-', '_');
    }),

    flavorDeploymentAttributeName: _ember['default'].computed('snakeCaseName', function () {
      return 'openstack_overcloud_' + this.get('snakeCaseName') + '_flavor';
    }),

    countDeploymentAttributeName: _ember['default'].computed('snakeCaseName', function () {
      return 'openstack_overcloud_' + this.get('snakeCaseName') + '_count';
    }),

    roleType: _ember['default'].computed('name', function () {
      var name = this.get('name').toLowerCase();
      if (name.indexOf('controller') >= 0) {
        return 'controller';
      } else if (name.indexOf('compute') >= 0) {
        return 'compute';
      } else if (name.indexOf('cinder') >= 0) {
        return 'cinder';
      } else if (name.indexOf('swift') >= 0) {
        return 'swift';
      } else if (name.indexOf('ceph') >= 0) {
        return 'ceph';
      }

      return name;
    })
  });
});
define('fusor-ember-cli/models/deployment', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    label: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    organization: _emberData['default'].belongsTo('organization', { async: true }),
    lifecycle_environment: _emberData['default'].belongsTo('lifecycle-environment', { async: true }),

    deploy_rhev: _emberData['default'].attr('boolean'),
    deploy_cfme: _emberData['default'].attr('boolean'),
    deploy_openstack: _emberData['default'].attr('boolean'),
    deploy_openshift: _emberData['default'].attr('boolean'),

    is_disconnected: _emberData['default'].attr('boolean'),
    has_content_error: _emberData['default'].attr('boolean'),
    rhev_is_self_hosted: _emberData['default'].attr('boolean'),

    rhev_engine_admin_password: _emberData['default'].attr('string'),
    rhev_data_center_name: _emberData['default'].attr('string'),
    rhev_cluster_name: _emberData['default'].attr('string'),
    rhev_storage_name: _emberData['default'].attr('string'),
    rhev_storage_type: _emberData['default'].attr('string'),
    rhev_storage_address: _emberData['default'].attr('string'),
    rhev_cpu_type: _emberData['default'].attr('string'),
    rhev_share_path: _emberData['default'].attr('string'),

    cfme_install_loc: _emberData['default'].attr('string'),

    rhev_root_password: _emberData['default'].attr('string'),
    cfme_root_password: _emberData['default'].attr('string'),
    cfme_admin_password: _emberData['default'].attr('string'),

    foreman_task_uuid: _emberData['default'].attr('string'),
    upstream_consumer_uuid: _emberData['default'].attr('string'),
    upstream_consumer_name: _emberData['default'].attr('string'),

    rhev_export_domain_name: _emberData['default'].attr('string'),
    rhev_export_domain_address: _emberData['default'].attr('string'),
    rhev_export_domain_path: _emberData['default'].attr('string'),

    rhev_local_storage_path: _emberData['default'].attr('string'),

    host_naming_scheme: _emberData['default'].attr('string'),
    custom_preprend_name: _emberData['default'].attr('string'),
    enable_access_insights: _emberData['default'].attr('boolean'),
    cfme_address: _emberData['default'].attr('string'),
    cfme_hostname: _emberData['default'].attr('string'),

    openstack_undercloud_password: _emberData['default'].attr('string'),
    openstack_undercloud_ip_addr: _emberData['default'].attr('string'),
    openstack_undercloud_user: _emberData['default'].attr('string'),
    openstack_undercloud_user_password: _emberData['default'].attr('string'),
    openstack_undercloud_hostname: _emberData['default'].attr('string'),

    openstack_overcloud_hostname: _emberData['default'].attr('string'),
    openstack_overcloud_address: _emberData['default'].attr('string'),
    openstack_overcloud_password: _emberData['default'].attr('string'),
    openstack_overcloud_ext_net_interface: _emberData['default'].attr('string'),
    openstack_overcloud_private_net: _emberData['default'].attr('string'),
    openstack_overcloud_float_net: _emberData['default'].attr('string'),
    openstack_overcloud_float_gateway: _emberData['default'].attr('string'),
    openstack_overcloud_libvirt_type: _emberData['default'].attr('string'),

    openstack_overcloud_node_count: _emberData['default'].attr('number'),
    openstack_overcloud_compute_flavor: _emberData['default'].attr('string'),
    openstack_overcloud_compute_count: _emberData['default'].attr('number'),
    openstack_overcloud_controller_flavor: _emberData['default'].attr('string'),
    openstack_overcloud_controller_count: _emberData['default'].attr('number'),
    openstack_overcloud_ceph_storage_flavor: _emberData['default'].attr('string'),
    openstack_overcloud_ceph_storage_count: _emberData['default'].attr('number'),
    openstack_overcloud_cinder_storage_flavor: _emberData['default'].attr('string'),
    openstack_overcloud_cinder_storage_count: _emberData['default'].attr('number'),
    openstack_overcloud_swift_storage_flavor: _emberData['default'].attr('string'),
    openstack_overcloud_swift_storage_count: _emberData['default'].attr('number'),

    cdn_url: _emberData['default'].attr('string'),
    manifest_file: _emberData['default'].attr('string'),

    openshift_install_loc: _emberData['default'].attr('string'),

    openshift_number_master_nodes: _emberData['default'].attr('number'),
    openshift_number_worker_nodes: _emberData['default'].attr('number'),

    numNodes: _ember['default'].computed('openshift_number_master_nodes', 'openshift_number_worker_nodes', function () {
      return this.get('openshift_number_master_nodes') + this.get('openshift_number_worker_nodes');
    }),

    openshift_storage_size: _emberData['default'].attr('number'),
    openshift_username: _emberData['default'].attr('string'),
    openshift_user_password: _emberData['default'].attr('string'),
    openshift_root_password: _emberData['default'].attr('string'),
    openshift_master_vcpu: _emberData['default'].attr('number'),
    openshift_master_ram: _emberData['default'].attr('number'),
    openshift_master_disk: _emberData['default'].attr('number'),
    openshift_node_vcpu: _emberData['default'].attr('number'),
    openshift_node_ram: _emberData['default'].attr('number'),
    openshift_node_disk: _emberData['default'].attr('number'),
    openshift_available_vcpu: _emberData['default'].attr('number'),
    openshift_available_ram: _emberData['default'].attr('number'),
    openshift_available_disk: _emberData['default'].attr('number'),
    openshift_storage_type: _emberData['default'].attr('string'),
    openshift_storage_name: _emberData['default'].attr('string'),
    openshift_storage_host: _emberData['default'].attr('string'),
    openshift_export_path: _emberData['default'].attr('string'),
    openshift_subdomain_name: _emberData['default'].attr('string'),

    openshift_hosts: _emberData['default'].hasMany('openshift-host', { async: true }),
    openshift_master_hosts: _ember['default'].computed('openshift_hosts', function () {
      var regexFilter = /ose-master\d+\./;
      return this.get('openshift_hosts').filter(function (host) {
        return regexFilter.test(host.get('name'));
      });
    }),

    openshift_worker_hosts: _ember['default'].computed('openshift_hosts', function () {
      var regexFilter = /ose-node\d+\./;
      return this.get('openshift_hosts').filter(function (host) {
        return regexFilter.test(host.get('name'));
      });
    }),

    cloudforms_vcpu: _emberData['default'].attr('number'),
    cloudforms_ram: _emberData['default'].attr('number'),
    cloudforms_vm_disk_size: _emberData['default'].attr('number'),
    cloudforms_db_disk_size: _emberData['default'].attr('number'),

    cfmeDisk: _ember['default'].computed('cloudforms_vm_disk_size', 'cloudforms_db_disk_size', function () {
      return this.get('cloudforms_vm_disk_size') + this.get('cloudforms_db_disk_size');
    }),

    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),

    // has one Engine - discovered_host is an alias for rhev_engine_host_id
    discovered_host: _emberData['default'].belongsTo('discovered-host', { async: true }),
    rhev_engine_host_id: _emberData['default'].attr('number'),

    // has many Hypervisors
    discovered_hosts: _emberData['default'].hasMany('discovered-host', { async: true }),

    // has many Subscriptions
    subscriptions: _emberData['default'].hasMany('subscription', { inverse: 'deployment', async: true }),
    introspection_tasks: _emberData['default'].hasMany('introspection-task', { async: true }),

    // has one foreman_task
    foreman_task: _emberData['default'].belongsTo('foreman-task', { async: true }),

    // Ember Data doesn't have DS.attr('array') so I did this
    rhev_hypervisor_host_ids: _ember['default'].computed('discovered_hosts', function () {
      var discovered_hosts = this.get('discovered_hosts');
      if (_ember['default'].isPresent(discovered_hosts)) {
        return discovered_hosts.getEach('id');
      } else {
        return [];
      }
    }),

    // controller.deployment.isStarted returns false if refreshing child route,
    // so best to have it on model as well
    isStarted: _ember['default'].computed('foreman_task_uuid', function () {
      return _ember['default'].isPresent(this.get('foreman_task_uuid'));
    }),
    isNotStarted: _ember['default'].computed.not('isStarted'),

    // also put these in model rather than controller so it is accessible
    progress: null,
    state: null,

    isComplete: _ember['default'].computed('progress', function () {
      return this.get('progress') === '1';
    }),

    isInProgress: _ember['default'].computed('isStarted', 'isComplete', function () {
      return this.get('isStarted') && !this.get('isComplete');
    }),

    setProgress: _ember['default'].observer('foreman_task', 'foreman_task_uuid', function () {
      var self = this;
      if (this.get('foreman_task')) {
        this.get('foreman_task').then((function (result) {
          if (result) {
            self.set('progress', result.get('progress'));
            self.set('state', result.get('state'));
          }
        }).bind(this));
      }
    }),

    progressPercent: _ember['default'].computed('progress', function () {
      if (this.get('progress')) {
        return (this.get('progress') * 100).toFixed(1) + '%';
      }
    })

  });
});
define('fusor-ember-cli/models/discovered-host', ['exports', 'fusor-ember-cli/models/base/base-discovered-host'], function (exports, _fusorEmberCliModelsBaseBaseDiscoveredHost) {
  exports['default'] = _fusorEmberCliModelsBaseBaseDiscoveredHost['default'].extend({});
});
define('fusor-ember-cli/models/domain', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        name: _emberData['default'].attr('string'),
        fullname: _emberData['default'].attr('string'),
        dns_id: _emberData['default'].attr('number'),
        hosts_count: _emberData['default'].attr('number'),
        hostgroups_count: _emberData['default'].attr('number'),
        created_at: _emberData['default'].attr('date'),
        updated_at: _emberData['default'].attr('date'),
        hostgroups: _emberData['default'].hasMany('hostgroup', { async: true })

    });
});
define('fusor-ember-cli/models/entitlement', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({

    //pool node attributes
    poolId: _emberData['default'].attr('string'),
    poolType: _emberData['default'].attr('string'),
    poolQuantity: _emberData['default'].attr('number'),
    subscriptionId: _emberData['default'].attr('string'),
    activeSubscription: _emberData['default'].attr('boolean'),
    contractNumber: _emberData['default'].attr('string'),
    accountNumber: _emberData['default'].attr('string'),
    consumed: _emberData['default'].attr('number'),
    exported: _emberData['default'].attr('number'),
    productName: _emberData['default'].attr('string'),

    //attributes not returned in 'pool' node
    quantity: _emberData['default'].attr('number'),
    startDate: _emberData['default'].attr('date'),
    endDate: _emberData['default'].attr('date'),
    href: _emberData['default'].attr('string'),
    created: _emberData['default'].attr('date'),
    updated: _emberData['default'].attr('date')

  });
});
define('fusor-ember-cli/models/environment', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string')
    //  organization: DS.belongsTo('organization')
  });
});
define('fusor-ember-cli/models/flavor', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    ram: _emberData['default'].attr('number'),
    vcpus: _emberData['default'].attr('number'),
    disk: _emberData['default'].attr('number'),
    extra_specs: _emberData['default'].attr()
  });
});
define('fusor-ember-cli/models/foreman-task', ['exports', 'ember', 'ember-data', 'fusor-ember-cli/utils/foreman-task-util'], function (exports, _ember, _emberData, _fusorEmberCliUtilsForemanTaskUtil) {
  exports['default'] = _emberData['default'].Model.extend({
    label: _emberData['default'].attr('string'),
    pending: _emberData['default'].attr('boolean'),
    humanized_name: _emberData['default'].attr('string'),
    username: _emberData['default'].attr('string'),
    started_at: _emberData['default'].attr('string'),
    ended_at: _emberData['default'].attr('string'),
    state: _emberData['default'].attr('string'),
    result: _emberData['default'].attr('string'),
    external_id: _emberData['default'].attr('string'),
    progress: _emberData['default'].attr('string'),
    humanized_errors: _emberData['default'].attr('string'),
    humanized_output: _emberData['default'].attr('string'),
    humanized_input: _emberData['default'].attr('string'),
    repository: _emberData['default'].attr('string'),
    taskUrl: _ember['default'].computed('id', function () {
      return '/foreman_tasks/tasks/' + this.get('id');
    }),
    resume: function resume() {
      var csrfToken = _ember['default'].$('meta[name="csrf-token"]').attr('content');
      var taskUtil = new _fusorEmberCliUtilsForemanTaskUtil['default'](csrfToken);
      return taskUtil.resume(this.get('id'));
    }
  });
});
define('fusor-ember-cli/models/host', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    hostgroup: _emberData['default'].attr('string'),
    mac: _emberData['default'].attr('string'),
    domain: _emberData['default'].attr('string'),
    subnet: _emberData['default'].attr('string'),
    operatingsystem: _emberData['default'].attr('string'),
    environment: _emberData['default'].attr('string'),
    model: _emberData['default'].attr('string'),
    location: _emberData['default'].attr('string'),
    organization: _emberData['default'].attr('string'),
    cpu: _emberData['default'].attr('string'),
    memory: _emberData['default'].attr('string'),
    vendor: _emberData['default'].attr('string')
  });
});
define('fusor-ember-cli/models/hostgroup', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        name: _emberData['default'].attr('string'),
        title: _emberData['default'].attr('string'),
        parent_id: _emberData['default'].attr('number'),
        created_at: _emberData['default'].attr('date'),
        updated_at: _emberData['default'].attr('date'),
        domain: _emberData['default'].belongsTo('domain', { async: true })
    });
});
define('fusor-ember-cli/models/image', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    checksum: _emberData['default'].attr('string'),
    container_format: _emberData['default'].attr('string'),
    deleted: _emberData['default'].attr('boolean'),
    deleted_at: _emberData['default'].attr('date'),
    disk_format: _emberData['default'].attr('string'),
    is_public: _emberData['default'].attr('boolean'),
    min_disk: _emberData['default'].attr('number'),
    min_ram: _emberData['default'].attr('number'),
    owner: _emberData['default'].attr('string'),
    'protected': _emberData['default'].attr('boolean'),
    size: _emberData['default'].attr('number'),
    status: _emberData['default'].attr('string'),
    updated_at: _emberData['default'].attr('date'),
    virtual_size: _emberData['default'].attr('string')

  });
});
define('fusor-ember-cli/models/introspection-task', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    task_id: _emberData['default'].attr('string'),
    deployment: _emberData['default'].belongsTo('deployment', { async: true }),
    node_uuid: _emberData['default'].attr('string'),
    mac_address: _emberData['default'].attr('string'),
    poll: _emberData['default'].attr('boolean', { defaultValue: true })

  });
});
define('fusor-ember-cli/models/lifecycle-environment', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    label: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    library: _emberData['default'].attr('boolean'),
    prior: _emberData['default'].attr('number'),
    prior_id: _emberData['default'].attr('number'),
    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),
    organization: _emberData['default'].belongsTo('organization', { async: true })
  });
});
define('fusor-ember-cli/models/management-application', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    // uuid is not listed here since serializer defines it as primaryKey so it's retreived as id
    name: _emberData['default'].attr('string'),
    releaseVer: _emberData['default'].attr('string'),
    username: _emberData['default'].attr('string'),
    entitlementStatus: _emberData['default'].attr('string'),
    serviceLevel: _emberData['default'].attr('string'),
    environment: _emberData['default'].attr('string'),
    entitlementCount: _emberData['default'].attr('number'),
    lastCheckin: _emberData['default'].attr('date'),
    canActivate: _emberData['default'].attr('boolean'),
    hypervisorId: _emberData['default'].attr('string'),
    autoheal: _emberData['default'].attr('boolean'),
    href: _emberData['default'].attr('string'),
    created: _emberData['default'].attr('date'),
    updated: _emberData['default'].attr('date')

  });

  // These objects are in the JSON response but removed in the serializer
  // and not saved in the store
  //
  // "releaseVer": {
  //     "releaseVer": null
  // },
  // "type": {
  //     "id": "9",
  //     "label": "satellite",
  //     "manifest": true
  // },
  // "owner": {
  //     "id": "8a85f9814a192108014a1adef5826b38",
  //     "key": "7473998",
  //     "displayName": "7473998",
  //     "href": "/owners/7473998"
  // },
  // "installedProducts": [],
  // "guestIds": [],
  // "capabilities": [],
});
define('fusor-ember-cli/models/node', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        uuid: _emberData['default'].attr('string'),
        driver: _emberData['default'].attr('string'),
        provision_state: _emberData['default'].attr('string'),
        driver_info: _emberData['default'].attr(),
        properties: _emberData['default'].attr(),
        address: _emberData['default'].attr('string'),
        power_state: _emberData['default'].attr('string'),
        last_error: _emberData['default'].attr('string'),

        ready: _ember['default'].computed('properties.cpus', 'properties.memory_mb', 'properties.local_gb', function () {
            return _ember['default'].isPresent(this.get('properties.cpus')) && _ember['default'].isPresent(this.get('properties.memory_mb')) && _ember['default'].isPresent(this.get('properties.local_gb'));
        }),

        getMacAddress: function getMacAddress(ports) {
            var port = ports ? ports.findBy('node_uuid', this.get('id')) : null;
            return port ? port.address : null;
        },

        getIntrospectionTask: function getIntrospectionTask(introspectionTasks) {
            return introspectionTasks ? introspectionTasks.findBy('node_uuid', this.get('id')) : null;
        },

        getForemanTask: function getForemanTask(introspectionTasks, foremanTasks) {
            if (!introspectionTasks || !foremanTasks) {
                return null;
            }

            var introspectionTask = this.getIntrospectionTask(introspectionTasks);
            return introspectionTask ? foremanTasks.findBy('id', introspectionTask.get('task_id')) : null;
        }
    });
});
define('fusor-ember-cli/models/obj-hash', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Object.extend({
    content: {},
    contentLength: 0,

    add: function add(obj) {
      var id = this.generateId();
      this.get('content')[id] = obj;
      this.incrementProperty("contentLength");
      return id;
    },

    getObj: function getObj(key) {
      var res = this.get('content')[key];
      if (!res) {
        throw "no obj for key " + key;
      }
      return res;
    },

    generateId: function generateId() {
      var num = Math.random() * 1000000000000.0;
      num = parseInt(num);
      num = "" + num;
      return num;
    },

    keys: function keys() {
      var res = [];
      for (var key in this.get('content')) {
        res.push(key);
      }
      return _ember['default'].A(res);
    },

    lengthBinding: "contentLength"
  });
});
define('fusor-ember-cli/models/openshift-host', ['exports', 'fusor-ember-cli/models/base/base-discovered-host'], function (exports, _fusorEmberCliModelsBaseBaseDiscoveredHost) {
  exports['default'] = _fusorEmberCliModelsBaseBaseDiscoveredHost['default'].extend({});
});
define('fusor-ember-cli/models/organization', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string'),
    label: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    lifecycle_environments: _emberData['default'].hasMany('lifecycle-environment', { async: true })
    //  subnets: DS.hasMany('subnet', { async: true })
  });
});
define('fusor-ember-cli/models/pool', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({

    type: _emberData['default'].attr('string'),
    subscriptionId: _emberData['default'].attr('string'),
    activeSubscription: _emberData['default'].attr('boolean'),
    contractNumber: _emberData['default'].attr('string'),
    accountNumber: _emberData['default'].attr('string'),
    consumed: _emberData['default'].attr('number'),
    exported: _emberData['default'].attr('number'),
    productName: _emberData['default'].attr('string'),

    quantity: _emberData['default'].attr('number'),
    startDate: _emberData['default'].attr('date'),
    endDate: _emberData['default'].attr('date'),
    href: _emberData['default'].attr('string'),
    created: _emberData['default'].attr('date'),
    updated: _emberData['default'].attr('date'),

    qtyAvailable: _ember['default'].computed('quantity', 'consumed', function () {
      return this.get('quantity') - this.get('consumed');
    }),

    qtyAvailableOfTotal: _ember['default'].computed('qtyAvailable', 'quantity', function () {
      if (this.get('qtyAvailable') === -1) {
        return "Unlimited";
      } else {
        return this.get('qtyAvailable') + ' of ' + this.get('quantity');
      }
    })

  });
});
define('fusor-ember-cli/models/session-portal', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    identification: _emberData['default'].attr('string'),
    ownerKey: _emberData['default'].attr('string'),
    consumerUUID: _emberData['default'].attr('string'),
    isAuthenticated: _emberData['default'].attr('boolean')
  });
});
define('fusor-ember-cli/models/subnet', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    network: _emberData['default'].attr('string'),
    mask: _emberData['default'].attr('string'),
    priority: _emberData['default'].attr('number'),
    name: _emberData['default'].attr('string'),
    vlanid: _emberData['default'].attr('string'),
    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),
    dhcp_id: _emberData['default'].attr('number'),
    tftp_id: _emberData['default'].attr('number'),
    from: _emberData['default'].attr('string'),
    to: _emberData['default'].attr('string'),
    gateway: _emberData['default'].attr('string'),
    dns_primary: _emberData['default'].attr('string'),
    dns_secondary: _emberData['default'].attr('string'),
    dns_id: _emberData['default'].attr('number'),
    sort_network_id: _emberData['default'].attr('number'),
    boot_mode: _emberData['default'].attr('string'),
    ipam: _emberData['default'].attr('string'),
    organization: _emberData['default'].belongsTo('organization', { async: false })
  });
});
define('fusor-ember-cli/models/subscription', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({

    contract_number: _emberData['default'].attr('string'),
    product_name: _emberData['default'].attr('string'),
    quantity_to_add: _emberData['default'].attr('number'),
    quantity_attached: _emberData['default'].attr('number'),
    start_date: _emberData['default'].attr('date'),
    end_date: _emberData['default'].attr('date'),
    total_quantity: _emberData['default'].attr('number'),
    source: _emberData['default'].attr('string'),
    deployment: _emberData['default'].belongsTo('deployment', { inverse: 'subscriptions', async: true }),

    qtySumAttached: Ember.computed('quantity_to_add', 'quantity_attached', function () {
      return parseInt(this.get('quantity_to_add')) + parseInt(this.get('quantity_attached'));
    })

  });
});
define('fusor-ember-cli/router', ['exports', 'ember', 'fusor-ember-cli/config/environment'], function (exports, _ember, _fusorEmberCliConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _fusorEmberCliConfigEnvironment['default'].locationType,
    // log when Ember generates a controller or a route from a generic class
    LOG_ACTIVE_GENERATION: true,
    // log when Ember looks up a template or a view
    LOG_VIEW_LOOKUPS: true
  });

  exports['default'] = Router.map(function () {

    this.route('deployments', { resetNamespace: true });

    this.route("deployment-new", { path: '/deployments/new', resetNamespace: true }, function () {
      this.route("start");
      this.route('satellite', function () {
        this.route('configure-environment');
        this.route("configure-organization");
      });
    });

    this.route('deployment', { path: '/deployments/:deployment_id', resetNamespace: true }, function () {
      this.route("start");

      this.route('satellite', { resetNamespace: true }, function () {
        this.route('configure-organization', { resetNamespace: true });
        this.route('configure-environment', { resetNamespace: true });
        this.route('access-insights');
      });

      this.route('rhev', { resetNamespace: true }, function () {
        this.route('rhev-setup', { path: 'setup', resetNamespace: true });
        this.route('engine', { resetNamespace: true }, function () {
          this.route('discovered-host');
        });
        this.route('hypervisor', { resetNamespace: true }, function () {
          this.route('discovered-host');
        });
        this.route('rhev-options', { path: 'configuration', resetNamespace: true });
        this.route('storage', { resetNamespace: true });
      });

      this.route('openstack', { resetNamespace: true }, function () {
        this.route('undercloud-deploy', { resetNamespace: true });
        this.route('register-nodes', { resetNamespace: true });
        this.route('assign-nodes', { resetNamespace: true });
        this.route('overcloud');
      });
      this.route('cloudforms', { resetNamespace: true }, function () {
        this.route('where-install', { resetNamespace: true });
        this.route('cfme-configuration', { path: 'configuration' });
      });
      this.route('openshift', { resetNamespace: true }, function () {
        this.route('openshift-nodes', { path: 'nodes' });
        this.route('openshift-configuration', { path: 'configuration' });
      });
      this.route('subscriptions', { resetNamespace: true }, function () {
        this.route('credentials');
        this.route('management-application', function () {
          this.route('consumer', { path: '/:management_application_uuid' });
        });
        this.route('select-subscriptions', { path: 'select' });
        this.route('review-subscriptions', { path: 'review' });
      });
      this.route('review', { resetNamespace: true }, function () {
        this.route('installation');
        this.route('progress', function () {
          this.route('overview');
          this.route('details');
          this.route('log');
        });
        this.route('summary');
      });
    });

    this.route('readme'); // for demo only, not used in app
  });
});
define('fusor-ember-cli/routes/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.store.findAll('deployment');
    },

    actions: {
      invalidateSession: function invalidateSession() {
        return this.transitionTo('login');
      }
    }
  });
});
// app/routes/application.js
define('fusor-ember-cli/routes/assign-nodes', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    setupController: function setupController(controller, model) {
      controller.set('model', model);
      this.loadOpenStack();
    },

    deactivate: function deactivate() {
      this.updateDeployment();
      this.send('saveDeployment', null);
    },

    loadOpenStack: function loadOpenStack() {
      var _this = this;

      var controller = this.get('controller');
      var deployment = this.get('controller.deployment');

      controller.set('showSpinner', true);
      controller.set('errorMsg', null);

      if (deployment.get('deploy_openstack') && !_ember['default'].isBlank(deployment.get('openstack_undercloud_password'))) {
        controller.set('isOspLoading', true);
        _ember['default'].RSVP.hash({
          plan: this.store.findRecord('deployment-plan', deployment.get('id')),
          nodes: this.store.query('node', { deployment_id: deployment.get('id') }),
          profiles: this.store.query('flavor', { deployment_id: deployment.get('id') })
        }).then(function (hash) {
          controller.set('plan', hash.plan);
          controller.set('nodes', hash.nodes);
          controller.set('profiles', hash.profiles);
          _this.updateDeployment();
          controller.set('showSpinner', false);
        }, function (error) {
          controller.set('showSpinner', false);
          controller.set('errorMsg', 'Error retrieving OpenStack data: ' + _this.formatError(error));
          console.log('Error retrieving OpenStack data: ', error);
        });
      }
    },

    updateDeployment: function updateDeployment() {
      this.set('controller.deployment.openstack_overcloud_compute_flavor', this.get('controller.plan.computeRoleFlavor'));
      this.set('controller.deployment.openstack_overcloud_compute_count', this.get('controller.plan.computeRoleCount'));
      this.set('controller.deployment.openstack_overcloud_controller_flavor', this.get('controller.plan.controllerRoleFlavor'));
      this.set('controller.deployment.openstack_overcloud_controller_count', this.get('controller.plan.controllerRoleCount'));
      this.set('controller.deployment.openstack_overcloud_ceph_storage_flavor', this.get('controller.plan.cephStorageRoleFlavor'));
      this.set('controller.deployment.openstack_overcloud_ceph_storage_count', this.get('controller.plan.cephStorageRoleCount'));
      this.set('controller.deployment.openstack_overcloud_cinder_storage_flavor', this.get('controller.plan.cinderStorageRoleFlavor'));
      this.set('controller.deployment.openstack_overcloud_cinder_storage_count', this.get('controller.plan.cinderStorageRoleCount'));
      this.set('controller.deployment.openstack_overcloud_swift_storage_flavor', this.get('controller.plan.swiftStorageRoleFlavor'));
      this.set('controller.deployment.openstack_overcloud_swift_storage_count', this.get('controller.plan.swiftStorageRoleCount'));
    },

    formatError: function formatError(error) {
      var errorMessage = '';
      if (_ember['default'].typeOf(error) === 'error') {
        errorMessage = error.message + ': ';
        if (error.errors) {
          error.errors.forEach(function (subError) {
            return errorMessage += ' ' + subError;
          });
        }
      }

      return errorMessage;
    }

  });
});
define('fusor-ember-cli/routes/cloudforms/cfme-configuration', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/cloudforms/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('where-install');
    }
  });
});
define('fusor-ember-cli/routes/cloudforms', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberCloudForms = this.controllerFor('deployment').get('stepNumberCloudForms');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberCloudForms);
    }

  });
});
define('fusor-ember-cli/routes/configure-environment', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment').get('lifecycle_environment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var self = this;
      var organization = this.modelFor('deployment').get('organization');
      var lifecycleEnvironments = this.store.query('lifecycle-environment', { organization_id: organization.get('id') });
      lifecycleEnvironments.then(function (results) {
        controller.set('lifecycleEnvironments', results);
        // nullify environment if organization has no environments
        if (results.get('length') === 0) {
          return controller.set('selectedEnvironment', null);
        } else {
          return controller.set('selectedEnvironment', model);
        }
      });
    },

    deactivate: function deactivate() {
      this.get('controller').set('showAlertMessage', false);
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/configure-organization', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment').get('organization');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showAlertMessage', false);
      controller.set('defaultOrg', model);
      controller.set('selectedOrganization', model);
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/consumer', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/deployment/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    afterModel: function afterModel() {
      this.transitionTo('satellite');
    }
  });
});
define('fusor-ember-cli/routes/deployment/start', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'satellite.index');
      if (model.get('deploy_rhev') || model.get('deploy_openstack')) {
        controller.set('isDisabledOpenShift', false);
        controller.set('isDisabledCfme', false);
      } else {
        controller.set('isDisabledOpenShift', true);
        controller.set('isDisabledCfme', true);
      }
    },

    activate: function activate() {
      this.controllerFor('deployment').set('isHideWizard', true);
    },

    deactivate: function deactivate() {
      this.controllerFor('deployment').set('isHideWizard', false);
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/deployment-new/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    // if user manually hits this route (deployments/news), then redirecto to deployments/news/start
    beforeModel: function beforeModel() {
      return this.transitionTo('deployment-new.start');
    }

  });
});
define('fusor-ember-cli/routes/deployment-new/satellite/configure-environment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, _ember, _fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin['default'], {

    model: function model() {
      return this.modelFor('deployment-new').get('lifecycle_environment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var lifecycleEnvironments = this.store.query('lifecycle-environment', { organization_id: 1 });
      lifecycleEnvironments.then(function (results) {
        controller.set('lifecycleEnvironments', results);
      });
    },

    deactivate: function deactivate() {
      this.get('controller').set('showAlertMessage', false);
    }

  });
});
define('fusor-ember-cli/routes/deployment-new/satellite/configure-organization', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, _ember, _fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin['default'], {

    model: function model() {
      return this.modelFor('deployment-new').get('organization');
    },

    setupController: function setupController(controller, model) {
      var self = this;
      controller.set('model', model);
      controller.set('showAlertMessage', false);
      this.store.findRecord('organization', 1).then(function (result) {
        controller.set('defaultOrg', result);
        controller.set('model', result);
        controller.set('selectedOrganization', result);
        self.modelFor('deployment-new').set('organization', result);
      });
    }

  });
});
define('fusor-ember-cli/routes/deployment-new/satellite/index', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, _ember, _fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin['default'], {

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      this.store.findRecord('organization', 1).then(function (result) {
        model.set('organization', result);
      });
    },

    deactivate: function deactivate() {
      var deploymentName = this.get('controller.model.name');
      if (_ember['default'].isPresent(deploymentName)) {
        this.set('controller.model.name', deploymentName.trim());
      }
    }
  });
});
define('fusor-ember-cli/routes/deployment-new/satellite', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/deployment-new/start', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'deployment-new.satellite.index');
      if (model.get('deploy_rhev') || model.get('deploy_openstack')) {
        controller.set('isDisabledOpenShift', false);
        controller.set('isDisabledCfme', false);
      } else {
        controller.set('isDisabledOpenShift', true);
        controller.set('isDisabledCfme', true);
      }
    },

    activate: function activate() {
      this.controllerFor('deployment-new').set('isHideWizard', true);
    },

    deactivate: function deactivate() {
      this.controllerFor('deployment-new').set('isHideWizard', false);
    }

  });
});
define('fusor-ember-cli/routes/deployment-new', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-route-mixin'], function (exports, _ember, _fusorEmberCliMixinsDeploymentRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDeploymentRouteMixin['default'], {

    model: function model() {
      return this.store.createRecord('deployment', {
        enable_access_insights: false,
        rhev_cluster_name: 'Default',
        rhev_storage_name: 'my_storage',
        rhev_export_domain_name: 'my_export',
        rhev_data_center_name: 'Default',
        rhev_storage_type: 'NFS',
        openstack_overcloud_ext_net_interface: 'nic2',
        openstack_overcloud_libvirt_type: 'kvm'
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'deployment-new.satellite.index');
      controller.set('organizationTabRouteName', 'deployment-new.satellite.configure-organization');
      controller.set('lifecycleEnvironmentTabRouteName', 'deployment-new.satellite.configure-environment');
      this.controllerFor('application').set('isNewDeployment', true);
    },

    // rollback if new deployment not saved
    // TODO modal confirm/cancel
    deactivate: function deactivate() {
      var deployment = this.modelFor('deployment-new');
      if (deployment.get('isNew')) {
        return deployment.rollback();
      }
    },

    actions: {
      cancelAndRollbackNewDeployment: function cancelAndRollbackNewDeployment() {
        this.get('controller.model').rollback();
        return this.transitionTo('deployments');
      }
    }

  });
});
define('fusor-ember-cli/routes/deployment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-route-mixin', 'ic-ajax'], function (exports, _ember, _fusorEmberCliMixinsDeploymentRouteMixin, _icAjax) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDeploymentRouteMixin['default'], {

    model: function model(params) {
      return this.store.findRecord('deployment', params.deployment_id);
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'satellite.index');
      controller.set('organizationTabRouteName', 'configure-organization');
      controller.set('lifecycleEnvironmentTabRouteName', 'configure-environment');
      controller.set('model.host_naming_scheme', 'Freeform');
      controller.set('confirmRhevRootPassword', model.get('rhev_root_password'));
      controller.set('confirmRhevEngineAdminPassword', model.get('rhev_engine_admin_password'));
      controller.set('confirmCfmeRootPassword', model.get('cfme_root_password'));
      controller.set('confirmCfmeAdminPassword', model.get('cfme_admin_password'));
      controller.set('confirmOvercloudPassword', model.get('openstack_overcloud_password'));

      this.loadOpenStack(controller, model);
      this.loadOpenshiftDefaults(controller, model);
      this.loadCloudFormsDefaults(controller, model);
      this.loadDefaultDomainName(controller);

      // copied from setupController in app/routes/subscriptions/credentials.js
      // to fix bug of Review Tab being disabled on refresh and needing to click
      // on subscriptions to enable it
      // check if org has upstream UUID using Katello V2 API
      var orgID = model.get('organization.id');
      var url = '/katello/api/v2/organizations/' + orgID;
      _ember['default'].$.getJSON(url).then(function (results) {
        if (_ember['default'].isPresent(results.owner_details.upstreamConsumer)) {
          controller.set('organizationUpstreamConsumerUUID', results.owner_details.upstreamConsumer.uuid);
          controller.set('organizationUpstreamConsumerName', results.owner_details.upstreamConsumer.name);
          // if no UUID for deployment, assign it from org UUID
          if (_ember['default'].isBlank(controller.get('model.upstream_consumer_uuid'))) {
            controller.set('model.upstream_consumer_uuid', results.owner_details.upstreamConsumer.uuid);
            controller.set('model.upstream_consumer_name', results.owner_details.upstreamConsumer.name);
          }
        } else {
          controller.set('organizationUpstreamConsumerUUID', null);
          controller.set('organizationUpstreamConsumerName', null);
        }
      });
    },

    loadDefaultDomainName: function loadDefaultDomainName(controller) {
      this.store.findAll('hostgroup').then(function (hostgroups) {
        return hostgroups.filterBy('name', 'Fusor Base').get('firstObject').get('domain.name');
      }).then(function (domainName) {
        return controller.set('defaultDomainName', domainName);
      });
    },

    loadCloudFormsDefaults: function loadCloudFormsDefaults(controller, model) {
      // GET from API v2 CFME settings for Foreman/Sat6 - if CFME is selected
      if (model.get('deploy_cfme')) {
        (0, _icAjax['default'])('/api/v2/settings?search=cloudforms').then(function (settings) {
          var results = settings['results'];
          // overwrite values for deployment since Sat6 settings is only place to change CFME VM requirements
          model.set('cloudforms_vcpu', results.findBy('name', 'cloudforms_vcpu').value);
          model.set('cloudforms_ram', results.findBy('name', 'cloudforms_ram').value);
          model.set('cloudforms_vm_disk_size', results.findBy('name', 'cloudforms_vm_disk_size').value);
          model.set('cloudforms_db_disk_size', results.findBy('name', 'cloudforms_db_disk_size').value);
        });
      }
    },

    loadOpenshiftDefaults: function loadOpenshiftDefaults(controller, model) {
      // GET from API v2 OSE settings for Foreman/Sat6
      if (model.get('deploy_openshift')) {
        (0, _icAjax['default'])('/api/v2/settings?search=openshift').then(function (settings) {
          var results = settings['results'];
          if (!(model.get('openshift_master_vcpu') > 0)) {
            model.set('openshift_master_vcpu', results.findBy('name', 'openshift_master_vcpu').value);
          }
          if (!(model.get('openshift_master_ram') > 0)) {
            model.set('openshift_master_ram', results.findBy('name', 'openshift_master_ram').value);
          }
          if (!(model.get('openshift_master_disk') > 0)) {
            model.set('openshift_master_disk', results.findBy('name', 'openshift_master_disk').value);
          }
          if (!(model.get('openshift_node_vcpu') > 0)) {
            model.set('openshift_node_vcpu', results.findBy('name', 'openshift_node_vcpu').value);
          }
          if (!(model.get('openshift_node_ram') > 0)) {
            model.set('openshift_node_ram', results.findBy('name', 'openshift_node_ram').value);
          }
          if (!(model.get('openshift_node_disk') > 0)) {
            model.set('openshift_node_disk', results.findBy('name', 'openshift_node_disk').value);
          }
        });

        // set default values 1 Master, 1 Worker, 30GB storage for OSE
        if (!(model.get('openshift_number_master_nodes') > 0)) {
          model.set('openshift_number_master_nodes', 1);
        }
        if (!(model.get('openshift_number_worker_nodes') > 0)) {
          model.set('openshift_number_worker_nodes', 1);
        }
        if (!(model.get('openshift_storage_size') > 0)) {
          model.set('openshift_storage_size', 30);
        }
      }
    },

    loadOpenStack: function loadOpenStack(controller, model) {
      var _this = this;

      if (model.get('deploy_openstack') && !_ember['default'].isBlank(model.get('openstack_undercloud_password'))) {
        controller.set('isOspLoading', true);
        _ember['default'].RSVP.hash({
          plan: this.store.findRecord('deployment-plan', model.get('id')),
          images: this.store.query('image', { deployment_id: model.get('id') }),
          nodes: this.store.query('node', { deployment_id: model.get('id') }),
          profiles: this.store.query('flavor', { deployment_id: model.get('id') })
        }).then(function (hash) {
          var openStack = _ember['default'].Object.create(hash);
          controller.set('openStack', openStack);
          _this.fixBadOpenStackDefaults();

          // for some reason using the binding the computed property blanks it out on the first edit,
          // so we're using an alias which updates the plan on route deactivate on the corresponding page anyway
          controller.set('openStack.externalNetworkInterface', openStack.get('plan.externalNetworkInterface'));
          controller.set('openStack.overcloudPassword', openStack.get('plan.overcloudPassword'));
          controller.set('isOspLoading', false);
        }, function (error) {
          controller.set('isOspLoading', false);
          console.log('Error retrieving OpenStack data', error);
          return _this.send('error', error);
        });
      }
    },

    fixBadOpenStackDefaults: function fixBadOpenStackDefaults() {
      var newParams = [],
          existingParams = this.get('controller.openStack.plan.parameters');

      if (!existingParams) {
        return;
      }

      existingParams.forEach(function (param) {
        var id = param.get('id'),
            value = param.get('value');

        if (id === 'Controller-1::NeutronPublicInterface' && (!value || value === 'nic1')) {
          param.set('value', 'nic2');
          newParams.push({ name: id, value: 'nic2' });
        }

        if (id === 'Compute-1::NovaComputeLibvirtType' && (!value || value === 'qemu')) {
          param.set('value', 'kvm');
          newParams.push({ name: id, value: 'kvm' });
        }
      });

      if (newParams.length > 0) {
        this.send('updateOpenStackPlan', newParams);
      }
    },

    actions: {
      installDeployment: function installDeployment() {
        var self = this;
        var deployment = self.modelFor('deployment');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        var controller = this.controllerFor('review/installation');

        if (controller.get('modalOpen')) {
          controller.closeContinueDeployModal();
        }

        controller.set('spinnerTextMessage', 'Building task list');
        controller.set('showSpinner', true);

        (0, _icAjax['default'])({
          url: '/fusor/api/v21/deployments/' + deployment.get('id') + '/deploy',
          type: "PUT",
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token,
            "Authorization": "Basic " + self.get('session.basicAuthToken')
          }
        }).then(function (response) {
          var uuid = response.id;
          console.log('task uuid is ' + uuid);
          deployment.set('foreman_task_uuid', uuid);
          deployment.save().then(function () {
            controller.set('showSpinner', false);
            return self.transitionTo('review.progress.overview');
          }, function () {
            controller.set('showSpinner', false);
            controller.set('errorMsg', 'Error in saving UUID of deployment task.');
            controller.set('showErrorMessage', true);
          });
        }, function (response) {
          controller.set('showSpinner', false);

          if (response.jqXHR.status === 422 && response.jqXHR.responseJSON && response.jqXHR.responseJSON.errors) {
            var prop;

            (function () {
              // rails is sending back validation errors as a 422 with an errors hash that looks like
              // errors: {field => [error_messages]}
              var validationErrors = [];
              var errors = response.jqXHR.responseJSON.errors;
              var addValidationError = function addValidationError(error) {
                return validationErrors.push(error);
              };

              for (prop in errors) {
                if (errors.hasOwnProperty(prop)) {
                  errors[prop].forEach(addValidationError);
                }
              }
              controller.set('validationErrors', validationErrors);
            })();
          } else {
            controller.set('errorMsg', response.jqXHR.responseText);
            controller.set('showErrorMessage', true);
          }
        });
      },

      attachSubscriptions: function attachSubscriptions() {
        var self = this;
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        var sessionPortal = this.modelFor('subscriptions');
        var consumerUUID = sessionPortal.get('consumerUUID');
        var subscriptionPools = this.controllerFor('subscriptions/select-subscriptions').get('subscriptionPools');

        var controller = this.controllerFor('review/installation');

        controller.set('buttonDeployDisabled', true);
        controller.set('spinnerTextMessage', 'Attaching Subscriptions in Red Hat Customer Portal');
        controller.set('showSpinner', true);

        subscriptionPools.forEach(function (item) {
          console.log(item);
          console.log('qtyToAttach is');
          console.log(item.get('qtyToAttach'));
          console.log('pool ID is');
          console.log(item.get('id'));
          console.log('isSelectedSubscription is');
          console.log(item.get('isSelectedSubscription'));

          if (item.get('qtyToAttach') > 0) {

            // POST /customer_portal/consumers/#{CONSUMER['uuid']}/entitlements?pool=#{POOL['id']}&quantity=#{QUANTITY}
            var url = '/customer_portal/consumers/' + consumerUUID + "/entitlements?pool=" + item.get('id') + "&quantity=" + item.get('qtyToAttach');
            console.log('POST attach subscriptions using following URL');
            console.log(url);

            (0, _icAjax['default'])({
              url: url,
              type: "POST",
              headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "X-CSRF-Token": token
              }
            }).then(function (response) {
              console.log('successfully attached ' + item.qtyToAttach + ' subscription for pool ' + item.id);
              self.send('installDeployment');
            }, function (error) {
              console.log('error on attachSubscriptions');
              return self.send('error');
            });
          }
        });
      },

      saveAndCancelDeployment: function saveAndCancelDeployment() {
        return this.send('saveDeployment', 'deployments');
      },

      cancelAndDeleteDeployment: function cancelAndDeleteDeployment() {
        var deployment = this.get('controller.model');
        var self = this;
        deployment.destroyRecord().then(function () {
          return self.transitionTo('deployments');
        });
      },

      error: function error(reason) {
        console.log(reason);
        var controller = this.controllerFor('deployment');

        if (typeof reason === 'string') {
          controller.set('errorMsg', reason);
        } else if (reason && typeof reason === 'object') {
          if (reason.responseJSON && reason.responseJSON.error && reason.responseJSON.error.message) {
            controller.set('errorMsg', reason.responseJSON.error.message);
          } else if (reason.responseText) {
            controller.set('errorMsg', reason.responseText);
          }
        }
      },

      refreshModel: function refreshModel() {
        console.log('refreshModelOnDeploymentRoute');
        return this.refresh();
      },

      updateOpenStackPlan: function updateOpenStackPlan(params) {
        console.log('updateOpenStackPlan');
        var deploymentId = this.modelFor('deployment').get('id'),
            token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        return (0, _icAjax['default'])({
          url: '/fusor/api/openstack/deployments/' + deploymentId + '/deployment_plans/overcloud/update_parameters',
          type: 'PUT',
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token
          },
          data: JSON.stringify({ 'parameters': params })
        })['catch'](function (error) {
          error = error.jqXHR;
          console.log('ERROR updating parameters');
          console.log(error);
        });
      }
    }

  });
});
define('fusor-ember-cli/routes/deployments', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.store.findAll('deployment');
    },

    actions: {
      deleteDeployment: function deleteDeployment(item) {
        this.controllerFor('deployments').set('isCloseModal', true);
        return this.store.findRecord('deployment', item.get('id')).then(function (deployment) {
          deployment.deleteRecord();
          return deployment.save();
        });
      },

      willTransition: function willTransition() {
        return this.controllerFor('deployment').set('isBackToDeployments', true);
      }
    }

  });
});
define('fusor-ember-cli/routes/engine/discovered-host', ['exports', 'ember', 'fusor-ember-cli/mixins/discovered-host-route-mixin'], function (exports, _ember, _fusorEmberCliMixinsDiscoveredHostRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDiscoveredHostRouteMixin['default'], {
    model: function model() {
      return this.modelFor('deployment').get('discovered_host');
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/engine', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('engine.discovered-host');
    }
  });
});
define('fusor-ember-cli/routes/hypervisor/discovered-host', ['exports', 'ember', 'fusor-ember-cli/mixins/discovered-host-route-mixin', 'ic-ajax'], function (exports, _ember, _fusorEmberCliMixinsDiscoveredHostRouteMixin, _icAjax) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDiscoveredHostRouteMixin['default'], {
    model: function model() {
      return this.modelFor('deployment').get('discovered_hosts');
    },

    deactivate: function deactivate() {
      return this.send('saveHyperVisors', null);
    },

    actions: {
      saveHyperVisors: function saveHyperVisors(redirectPath) {
        var self = this;
        var deployment = this.modelFor('deployment');
        var hypervisorModelIds = this.controllerFor('hypervisor/discovered-host').get('hypervisorModelIds');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        (0, _icAjax['default'])({
          url: '/fusor/api/v21/deployments/' + deployment.get('id'),
          type: "PUT",
          data: JSON.stringify({ 'deployment': { 'discovered_host_ids': hypervisorModelIds } }),
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token,
            "Authorization": "Basic " + self.get('session.basicAuthToken')
          }
        }).then(function (response) {
          if (redirectPath) {
            self.transitionTo('rhev-options');
          }
        }, function (error) {
          console.log(error);
        });
      }
    }

  });
});
define('fusor-ember-cli/routes/hypervisor', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('hypervisor.discovered-host');
    }
  });
});
define('fusor-ember-cli/routes/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      return this.transitionTo('deployment-new');
    }

  });
});
define('fusor-ember-cli/routes/new-environment', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/new-organization', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('fields', {});
    }
  });
});
define('fusor-ember-cli/routes/openshift/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('openshift.openshift-nodes');
    }
  });
});
define('fusor-ember-cli/routes/openshift/openshift-configuration', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);

      controller.set('confirmUserpassword', model.get('openshift_user_password'));

      if (_ember['default'].isEmpty(model.get('openshift_storage_type'))) {
        model.set('openshift_storage_type', 'NFS');
      }
      if (_ember['default'].isEmpty(model.get('openshift_username'))) {
        model.set('openshift_username', 'cloudsuite-install');
      }
      this.store.findAll('hostgroup').then(function (results) {
        var fusorBaseHostgroup = results.filterBy('name', 'Fusor Base').get('firstObject');
        controller.set('domainName', fusorBaseHostgroup.get('domain.name'));
      });
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/openshift/openshift-nodes', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);

      var isRhev = this.controllerFor('deployment').get('isRhev');
      var isOpenStack = this.controllerFor('deployment').get('isOpenStack');
      if (isRhev && !isOpenStack) {
        model.set('openshift_install_loc', 'RHEV');
      } else if (!isRhev && isOpenStack) {
        model.set('openshift_install_loc', 'OpenStack');
      }

      // TODO pull from API resources available
      var result = { vcpuAvailabe: 8,
        ramAvailable: 32,
        diskAvailable: 250 };

      if (!(model.get('openshift_available_vcpu') > 0)) {
        model.set('openshift_available_vcpu', result['vcpuAvailabe']);
      }
      if (!(model.get('openshift_available_ram') > 0)) {
        model.set('openshift_available_ram', result['ramAvailable']);
      }
      if (!(model.get('openshift_available_disk') > 0)) {
        model.set('openshift_available_disk', result['diskAvailable']);
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/openshift', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/openstack/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('undercloud-deploy');
    }
  });
});
define('fusor-ember-cli/routes/openstack/overcloud', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    deactivate: function deactivate() {
      var controller = this.get('controller');
      var changedParams = [{
        name: 'Controller-1::NeutronPublicInterface',
        value: this.get('controller.externalNetworkInterface')
      }, {
        name: 'Controller-1::AdminPassword',
        value: this.get('controller.overcloudPassword')
      }, {
        name: 'Controller-1::AdminPassword',
        value: this.get('controller.overcloudPassword')
      }, {
        name: 'Compute-1::NovaComputeLibvirtType',
        value: this.get('controller.openstackOvercloudLibvirtType')
      }];

      this.send('updateOpenStackPlan', changedParams);
      return this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/openstack', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberOpenstack = this.controllerFor('deployment').get('stepNumberOpenstack');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberOpenstack);
    }
  });
});
define('fusor-ember-cli/routes/readme', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return (0, _icAjax['default'])('https://raw.githubusercontent.com/isratrade/fusor/readme/fusor-ember-cli/readme-demo.md');
    }
  });
});
define('fusor-ember-cli/routes/register-nodes', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/utils/osp/osp-node-manager'], function (exports, _ember, _icAjax, _fusorEmberCliUtilsOspOspNodeManager) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('nodeManagers', []);
      controller.set('introspectionTasks', []);

      var deploymentId = this.modelFor('deployment').get('id');
      this.store.query('image', { deployment_id: deploymentId }).then(function (results) {
        var bmDeployKernelImage = results.findBy('name', 'bm-deploy-kernel');
        var bmDeployRamdiskImage = results.findBy('name', 'bm-deploy-ramdisk');
        controller.set('bmDeployKernelImage', bmDeployKernelImage);
        controller.set('bmDeployRamdiskImage', bmDeployRamdiskImage);
      });

      controller.set('showSpinner', true);
      this.loadAll().then(function () {
        return controller.set('showSpinner', false);
      });
      controller.stopPolling();
      controller.startPolling();
    },

    deactivate: function deactivate() {
      this.get('controller').stopPolling();
      this.send('saveDeployment', null);
    },

    actions: {
      deleteNode: function deleteNode(node) {
        this.set('deleteNode', node);
        this.set('openDeleteNodeConfirmation', true);
        this.set('closeDeleteNodeConfirmation', false);
      },

      refreshModelOnOverviewRoute: function refreshModelOnOverviewRoute() {
        this.loadAll();
      },

      error: function error(_error, message) {
        console.log(_error, message);
        this.set('controller.errorMsg', this.formatError(_error, message));
      }
    },

    loadAll: function loadAll() {
      var _this = this;

      return _ember['default'].RSVP.Promise.all([this.loadNodes(), this.loadPorts(), this.loadIntrospectionTasks()]).then(function () {
        _this.organizeNodes();
        _this.loadForemanTasks();
      });
    },

    loadNodes: function loadNodes() {
      var _this2 = this;

      var controller = this.get('controller');
      return this.store.query('node', { deployment_id: controller.get('deploymentId') }).then(function (result) {
        controller.set('nodes', result);
      }, function (error) {
        return _this2.send('error', error, 'Error retrieving OpenStack nodes.');
      });
    },

    loadPorts: function loadPorts() {
      var _this3 = this;

      var controller = this.get('controller');
      var deploymentId = this.get('controller.deploymentId');
      var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
      var url = '/fusor/api/openstack/deployments/' + deploymentId + '/node_ports';

      return (0, _icAjax['default'])({
        url: url,
        type: 'GET',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": token
        },
        data: {}
      }).then(function (result) {
        controller.set('ports', result.ports);
      }, function (error) {
        return _this3.send('error', error, 'Unable to load node ports. GET "' + url + '" failed with status code ' + error.jqXHR.status + '.');
      });
    },

    loadIntrospectionTasks: function loadIntrospectionTasks() {
      var _this4 = this;

      var controller = this.get('controller');
      var deploymentId = this.get('controller.deploymentId');
      return this.store.findRecord('deployment', deploymentId, { reload: true }).then(function (deployment) {
        controller.set('introspectionTasks', deployment.get('introspection_tasks'));
      }, function (error) {
        return _this4.send('error', error, 'ERROR retrieving deployment introspection tasks.');
      });
    },

    organizeNodes: function organizeNodes() {
      var nodes = this.get('controller.nodes');
      var nodeManagers = this.get('controller.nodeManagers');
      var processedNodeIds = {};
      var nodeCount = 0;

      if (!nodes) {
        return;
      }

      nodes.forEach(function (node) {
        processedNodeIds[node.get('id')] = true;

        if (node.get('ready')) {
          nodeCount++;
        }

        var manager = nodeManagers.find(function (mgr) {
          return mgr.driverMatchesNode(node);
        });

        if (!manager) {
          manager = _fusorEmberCliUtilsOspOspNodeManager['default'].create({});
          manager.setDriverInfoFromNode(node);
          nodeManagers.unshiftObject(manager);
        }

        manager.putNode(node);
      });

      nodeManagers.forEach(function (manager) {
        var notDeleted = manager.get('nodes').filter(function (node) {
          return processedNodeIds[node.get('id')];
        });
        manager.set('nodes', notDeleted);
      });

      this.set('controller.nodeCount', nodeCount);
    },

    loadForemanTasks: function loadForemanTasks() {
      var _this5 = this;

      var taskPromises = [];
      var introspectionTasks = this.get('controller.introspectionTasks') || [];
      var newIntrospectionTaskIds = this.get('controller.newIntrospectionTaskIds') || [];
      var nodes = this.get('controller.nodes') || [];

      introspectionTasks.forEach(function (introspectionTask) {
        var foremanTaskId = introspectionTask.get('task_id');

        var node = nodes.findBy('id', introspectionTask.get('node_uuid'));
        var nodeNotReady = node && !node.get('ready');

        var isNewIntrospectionTask = !!newIntrospectionTaskIds.contains(introspectionTask.get('task_id'));

        if (foremanTaskId && (nodeNotReady || isNewIntrospectionTask)) {
          taskPromises.push(_this5.store.findRecord('foreman-task', foremanTaskId, { reload: true }));
        }
      });

      return _ember['default'].RSVP.all(taskPromises).then(function (resolvedTasks) {
        _this5.get('controller').set('foremanTasks', resolvedTasks);
      });
    },

    formatError: function formatError(error, message) {
      var errorMessage = '';
      switch (_ember['default'].typeOf(error)) {
        case 'string':
          errorMessage = error;
          break;
        case 'error':
          errorMessage = error.message + ': ';
          if (error.errors) {
            error.errors.forEach(function (subError) {
              if (subError.title) {
                errorMessage += subError.title;
              }
              if (subError.status) {
                errorMessage += '  Status: ' + subError.status;
              }
            });
          }
          break;
      }

      return message ? message + ' ' + errorMessage : errorMessage;
    }
  });
});
define('fusor-ember-cli/routes/review/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('review.installation');
    }
  });
});
define('fusor-ember-cli/routes/review/installation', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.queryRecord('deployment', { id: this.modelFor('deployment').get('id'), sync_openstack: true });
        },

        setupController: function setupController(controller, model) {
            controller.set('model', model);
            controller.set('showErrorMessage', false);
            if (model.get('deploy_rhev')) {
                this.store.findAll('hostgroup').then(function (results) {
                    console.log(results);
                    var fusorBaseHostgroup = results.filterBy('name', 'Fusor Base').get('firstObject');
                    var fusorBaseDomain = fusorBaseHostgroup.get('domain.name');
                    controller.set('engineDomain', fusorBaseDomain);
                    controller.set('hypervisorDomain', fusorBaseDomain);
                });
            }

            if (model.get('is_disconnected')) {
                controller.set('reviewSubscriptions', this.modelFor('subscriptions/review-subscriptions'));
            } else {
                var reviewSubscriptions = model.get('subscriptions').filter(function (sub) {
                    return sub.get('quantity_to_add') > 0 && sub.get('source') == 'added';
                });
                controller.set('reviewSubscriptions', reviewSubscriptions);
                controller.set('hasSubscriptionsToAttach', reviewSubscriptions.get('length') > 0);
                controller.set('hasSessionPortal', _ember['default'].isPresent(this.modelFor('subscriptions')));
                controller.set('hasSubscriptionPools', _ember['default'].isPresent(this.controllerFor('subscriptions/select-subscriptions').get('subscriptionPools')));
            }

            if (!model.get('isStarted')) {
                var self = this;
                var deployment = self.modelFor('deployment');
                var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

                var validationErrors = controller.get('validationErrors');

                controller.set('validationErrors', []);
                controller.set('validationWarnings', []);

                controller.set('showSpinner', true);
                controller.set('spinnerTextMessage', "Validating deployment...");

                (0, _icAjax['default'])({
                    url: '/fusor/api/v21/deployments/' + model.get('id') + '/validate',
                    type: "GET",
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json",
                        "X-CSRF-Token": token
                    }
                }).then(function (response) {
                    controller.set('showSpinner', false);
                    controller.set('validationErrors', response.validation.errors);
                    controller.set('validationWarnings', response.validation.warnings);
                }, function (error) {
                    console.log('error', error);
                    controller.set('showSpinner', false);
                    controller.set('errorMsg', error.jqXHR.responseText);
                    controller.set('showErrorMessage', true);
                });
            }
        }
    });
});
define('fusor-ember-cli/routes/review/progress/details', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      if (_ember['default'].isBlank(this.modelFor('review.progress.overview'))) {
        this.transitionTo('review.progress.overview');
      }
    },

    model: function model() {
      return this.modelFor('review.progress.overview');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('isLoadingMoreTasks', true);

      if (model.manageContentTask) {
        var manageContentTaskUuid = model.manageContentTask.get('id');
        console.log(manageContentTaskUuid);
        return this.store.query('foreman-task', { search: "parent_task_id=" + manageContentTaskUuid }).then(function (synctasks) {
          controller.set('synctasks', synctasks);
          return controller.set('isLoadingMoreTasks', false);
        });
      } else {
        return controller.set('isLoadingMoreTasks', false);
      }
    }

  });
});
define('fusor-ember-cli/routes/review/progress/log', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return _ember['default'].Object.create({
        fusor_log: { path: '' },
        foreman_log: { path: '' },
        foreman_proxy_log: { path: '' },
        candlepin_log: { path: '' },
        messages_log: { path: '' }
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      this.initLog();
    },

    deactivate: function deactivate() {
      this.stopPolling();
    },

    actions: {
      updateDisplayedLog: function updateDisplayedLog() {
        var _this = this;

        this.updateDisplayedLog().then(function () {
          return _this.navNextSearchResult();
        });
      },

      search: function search() {
        var _this2 = this;

        this.updateDisplayedLog().then(function () {
          return _this2.navNextSearchResult();
        });
      },

      clearSearch: function clearSearch() {
        this.updateDisplayedLog();
      },

      changeLogType: function changeLogType() {
        var _this3 = this;

        var logType = this.get('controller.logType') || 'fusor_log';

        this.stopPolling();
        this.set('controller.displayedLog', this.get('controller.model.' + logType));

        this.updateDisplayedLog().then(function () {
          return _this3.initLog();
        }).then(function () {
          return _this3.navNextSearchResult();
        });
      }
    },

    updateDisplayedLog: function updateDisplayedLog() {
      var _this4 = this;

      var logType = this.get('controller.logType') || 'fusor_log',
          promises = [],
          entries,
          idx = 0,
          chunksize = 200,
          showLogTruncated;

      this.set('controller.searchResultIdx', 0);
      this.set('controller.searchResults', []);
      this.set('controller.logPath', this.get('controller.model.' + logType + '.path'));
      this.set('controller.displayedLogHtml', '');
      this.set('controller.newEntries', []);

      entries = this.get('controller.model.' + logType + '.entries');

      if (entries) {
        showLogTruncated = entries[0] && entries[0].get('line_number') > 1;
        this.set('controller.showLogTruncated', showLogTruncated);

        while (idx < entries.length) {
          promises.push(this.updateDisplayedLogChunk(logType, entries, idx, chunksize));
          idx += chunksize;
        }
      }

      return _ember['default'].RSVP.Promise.all(promises).then(function (values) {
        _this4.sortSearchResults();
        _this4.set('controller.displayedLogHtml', _ember['default'].String.htmlSafe(values.join('')));
      });
    },

    updateDisplayedLogChunk: function updateDisplayedLogChunk(logType, allLogEntries, firstIndex, chunkSize) {
      var _this5 = this;

      var max = Math.min(firstIndex + chunkSize, allLogEntries.length);
      var controller = this.get('controller');

      return new Promise(function (resolve, reject) {
        var displayedLogHtml = _this5.get('controller.displayedLogHtml') || '';
        var displayedLogEntries = [];
        var controllerLogType = controller.get('logType') || 'fusor_log';

        if (controllerLogType !== logType) {
          return reject('log type has changed');
        }

        for (var i = firstIndex; i < max; i++) {
          var entry = allLogEntries[i];
          if (_this5.isIncluded(entry)) {
            displayedLogEntries.push(_this5.getHtml(entry));
          }
        }

        resolve(displayedLogEntries.join(''));
      });
    },

    initLog: function initLog() {
      var self = this,
          controller = self.get('controller');

      self.set('pollingActive', true);
      return _ember['default'].RSVP.Promise.all([self.updateForemanTask(), self.updateLog()]).then(function () {
        if (self.get('pollingActive') && controller.get('deploymentInProgress')) {
          self.startPolling();
        } else {
          self.set('pollingActive', false);
        }
      });
    },

    updateLog: function updateLog() {
      var self = this,
          controller = this.get('controller'),
          params = { log_type: controller.get('logType') || 'fusor_log' },
          entries = controller.get('model.' + params.log_type + '.entries');

      if (!entries || entries.length === 0) {
        return self.getFullLog(params);
      }

      params.line_number_gt = entries[entries.length - 1].line_number;
      return self.getJsonLog(params).then(function (response) {
        self.addNewEntries(controller, response);
      }, function (error) {
        self.showError(error);
      });
    },

    updateForemanTask: function updateForemanTask() {
      var self = this,
          deployment = self.modelFor('deployment'),
          controller = this.get('controller');
      return this.store.findRecord('foreman-task', deployment.get('foreman_task_uuid')).then(function (foremanTask) {
        var deploymentInProgress = foremanTask.get('result') === 'pending' && foremanTask.get('progress') !== '1';
        controller.set('deploymentInProgress', deploymentInProgress);
      });
    },

    scheduleAction: function scheduleAction(f) {
      return _ember['default'].run.later(this, function () {
        f.apply(this);
        if (this.get('controller').get('deploymentInProgress')) {
          this.set('timer', this.scheduleAction(f));
        }
      }, 10000);
    },

    startPolling: function startPolling() {
      this.set('pollingActive', true);
      this.set('timer', this.scheduleAction(this.pollingAction));
    },

    stopPolling: function stopPolling() {
      this.set('pollingActive', false);
      _ember['default'].run.cancel(this.get('timer'));
    },

    pollingAction: function pollingAction() {
      var _this6 = this;

      this.updateLog().then(function () {
        return _this6.updateForemanTask();
      });
    },

    getFullLog: function getFullLog(params) {
      var self = this,
          controller = this.get('controller');

      controller.set('isLoading', true);
      return this.getJsonLog(params).then(function (response) {
        self.loadLog(params.log_type, response);
      }, function (error) {
        self.showError(error);
      })['finally'](function () {
        controller.set('isLoading', false);
      });
    },

    loadLog: function loadLog(logType, response) {
      var _this7 = this;

      var promises = [],
          idx = 0,
          chunksize = 200,
          showLogTruncated,
          responseLog = response[logType];

      this.set('controller.searchResultIdx', 0);
      this.set('controller.searchResults', []);
      this.set('controller.model.' + logType + '.path', responseLog.path);
      this.set('controller.model.' + logType + '.entries', []);
      this.set('controller.logPath', responseLog.path);
      this.set('controller.displayedLogHtml', '');
      this.set('controller.newEntries', []);

      showLogTruncated = responseLog.entries[0] && responseLog.entries[0].line_number > 1;
      this.set('controller.showLogTruncated', showLogTruncated);

      while (idx < responseLog.entries.length) {
        promises.push(this.loadLogChunk(logType, responseLog.entries, idx, chunksize));
        idx += chunksize;
      }

      return _ember['default'].RSVP.Promise.all(promises).then(function (values) {
        _this7.sortSearchResults();
        _this7.set('controller.displayedLogHtml', _ember['default'].String.htmlSafe(values.join('')));
        _this7.scrollToEnd();
      });
    },

    loadLogChunk: function loadLogChunk(logType, responseEntries, firstIndex, chunkSize) {
      var _this8 = this;

      var max = Math.min(firstIndex + chunkSize, responseEntries.length);
      var controller = this.get('controller');
      var entries = this.get('controller.model.' + logType + '.entries');
      var displayedLogHtml = this.get('controller.displayedLogHtml') || '';
      var displayedLogEntries = [];

      return new Promise(function (resolve, reject) {
        var controllerLogType = controller.get('logType') || 'fusor_log';

        for (var i = firstIndex; i < max; i++) {
          var entryObject = _ember['default'].Object.create(responseEntries[i]);
          entries.pushObject(entryObject);
          if (controllerLogType === logType && _this8.isIncluded(entryObject)) {
            displayedLogEntries.push(_this8.getHtml(entryObject));
          }
        }

        resolve(displayedLogEntries.join(''));
      });
    },

    getJsonLog: function getJsonLog(params) {
      var self = this,
          token = _ember['default'].$('meta[name="csrf-token"]').attr('content'),
          deploymentId = this.modelFor('deployment').get('id'),
          url = '/fusor/api/v21/unlogged/deployments/' + deploymentId + "/log";

      this.set('requestActive', true);
      return (0, _icAjax['default'])({
        url: url,
        type: "GET",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": token
        },
        data: params
      })['finally'](function () {
        self.set('requestActive', false);
      });
    },

    showError: function showError(error) {
      console.log('ERROR retrieving log');
      console.log(error);
      if (error && error.jqXHR && error.jqXHR.responseJSON && error.jqXHR.responseJSON.displayMessage) {
        this.get('controller').set('errorMessage', error.jqXHR.responseJSON.displayMessage);
      } else {
        this.get('controller').set('errorMessage', 'error retrieving log');
      }
    },

    addNewEntries: function addNewEntries(controller, response) {
      var _this9 = this;

      var newEntries,
          logType,
          promises = [],
          idx = 0,
          chunksize = 200;

      logType = controller.get('logType') || 'fusor_log';

      if (!response[logType] || !response[logType].entries || response[logType].entries.length === 0) {
        return 0;
      }

      newEntries = response[logType].entries;

      while (idx < newEntries.length) {
        promises.push(this.loadLogChunk(logType, newEntries, idx, chunksize));
        idx += chunksize;
      }

      return _ember['default'].RSVP.Promise.all(promises).then(function (values) {
        // concatenating the values to a very large displayedLogHtml hung the UI
        // so we'll add to a list of new entries and display those separately in the
        // template until the next refresh
        _this9.get('controller.newEntries').pushObject(values.join(''));
        _this9.sortSearchResults();
        if (newEntries.length > 0) {
          _this9.scrollToEnd();
        }
      });
    },

    isIncluded: function isIncluded(entry) {
      var controller = this.get('controller');

      switch (entry.get('level')) {
        case 'error':
          return controller.get('errorChecked');
        case 'warn':
          return controller.get('warnChecked');
        case 'info':
          return controller.get('infoChecked');
        case 'debug':
          return controller.get('debugChecked');
        default:
          return true;
      }
    },

    getHtml: function getHtml(entry) {
      var searchExp,
          formattedText,
          searchLogString,
          controller = this.get('controller'),
          searchResults = controller.get('searchResults'),
          entryNumSearchResults = 0,
          entryClass;

      searchLogString = controller.get('searchLogString');
      formattedText = entry.get('text');
      entryClass = entry && entry.level ? 'log-entry log-entry-level-' + entry.level.toLowerCase() : 'log-entry';

      if (searchLogString) {
        searchExp = new RegExp(searchLogString, 'gi');
        formattedText = formattedText.replace(searchExp, function (match) {
          var uniqueIdx = {
            line: entry.line_number,
            idx: entryNumSearchResults,
            cssClass: 'log-entry-search-result-' + entry.line_number + '-' + entryNumSearchResults
          };
          entryNumSearchResults++;
          searchResults.pushObject(uniqueIdx);
          return '<span class="log-entry-search-result ' + uniqueIdx.cssClass + '">' + match + '</span>';
        });
      }

      formattedText = '<p class="' + entryClass + '">' + formattedText + '</p>';
      return formattedText;
    },

    sortSearchResults: function sortSearchResults() {
      var searchResults = this.get('controller.searchResults');

      if (!searchResults) {
        return;
      }

      searchResults.sort(function (resultA, resultB) {
        var cmp = resultA.line - resultB.line;

        if (cmp !== 0) {
          return cmp;
        }

        return resultA.idx - resultB.idx;
      });
    },

    navNextSearchResult: function navNextSearchResult() {
      var _this10 = this;

      _ember['default'].run.later(this, function () {
        _this10.get('controller').send('navNextSearchResult');
      });
    },

    scrollToEnd: function scrollToEnd() {
      var _this11 = this;

      _ember['default'].run.later(this, function () {
        _this11.get('controller').send('scrollToEnd');
      });
    }
  });
});
define('fusor-ember-cli/routes/review/progress/overview', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var deployment = this.modelFor('deployment');
      var deployTaskPromise = this.store.findRecord('foreman-task', deployment.get('foreman_task_uuid'));
      var subtasksOfDeployPromise = this.store.query('foreman-task', { search: "parent_task_id = " + deployment.get('foreman_task_uuid') });
      var self = this;
      return _ember['default'].RSVP.Promise.all([deployTaskPromise, subtasksOfDeployPromise]).then(function (results) {
        var deployTask = results[0];
        var subtasksOfDeploy = results[1];
        var manageContentTask = subtasksOfDeploy.findBy('humanized_name', 'Manage Content');
        var rhevTask = subtasksOfDeploy.findBy('humanized_name', 'Deploy Red Hat Enterprise Virtualization');
        var openstackTask = subtasksOfDeploy.findBy('humanized_name', 'Deploy Red Hat OpenStack Platform overcloud');
        var cfmeTask = subtasksOfDeploy.findBy('humanized_name', 'Deploy CloudForms Management Engine');
        var openshiftTask = subtasksOfDeploy.findBy('humanized_name', 'Deploy OpenShift Enterprise');

        return _ember['default'].RSVP.hash({
          deployTask: deployTask,
          manageContentTask: manageContentTask,
          rhevTask: rhevTask,
          openstackTask: openstackTask,
          cfmeTask: cfmeTask,
          openshiftTask: openshiftTask,
          deployment: deployment
        });
      });
    },

    setupController: function setupController(controller, model) {
      var _this = this;

      controller.set('model', model);
      controller.set('deployTask', model.deployTask);
      controller.set('manageContentTask', model.manageContentTask);
      controller.set('rhevTask', model.rhevTask);
      controller.set('openstackTask', model.openstackTask);
      controller.set('cfmeTask', model.cfmeTask);
      controller.set('openshiftTask', model.openshiftTask);
      controller.set('deployment', model.deployment);
      controller.stopPolling();

      ////////////////////////////////////////////////////////////
      // NOTE: If an error during a pulp sync occurs, the Katello::Sync
      // task scheduled in the Fusor Deploy task tree will throw itself
      // into a skipped/warning state. This ultimately bubbles, sending
      // Fusor::Actions::ManageContent into a paused/error state due to
      // sub-task error.
      //
      // We can push the Deployment task into a clean state by triggering
      // resume on ManageContent. This releases any locks held by the failed
      // task and allows for redeployment, abondonment, or manual content sync.
      //
      // TODO: It's safer for ManageContent to be monitored and resumed
      // serverside once a given deployment has been initiated.
      ////////////////////////////////////////////////////////////
      var contentErrorDiscovered = model.manageContentTask.get('result') === 'error' && model.manageContentTask.get('state') === 'paused';
      ////////////////////////////////////////////////////////////

      if (contentErrorDiscovered) {
        model.deployment.set('has_content_error', true);

        model.deployment.save().then(function () {
          return model.manageContentTask.resume();
        }).then(function (resumeResult) {
          return _this.refresh();
        })['catch'](function (reason) {
          console.log('ERROR: Something broke trying to recover the ManageContentTask');
        });
      } else if (!model.deployment.get('has_content_error')) {
        controller.startPolling();
      }
    },

    activate: function activate() {
      window.scrollTo(0, 0);
    },

    deactivate: function deactivate() {
      this.get('controller').stopPolling();
    },

    actions: {
      refreshModelOnOverviewRoute: function refreshModelOnOverviewRoute() {
        return this.refresh();
      }
    }

  });
});
define('fusor-ember-cli/routes/review/progress', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      return this.transitionTo('review.progress.overview');
    }

  });
});
define('fusor-ember-cli/routes/review/summary', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      var deployment_id = this.modelFor('deployment').get('id');
      return _ember['default'].RSVP.hash({
        deployment: this.store.findRecord('deployment', deployment_id),
        fusorDomainName: this.store.findAll('hostgroup').then(function (hostgroups) {
          return hostgroups.filterBy('name', 'Fusor Base').get('firstObject').get('domain.name');
        })
      });
    },
    setupController: function setupController(controller, model) {
      controller.set('model', model.deployment);
      controller.set('fusorDomainName', model.fusorDomainName);
    }

  });
});
define('fusor-ember-cli/routes/review', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberReview = this.controllerFor('deployment').get('stepNumberReview');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberReview);
    }

  });
});
define('fusor-ember-cli/routes/rhci', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/rhev/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      return this.transitionTo('rhev-setup');
    }
  });
});
define('fusor-ember-cli/routes/rhev-options', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/rhev-setup', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/rhev', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      return this.controllerFor('deployment').set('currentStepNumber', 2);
    }

  });
});
define('fusor-ember-cli/routes/satellite/access-insights', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment');
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/satellite/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    deactivate: function deactivate() {
      var deploymentName = this.get('controller.model.name');
      if (_ember['default'].isPresent(deploymentName)) {
        this.set('controller.model.name', deploymentName.trim());
      }
      return this.send('saveDeployment', null);
    },

    actions: {
      willTransition: function willTransition() {
        return this.controllerFor('deployment').set('isBackToDeployments', false);
      }
    }

  });
});
define('fusor-ember-cli/routes/satellite', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      return this.controllerFor('deployment').set('currentStepNumber', 1);
    },

    deactivate: function deactivate() {
      var deployment = this.modelFor('deployment');
      deployment.save().then(function () {
        return console.log('saved deployment successfully');
      });
    }

  });
});
define('fusor-ember-cli/routes/storage', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/subscriptions/credentials', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showErrorMessage', false);

      // check if org has upstream UUID using Katello V2 API
      var orgID = this.modelFor('deployment').get('organization.id');
      var url = '/katello/api/v2/organizations/' + orgID;
      _ember['default'].$.getJSON(url).then(function (results) {
        if (_ember['default'].isPresent(results.owner_details.upstreamConsumer)) {
          controller.set('organizationUpstreamConsumerUUID', results.owner_details.upstreamConsumer.uuid);
          controller.set('organizationUpstreamConsumerName', results.owner_details.upstreamConsumer.name);
          // if no UUID for deployment, assign it from org UUID
          if (_ember['default'].isBlank(controller.get('model.upstream_consumer_uuid'))) {
            controller.set('upstreamConsumerUuid', results.owner_details.upstreamConsumer.uuid);
            controller.set('upstreamConsumerName', results.owner_details.upstreamConsumer.name);
          }
        } else {
          controller.set('organizationUpstreamConsumerUUID', null);
          controller.set('organizationUpstreamConsumerName', null);
        }
      });

      if (model.get('isAuthenticated')) {
        // verify isAuthenticated: true is accurate, since Satellite session may have changed.
        var urlVerify = '/customer_portal/users/' + model.get('identification') + "/owners";
        _ember['default'].$.getJSON(urlVerify).then(function (results) {
          //do nothing
        }, function (results) {
          model.set('isAuthenticated', false);
          model.save();
        });
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    },

    actions: {
      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      },

      loginPortal: function loginPortal() {
        var self = this;
        var controller = this.controllerFor('subscriptions/credentials');
        var identification = controller.get('model.identification');
        var password = controller.get('password');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        controller.set('nextButtonTitle', "Logging in ...");
        controller.set('disableCredentialsNext', true);
        (0, _icAjax['default'])({
          url: '/customer_portal/login/',
          type: "POST",
          data: JSON.stringify({ username: identification, password: password }),
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token
          }
        }).then(function (response) {
          //show always be {} empty successful 200 response
          self.send('saveCredentials');
        }, function (error) {
          console.log('error on loginPortal');
          controller.set('nextButtonTitle', "Next");
          controller.set('disableCredentialsNext', false);
          return self.send('error');
        });
      },

      logoutPortal: function logoutPortal() {
        var self = this;
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          (0, _icAjax['default'])({
            url: '/customer_portal/logout/',
            type: "POST",
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            }
          }).then(function (response) {
            //show always be {} empty successful 200 response
            self.modelFor('subscriptions').setProperties({ 'isAuthenticated': false,
              'identification': null,
              'ownerKey': null,
              'consumerUUID': null });
            self.modelFor('subscriptions').save();
          }, function (error) {
            console.log('error on loginPortal');
            return self.send('error');
          });
        });
      },

      saveCredentials: function saveCredentials() {
        var self = this;
        var controller = this.controllerFor('subscriptions/credentials');
        var identification = controller.get('model.identification');
        var sessionPortal = this.modelFor('subscriptions');
        if (sessionPortal) {
          sessionPortal.set('identification', identification);
        } else {
          sessionPortal = self.store.createRecord('session-portal', { identification: identification });
        }
        sessionPortal.save().then(function (result) {
          console.log('saved session-portal');
          controller.set('showErrorMessage', false);
          return self.send('authenticatePortal');
        }, function (response) {
          console.log('error saving session-portal');
          controller.set('nextButtonTitle', "Next");
          controller.set('disableCredentialsNext', false);
          return self.send('error');
        });
      },

      authenticatePortal: function authenticatePortal() {

        var controller = this.controllerFor('subscriptions/credentials');
        var identification = controller.get('model.identification');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        var self = this;
        var url = '/customer_portal/users/' + identification + "/owners";

        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          (0, _icAjax['default'])({
            url: url,
            type: "GET",
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            }
          }).then(function (response) {
            var ownerKey = response[0]['key'];
            console.log('owner key is ' + ownerKey);
            var sessionPortal = self.modelFor('subscriptions');
            sessionPortal.set('ownerKey', ownerKey);
            sessionPortal.set('isAuthenticated', true);
            sessionPortal.save().then(function (result) {
              console.log('saved ownerKey in session-portal');
              controller.set('nextButtonTitle', "Next");
              controller.set('disableCredentialsNext', false);
              return self.transitionTo('subscriptions.management-application');
            }, function (response) {
              controller.set('nextButtonTitle', "Next");
              controller.set('disableCredentialsNext', false);
              console.log('error saving ownerKey session-portal');
            });
          }, function (response) {
            console.log('error on authenticatePortal');
            controller.set('nextButtonTitle', "Next");
            controller.set('disableCredentialsNext', false);
            controller.setProperties({ 'showErrorMessage': true,
              'errorMsg': 'Your username or password is incorrect. Please try again.'
            });
          });
        });
      },

      redirectToManagementApplication: function redirectToManagementApplication() {
        return this.transitionTo('subscriptions.management-application');
      }

    }

  });
});
define('fusor-ember-cli/routes/subscriptions/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('subscriptions.credentials');
    }
  });
});
define('fusor-ember-cli/routes/subscriptions/management-application/consumer', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/subscriptions/management-application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      var self = this;
      var deployment = this.modelFor('deployment');
      var sessionPortal = this.modelFor('subscriptions');
      var ownerKey = sessionPortal.get('ownerKey');
      // Use owner key to get consumers (subscription application manangers)
      // GET /customer_portal/owners/#{OWNER['key']}/consumers?type=satellite
      if (deployment.get('isStarted') && deployment.get('upstream_consumer_uuid') && deployment.get('upstream_consumer_name')) {
        var managementApp = _ember['default'].Object.create({ id: deployment.get('upstream_consumer_uuid'),
          name: deployment.get('upstream_consumer_name') });
        return _ember['default'].A([managementApp]);
      } else {
        return this.store.query('management-application', { owner_key: ownerKey }).then(function (results) {
          sessionPortal.set('isAuthenticated', true); // in case go to this route from URL
          sessionPortal.save();
          return results;
        }, function (results) {
          console.log(results);
          sessionPortal.set('isAuthenticated', false);
          sessionPortal.save().then(function () {
            self.controllerFor('subscriptions.credentials').setProperties({
              'showErrorMessage': true,
              'errorMsg': 'You are not currently logged in. Please log in below.'
            });
            return self.transitionTo('subscriptions.credentials');
          });
        });
      }
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showManagementApplications', true);

      var sessionPortal = this.modelFor('subscriptions');
      var deployment = this.modelFor('deployment');
      var upstream_consumer_uuid = deployment.get('upstream_consumer_uuid');

      if (deployment.get('isStarted')) {
        sessionPortal.set('consumerUUID', upstream_consumer_uuid);
        controller.set('sessionPortal', sessionPortal);
      } else if (_ember['default'].isPresent(sessionPortal.get('consumerUUID'))) {
        // set controller state. If this hasn't been chosen before, consumerUUID
        // will correctly be set to null, and there will not be a default selection
        sessionPortal.set('consumerUUID', controller.get('upstreamConsumerUuid'));
      } else {
        // check if org has upstream UUID using Katello V2 API
        var orgID = this.modelFor('deployment').get('organization.id');
        var url = '/katello/api/v2/organizations/' + orgID;
        _ember['default'].$.getJSON(url).then(function (results) {
          if (_ember['default'].isPresent(results.owner_details.upstreamConsumer)) {
            sessionPortal.set('consumerUUID', results.owner_details.upstreamConsumer.uuid);
            sessionPortal.save();
            controller.set('sessionPortal', sessionPortal);
            deployment.set('upstream_consumer_uuid', results.owner_details.upstreamConsumer.uuid);
            deployment.set('upstream_consumer_name', results.owner_details.upstreamConsumer.name);
          } else {
            // nullify sessionPortal.consumerUUID since it's probably a different deployment
            sessionPortal.set('consumerUUID', null);
          }
        }, function (results) {
          // also nullify sessionPortal.consumerUUID in case there was an error
          sessionPortal.set('consumerUUID', null);
        });
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    },

    actions: {
      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      }
    }

  });
});
define('fusor-ember-cli/routes/subscriptions/review-subscriptions', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      // GET /fusor/subscriptions?source=imported&deployment_id=ID_OF_DEPLOYMENT
      var self = this;
      var deploymentId = this.modelFor('deployment').get('id');
      if (this.modelFor('deployment').get('is_disconnected')) {
        return this.store.query('subscription', { deployment_id: deploymentId, source: 'imported' });
      } else {
        // if there are no added subscriptions we need to show what is in the manifest instead.
        return this.store.query('subscription', { deployment_id: deploymentId, source: 'added' }).then(function (results) {

          var noSubsFound = results.get('length') === 0;

          if (noSubsFound) {
            var _ret = (function () {

              var deployment = self.modelFor('deployment');
              var consumerUUID = self.modelFor('deployment').get('upstream_consumer_uuid');

              return {
                v: self.store.query('entitlement', { uuid: consumerUUID }).then(function (entitlements) {

                  var pseudoSubs = entitlements.map(function (pool) {
                    return _ember['default'].Object.create({
                      contract_number: pool.get('contractNumber'),
                      product_name: pool.get('productName'),
                      quantity_to_add: 0,
                      quantity_attached: pool.get('qtyAttached'),
                      source: 'added',
                      start_date: pool.get('startDate'),
                      end_date: pool.get('endDate'),
                      total_quantity: pool.get('quantity'),
                      deployment: deployment
                    });
                  });

                  return pseudoSubs;
                })
              };
            })();

            if (typeof _ret === 'object') return _ret.v;
          } else {
            return results.filter(function (sub) {
              return sub.get('qtySumAttached') > 0;
            });
          }
        });
      }
    }

  });
});
define('fusor-ember-cli/routes/subscriptions/select-subscriptions', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      // GET /fusor/subscriptions?source=added&deployment_id=ID_OF_DEPLOYMENT
      var deploymentId = this.modelFor('deployment').get('id');
      return this.store.query('subscription', { deployment_id: deploymentId, source: 'added' });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var self = this;
      var deployment = this.modelFor('deployment');
      var deploymentId = deployment.get('id');
      var isDisconnected = this.controllerFor('deployment').get('isDisconnected');

      if (!this.controllerFor('deployment').get('isStarted')) {
        controller.set('isLoading', true);
        controller.set('errorMsg', null);

        var consumerUUID = this.modelFor('deployment').get('upstream_consumer_uuid');

        var entitlements = this.store.query('entitlement', { uuid: consumerUUID });
        var pools = this.store.query('pool', { uuid: consumerUUID });
        var subscriptions = this.store.query('subscription', { deployment_id: deploymentId, source: 'added' });

        return _ember['default'].RSVP.Promise.all([entitlements, pools, subscriptions]).then(function (results) {
          var entitlementsResults = results[0];
          var allPoolsResults = results[1];
          var subscriptionResults = results[2];
          self.modelFor('subscriptions').set('isAuthenticated', true); // in case go to this route from URL
          allPoolsResults.forEach(function (pool) {
            pool.set('qtyAttached', 0); //default for loop

            entitlementsResults.forEach(function (entitlement) {
              if (entitlement.get('poolId') === pool.get('id')) {
                pool.incrementProperty('qtyAttached', entitlement.get('quantity'));
              }
            });

            //create Fusor::Subscription records if they don't exist
            var matchingSubscription = subscriptionResults.filterBy('contract_number', pool.get('contractNumber')).get('firstObject');
            if (_ember['default'].isBlank(matchingSubscription)) {
              var sub = self.store.createRecord('subscription', { 'contract_number': pool.get('contractNumber'),
                'product_name': pool.get('productName'),
                'quantity_to_add': 0,
                'quantity_attached': pool.get('qtyAttached'),
                'source': 'added',
                'start_date': pool.get('startDate'),
                'end_date': pool.get('endDate'),
                'total_quantity': pool.get('quantity'),
                'deployment': deployment
              });
              sub.save();
            } else {
              // update quantity_attached is it may have changed since record was created
              matchingSubscription.set('quantity_attached', pool.get('qtyAttached'));
              matchingSubscription.save();
            }
          });
          controller.set('subscriptionEntitlements', _ember['default'].A(results[0]));
          controller.set('subscriptionPools', _ember['default'].A(results[1]));
          return controller.set('isLoading', false);
        }, function (error) {
          self.modelFor('subscriptions').save().then(function () {
            controller.set('errorMsg', error.message);
            return controller.set('isLoading', false);
          });
        });
      }
    },

    deactivate: function deactivate() {
      // uncommeting causes inFlight issues
      // return this.send('saveSubscriptions', null);
    },

    actions: {

      saveSubscription: function saveSubscription(pool, qty) {
        // get saved subscriptions and update quantity
        var deployment = this.modelFor('deployment');
        var deploymentId = this.modelFor('deployment').get('id');
        var self = this;
        this.store.query('subscription', { deployment_id: deploymentId, source: 'added' }).then(function (subscriptionResults) {
          var matchingSubscription = subscriptionResults.filterBy('contract_number', pool.get('contractNumber')).get('firstObject');
          if (_ember['default'].isPresent(matchingSubscription)) {
            matchingSubscription.set('quantity_to_add', qty);
            matchingSubscription.save();
          }
        });
      },

      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      }
    }

  });
});
define('fusor-ember-cli/routes/subscriptions', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      var self = this;
      return this.store.findAll('session-portal').then(function (results) {
        if (_ember['default'].isBlank(results)) {
          return self.store.createRecord('session-portal');
        } else {
          return results.get('firstObject');
        }
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberSubscriptions = this.controllerFor('deployment').get('stepNumberSubscriptions');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberSubscriptions);
    },

    actions: {
      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      }
    }
  });
});
define('fusor-ember-cli/routes/undercloud-deploy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.modelFor('deployment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showAlertMessage', false);
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/where-install', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);

      var isRhev = this.controllerFor('deployment').get('isRhev');
      var isOpenStack = this.controllerFor('deployment').get('isOpenStack');
      if (isRhev && !isOpenStack) {
        return this.controllerFor('deployment').set('model.cfme_install_loc', 'RHEV');
      } else if (!isRhev && isOpenStack) {
        return this.controllerFor('deployment').set('model.cfme_install_loc', 'OpenStack');
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/serializers/application', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].JSONAPISerializer.extend({
    isNewSerializerAPI: true,

    // disable dasherize transformation
    keyForAttribute: function keyForAttribute(attr) {
      return Ember.String.underscore(attr);
    },

    keyForRelationship: function keyForRelationship(rawKey) {
      return Ember.String.underscore(rawKey);
    }

  });
});
define('fusor-ember-cli/serializers/deployment-plan-parameter', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].RESTSerializer.extend({
        primaryKey: 'name'
    });
});
define('fusor-ember-cli/serializers/deployment-plan', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].RESTSerializer.extend(_emberData['default'].EmbeddedRecordsMixin, {
        primaryKey: 'name',
        attrs: {
            parameters: { embedded: 'always' },
            roles: { embedded: 'always' }
        }
    });
});
define('fusor-ember-cli/serializers/deployment-role', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].RESTSerializer.extend({
        primaryKey: 'uuid'
    });
});
define('fusor-ember-cli/serializers/entitlement', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({

    // add root node 'entitlements' that customer protal JSON response doesn't return
    extractArray: function extractArray(store, type, payload) {
      payload = { entitlements: payload };
      return this._super(store, type, payload);
    },

    // remove attribute keys in the json response that aren't in the model management application
    normalizeHash: {
      entitlements: function entitlements(hash) {
        delete hash.consumer;
        delete hash.certificates;
        // move attributes within the 'pool' node to main level
        hash.poolId = hash.pool.id;
        hash.poolType = hash.pool.type;
        hash.poolQuantity = hash.pool.quantity;
        hash.subscriptionId = hash.pool.subscriptionId;
        hash.activeSubscription = hash.pool.activeSubscription;
        hash.contractNumber = hash.pool.contractNumber;
        hash.accountNumber = hash.pool.accountNumber;
        hash.consumed = hash.pool.consumed;
        hash.exported = hash.pool.exported;
        hash.consumed = hash.pool.consumed;
        hash.productName = hash.pool.productName;
        delete hash.pool;
        return hash;
      }
    }

  });
});
define('fusor-ember-cli/serializers/management-application', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({

    primaryKey: 'uuid',

    // add root node 'management_applications' that customer protal JSON response doesn't return
    extractArray: function extractArray(store, type, payload) {
      payload = { management_applications: payload };
      return this._super(store, type, payload);
    },

    // remove attribute keys in the json response that aren't in the model management application
    normalizeHash: {
      management_applications: function management_applications(hash) {
        delete hash.releaseVer;
        delete hash.type;
        delete hash.owner;
        delete hash.installedProducts;
        delete hash.guestIds;
        delete hash.capabilities;
        return hash;
      }
    }

  });

  // These objects are in the JSON response but removed in the serializer
  // and not saved in the store
  //
  // "releaseVer": {
  //     "releaseVer": null
  // },
  // "type": {
  //     "id": "9",
  //     "label": "satellite",
  //     "manifest": true
  // },
  // "owner": {
  //     "id": "8a85f9814a192108014a1adef5826b38",
  //     "key": "7473998",
  //     "displayName": "7473998",
  //     "href": "/owners/7473998"
  // },
  // "installedProducts": [],
  // "guestIds": [],
  // "capabilities": [],
});
define('fusor-ember-cli/serializers/node', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].RESTSerializer.extend({
        primaryKey: 'uuid'
    });
});
define('fusor-ember-cli/serializers/pool', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({

    // add root node 'entitlements' that customer protal JSON response doesn't return
    extractArray: function extractArray(store, type, payload) {
      payload = { pools: payload };
      return this._super(store, type, payload);
    },

    // remove attribute keys in the json response that aren't in the model management application
    normalizeHash: {
      management_applications: function management_applications(hash) {
        delete hash.releaseVer;
        delete hash.type;
        delete hash.owner;
        delete hash.installedProducts;
        delete hash.guestIds;
        delete hash.capabilities;
        return hash;
      }
    }

  });
});
define('fusor-ember-cli/serializers/session-portal', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({});
});
define('fusor-ember-cli/service-tests/ember-devtools', ['exports', 'ember-devtools/service-tests/ember-devtools'], function (exports, _emberDevtoolsServiceTestsEmberDevtools) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberDevtoolsServiceTestsEmberDevtools['default'];
    }
  });
});
define('fusor-ember-cli/services/drag-coordinator', ['exports', 'ember-drag-drop/services/drag-coordinator'], function (exports, _emberDragDropServicesDragCoordinator) {
  exports['default'] = _emberDragDropServicesDragCoordinator['default'];
});
define('fusor-ember-cli/services/ember-devtools', ['exports', 'ember'], function (exports, _ember) {

  var map = _ember['default'].ArrayPolyfills.map;
  var $ = _ember['default'].$;

  exports['default'] = _ember['default'].Object.extend({
    init: function init() {
      this.global = this.global || window;
      this.console = this.console || window.console;
      this.registry = this._registry();
      if (DS !== undefined) {
        this.store = this.container.lookup('store:main');
        this.typeMaps = this.store.typeMaps;
      }
    },
    consoleLog: function consoleLog() {
      this.console.log.apply(this.console, arguments);
    },
    app: function app(name) {
      name = name || 'main';
      return this.container.lookup('application:' + name);
    },
    route: function route(name) {
      name = name || this.currentRouteName();
      return this.container.lookup('route:' + name);
    },
    controller: function controller(name) {
      name = name || this.currentRouteName();
      return this.container.lookup('controller:' + name);
    },
    model: function model(name) {
      var controller = this.controller(name);
      return controller && controller.get('model');
    },
    service: function service(name) {
      return this.lookup('service:' + name);
    },
    router: function router(name) {
      name = name || 'main';
      return this.container.lookup('router:' + name).get('router');
    },
    routes: function routes() {
      return _ember['default'].keys(this.router().recognizer.names);
    },
    view: function view(idDomElementOrSelector) {
      if (typeof idDomElementOrSelector === 'object') {
        idDomElementOrSelector = idDomElementOrSelector.id;
      }
      return _ember['default'].View.views[idDomElementOrSelector] || this.views(idDomElementOrSelector)[0];
    },
    views: function views(selectorOrName) {
      var views = _ember['default'].View.views;
      var viewClass = this.lookupFactory('component:' + selectorOrName) || this.lookupFactory('view:' + selectorOrName);

      if (viewClass) {
        return Object.keys(views).map(function (id) {
          return views[id];
        }).filter(function (view) {
          return view instanceof viewClass;
        });
      }

      return map.call($(selectorOrName), function (element) {
        return views[element.id];
      });
    },
    component: function component() {
      return this.view.apply(this, arguments);
    },
    components: function components() {
      return this.views.apply(this, arguments);
    },
    currentRouteName: function currentRouteName() {
      return this.controller('application').get('currentRouteName');
    },
    currentPath: function currentPath() {
      return this.controller('application').get('currentPath');
    },
    log: function log(promise, property, getEach) {
      var self = this;
      return promise.then(function (value) {
        self.global.$E = value;
        if (property) {
          value = value[getEach ? 'getEach' : 'get'].call(value, property);
        }
        self.consoleLog(value);
      }, function (err) {
        self.console.error(err);
      });
    },
    lookup: function lookup(name) {
      return this.container.lookup(name);
    },
    lookupFactory: function lookupFactory(name) {
      return this.container.lookupFactory(name);
    },
    containerNameFor: function containerNameFor(object) {
      var cache = this.container.cache || this.container._defaultContainer.cache;
      var keys = Object.keys(cache);
      for (var i = 0; i < keys.length; i++) {
        if (cache[keys[i]] === object) return keys[i];
      }
    },
    inspect: _ember['default'].inspect,
    logResolver: function logResolver(bool) {
      bool = typeof bool === 'undefined' ? true : bool;
      _ember['default'].ENV.LOG_MODULE_RESOLVER = bool;
    },
    logAll: function logAll(bool) {
      bool = typeof bool === 'undefined' ? true : bool;
      var app = this.app();
      app.LOG_ACTIVE_GENERATION = bool;
      app.LOG_VIEW_LOOKUPS = bool;
      app.LOG_TRANSITIONS = bool;
      app.LOG_TRANSITIONS_INTERNAL = bool;
      this.logResolver(bool);
    },
    globalize: function globalize() {
      var self = this;
      var props = ['app', 'container', 'registry', 'store', 'typeMaps', 'route', 'controller', 'model', 'service', 'routes', 'view', 'currentRouteName', 'currentPath', 'log', 'lookup', 'lookupFactory', 'containerNameFor', 'inspect', 'logResolver', 'logAll'];
      // don't stomp on pre-existing global vars
      var skipGlobalize = this.constructor.skipGlobalize;
      if (skipGlobalize === null) {
        skipGlobalize = this.constructor.skipGlobalize = props.filter(function (prop) {
          return !_ember['default'].isNone(self.global[prop]);
        });
      }
      props.map(function (name) {
        if (skipGlobalize.indexOf(name) !== -1) return;
        var prop = self[name];
        if (typeof prop === 'function') {
          prop = function () {
            return self[name].apply(self, arguments);
          };
        }
        self.global[name] = prop;
      });
    },
    _registry: function _registry() {
      var registry;
      if (this.container._registry) {
        registry = this.container._registry.registrations;
      }
      return registry || this.container.registrations || this.container.registry.dict || this.container.registry;
    }
  }).reopenClass({
    skipGlobalize: null
  });
});
/* global DS */
define('fusor-ember-cli/services/validations', ['exports', 'ember'], function (exports, _ember) {

  var set = _ember['default'].set;

  exports['default'] = _ember['default'].Service.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });
});
define("fusor-ember-cli/templates/abandon-deployment-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/abandon-deployment-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/abandon-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Abandon QCI Deployment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [3, 8], [5, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/abandon-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Are you sure that you want to abandon this deployment?\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 8
                },
                "end": {
                  "line": 16,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/abandon-deployment-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          No\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 19,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/abandon-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-danger");
            var el2 = dom.createTextNode("Yes, Abandon Deployment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [2]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createElementMorph(element0);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "btn btn-default"], 0, null, ["loc", [null, [14, 8], [16, 29]]]], ["element", "action", ["executeAbandonment"], [], ["loc", [null, [17, 16], [17, 47]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/abandon-deployment-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [2, 4], [7, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [9, 4], [11, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [13, 4], [19, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/abandon-deployment-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "abandonDeploymentModal", "open-if", ["subexpr", "@mut", [["get", "isAbandonModalOpen", ["loc", [null, [1, 64], [1, 82]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "isCloseModal", ["loc", [null, [1, 92], [1, 104]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [20, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/add-node-registration", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Add Node(s) to ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [3, 4], [5, 25]]]], ["content", "nodeInfo.address", ["loc", [null, [6, 43], [6, 63]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "add-node-uneditable-input-container");
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
              return morphs;
            },
            statements: [["content", "nodeDriverHumanized", ["loc", [null, [22, 67], [22, 90]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "add-node-uneditable-input-container");
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
              return morphs;
            },
            statements: [["content", "nodeInfo.address", ["loc", [null, [28, 67], [28, 87]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "add-node-uneditable-input-container");
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
              return morphs;
            },
            statements: [["content", "nodeInfo.username", ["loc", [null, [35, 67], [35, 88]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 48,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "new-node-registration-mac-address", [], ["macAddress", ["subexpr", "@mut", [["get", "macAddress", ["loc", [null, [47, 59], [47, 69]]]]], [], []], "index", ["subexpr", "@mut", [["get", "key", ["loc", [null, [47, 76], [47, 79]]]]], [], []]], ["loc", [null, [47, 12], [47, 81]]]]],
            locals: ["macAddress", "key"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 59,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createTextNode("Enter information for additional nodes that should be registered to ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-offset-1 col-xs-11");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("form");
            dom.setAttribute(el3, "class", "form-horizontal add-node-form");
            var el4 = dom.createTextNode("\n\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "row");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "col-xs-offset-3 col-xs-9");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("button");
            dom.setAttribute(el5, "type", "button");
            dom.setAttribute(el5, "id", "manualAddMacAddressButton");
            dom.setAttribute(el5, "class", "btn btn-primary");
            var el6 = dom.createElement("i");
            dom.setAttribute(el6, "class", "fa fa-plus");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" Add Another Node\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [3, 1]);
            var element3 = dom.childAt(element2, [1]);
            var element4 = dom.childAt(element2, [3, 1, 1]);
            var morphs = new Array(7);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 1, 1);
            morphs[1] = dom.createMorphAt(element3, 1, 1);
            morphs[2] = dom.createMorphAt(element3, 3, 3);
            morphs[3] = dom.createMorphAt(element3, 5, 5);
            morphs[4] = dom.createMorphAt(element3, 7, 7);
            morphs[5] = dom.createMorphAt(element3, 9, 9);
            morphs[6] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [["content", "nodeInfo.address", ["loc", [null, [12, 79], [12, 99]]]], ["block", "base-f", [], ["label", "Driver", "labelSize", "col-xs-3", "inputSize", "col-xs-4"], 0, null, ["loc", [null, [19, 10], [23, 21]]]], ["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "newNodeAddressLabel", ["loc", [null, [25, 26], [25, 45]]]]], [], []], "labelSize", "col-xs-3", "inputSize", "col-xs-4"], 1, null, ["loc", [null, [25, 10], [29, 21]]]], ["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "newNodeUsernameLabel", ["loc", [null, [32, 26], [32, 46]]]]], [], []], "labelSize", "col-xs-3", "inputSize", "col-xs-4"], 2, null, ["loc", [null, [32, 10], [36, 21]]]], ["inline", "text-f", [], ["cssId", "manualPasswordInput", "label", ["subexpr", "@mut", [["get", "newNodePasswordLabel", ["loc", [null, [39, 26], [39, 46]]]]], [], []], "type", "password", "labelSize", "form-label-nowrap col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "nodeInfo.password", ["loc", [null, [43, 26], [43, 43]]]]], [], []], "isRequired", true], ["loc", [null, [38, 10], [44, 37]]]], ["block", "each", [["get", "nodeInfo.macAddresses", ["loc", [null, [46, 18], [46, 39]]]]], [], 3, null, ["loc", [null, [46, 10], [48, 19]]]], ["element", "action", ["addMacAddress"], [], ["loc", [null, [52, 89], [52, 115]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 2
              },
              "end": {
                "line": 70,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "id", "addNodeCancelButton");
            dom.setAttribute(el1, "class", "btn btn-default delete-node-cancel-button");
            var el2 = dom.createTextNode("\n      Cancel\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "id", "addNodeSubmitButton");
            dom.setAttribute(el1, "class", "btn btn-primary new-node-submit-button");
            var el2 = dom.createTextNode("\n      Register\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createAttrMorph(element1, 'disabled');
            morphs[2] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["cancelAddNodes"], [], ["loc", [null, [63, 62], [63, 89]]]], ["attribute", "disabled", ["get", "disableNewNodesSubmit", ["loc", [null, [67, 23], [67, 44]]]]], ["element", "action", ["submitAddNodes"], [], ["loc", [null, [67, 47], [67, 74]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 71,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [2, 2], [7, 21]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [9, 2], [59, 20]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [61, 2], [70, 22]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 71,
            "column": 13
          }
        },
        "moduleName": "fusor-ember-cli/templates/add-node-registration.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "addNodeModal", "closeIfClickedOutside", ["subexpr", "@mut", [["get", "handleOutsideClick", ["loc", [null, [1, 68], [1, 86]]]]], [], []], "open-if", ["subexpr", "@mut", [["get", "openAddNodeRegistrationModal", ["loc", [null, [1, 95], [1, 123]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "closeAddNodeRegistrationModal", ["loc", [null, [1, 133], [1, 162]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [71, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["mainmenu"], [], ["loc", [null, [2, 2], [2, 24]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/application.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "isEmberCliMode", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isContainer", ["loc", [null, [5, 17], [5, 28]]]], "container", "container-fluid"], [], ["loc", [null, [5, 12], [5, 60]]]]]]], ["content", "outlet", ["loc", [null, [6, 2], [6, 12]]]], ["content", "error-modal", ["loc", [null, [9, 0], [9, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/assign-nodes", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n         \n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 8], [7, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 16,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "spinner-text");
            var el2 = dom.createTextNode("\n    Loading...\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 24,
                      "column": 12
                    },
                    "end": {
                      "line": 26,
                      "column": 12
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "deployment-role", [], ["role", ["subexpr", "@mut", [["get", "role", ["loc", [null, [25, 37], [25, 41]]]]], [], []], "edit", "editRole"], ["loc", [null, [25, 14], [25, 59]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 23,
                    "column": 10
                  },
                  "end": {
                    "line": 27,
                    "column": 10
                  }
                },
                "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "draggable-object", [], ["content", ["subexpr", "@mut", [["get", "role", ["loc", [null, [24, 40], [24, 44]]]]], [], []]], 0, null, ["loc", [null, [24, 12], [26, 33]]]]],
              locals: ["role"],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 28,
                    "column": 10
                  },
                  "end": {
                    "line": 30,
                    "column": 10
                  }
                },
                "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "deployment-roles-all-assigned");
                var el2 = dom.createTextNode("All deployment roles have been assigned.");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 6
                },
                "end": {
                  "line": 32,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createMorphAt(element0, 1, 1);
              morphs[2] = dom.createMorphAt(element0, 2, 2);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["row col-md-12 deployment-roles deployment-roles-unassigned deployment-roles-assignable ", ["get", "droppableClass", ["loc", [null, [22, 109], [22, 123]]]]]]], ["block", "each", [["get", "unassignedRoles", ["loc", [null, [23, 18], [23, 33]]]]], [], 0, null, ["loc", [null, [23, 10], [27, 19]]]], ["block", "if", [["get", "allRolesAssigned", ["loc", [null, [28, 16], [28, 32]]]]], [], 1, null, ["loc", [null, [28, 10], [30, 17]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 41,
                    "column": 20
                  },
                  "end": {
                    "line": 51,
                    "column": 19
                  }
                },
                "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "node-profile", [], ["profile", ["subexpr", "@mut", [["get", "profile", ["loc", [null, [42, 45], [42, 52]]]]], [], []], "nodes", ["subexpr", "@mut", [["get", "nodes", ["loc", [null, [43, 43], [43, 48]]]]], [], []], "plan", ["subexpr", "@mut", [["get", "plan", ["loc", [null, [44, 42], [44, 46]]]]], [], []], "doAssign", true, "assignRole", "assignRole", "unassignRole", "unassignRole", "editRole", "editRole", "setRoleCount", "setRoleCount", "removeRole", "removeRole"], ["loc", [null, [42, 22], [50, 62]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 51,
                    "column": 19
                  },
                  "end": {
                    "line": 60,
                    "column": 19
                  }
                },
                "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "node-profile", [], ["profile", ["subexpr", "@mut", [["get", "profile", ["loc", [null, [52, 45], [52, 52]]]]], [], []], "plan", ["subexpr", "@mut", [["get", "plan", ["loc", [null, [53, 42], [53, 46]]]]], [], []], "doAssign", true, "assignRole", "assignRole", "unassignRole", "unassignRole", "editRole", "editRole", "setRoleCount", "setRoleCount", "removeRole", "removeRole"], ["loc", [null, [52, 22], [59, 62]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-7");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                  ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["get", "nodes", ["loc", [null, [41, 26], [41, 31]]]]], [], 0, 1, ["loc", [null, [41, 20], [60, 26]]]]],
            locals: ["profile"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 0
              },
              "end": {
                "line": 80,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-12");
            dom.setAttribute(el2, "style", "float: left;");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h2");
            dom.setAttribute(el3, "style", "vertical-align: bottom;display:inline-block;");
            var el4 = dom.createTextNode("Available Deployment Roles");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "class", "edit-global-config");
            var el4 = dom.createTextNode(" Edit Global Configuration");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment(" /col ");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment(" /row ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-12");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h2");
            var el4 = dom.createTextNode("Flavors");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-sm-6 col-md-5");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment(" a network topology is planned for this space ");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var element2 = dom.childAt(element1, [3]);
            var morphs = new Array(7);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element1, 5, 5);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 3, 3);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
            morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
            morphs[6] = dom.createMorphAt(fragment, 12, 12, contextualElement);
            return morphs;
          },
          statements: [["element", "action", ["editGlobalServiceConfig"], [], ["loc", [null, [20, 36], [20, 72]]]], ["block", "draggable-object-target", [], ["action", "unassignRole"], 0, null, ["loc", [null, [21, 6], [32, 34]]]], ["block", "each", [["get", "profiles", ["loc", [null, [38, 18], [38, 26]]]]], [], 1, null, ["loc", [null, [38, 10], [63, 19]]]], ["inline", "cancel-back-next", [], ["backRouteName", "register-nodes", "disableBack", false, "nextRouteName", "openstack.overcloud", "disableNext", ["subexpr", "@mut", [["get", "disableAssignNodesNext", ["loc", [null, [73, 33], [73, 55]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [74, 35], [74, 44]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [75, 36], [75, 50]]]]], [], []]], ["loc", [null, [70, 2], [75, 52]]]], ["inline", "partial", ["edit-deployment-role"], [], ["loc", [null, [77, 2], [77, 36]]]], ["inline", "partial", ["edit-global-service-config"], [], ["loc", [null, [78, 2], [78, 42]]]], ["inline", "loading-spinner", [], ["show", ["subexpr", "@mut", [["get", "showLoadingSpinner", ["loc", [null, [79, 25], [79, 43]]]]], [], []], "text", ["subexpr", "@mut", [["get", "loadingSpinnerText", ["loc", [null, [79, 49], [79, 67]]]]], [], []]], ["loc", [null, [79, 2], [79, 69]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 80,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "showSpinner", ["loc", [null, [11, 10], [11, 21]]]]], [], 0, 1, ["loc", [null, [11, 0], [80, 0]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/assign-nodes.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMsg", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [80, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/cancel-deployment-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/cancel-deployment-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/cancel-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Cancel QCI Deployment - ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [3, 8], [5, 29]]]], ["content", "deploymentName", ["loc", [null, [6, 56], [6, 74]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/cancel-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        What would you like to do with this deployment?\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/cancel-deployment-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          Continue Working\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 23,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/cancel-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("\n          Exit and Delete\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("\n          Exit and Save\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["element", "action", ["cancelAndDeleteDeployment"], [], ["loc", [null, [14, 30], [14, 68]]]], ["element", "action", ["saveAndCancelDeployment"], [], ["loc", [null, [17, 30], [17, 66]]]], ["block", "em-modal-toggler", [], ["class", "btn btn-primary"], 0, null, ["loc", [null, [20, 8], [22, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/cancel-deployment-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [2, 4], [7, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [9, 4], [11, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [13, 4], [23, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/cancel-deployment-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "cancelDeploymentModal", "open-if", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [1, 63], [1, 72]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [24, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/cloudforms/cfme-configuration", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/cloudforms/cfme-configuration.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form form-horizontal");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["label", "Root Password", "type", "password", "value", ["subexpr", "@mut", [["get", "cfmeRootPassword", ["loc", [null, [4, 59], [4, 75]]]]], [], []], "cssId", "cfme_root_password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [7, 24], [7, 33]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [8, 25], [8, 42]]]]], [], []], "help-inline", "Applies to root user account for this CloudForms instance", "placeholder", "Must be 8 or more characters"], ["loc", [null, [4, 6], [10, 59]]]], ["inline", "text-f", [], ["label", "Confirm Root Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmCfmeRootPassword", ["loc", [null, [12, 67], [12, 90]]]]], [], []], "cssId", "confirm_cfme_root_password", "isRequired", true, "validator", ["subexpr", "@mut", [["get", "confirmCfmeRootPasswordValidator", ["loc", [null, [15, 25], [15, 57]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [16, 24], [16, 33]]]]], [], []], "placeholder", "Must match root password"], ["loc", [null, [12, 6], [17, 55]]]], ["inline", "text-f", [], ["label", "Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "cfmeAdminPassword", ["loc", [null, [19, 60], [19, 77]]]]], [], []], "cssId", "cfme_admin_password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [22, 24], [22, 33]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [23, 25], [23, 42]]]]], [], []], "help-inline", "Applies to admin user account for CloudForms web UI", "placeholder", "Must be 8 or more characters"], ["loc", [null, [19, 6], [25, 59]]]], ["inline", "text-f", [], ["label", "Confirm Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmCfmeAdminPassword", ["loc", [null, [27, 68], [27, 92]]]]], [], []], "cssId", "confirm_cfme_admin_password", "isRequired", true, "validator", ["subexpr", "@mut", [["get", "confirmCfmeAdminPasswordValidator", ["loc", [null, [30, 25], [30, 58]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [31, 24], [31, 33]]]]], [], []], "placeholder", "Must match admin password"], ["loc", [null, [27, 6], [32, 56]]]], ["inline", "cancel-back-next", [], ["backRouteName", "where-install", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "nextRouteNameAfterCFME", ["loc", [null, [40, 33], [40, 55]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextCfmeConfiguration", ["loc", [null, [41, 31], [41, 59]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [42, 33], [42, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [43, 34], [43, 48]]]]], [], []]], ["loc", [null, [38, 0], [43, 50]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/cloudforms/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/cloudforms/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/cloudforms", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/cloudforms.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("A. Installation Location");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberCloudForms", ["loc", [null, [4, 11], [4, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/cloudforms.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("B. Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberCloudForms", ["loc", [null, [8, 11], [8, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/cloudforms.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["where-install"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabCFWhere", ["loc", [null, [3, 55], [3, 72]]]]], [], []]], 0, null, ["loc", [null, [3, 6], [5, 18]]]], ["block", "link-to", ["cloudforms.cfme-configuration"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabCFConfiguration", ["loc", [null, [7, 71], [7, 96]]]]], [], []]], 1, null, ["loc", [null, [7, 6], [9, 18]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/cloudforms.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/accordion-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/accordion-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [8, 6], [8, 15]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/accordion-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        dom.setAttribute(el3, "class", "accordion-item-title");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createAttrMorph(element2, 'class');
        morphs[2] = dom.createMorphAt(element1, 3, 3);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["openItem"], [], ["loc", [null, [3, 37], [3, 58]]]], ["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "isOpen", ["loc", [null, [4, 22], [4, 28]]]], "fa-angle-down", "fa-angle-right"], [], ["loc", [null, [4, 17], [4, 63]]]]]]], ["content", "name", ["loc", [null, [5, 12], [5, 20]]]], ["block", "if", [["get", "isOpen", ["loc", [null, [7, 10], [7, 16]]]]], [], 0, null, ["loc", [null, [7, 4], [9, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/auto-node-registration-mac-address", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "view", ["select"], ["id", ["subexpr", "@mut", [["get", "selectId", ["loc", [null, [10, 25], [10, 33]]]]], [], []], "class", "form-control new-node-detect-select", "prompt", "Select an interface", "disabled", ["subexpr", "@mut", [["get", "deselected", ["loc", [null, [11, 46], [11, 56]]]]], [], []], "content", ["subexpr", "@mut", [["get", "host.macAddresses", ["loc", [null, [11, 65], [11, 82]]]]], [], []], "value", ["subexpr", "@mut", [["get", "host.value", ["loc", [null, [11, 89], [11, 99]]]]], [], []]], ["loc", [null, [10, 6], [11, 101]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["new-node-detect-mac-address new-node-form-span ", ["get", "deselectedTextClass", ["loc", [null, [13, 68], [13, 87]]]]]]], ["content", "host.value", ["loc", [null, [13, 91], [13, 105]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form-inline new-node-detect-form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox new-node-detect-checkbox");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "class", "control-label new-node-detect-hostnumber");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(".\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element2, [5]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createAttrMorph(element3, 'class');
        morphs[4] = dom.createMorphAt(element3, 0, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "name", "autoDetectedNodeSelected", "checked", ["subexpr", "@mut", [["get", "host.selected", ["loc", [null, [3, 75], [3, 88]]]]], [], []]], ["loc", [null, [3, 11], [3, 90]]]], ["content", "hostNumber", ["loc", [null, [7, 6], [7, 20]]]], ["block", "if", [["get", "multipleMacAddresses", ["loc", [null, [9, 10], [9, 30]]]]], [], 0, 1, ["loc", [null, [9, 4], [14, 11]]]], ["attribute", "class", ["concat", ["new-node-detect-hostname new-node-form-span ", ["get", "deselectedTextClass", ["loc", [null, [15, 63], [15, 82]]]]]]], ["content", "host.name", ["loc", [null, [15, 86], [15, 99]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/base-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 10
            },
            "end": {
              "line": 8,
              "column": 10
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/base-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "errorForValidation");
          var el2 = dom.createTextNode("*");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 8
            },
            "end": {
              "line": 16,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/base-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "pficon fa fa-info-circle rhci-popover-button");
          dom.setAttribute(el1, "data-toggle", "popover");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["doNothing"], ["bubbles", false], ["loc", [null, [12, 18], [12, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/base-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("         ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n           ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n         ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "unitsClassSize", ["loc", [null, [24, 23], [24, 37]]]]]]], ["content", "unitsLabel", ["loc", [null, [25, 11], [25, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 6
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/base-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "clearfix");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "class");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "help-block");
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element2, [3]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createMorphAt(element4, 1, 1);
        morphs[3] = dom.createMorphAt(element4, 3, 3);
        morphs[4] = dom.createMorphAt(element3, 3, 3);
        morphs[5] = dom.createAttrMorph(element5, 'class');
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element2, 5, 5);
        morphs[8] = dom.createMorphAt(dom.childAt(element2, [7]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["form-group ", ["subexpr", "if", [["get", "hasError", ["loc", [null, [2, 31], [2, 39]]]], "has-error"], [], ["loc", [null, [2, 26], [2, 53]]]]]]], ["attribute", "class", ["concat", ["control-label ", ["get", "labelClassSize", ["loc", [null, [4, 36], [4, 50]]]], " ", ["get", "class", ["loc", [null, [4, 55], [4, 60]]]]]]], ["block", "if", [["get", "isRequired", ["loc", [null, [6, 16], [6, 26]]]]], [], 0, null, ["loc", [null, [6, 10], [8, 17]]]], ["content", "label", ["loc", [null, [9, 10], [9, 19]]]], ["block", "if", [["get", "showHelpPopover", ["loc", [null, [11, 14], [11, 29]]]]], [], 1, null, ["loc", [null, [11, 8], [16, 15]]]], ["attribute", "class", ["concat", [["get", "inputClassSize", ["loc", [null, [19, 20], [19, 34]]]]]]], ["content", "yield", ["loc", [null, [20, 8], [20, 17]]]], ["block", "if", [["get", "showUnits", ["loc", [null, [23, 12], [23, 21]]]]], [], 2, null, ["loc", [null, [23, 6], [27, 13]]]], ["content", "help-inline", ["loc", [null, [30, 7], [30, 22]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/components/base-popover", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/base-popover.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/button-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 9
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/button-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 0], [1, 9]]]], ["content", "yield", ["loc", [null, [2, 0], [2, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/button-selection", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/button-selection.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "label", ["loc", [null, [3, 8], [3, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/button-selection.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tool-tip", [], ["title", "Not enough available resources in environment"], 0, null, ["loc", [null, [2, 4], [4, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/button-selection.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [6, 4], [6, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/button-selection.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "disabled", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/cancel-back-next", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 3
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default");
          var el2 = dom.createTextNode("\n        Cancel\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["cancelAndRollbackNewDeployment"], [], ["loc", [null, [3, 38], [3, 81]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 3
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default");
          var el2 = dom.createTextNode("\n        Cancel\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'disabled');
          morphs[1] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["attribute", "disabled", ["get", "disableCancel", ["loc", [null, [7, 88], [7, 101]]]]], ["element", "action", ["openCancelDeploymentModal"], [], ["loc", [null, [7, 38], [7, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-angle-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Back\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          Next ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-angle-right");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "nextRouteName", ["loc", [null, [15, 17], [15, 30]]]]], ["tagName", "button", "disabled", ["subexpr", "@mut", [["get", "disableNext", ["loc", [null, [15, 57], [15, 68]]]]], [], []], "role", "button", "class", "btn btn-primary"], 0, null, ["loc", [null, [15, 6], [17, 18]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 2
            },
            "end": {
              "line": 20,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [19, 6], [19, 15]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-md-9 rhci-steps-buttons");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 2, 2);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "isNew", ["loc", [null, [2, 8], [2, 13]]]]], [], 0, 1, ["loc", [null, [2, 2], [10, 9]]]], ["block", "link-to", [["get", "backRouteName", ["loc", [null, [11, 13], [11, 26]]]]], ["disabled", ["subexpr", "@mut", [["get", "disableBack", ["loc", [null, [11, 36], [11, 47]]]]], [], []], "role", "button", "class", "btn btn-default"], 2, null, ["loc", [null, [11, 2], [13, 14]]]], ["block", "if", [["get", "nextRouteName", ["loc", [null, [14, 8], [14, 21]]]]], [], 3, 4, ["loc", [null, [14, 2], [20, 9]]]], ["inline", "partial", ["cancel-deployment-modal"], [], ["loc", [null, [23, 0], [23, 37]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/components/check-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/check-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["checked", ["subexpr", "@mut", [["get", "checked", ["loc", [null, [3, 18], [3, 25]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 38], [3, 49]]]]], [], []], "type", "checkbox", "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 69], [3, 74]]]]], [], []]], ["loc", [null, [3, 2], [3, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/check-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "help-inline", ["subexpr", "@mut", [["get", "help-inline", ["loc", [null, [1, 116], [1, 127]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 135], [1, 141]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 153], [1, 163]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 173], [1, 181]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [5, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/content-mirror-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("Verifying mirror...");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "valid-msg");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "contentMirrorValidationMsg", ["loc", [null, [7, 32], [7, 62]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "invalid-msg");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "contentMirrorValidationMsg", ["loc", [null, [9, 34], [9, 64]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isContentMirrorValid", ["loc", [null, [6, 14], [6, 34]]]]], [], 0, 1, ["loc", [null, [6, 4], [10, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content-mirror-status");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "isVerifyingContentMirror", ["loc", [null, [3, 10], [3, 34]]]]], [], 0, 1, ["loc", [null, [3, 4], [10, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "text-f", [], ["label", "Content Mirror URL", "value", ["subexpr", "@mut", [["get", "cdnUrl", ["loc", [null, [1, 43], [1, 49]]]]], [], []], "disabled", false], 0, null, ["loc", [null, [1, 0], [12, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/debug-info", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/debug-info.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [2, 4], [2, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/debug-info.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    .\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/debug-info.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isOpen", ["loc", [null, [1, 6], [1, 12]]]]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/delete-deployment-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/delete-deployment-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "btn btn-sm btn-danger");
        var el2 = dom.createTextNode("Delete");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/deployment-role", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 40
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Nodes");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 40
                },
                "end": {
                  "line": 5,
                  "column": 52
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Node");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "style", "padding-left: 15px;");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element4, 1, 1);
            morphs[1] = dom.createMorphAt(element4, 3, 3);
            morphs[2] = dom.createMorphAt(element4, 5, 5);
            return morphs;
          },
          statements: [["content", "roleNodeCount", ["loc", [null, [4, 6], [4, 23]]]], ["content", "role.name", ["loc", [null, [4, 24], [4, 37]]]], ["block", "if", [["get", "multipleAssignedNodes", ["loc", [null, [5, 12], [5, 33]]]]], [], 0, 1, ["loc", [null, [5, 6], [5, 59]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasAssignedNodes", ["loc", [null, [2, 8], [2, 24]]]]], [], 0, null, ["loc", [null, [2, 2], [7, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 17
                  },
                  "end": {
                    "line": 18,
                    "column": 17
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                     ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                dom.setAttribute(el1, "selected", "");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "option.label", ["loc", [null, [17, 38], [17, 54]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 17
                  },
                  "end": {
                    "line": 20,
                    "column": 17
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                     ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("option");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "option.label", ["loc", [null, [19, 30], [19, 46]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 13
                },
                "end": {
                  "line": 21,
                  "column": 13
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "option.selected", ["loc", [null, [16, 23], [16, 38]]]]], [], 0, 1, ["loc", [null, [16, 17], [20, 24]]]]],
            locals: ["option"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 23,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("         ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("select");
            dom.setAttribute(el1, "class", "node-count-selectpicker");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["updateNodeCount", ["get", "this", ["loc", [null, [14, 77], [14, 81]]]]], ["on", "change"], ["loc", [null, [14, 50], [14, 95]]]], ["block", "each", [["get", "availableOptions", ["loc", [null, [15, 21], [15, 37]]]]], [], 0, null, ["loc", [null, [15, 13], [21, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 4
              },
              "end": {
                "line": 31,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "class", "role-option delete");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-times");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "class", "role-option edit");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-pencil");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var element1 = dom.childAt(fragment, [3, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["removeRole"], [], ["loc", [null, [26, 33], [26, 56]]]], ["element", "action", ["editRole"], [], ["loc", [null, [29, 34], [29, 55]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 33,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "deployment-role-label");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
          morphs[2] = dom.createMorphAt(element3, 3, 3);
          morphs[3] = dom.createMorphAt(element3, 4, 4);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["role role-", ["get", "role.roleType", ["loc", [null, [9, 27], [9, 40]]]], " ", ["get", "assignedClass", ["loc", [null, [9, 45], [9, 58]]]]]]], ["content", "role.name", ["loc", [null, [11, 8], [11, 21]]]], ["block", "if", [["get", "roleAssigned", ["loc", [null, [13, 10], [13, 22]]]]], [], 0, null, ["loc", [null, [13, 4], [23, 11]]]], ["block", "unless", [["get", "readOnly", ["loc", [null, [24, 14], [24, 22]]]]], [], 1, null, ["loc", [null, [24, 4], [31, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "readOnly", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [33, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/draggable-object-target", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/draggable-object-target.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "href", "#");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["acceptForDrop"], [], ["loc", [null, [2, 14], [2, 40]]]], ["content", "yield", ["loc", [null, [3, 4], [3, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/draggable-object-target.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [6, 2], [6, 11]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/draggable-object-target.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "enableClicking", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/draggable-object", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/draggable-object.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "href", "#");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["selectForDrag"], [], ["loc", [null, [2, 14], [2, 40]]]], ["content", "yield", ["loc", [null, [3, 4], [3, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/draggable-object.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [6, 2], [6, 11]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/draggable-object.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "enableClicking", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/em-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/em-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "-bind-attr-class", [["get", "icon-classes", []], "icon-classes"], [], []]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 9
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/em-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "icon-classes", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["content", "label", ["loc", [null, [4, 0], [4, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/em-form-control-help", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 12
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/em-form-control-help.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "helpText", ["loc", [null, [1, 0], [1, 12]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/em-form-group", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/em-form-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "-bind-attr-class", [["get", "wrapperClass", []], "wrapper-class"], [], []]]]], ["inline", "partial", ["components/formgroup/form-group"], [], ["loc", [null, [3, 8], [3, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/em-form-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["components/formgroup/form-group"], [], ["loc", [null, [6, 4], [6, 49]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/em-form-group.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "wrapperClass", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/em-form-label", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 8
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/em-form-label.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]], ["content", "text", ["loc", [null, [2, 0], [2, 8]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/em-form-submit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/em-form-submit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element2, 'class');
          morphs[2] = dom.createAttrMorph(element2, 'disabled');
          morphs[3] = dom.createMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "-bind-attr-class", [["get", "horiClass", []], "hori-class"], [], []]]]], ["attribute", "class", ["concat", [["subexpr", "-bind-attr-class", [["get", "classes", []], "classes"], [], []]]]], ["attribute", "disabled", ["get", "disabled", ["loc", [null, [3, 65], [3, 73]]]]], ["content", "text", ["loc", [null, [3, 76], [3, 84]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/em-form-submit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'disabled');
          morphs[2] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "-bind-attr-class", [["get", "classes", []], "classes"], [], []]]]], ["attribute", "disabled", ["get", "disabled", ["loc", [null, [6, 61], [6, 69]]]]], ["content", "text", ["loc", [null, [6, 72], [6, 80]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/em-form-submit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "form.isHorizontal", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/em-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/em-form.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "em-form-submit", ["loc", [null, [3, 4], [3, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/em-form.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]], ["block", "if", [["get", "submit_button", ["loc", [null, [2, 6], [2, 19]]]]], [], 0, null, ["loc", [null, [2, 0], [4, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/em-modal-confirm", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 3,
                  "column": 116
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/em-modal-confirm.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/em-modal-confirm.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [3, 8], [3, 137]]]], ["content", "title", ["loc", [null, [4, 32], [4, 41]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/em-modal-confirm.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "view", [["get", "Ember.Select", ["loc", [null, [11, 15], [11, 27]]]]], ["value", ["subexpr", "@mut", [["get", "message", []]], [], []], "content", ["subexpr", "@mut", [["get", "messages", []]], [], []], "optionValuePath", "id", "optionLabelPath", "content.msg"], ["loc", [null, [11, 8], [11, 129]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/em-modal-confirm.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("Confirmation with a reason");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "message", ["loc", [null, [7, 8], [7, 19]]]], ["content", "yield", ["loc", [null, [8, 8], [8, 17]]]], ["block", "if", [["get", "reasonModal", ["loc", [null, [10, 14], [10, 25]]]]], [], 0, null, ["loc", [null, [10, 8], [12, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/em-modal-confirm.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-thumbs-o-down");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["content", "cancel-button-title", ["loc", [null, [18, 12], [18, 35]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/em-modal-confirm.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "em-button", [], ["class", ["subexpr", "@mut", [["get", "cancel-button-classes", ["loc", [null, [15, 26], [15, 47]]]]], [], []], "on-click", "confirmPressed", "default", ["subexpr", "@mut", [["get", "submit-button-title", ["loc", [null, [15, 82], [15, 101]]]]], [], []], "icon-default", ["subexpr", "@mut", [["get", "submit-button-default-icons", ["loc", [null, [15, 115], [15, 142]]]]], [], []], "icon-executing", ["subexpr", "@mut", [["get", "submit-button-execute-icons", ["loc", [null, [15, 158], [15, 185]]]]], [], []], "executing", ["subexpr", "@mut", [["get", "submit-button-submitting-title", ["loc", [null, [15, 196], [15, 226]]]]], [], []]], ["loc", [null, [15, 8], [15, 228]]]], ["block", "em-modal-toggler", [], ["class", ["subexpr", "@mut", [["get", "submit-button-classes", ["loc", [null, [16, 34], [16, 55]]]]], [], []]], 0, null, ["loc", [null, [16, 8], [19, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/em-modal-confirm.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], ["classes", ["subexpr", "@mut", [["get", "modal-title-classes", ["loc", [null, [2, 30], [2, 49]]]]], [], []]], 0, null, ["loc", [null, [2, 4], [5, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [6, 4], [13, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [14, 4], [20, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 13
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/em-modal-confirm.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["id", ["subexpr", "@mut", [["get", "confirm-id", ["loc", [null, [1, 15], [1, 25]]]]], [], []], "configName", ["subexpr", "@mut", [["get", "configName", ["loc", [null, [1, 37], [1, 47]]]]], [], []], "model-id", ["subexpr", "@mut", [["get", "model-id", ["loc", [null, [1, 57], [1, 65]]]]], [], []], "open-if", ["subexpr", "@mut", [["get", "open-if", ["loc", [null, [1, 74], [1, 81]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "close-if", ["loc", [null, [1, 91], [1, 99]]]]], [], []], "on-hide", ["subexpr", "@mut", [["get", "on-hide", ["loc", [null, [1, 108], [1, 115]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [21, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/em-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/em-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal-dialog");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "modal-content");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [4, 12], [4, 21]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/em-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "is-open", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/env-path-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/env-path-list-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'id');
        morphs[2] = dom.createMorphAt(element1, 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "bgColor", ["loc", [null, [1, 16], [1, 23]]]]]]], ["attribute", "id", ["concat", [["get", "envCssId", ["loc", [null, [2, 14], [2, 22]]]]]]], ["content", "env.name", ["loc", [null, [3, 4], [3, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/error-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/error-message.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "pull-right");
          var el5 = dom.createTextNode("\n            X\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 10], [7, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/error-message.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMsg", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, null, ["loc", [null, [1, 0], [16, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/error-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/error-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Error Occurred");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/error-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "errorMessage", ["loc", [null, [7, 4], [7, 20]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/error-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("Okay");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["okay"], [], ["loc", [null, [11, 36], [11, 53]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/error-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [2, 2], [4, 21]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [6, 2], [8, 20]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [10, 2], [12, 22]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/error-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "globalErrorModal", "open-if", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [1, 58], [1, 67]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [13, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/file-upload-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/file-upload-form.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group required");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("input");
        dom.setAttribute(el3, "value", "selectedFile");
        dom.setAttribute(el3, "type", "file");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "btn btn-sm btn-default");
        var el4 = dom.createTextNode("Cancel");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "btn btn-sm btn-primary");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element0, 'id');
        morphs[1] = dom.createAttrMorph(element1, 'id');
        morphs[2] = dom.createAttrMorph(element1, 'accept');
        morphs[3] = dom.createElementMorph(element1);
        morphs[4] = dom.createElementMorph(element3);
        morphs[5] = dom.createElementMorph(element4);
        morphs[6] = dom.createMorphAt(element4, 0, 0);
        return morphs;
      },
      statements: [["attribute", "id", ["concat", [["get", "formId", ["loc", [null, [1, 12], [1, 18]]]]]]], ["attribute", "id", ["concat", [["get", "inputId", ["loc", [null, [3, 21], [3, 28]]]]]]], ["attribute", "accept", ["get", "acceptValue", ["loc", [null, [3, 72], [3, 83]]]]], ["element", "action", ["fileChosen"], ["on", "change"], ["loc", [null, [3, 86], [3, 121]]]], ["element", "action", ["doCancel"], [], ["loc", [null, [6, 61], [6, 82]]]], ["element", "action", ["doUpload"], [], ["loc", [null, [7, 61], [7, 82]]]], ["content", "uploadButtonTitle", ["loc", [null, [7, 83], [7, 104]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/formgroup/control-within-label", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/formgroup/control-within-label.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["components/formgroup/form-group-control"], [], ["loc", [null, [2, 4], [2, 57]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 18
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/formgroup/control-within-label.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-form-label", [], ["text", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 22], [1, 27]]]]], [], []], "horiClass", "", "inlineClass", "", "viewName", ["subexpr", "@mut", [["get", "labelViewName", ["loc", [null, [1, 65], [1, 78]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [3, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/formgroup/form-group-control", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group-control.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "-bind-attr-class", [["get", "controlWrapper", []], "control-wrapper"], [], []]]]], ["inline", "view", [["get", "controlView", ["loc", [null, [3, 15], [3, 26]]]]], ["viewName", ["subexpr", "@mut", [["get", "controlViewName", ["loc", [null, [3, 36], [3, 51]]]]], [], []], "property", ["subexpr", "@mut", [["get", "propertyName", ["loc", [null, [3, 61], [3, 73]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cid", ["loc", [null, [3, 77], [3, 80]]]]], [], []]], ["loc", [null, [3, 8], [3, 82]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group-control.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "view", [["get", "controlView", ["loc", [null, [6, 11], [6, 22]]]]], ["viewName", ["subexpr", "@mut", [["get", "controlViewName", ["loc", [null, [6, 32], [6, 47]]]]], [], []], "property", ["subexpr", "@mut", [["get", "propertyName", ["loc", [null, [6, 57], [6, 69]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cid", ["loc", [null, [6, 73], [6, 76]]]]], [], []]], ["loc", [null, [6, 4], [6, 78]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group-control.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "controlWrapper", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/formgroup/form-group", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 8,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element2, 'class');
                morphs[1] = dom.createMorphAt(element2, 1, 1);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", [["subexpr", "-bind-attr-class", [["get", "labelWrapperClass", []], "label-wrapper-class"], [], []]]]], ["inline", "partial", ["components/formgroup/control-within-label"], [], ["loc", [null, [6, 20], [6, 75]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 12
                  },
                  "end": {
                    "line": 10,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "partial", ["components/formgroup/control-within-label"], [], ["loc", [null, [9, 16], [9, 71]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "labelWrapperClass", ["loc", [null, [4, 18], [4, 35]]]]], [], 0, 1, ["loc", [null, [4, 12], [10, 19]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 12
                  },
                  "end": {
                    "line": 17,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element1, 'class');
                morphs[1] = dom.createMorphAt(element1, 1, 1);
                morphs[2] = dom.createMorphAt(element1, 3, 3);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", [["subexpr", "-bind-attr-class", [["get", "labelWrapperClass", []], "label-wrapper-class"], [], []]]]], ["inline", "em-form-label", [], ["text", ["subexpr", "@mut", [["get", "label", ["loc", [null, [14, 41], [14, 46]]]]], [], []], "viewName", ["subexpr", "@mut", [["get", "labelViewName", ["loc", [null, [14, 56], [14, 69]]]]], [], []]], ["loc", [null, [14, 20], [14, 71]]]], ["inline", "partial", ["components/formgroup/form-group-control"], [], ["loc", [null, [15, 20], [15, 73]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 17,
                    "column": 12
                  },
                  "end": {
                    "line": 20,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "em-form-label", [], ["text", ["subexpr", "@mut", [["get", "label", ["loc", [null, [18, 37], [18, 42]]]]], [], []], "viewName", ["subexpr", "@mut", [["get", "labelViewName", ["loc", [null, [18, 52], [18, 65]]]]], [], []]], ["loc", [null, [18, 16], [18, 67]]]], ["inline", "partial", ["components/formgroup/form-group-control"], [], ["loc", [null, [19, 16], [19, 69]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 21,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "labelWrapperClass", ["loc", [null, [12, 18], [12, 35]]]]], [], 0, 1, ["loc", [null, [12, 12], [20, 19]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "yieldInLabel", ["loc", [null, [3, 14], [3, 26]]]]], [], 0, 1, ["loc", [null, [3, 8], [21, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 4
              },
              "end": {
                "line": 24,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["components/formgroup/form-group-control"], [], ["loc", [null, [23, 8], [23, 61]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "form-control-feedback");
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "-bind-attr-class", [["get", "v_icon", []], "v-icon"], [], []]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 8
                },
                "end": {
                  "line": 34,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-form-control-help", [], ["text", ["subexpr", "@mut", [["get", "help", ["loc", [null, [33, 40], [33, 44]]]]], [], []], "viewName", ["subexpr", "@mut", [["get", "helpViewName", ["loc", [null, [33, 54], [33, 66]]]]], [], []]], ["loc", [null, [33, 12], [33, 68]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 4
              },
              "end": {
                "line": 35,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "canShowErrors", ["loc", [null, [32, 14], [32, 27]]]]], [], 0, null, ["loc", [null, [32, 8], [34, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "label", ["loc", [null, [2, 10], [2, 15]]]]], [], 0, 1, ["loc", [null, [2, 4], [24, 11]]]], ["block", "if", [["get", "v_icons", ["loc", [null, [26, 10], [26, 17]]]]], [], 2, null, ["loc", [null, [26, 4], [28, 11]]]], ["block", "unless", [["get", "form.isInline", ["loc", [null, [31, 14], [31, 27]]]]], [], 3, null, ["loc", [null, [31, 4], [35, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 0
            },
            "end": {
              "line": 38,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [37, 4], [37, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 11
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/formgroup/form-group.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "unless", [["get", "template", ["loc", [null, [1, 10], [1, 18]]]]], [], 0, 1, ["loc", [null, [1, 0], [38, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/host-type-icon", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/host-type-icon.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("img");
            dom.setAttribute(el1, "src", "/assets/r/vm-icon-inverted-16.png");
            dom.setAttribute(el1, "data-toggle", "tooltip");
            dom.setAttribute(el1, "title", "Virtual Machine");
            dom.setAttribute(el1, "class", "img-responsive host-type-icon");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/host-type-icon.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("img");
            dom.setAttribute(el1, "src", "/assets/r/vm-icon-16.png");
            dom.setAttribute(el1, "data-toggle", "tooltip");
            dom.setAttribute(el1, "title", "Virtual Machine");
            dom.setAttribute(el1, "class", "img-responsive host-type-icon");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/host-type-icon.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("center");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "isInverted", ["loc", [null, [3, 10], [3, 20]]]]], [], 0, 1, ["loc", [null, [3, 4], [13, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/host-type-icon.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "data-toggle", "tooltip");
          dom.setAttribute(el1, "title", "Bare Metal");
          dom.setAttribute(el1, "class", "pficon pficon-screen host-type-icon");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/host-type-icon.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isVM", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, 1, ["loc", [null, [1, 0], [20, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/hypervisor-name", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/hypervisor-name.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "namePlusDomain", ["loc", [null, [2, 2], [2, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/hypervisor-name.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "link-to", ["hypervisor.discovered-host"], [], 0, null, ["loc", [null, [1, 0], [3, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/labeled-radio-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/labeled-radio-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "radio-button", [], ["radioClass", ["subexpr", "@mut", [["get", "radioClass", ["loc", [null, [2, 15], [2, 25]]]]], [], []], "radioId", ["subexpr", "@mut", [["get", "radioId", ["loc", [null, [3, 12], [3, 19]]]]], [], []], "changed", "innerRadioChanged", "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [5, 13], [5, 21]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "groupValue", ["loc", [null, [6, 15], [6, 25]]]]], [], []], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [7, 9], [7, 13]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [8, 13], [8, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [9, 10], [9, 15]]]]], [], []]], ["loc", [null, [1, 0], [9, 17]]]], ["content", "yield", ["loc", [null, [11, 0], [11, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/loading-spinner", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/loading-spinner.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal fade in");
          dom.setAttribute(el1, "style", "display:block");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "modal-dialog loading-spinner");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "loading-spinner-content modal-content");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "spinner spinner-xs spinner-inline");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]), 0, 0);
          return morphs;
        },
        statements: [["content", "text", ["loc", [null, [6, 22], [6, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/loading-spinner.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "show", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, null, ["loc", [null, [1, 0], [10, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/log-entry", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/log-entry.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "entry.formattedText", ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/markdown-to-html", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/markdown-to-html.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "html", ["loc", [null, [1, 0], [1, 8]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/new-node-registration-mac-address", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/new-node-registration-mac-address.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/new-node-registration-mac-address.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "text-f", [], ["cssId", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [2, 16], [2, 21]]]]], [], []], "labelSize", "form-label-nowrap col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "macAddress.value", ["loc", [null, [5, 16], [5, 32]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "macAddressValidator", ["loc", [null, [6, 20], [6, 39]]]]], [], []], "isRequired", false], 0, null, ["loc", [null, [1, 0], [8, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/node-details-block", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 2
            },
            "end": {
              "line": 29,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/node-details-block.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row ose-node-line");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-1");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" GB for Docker\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
          return morphs;
        },
        statements: [["content", "storageSize", ["loc", [null, [26, 8], [26, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/node-details-block.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1, "class", "num-ose-node pull-left");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "node-details-block");
        var el2 = dom.createTextNode("\n\n  Each ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" node has:\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(element0, 9, 9);
        morphs[5] = dom.createMorphAt(element0, 11, 11);
        return morphs;
      },
      statements: [["content", "numNodes", ["loc", [null, [1, 35], [1, 47]]]], ["content", "typeNode", ["loc", [null, [5, 7], [5, 19]]]], ["inline", "ose-node-detail-line", [], ["label", "vCPU", "value", ["subexpr", "@mut", [["get", "valueVcpu", ["loc", [null, [9, 31], [9, 40]]]]], [], []], "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [10, 36], [10, 46]]]]], [], []]], ["loc", [null, [8, 2], [10, 48]]]], ["inline", "ose-node-detail-line", [], ["label", "RAM", "value", ["subexpr", "@mut", [["get", "valueRam", ["loc", [null, [13, 31], [13, 39]]]]], [], []], "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [14, 36], [14, 46]]]]], [], []], "suffix", "GB"], ["loc", [null, [12, 2], [15, 38]]]], ["inline", "ose-node-detail-line", [], ["label", "Disk", "value", ["subexpr", "@mut", [["get", "valueDisk", ["loc", [null, [18, 31], [18, 40]]]]], [], []], "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [19, 36], [19, 46]]]]], [], []], "suffix", "GB"], ["loc", [null, [17, 2], [20, 38]]]], ["block", "if", [["get", "storageSize", ["loc", [null, [22, 8], [22, 19]]]]], [], 0, null, ["loc", [null, [22, 2], [29, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/node-details", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 41,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/node-details.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 col-sm-10 col-md-10 col-lg-7 env-summary-title");
        var el3 = dom.createTextNode("\n    Node Details\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "btn btn-default btn-sm");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-7 node-details-body");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-6 col-sm-6 col-md-6 col-lg-6 node-details-col");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-6 col-sm-6 col-md-6 col-lg-6");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1, 1]);
        var element1 = dom.childAt(fragment, [2, 1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["editOseNodeDetails"], [], ["loc", [null, [5, 14], [5, 45]]]], ["content", "customEditLabel", ["loc", [null, [6, 8], [6, 27]]]], ["inline", "node-details-block", [], ["numNodes", ["subexpr", "@mut", [["get", "numMasterNodes", ["loc", [null, [17, 38], [17, 52]]]]], [], []], "valueVcpu", ["subexpr", "@mut", [["get", "masterVcpu", ["loc", [null, [18, 39], [18, 49]]]]], [], []], "valueRam", ["subexpr", "@mut", [["get", "masterRam", ["loc", [null, [19, 38], [19, 47]]]]], [], []], "valueDisk", ["subexpr", "@mut", [["get", "masterDisk", ["loc", [null, [20, 39], [20, 49]]]]], [], []], "typeNode", "master", "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [22, 40], [22, 50]]]]], [], []]], ["loc", [null, [17, 8], [22, 52]]]], ["inline", "node-details-block", [], ["numNodes", ["subexpr", "@mut", [["get", "numWorkerNodes", ["loc", [null, [26, 38], [26, 52]]]]], [], []], "valueVcpu", ["subexpr", "@mut", [["get", "nodeVcpu", ["loc", [null, [27, 39], [27, 47]]]]], [], []], "valueRam", ["subexpr", "@mut", [["get", "nodeRam", ["loc", [null, [28, 38], [28, 45]]]]], [], []], "valueDisk", ["subexpr", "@mut", [["get", "nodeDisk", ["loc", [null, [29, 39], [29, 47]]]]], [], []], "typeNode", "worker", "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [31, 40], [31, 50]]]]], [], []], "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [32, 41], [32, 52]]]]], [], []]], ["loc", [null, [26, 8], [32, 54]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/node-profile", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 5,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "deployment-role", [], ["role", ["subexpr", "@mut", [["get", "role", ["loc", [null, [4, 27], [4, 31]]]]], [], []], "profile", ["subexpr", "@mut", [["get", "profile", ["loc", [null, [4, 40], [4, 47]]]]], [], []], "plan", ["subexpr", "@mut", [["get", "plan", ["loc", [null, [4, 53], [4, 57]]]]], [], []], "readOnly", true], ["loc", [null, [4, 4], [4, 73]]]]],
          locals: ["role"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(":\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "profile.name", ["loc", [null, [2, 2], [2, 18]]]], ["block", "each", [["get", "assignedRoles", ["loc", [null, [3, 10], [3, 23]]]]], [], 0, null, ["loc", [null, [3, 2], [5, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 44,
                    "column": 26
                  },
                  "end": {
                    "line": 53,
                    "column": 26
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "deployment-role", [], ["role", ["subexpr", "@mut", [["get", "role", ["loc", [null, [45, 51], [45, 55]]]]], [], []], "profile", ["subexpr", "@mut", [["get", "profile", ["loc", [null, [46, 54], [46, 61]]]]], [], []], "nodeCount", ["subexpr", "@mut", [["get", "matchingNodeCount", ["loc", [null, [47, 56], [47, 73]]]]], [], []], "plan", ["subexpr", "@mut", [["get", "plan", ["loc", [null, [48, 51], [48, 55]]]]], [], []], "edit", "editRole", "setRoleCount", "setRoleCount", "remove", "removeRole", "readOnly", false], ["loc", [null, [45, 28], [52, 62]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 24
                },
                "end": {
                  "line": 54,
                  "column": 24
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "draggable-object", [], ["content", ["subexpr", "@mut", [["get", "role", ["loc", [null, [44, 54], [44, 58]]]]], [], []]], 0, null, ["loc", [null, [44, 26], [53, 47]]]]],
            locals: ["role"],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 62,
                      "column": 36
                    },
                    "end": {
                      "line": 64,
                      "column": 36
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element0, 'class');
                  morphs[1] = dom.createElementMorph(element0);
                  morphs[2] = dom.createMorphAt(element0, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["roles-menu-item role-", ["get", "role.roleType", ["loc", [null, [63, 73], [63, 86]]]]]]], ["element", "action", ["assignRole", ["get", "role", ["loc", [null, [63, 112], [63, 116]]]]], [], ["loc", [null, [63, 90], [63, 118]]]], ["content", "role.name", ["loc", [null, [63, 119], [63, 132]]]]],
                locals: ["role"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 56,
                    "column": 26
                  },
                  "end": {
                    "line": 67,
                    "column": 26
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createTextNode("\n                                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("a");
                dom.setAttribute(el2, "id", "role-target-dropdown-1");
                dom.setAttribute(el2, "data-toggle", "dropdown");
                dom.setAttribute(el2, "aria-haspopup", "true");
                dom.setAttribute(el2, "aria-expanded", "false");
                var el3 = dom.createTextNode("\n                                      ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("i");
                dom.setAttribute(el3, "class", "fa fa-plus");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" Assign Role\n                                  ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("ul");
                dom.setAttribute(el2, "class", "dropdown-menu");
                dom.setAttribute(el2, "role", "menu");
                dom.setAttribute(el2, "aria-labelledby", "role-target-dropdown-1");
                dom.setAttribute(el2, "style", "left: -2px;");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("                                  ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var element2 = dom.childAt(element1, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element1, 'class');
                morphs[1] = dom.createElementMorph(element2);
                morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["role-target ", ["get", "assignMenuOpenClass", ["loc", [null, [57, 55], [57, 74]]]], "  dropdown"]]], ["element", "action", ["showAssignMenu", ["get", "profile", ["loc", [null, [58, 91], [58, 98]]]]], ["bubbles", false], ["loc", [null, [58, 65], [58, 114]]]], ["block", "each", [["get", "unassignedRoles", ["loc", [null, [62, 44], [62, 59]]]]], [], 0, null, ["loc", [null, [62, 36], [64, 45]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 24
                },
                "end": {
                  "line": 68,
                  "column": 24
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "draggable-object-target", [], ["action", "assignDroppedRole"], 0, null, ["loc", [null, [56, 26], [67, 54]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 14
              },
              "end": {
                "line": 71,
                "column": 14
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "col-sm-7 col-md-8");
            var el2 = dom.createTextNode("\n                      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            dom.setAttribute(el2, "class", "h5");
            var el3 = dom.createTextNode("Assigned Nodes");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2, "class", "deployment-roles deployment-roles-assigned");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 3]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element3, 1, 1);
            morphs[1] = dom.createMorphAt(element3, 2, 2);
            return morphs;
          },
          statements: [["block", "each", [["get", "assignedRoles", ["loc", [null, [43, 32], [43, 45]]]]], [], 0, null, ["loc", [null, [43, 24], [54, 33]]]], ["block", "unless", [["get", "allRolesAssigned", ["loc", [null, [55, 34], [55, 50]]]]], [], 1, null, ["loc", [null, [55, 24], [68, 35]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 71,
                "column": 14
              },
              "end": {
                "line": 75,
                "column": 14
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "col-sm-7 col-md-8");
            var el2 = dom.createTextNode("\n                      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("em");
            var el3 = dom.createTextNode("Assigning nodes to roles will occur in step ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("C.");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberOpenstack", ["loc", [null, [73, 70], [73, 93]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 79,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "row");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "col-sm-7 col-md-8");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h3");
          dom.setAttribute(el5, "class", "node-profile-label h5");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "col-sm-5 col-md-4");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h4");
          dom.setAttribute(el5, "class", "node-profile-free-nodes h5");
          var el6 = dom.createTextNode("Node Count: ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "row");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "col-sm-5 col-md-4");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("h4");
          dom.setAttribute(el5, "class", "h5");
          var el6 = dom.createTextNode("Each node has:");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("table");
          dom.setAttribute(el5, "class", "table node-specs");
          var el6 = dom.createTextNode("\n                        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("tbody");
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("tr");
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("th");
          var el9 = dom.createTextNode("CPU");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("td");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                        ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("tr");
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("th");
          var el9 = dom.createTextNode("RAM");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("td");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          var el9 = dom.createTextNode(" MB");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                        ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("tr");
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("th");
          var el9 = dom.createTextNode("Disk");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                            ");
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("td");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          var el9 = dom.createTextNode(" GB");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode("\n                        ");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                        ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1, 1]);
          var element6 = dom.childAt(element4, [3, 1]);
          var element7 = dom.childAt(element6, [1, 3, 1]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element4, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element5, [1, 1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element5, [3, 1]), 1, 1);
          morphs[3] = dom.createMorphAt(dom.childAt(element7, [1, 3]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element7, [3, 3]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element7, [5, 3]), 0, 0);
          morphs[6] = dom.createMorphAt(element6, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["panel panel-default node-profile ", ["get", "assignClass", ["loc", [null, [7, 51], [7, 62]]]]]]], ["content", "profile.name", ["loc", [null, [11, 54], [11, 70]]]], ["content", "matchingNodeCount", ["loc", [null, [14, 71], [14, 92]]]], ["content", "profile.vcpus", ["loc", [null, [26, 32], [26, 49]]]], ["content", "profile.ram", ["loc", [null, [30, 32], [30, 47]]]], ["content", "profile.disk", ["loc", [null, [34, 32], [34, 48]]]], ["block", "if", [["get", "doAssign", ["loc", [null, [39, 20], [39, 28]]]]], [], 0, 1, ["loc", [null, [39, 14], [75, 21]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "readOnly", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [79, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/object-bin", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/object-bin.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "obj", ["loc", [null, [6, 14], [6, 17]]]]], [], ["loc", [null, [6, 6], [6, 19]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/object-bin.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "draggable-object", [], ["action", "handleObjectDragged", "content", ["subexpr", "@mut", [["get", "obj", ["loc", [null, [5, 61], [5, 64]]]]], [], []]], 0, null, ["loc", [null, [5, 4], [7, 25]]]]],
          locals: ["obj"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/object-bin.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "object-bin-title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "name", ["loc", [null, [2, 32], [2, 40]]]], ["block", "each", [["get", "model", ["loc", [null, [4, 10], [4, 15]]]]], [], 0, null, ["loc", [null, [4, 2], [8, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/object-bin.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "draggable-object-target", [], ["action", "handleObjectDropped"], 0, null, ["loc", [null, [1, 0], [9, 28]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/ose-env-summary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/ose-env-summary.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-7 env-summary-title");
        var el3 = dom.createTextNode("\n    Environment Summary\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-right");
        var el4 = dom.createTextNode("\n      Node Count: ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-7 env-summary-body");
        var el3 = dom.createTextNode("\n    Resources needed:\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-right");
        var el4 = dom.createTextNode("\n      Resources available:\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-7 env-summary-progressbars");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(element0, 5, 5);
        return morphs;
      },
      statements: [["content", "numNodes", ["loc", [null, [5, 18], [5, 30]]]], ["inline", "tool-tip", [], ["faIcon", "fa-info-circle", "title", ["subexpr", "@mut", [["get", "resourcesAvailableToolTip", ["loc", [null, [16, 24], [16, 49]]]]], [], []]], ["loc", [null, [15, 6], [16, 51]]]], ["inline", "ose-summary-needed-available", [], ["label", "vCPU", "needed", ["subexpr", "@mut", [["get", "vcpuNeeded", ["loc", [null, [24, 57], [24, 67]]]]], [], []], "available", ["subexpr", "@mut", [["get", "vcpuAvailable", ["loc", [null, [24, 78], [24, 91]]]]], [], []], "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [24, 104], [24, 115]]]]], [], []]], ["loc", [null, [24, 6], [24, 117]]]], ["inline", "ose-summary-needed-available", [], ["label", "RAM", "needed", ["subexpr", "@mut", [["get", "ramNeeded", ["loc", [null, [25, 56], [25, 65]]]]], [], []], "available", ["subexpr", "@mut", [["get", "ramAvailable", ["loc", [null, [25, 76], [25, 88]]]]], [], []], "suffix", "GB", "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [25, 113], [25, 124]]]]], [], []]], ["loc", [null, [25, 6], [25, 126]]]], ["inline", "ose-summary-needed-available", [], ["label", "Disk", "needed", ["subexpr", "@mut", [["get", "diskNeeded", ["loc", [null, [26, 57], [26, 67]]]]], [], []], "available", ["subexpr", "@mut", [["get", "diskAvailable", ["loc", [null, [26, 78], [26, 91]]]]], [], []], "suffix", "GB", "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [26, 116], [26, 127]]]]], [], []]], ["loc", [null, [26, 6], [26, 129]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/ose-host-review-link", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/ose-host-review-link.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "review-link", [], ["label", ["subexpr", "@mut", [["get", "linkLabel", ["loc", [null, [2, 22], [2, 31]]]]], [], []], "value", ["subexpr", "@mut", [["get", "oseHost.name", ["loc", [null, [2, 38], [2, 50]]]]], [], []]], ["loc", [null, [2, 2], [2, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/ose-host-review-link.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "review-link", [], ["label", ["subexpr", "@mut", [["get", "linkLabel", ["loc", [null, [5, 10], [5, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "linkValue", ["loc", [null, [6, 10], [6, 19]]]]], [], []], "isExternalURL", true, "ipAddress", ["subexpr", "@mut", [["get", "linkIp", ["loc", [null, [8, 14], [8, 20]]]]], [], []]], ["loc", [null, [4, 2], [8, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/ose-host-review-link.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isWorkerNode", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, 1, ["loc", [null, [1, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/ose-node-detail-line", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/ose-node-detail-line.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 18], [7, 23]]]]], [], []], "class", "input-ose"], ["loc", [null, [7, 4], [7, 43]]]], ["content", "suffix", ["loc", [null, [7, 44], [7, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/ose-node-detail-line.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [9, 4], [9, 13]]]], ["content", "suffix", ["loc", [null, [9, 14], [9, 24]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/ose-node-detail-line.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-2 col-sm-2 col-md-1");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-4 col-sm-6 col-md-9");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [2, 10], [2, 19]]]], ["block", "if", [["get", "isEditMode", ["loc", [null, [6, 8], [6, 18]]]]], [], 0, 1, ["loc", [null, [6, 2], [10, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/ose-summary-needed-available", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/ose-summary-needed-available.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-2 col-sm-2 col-md-2 col-lg-2");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "label-needed-available");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("strong");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-10");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "light-gray-background");
        var el3 = dom.createTextNode("\n       \n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "role", "progressbar");
        dom.setAttribute(el2, "aria-valuemin", "0");
        dom.setAttribute(el2, "aria-valuemax", "100");
        var el3 = dom.createTextNode("\n       ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n       \n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [5]);
        var element3 = dom.childAt(element0, [7]);
        var element4 = dom.childAt(element0, [9]);
        var morphs = new Array(13);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 0, 0);
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createAttrMorph(element1, 'aria-valuenow');
        morphs[3] = dom.createAttrMorph(element1, 'style');
        morphs[4] = dom.createMorphAt(element1, 1, 1);
        morphs[5] = dom.createAttrMorph(element2, 'class');
        morphs[6] = dom.createMorphAt(element2, 1, 1);
        morphs[7] = dom.createMorphAt(element2, 3, 3);
        morphs[8] = dom.createAttrMorph(element3, 'class');
        morphs[9] = dom.createMorphAt(element3, 1, 1);
        morphs[10] = dom.createMorphAt(element3, 3, 3);
        morphs[11] = dom.createAttrMorph(element4, 'class');
        morphs[12] = dom.createMorphAt(element4, 1, 1);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [3, 12], [3, 21]]]], ["attribute", "class", ["concat", ["needed-available-bar ", ["get", "progressBarClass", ["loc", [null, [11, 39], [11, 55]]]]]]], ["attribute", "aria-valuenow", ["get", "percentProgressInt", ["loc", [null, [11, 132], [11, 150]]]]], ["attribute", "style", ["concat", ["width: ", ["get", "styleWidth", ["loc", [null, [11, 169], [11, 179]]]], ";"]]], ["content", "helpText", ["loc", [null, [12, 12], [12, 24]]]], ["attribute", "class", ["concat", ["amt-needed ", ["get", "fontColorClass", ["loc", [null, [14, 29], [14, 43]]]]]]], ["content", "needed", ["loc", [null, [15, 6], [15, 16]]]], ["content", "suffix", ["loc", [null, [15, 17], [15, 27]]]], ["attribute", "class", ["concat", ["amt-available ", ["get", "fontColorClass", ["loc", [null, [17, 32], [17, 46]]]]]]], ["content", "available", ["loc", [null, [18, 6], [18, 19]]]], ["content", "suffix", ["loc", [null, [18, 20], [18, 30]]]], ["attribute", "class", ["concat", ["ose-help-msg ", ["get", "helpTextClass", ["loc", [null, [20, 31], [20, 44]]]]]]], ["content", "helpText", ["loc", [null, [21, 6], [21, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/osp-node-manager", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 12
            },
            "end": {
              "line": 37,
              "column": 12
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/osp-node-manager.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "osp-node", [], ["node", ["subexpr", "@mut", [["get", "node", ["loc", [null, [36, 30], [36, 34]]]]], [], []], "ports", ["subexpr", "@mut", [["get", "ports", ["loc", [null, [36, 41], [36, 46]]]]], [], []], "introspectionTasks", ["subexpr", "@mut", [["get", "introspectionTasks", ["loc", [null, [36, 66], [36, 84]]]]], [], []], "foremanTasks", ["subexpr", "@mut", [["get", "foremanTasks", ["loc", [null, [36, 98], [36, 110]]]]], [], []], "deleteNode", "deleteNode", "editable", ["subexpr", "@mut", [["get", "editable", ["loc", [null, [36, 144], [36, 152]]]]], [], []]], ["loc", [null, [36, 14], [36, 154]]]]],
        locals: ["node"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 6
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/osp-node-manager.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row osp-node-manager");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "panel panel-default osp-node-manager-panel");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "panel-heading osp-node-manager-panel-heading");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "button");
        dom.setAttribute(el5, "class", "btn btn-default pull-right");
        var el6 = dom.createTextNode("Add node to group");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "panel-body osp-node-manager-panel-body");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "row");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "col-xs-1 osp-node-manager-nodes-count-section");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "registered-node-count pull-right");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "col-xs-4 osp-node-manager-nodes-info-section");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "node-info");
        var el8 = dom.createTextNode("nodes, each has:");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "row");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "col-xs-4");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info-label");
        var el10 = dom.createTextNode("vCPU");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info-label");
        var el10 = dom.createTextNode("RAM");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info-label");
        var el10 = dom.createTextNode("Disk");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "col-xs-8");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "col-xs-7 osp-node-manager-nodes-list-section");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "row");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "col-xs-offset-1 col-xs-11 osp-node-list-title");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("h4");
        var el10 = dom.createTextNode("Nodes");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [2]);
        var element3 = dom.childAt(element0, [3, 1]);
        var element4 = dom.childAt(element3, [3, 3, 3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(element1, 0, 0);
        morphs[1] = dom.createAttrMorph(element2, 'id');
        morphs[2] = dom.createElementMorph(element2);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [5]), 0, 0);
        morphs[7] = dom.createMorphAt(dom.childAt(element3, [5]), 3, 3);
        return morphs;
      },
      statements: [["content", "nodeManager.address", ["loc", [null, [4, 64], [4, 87]]]], ["attribute", "id", ["concat", ["managerAddNodeButton", ["get", "safeLabel", ["loc", [null, [5, 56], [5, 65]]]]]]], ["element", "action", ["onAddNode"], [], ["loc", [null, [5, 105], [5, 127]]]], ["content", "nodeCount", ["loc", [null, [10, 59], [10, 72]]]], ["content", "cpuRange", ["loc", [null, [21, 37], [21, 49]]]], ["content", "memRange", ["loc", [null, [22, 37], [22, 49]]]], ["content", "storageRange", ["loc", [null, [23, 37], [23, 53]]]], ["block", "each", [["get", "nodeManager.nodes", ["loc", [null, [35, 20], [35, 37]]]]], [], 0, null, ["loc", [null, [35, 12], [37, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/osp-node", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "pficon pficon-ok");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "spinner spinner-xs spinner-inline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 2
                },
                "end": {
                  "line": 9,
                  "column": 2
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "fa fa-times-circle-o");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 2
                },
                "end": {
                  "line": 11,
                  "column": 2
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "fa fa-exclamation-triangle");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n  ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isNodeError", ["loc", [null, [7, 12], [7, 23]]]]], [], 0, 1, ["loc", [null, [7, 2], [11, 2]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isNodeInspecting", ["loc", [null, [5, 12], [5, 28]]]]], [], 0, 1, ["loc", [null, [5, 2], [11, 2]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-1 osp-node-status-column");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-9 osp-node-progress-column");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "progress osp-node-progress");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "role", "progressbar");
        dom.setAttribute(el3, "aria-valuenow", "50");
        dom.setAttribute(el3, "aria-valuemin", "0");
        dom.setAttribute(el3, "aria-valuemax", "100");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "osp-node-progress-bar-label");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-2 osp-node-action-column ");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "type", "button");
        dom.setAttribute(el2, "class", "btn btn-icon btn-delete-node");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "pficon pficon-delete");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [3, 1, 1]);
        var element1 = dom.childAt(fragment, [5, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createAttrMorph(element0, 'style');
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[4] = dom.createAttrMorph(element1, 'id');
        morphs[5] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [["block", "if", [["get", "isNodeReady", ["loc", [null, [3, 8], [3, 19]]]]], [], 0, 1, ["loc", [null, [3, 2], [11, 9]]]], ["attribute", "class", ["concat", [["get", "progressBarClass", ["loc", [null, [15, 18], [15, 34]]]]]]], ["attribute", "style", ["concat", ["width: ", ["get", "progressWidth", ["loc", [null, [15, 130], [15, 143]]]], ";"]]], ["content", "label", ["loc", [null, [16, 48], [16, 57]]]], ["attribute", "id", ["concat", ["deleteNodeButton", ["get", "safeLabel", ["loc", [null, [21, 48], [21, 57]]]]]]], ["element", "action", ["onDeleteClicked"], [], ["loc", [null, [21, 98], [21, 126]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/progress-bar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-lg-2 col-md-2 col-sm-3 rhci-review-product-name");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h3");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "name", ["loc", [null, [3, 6], [3, 14]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-check-circle-o green-circle");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" \n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-exclamation-triangle errorForValidation");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-exclamation-triangle warningForValidation");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 4
                  },
                  "end": {
                    "line": 16,
                    "column": 4
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "spinner spinner-xs spinner-inline");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 4
                    },
                    "end": {
                      "line": 18,
                      "column": 4
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "spinner spinner-xs spinner-inline");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n    ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 4
                  },
                  "end": {
                    "line": 18,
                    "column": 4
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isStarted", ["loc", [null, [16, 14], [16, 23]]]]], [], 0, null, ["loc", [null, [16, 4], [18, 4]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isSatelliteProgressBar", ["loc", [null, [14, 14], [14, 36]]]]], [], 0, 1, ["loc", [null, [14, 4], [18, 4]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 18,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStopped", ["loc", [null, [12, 14], [12, 23]]]]], [], 0, 1, ["loc", [null, [12, 4], [18, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isError", ["loc", [null, [10, 14], [10, 21]]]]], [], 0, 1, ["loc", [null, [10, 4], [18, 4]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 26,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "no-bold");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "href", "/katello/sync_management#!=");
          dom.setAttribute(el2, "target", "_blank");
          var el3 = dom.createTextNode(" View Content Sync Status");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 10
              },
              "end": {
                "line": 30,
                "column": 74
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "model.humanized_errors", ["loc", [null, [30, 48], [30, 74]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "errorForValidation");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createUnsafeMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["block", "link-to", ["review.progress.details"], [], 0, null, ["loc", [null, [30, 10], [30, 86]]]], ["content", "hostErrorInfo", ["loc", [null, [31, 10], [31, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-lg-8 col-md-7 col-sm-6");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "progress-bar-label");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("%\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "progress");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "role", "progressbar");
        dom.setAttribute(el3, "aria-valuemin", "0");
        dom.setAttribute(el3, "aria-valuemax", "100");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3, 1]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(element2, 5, 5);
        morphs[4] = dom.createMorphAt(element2, 7, 7);
        morphs[5] = dom.createMorphAt(dom.childAt(element2, [9]), 1, 1);
        morphs[6] = dom.createAttrMorph(element3, 'class');
        morphs[7] = dom.createAttrMorph(element3, 'aria-valuenow');
        morphs[8] = dom.createAttrMorph(element3, 'style');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "unless", [["get", "isNodeProgressBar", ["loc", [null, [1, 10], [1, 27]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 11]]]], ["block", "if", [["get", "isFinished", ["loc", [null, [8, 10], [8, 20]]]]], [], 1, 2, ["loc", [null, [8, 4], [18, 11]]]], ["content", "progressBarMsg", ["loc", [null, [20, 4], [20, 22]]]], ["block", "if", [["get", "isSatelliteProgressBar", ["loc", [null, [22, 10], [22, 32]]]]], [], 3, null, ["loc", [null, [22, 4], [26, 11]]]], ["block", "if", [["get", "hasHumanizedErrors", ["loc", [null, [28, 10], [28, 28]]]]], [], 4, null, ["loc", [null, [28, 4], [33, 11]]]], ["content", "percentProgress", ["loc", [null, [36, 6], [36, 25]]]], ["attribute", "class", ["get", "progressBarClass", ["loc", [null, [41, 17], [41, 33]]]]], ["attribute", "aria-valuenow", ["get", "percentProgressInt", ["loc", [null, [41, 109], [41, 127]]]]], ["attribute", "style", ["concat", ["width: ", ["get", "styleWidth", ["loc", [null, [41, 146], [41, 156]]]], ";"]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/components/radio-button-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/radio-button-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "radio-button", [], ["name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [1, 20], [1, 24]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 31], [1, 36]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "checked", ["loc", [null, [1, 45], [1, 52]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [1, 56], [1, 61]]]]], [], []]], ["loc", [null, [1, 0], [1, 63]]]], ["content", "value", ["loc", [null, [1, 63], [1, 72]]]], ["content", "label", ["loc", [null, [2, 0], [2, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/radio-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/radio-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          morphs[3] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ember-radio-button ", ["subexpr", "if", [["get", "checked", ["loc", [null, [2, 40], [2, 47]]]], "checked"], [], ["loc", [null, [2, 35], [2, 59]]]], " ", ["get", "joinedClassNames", ["loc", [null, [2, 62], [2, 78]]]]]]], ["attribute", "for", ["get", "radioId", ["loc", [null, [2, 88], [2, 95]]]]], ["inline", "radio-button-input", [], ["class", ["subexpr", "@mut", [["get", "radioClass", ["loc", [null, [4, 14], [4, 24]]]]], [], []], "id", ["subexpr", "@mut", [["get", "radioId", ["loc", [null, [5, 11], [5, 18]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [6, 17], [6, 25]]]]], [], []], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [7, 13], [7, 17]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [8, 17], [8, 25]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "groupValue", ["loc", [null, [9, 19], [9, 29]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [10, 14], [10, 19]]]]], [], []], "changed", "changed"], ["loc", [null, [3, 4], [11, 27]]]], ["content", "yield", ["loc", [null, [13, 4], [13, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/radio-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "radio-button-input", [], ["class", ["subexpr", "@mut", [["get", "radioClass", ["loc", [null, [17, 12], [17, 22]]]]], [], []], "id", ["subexpr", "@mut", [["get", "radioId", ["loc", [null, [18, 9], [18, 16]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [19, 15], [19, 23]]]]], [], []], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [20, 11], [20, 15]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [21, 15], [21, 23]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "groupValue", ["loc", [null, [22, 17], [22, 27]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [23, 12], [23, 17]]]]], [], []], "changed", "changed"], ["loc", [null, [16, 2], [24, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/radio-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [25, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/range-text-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/range-text-f.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "error errorForValidation");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
              return morphs;
            },
            statements: [["content", "errors.name", ["loc", [null, [16, 63], [16, 78]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/range-text-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "errors.name", ["loc", [null, [14, 10], [14, 21]]]]], [], 0, null, ["loc", [null, [14, 4], [18, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/range-text-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "float: left;padding-left:5px;padding-right:5px;");
          var el3 = dom.createTextNode(" - ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [5]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createAttrMorph(element2, 'class');
          morphs[3] = dom.createMorphAt(element2, 1, 1);
          morphs[4] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "inputSize", ["loc", [null, [4, 20], [4, 29]]]]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value1", ["loc", [null, [5, 43], [5, 49]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder1", ["loc", [null, [5, 62], [5, 74]]]]], [], []], "type", ["subexpr", "@mut", [["get", "typeInput", ["loc", [null, [5, 80], [5, 89]]]]], [], []], "focus-out", "showErrors", "id", ["subexpr", "@mut", [["get", "cssId1", ["loc", [null, [5, 116], [5, 122]]]]], [], []]], ["loc", [null, [5, 8], [5, 124]]]], ["attribute", "class", ["concat", [["get", "inputSize", ["loc", [null, [8, 20], [8, 29]]]]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value2", ["loc", [null, [9, 43], [9, 49]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder2", ["loc", [null, [9, 62], [9, 74]]]]], [], []], "type", ["subexpr", "@mut", [["get", "typeInput", ["loc", [null, [9, 80], [9, 89]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId2", ["loc", [null, [9, 93], [9, 99]]]]], [], []]], ["loc", [null, [9, 8], [9, 101]]]], ["block", "if", [["get", "showError", ["loc", [null, [13, 8], [13, 17]]]]], [], 0, null, ["loc", [null, [13, 2], [19, 9]]]], ["content", "yield", ["loc", [null, [21, 2], [21, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/range-text-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "rangeSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "help-inline", ["subexpr", "@mut", [["get", "help-inline", ["loc", [null, [1, 116], [1, 127]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 135], [1, 141]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 153], [1, 163]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 173], [1, 181]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [23, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/review-link", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner spinner-xs spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 12
                },
                "end": {
                  "line": 18,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "pficon fa fa-info-circle rhci-popover-button");
              dom.setAttribute(el1, "data-toggle", "popover");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element2, 'data-content');
              morphs[1] = dom.createElementMorph(element2);
              return morphs;
            },
            statements: [["attribute", "data-content", ["concat", [["get", "helpTextIpAddress", ["loc", [null, [16, 38], [16, 55]]]]]]], ["element", "action", ["doNothing"], ["bubbles", false], ["loc", [null, [13, 22], [13, 58]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element3, 'href');
            morphs[1] = dom.createMorphAt(element3, 0, 0);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["attribute", "href", ["get", "value", ["loc", [null, [11, 22], [11, 27]]]]], ["content", "value", ["loc", [null, [11, 46], [11, 55]]]], ["block", "if", [["get", "ipAddress", ["loc", [null, [12, 18], [12, 27]]]]], [], 0, null, ["loc", [null, [12, 12], [18, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 12
                  },
                  "end": {
                    "line": 23,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "yield", ["loc", [null, [22, 14], [22, 23]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 23,
                    "column": 12
                  },
                  "end": {
                    "line": 25,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "valueFormatted", ["loc", [null, [24, 14], [24, 32]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 12
                  },
                  "end": {
                    "line": 28,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'class');
                morphs[1] = dom.createElementMorph(element1);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["fa ", ["get", "eyeIcon", ["loc", [null, [27, 57], [27, 64]]]]]]], ["element", "action", ["showPassword"], [], ["loc", [null, [27, 19], [27, 44]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 8
                },
                "end": {
                  "line": 29,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "useYieldInstead", ["loc", [null, [21, 18], [21, 33]]]]], [], 0, 1, ["loc", [null, [21, 12], [25, 19]]]], ["block", "if", [["get", "isPassword", ["loc", [null, [26, 18], [26, 28]]]]], [], 2, null, ["loc", [null, [26, 12], [28, 19]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 31,
                      "column": 16
                    },
                    "end": {
                      "line": 33,
                      "column": 16
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "yield", ["loc", [null, [32, 18], [32, 27]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 33,
                      "column": 16
                    },
                    "end": {
                      "line": 35,
                      "column": 16
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "valueFormatted", ["loc", [null, [34, 18], [34, 36]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 12
                  },
                  "end": {
                    "line": 36,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "useYieldInstead", ["loc", [null, [31, 22], [31, 37]]]]], [], 0, 1, ["loc", [null, [31, 16], [35, 23]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 12
                  },
                  "end": {
                    "line": 39,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'class');
                morphs[1] = dom.createElementMorph(element0);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["fa ", ["get", "eyeIcon", ["loc", [null, [38, 59], [38, 66]]]]]]], ["element", "action", ["showPassword"], [], ["loc", [null, [38, 21], [38, 46]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 40,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "routeName", ["loc", [null, [30, 23], [30, 32]]]]], [], 0, null, ["loc", [null, [30, 12], [36, 24]]]], ["block", "if", [["get", "isPassword", ["loc", [null, [37, 18], [37, 28]]]]], [], 1, null, ["loc", [null, [37, 12], [39, 19]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 8
              },
              "end": {
                "line": 40,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isNotALink", ["loc", [null, [20, 18], [20, 28]]]]], [], 0, 1, ["loc", [null, [20, 8], [40, 8]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 12
                },
                "end": {
                  "line": 46,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "validationMessage", ["loc", [null, [45, 14], [45, 35]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 8
              },
              "end": {
                "line": 48,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "errorForValidation");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "link-to", [["get", "routeName", ["loc", [null, [44, 23], [44, 32]]]]], [], 0, null, ["loc", [null, [44, 12], [46, 24]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 12
                },
                "end": {
                  "line": 54,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "defaultMessage", ["loc", [null, [53, 14], [53, 32]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 8
              },
              "end": {
                "line": 56,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "defaultValue");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "link-to", [["get", "routeName", ["loc", [null, [52, 23], [52, 32]]]]], [], 0, null, ["loc", [null, [52, 12], [54, 24]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isExternalURL", ["loc", [null, [10, 14], [10, 27]]]]], [], 0, 1, ["loc", [null, [10, 8], [40, 15]]]], ["block", "if", [["get", "showValidationMessage", ["loc", [null, [42, 14], [42, 35]]]]], [], 2, null, ["loc", [null, [42, 8], [48, 15]]]], ["block", "if", [["get", "showDefaultMessage", ["loc", [null, [50, 14], [50, 32]]]]], [], 3, null, ["loc", [null, [50, 8], [56, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 59,
            "column": 6
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-6 col-md-4 col-lg-3 text-right bold");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-6 col-md-8 col-lg-9");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 1, 1);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [3, 4], [3, 13]]]], ["block", "if", [["get", "isLoading", ["loc", [null, [7, 10], [7, 19]]]]], [], 0, 1, ["loc", [null, [7, 4], [57, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/rhci-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 10
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa fa-info-circle ", ["subexpr", "if", [["get", "isDisabled", ["loc", [null, [18, 45], [18, 55]]]], "disabled"], [], ["loc", [null, [18, 40], [18, 68]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/rhci-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-1 product-item-checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "product-item-name");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "product-item-tagline");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element2, [1, 1]);
        var element4 = dom.childAt(element2, [3]);
        var element5 = dom.childAt(element4, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element1, 'id');
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createAttrMorph(element3, 'class');
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createAttrMorph(element5, 'class');
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 3, 3);
        return morphs;
      },
      statements: [["attribute", "id", ["concat", [["get", "cssId", ["loc", [null, [1, 12], [1, 17]]]]]]], ["inline", "input", [], ["type", "checkbox", "name", "isChecked", "checked", ["subexpr", "@mut", [["get", "isChecked", ["loc", [null, [3, 57], [3, 66]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [3, 76], [3, 86]]]]], [], []]], ["loc", [null, [3, 8], [3, 88]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isDisabled", ["loc", [null, [8, 30], [8, 40]]]], "disabled"], [], ["loc", [null, [8, 25], [8, 53]]]]]]], ["content", "name", ["loc", [null, [9, 14], [9, 22]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isDisabled", ["loc", [null, [13, 30], [13, 40]]]], "disabled"], [], ["loc", [null, [13, 25], [13, 53]]]]]]], ["content", "tagline", ["loc", [null, [14, 14], [14, 25]]]], ["block", "tool-tip", [], ["title", ["subexpr", "@mut", [["get", "desc", ["loc", [null, [17, 28], [17, 32]]]]], [], []]], 0, null, ["loc", [null, [17, 10], [19, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/rhci-start", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["req-rhev"], [], ["loc", [null, [27, 6], [27, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["req-openstack"], [], ["loc", [null, [31, 6], [31, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["req-cloudforms"], [], ["loc", [null, [35, 6], [35, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 40,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["req-openshift"], [], ["loc", [null, [39, 6], [39, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 53,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 60
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Next   ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-angle-right");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  \n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 60,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Select Product(s) to Deploy");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-md-4");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("Choose at least one:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("strong");
        var el4 = dom.createTextNode("Optionally, choose:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-md-4");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("To deploy the selected products, you will need:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "req-block");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "download-reqs");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "download", "");
        dom.setAttribute(el3, "href", "QCI_Requirements.txt");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "pficon pficon-save");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      Download these requirements\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "next-start");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [8]);
        var element1 = dom.childAt(fragment, [10]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element1, [7]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(element0, 3, 3);
        morphs[1] = dom.createMorphAt(element0, 5, 5);
        morphs[2] = dom.createMorphAt(element0, 11, 11);
        morphs[3] = dom.createMorphAt(element0, 13, 13);
        morphs[4] = dom.createMorphAt(element2, 1, 1);
        morphs[5] = dom.createMorphAt(element2, 3, 3);
        morphs[6] = dom.createMorphAt(element2, 5, 5);
        morphs[7] = dom.createMorphAt(element2, 7, 7);
        morphs[8] = dom.createMorphAt(element2, 9, 9);
        morphs[9] = dom.createMorphAt(element2, 11, 11);
        morphs[10] = dom.createMorphAt(element3, 1, 1);
        morphs[11] = dom.createMorphAt(element3, 3, 3);
        return morphs;
      },
      statements: [["inline", "rhci-item", [], ["isChecked", ["subexpr", "@mut", [["get", "isRhev", ["loc", [null, [9, 24], [9, 30]]]]], [], []], "name", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [9, 36], [9, 48]]]]], [], []], "tagline", ["subexpr", "@mut", [["get", "taglineRhev", ["loc", [null, [9, 57], [9, 68]]]]], [], []], "desc", ["subexpr", "@mut", [["get", "descRhev", ["loc", [null, [9, 74], [9, 82]]]]], [], []], "cssId", "is_rhev"], ["loc", [null, [9, 2], [9, 100]]]], ["inline", "rhci-item", [], ["isChecked", ["subexpr", "@mut", [["get", "isOpenStack", ["loc", [null, [10, 24], [10, 35]]]]], [], []], "name", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [10, 41], [10, 58]]]]], [], []], "tagline", ["subexpr", "@mut", [["get", "taglineOpenStack", ["loc", [null, [10, 67], [10, 83]]]]], [], []], "desc", ["subexpr", "@mut", [["get", "descOpenStack", ["loc", [null, [10, 89], [10, 102]]]]], [], []], "cssId", "is_openstack"], ["loc", [null, [10, 2], [10, 126]]]], ["inline", "rhci-item", [], ["isChecked", ["subexpr", "@mut", [["get", "isCloudForms", ["loc", [null, [16, 24], [16, 36]]]]], [], []], "name", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [16, 42], [16, 60]]]]], [], []], "tagline", ["subexpr", "@mut", [["get", "taglineCloudForms", ["loc", [null, [16, 69], [16, 86]]]]], [], []], "desc", ["subexpr", "@mut", [["get", "descCloudForms", ["loc", [null, [16, 92], [16, 106]]]]], [], []], "cssId", "is_cloudforms", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledCfme", ["loc", [null, [16, 140], [16, 154]]]]], [], []]], ["loc", [null, [16, 2], [16, 157]]]], ["inline", "rhci-item", [], ["isChecked", ["subexpr", "@mut", [["get", "isOpenShift", ["loc", [null, [17, 24], [17, 35]]]]], [], []], "name", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [17, 41], [17, 58]]]]], [], []], "tagline", ["subexpr", "@mut", [["get", "taglineOpenShift", ["loc", [null, [17, 67], [17, 83]]]]], [], []], "desc", ["subexpr", "@mut", [["get", "descOpenShift", ["loc", [null, [17, 89], [17, 102]]]]], [], []], "cssId", "is_openshift", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledOpenShift", ["loc", [null, [17, 135], [17, 154]]]]], [], []]], ["loc", [null, [17, 2], [17, 157]]]], ["inline", "partial", ["req-general"], [], ["loc", [null, [24, 4], [24, 29]]]], ["block", "if", [["get", "isRhev", ["loc", [null, [26, 10], [26, 16]]]]], [], 0, null, ["loc", [null, [26, 4], [28, 11]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [30, 10], [30, 21]]]]], [], 1, null, ["loc", [null, [30, 4], [32, 11]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [34, 10], [34, 22]]]]], [], 2, null, ["loc", [null, [34, 4], [36, 11]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [38, 10], [38, 21]]]]], [], 3, null, ["loc", [null, [38, 4], [40, 11]]]], ["inline", "partial", ["req-disconnected"], [], ["loc", [null, [42, 4], [42, 34]]]], ["block", "link-to", ["deployments"], ["class", "btn btn-default"], 4, null, ["loc", [null, [53, 4], [53, 72]]]], ["block", "link-to", [["get", "satelliteTabRouteName", ["loc", [null, [54, 15], [54, 36]]]]], ["class", "btn btn-primary", "disabled", ["subexpr", "@mut", [["get", "disableNextOnStart", ["loc", [null, [54, 70], [54, 88]]]]], [], []]], 5, null, ["loc", [null, [54, 4], [56, 16]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("fusor-ember-cli/templates/components/rhci-wizard", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberRhev", ["loc", [null, [9, 22], [9, 36]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameRhev", ["loc", [null, [9, 42], [9, 50]]]]], [], []], "routeName", "rhev", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledRhev", ["loc", [null, [9, 79], [9, 93]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [9, 112], [9, 129]]]]], [], []], "fullname", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [9, 139], [9, 151]]]]], [], []]], ["loc", [null, [9, 4], [9, 153]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberOpenstack", ["loc", [null, [13, 22], [13, 41]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameOpenStack", ["loc", [null, [13, 47], [13, 60]]]]], [], []], "routeName", "openstack", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledOpenstack", ["loc", [null, [13, 94], [13, 113]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [13, 132], [13, 149]]]]], [], []], "fullname", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [13, 159], [13, 176]]]]], [], []]], ["loc", [null, [13, 4], [13, 178]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberOpenShift", ["loc", [null, [17, 22], [17, 41]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameOpenShift", ["loc", [null, [17, 47], [17, 60]]]]], [], []], "routeName", "openshift", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledOpenShift", ["loc", [null, [17, 94], [17, 113]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [17, 132], [17, 149]]]]], [], []], "fullname", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [17, 159], [17, 176]]]]], [], []]], ["loc", [null, [17, 4], [17, 178]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberCloudForms", ["loc", [null, [21, 22], [21, 42]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameCloudForms", ["loc", [null, [21, 48], [21, 62]]]]], [], []], "routeName", "cloudforms", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledCloudForms", ["loc", [null, [21, 97], [21, 117]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [21, 136], [21, 153]]]]], [], []], "fullname", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [21, 163], [21, 181]]]]], [], []]], ["loc", [null, [21, 4], [21, 183]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberSubscriptions", ["loc", [null, [25, 22], [25, 45]]]]], [], []], "name", "Subscriptions", "routeName", "subscriptions", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledSubscriptions", ["loc", [null, [26, 15], [26, 38]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [26, 57], [26, 74]]]]], [], []]], ["loc", [null, [25, 4], [26, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("New ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" Deployment:  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "rhci-steps");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [4]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        morphs[4] = dom.createMorphAt(element1, 3, 3);
        morphs[5] = dom.createMorphAt(element1, 5, 5);
        morphs[6] = dom.createMorphAt(element1, 7, 7);
        morphs[7] = dom.createMorphAt(element1, 9, 9);
        morphs[8] = dom.createMorphAt(element1, 11, 11);
        morphs[9] = dom.createMorphAt(element1, 13, 13);
        return morphs;
      },
      statements: [["content", "nameRHCI", ["loc", [null, [1, 8], [1, 20]]]], ["content", "name", ["loc", [null, [1, 34], [1, 42]]]], ["inline", "error-message", [], ["errorMsg", ["subexpr", "@mut", [["get", "errorMsg", ["loc", [null, [3, 25], [3, 33]]]]], [], []]], ["loc", [null, [3, 0], [3, 35]]]], ["inline", "wizard-item", [], ["num", 1, "name", ["subexpr", "@mut", [["get", "nameSatellite", ["loc", [null, [6, 27], [6, 40]]]]], [], []], "routeName", ["subexpr", "@mut", [["get", "routeNameSatellite", ["loc", [null, [6, 51], [6, 69]]]]], [], []], "isDisabled", false, "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [6, 105], [6, 122]]]]], [], []]], ["loc", [null, [6, 2], [6, 124]]]], ["block", "if", [["get", "isRhev", ["loc", [null, [8, 8], [8, 14]]]]], [], 0, null, ["loc", [null, [8, 2], [10, 9]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [12, 8], [12, 19]]]]], [], 1, null, ["loc", [null, [12, 2], [14, 9]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [16, 8], [16, 19]]]]], [], 2, null, ["loc", [null, [16, 2], [18, 9]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [20, 8], [20, 20]]]]], [], 3, null, ["loc", [null, [20, 2], [22, 9]]]], ["block", "if", [["get", "isSubscriptions", ["loc", [null, [24, 8], [24, 23]]]]], [], 4, null, ["loc", [null, [24, 2], [27, 9]]]], ["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberReview", ["loc", [null, [29, 20], [29, 36]]]]], [], []], "name", "Review", "routeName", "review", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledReview", ["loc", [null, [29, 81], [29, 97]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [29, 116], [29, 133]]]]], [], []]], ["loc", [null, [29, 2], [29, 135]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/components/select-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/select-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "view", ["select"], ["content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [3, 26], [3, 33]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 40], [3, 45]]]]], [], []], "optionLabelPath", ["subexpr", "@mut", [["get", "optionLabelPath", ["loc", [null, [3, 62], [3, 77]]]]], [], []], "optionValuePath", ["subexpr", "@mut", [["get", "optionValuePath", ["loc", [null, [3, 94], [3, 109]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [3, 120], [3, 129]]]]], [], []], "prompt", ["subexpr", "@mut", [["get", "prompt", ["loc", [null, [3, 137], [3, 143]]]]], [], []], "class", "form-control", "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 168], [3, 173]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [3, 183], [3, 191]]]]], [], []]], ["loc", [null, [3, 2], [3, 193]]]], ["content", "yield", ["loc", [null, [5, 2], [5, 11]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/select-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 115], [1, 125]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 135], [1, 143]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [7, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/select-req-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 17,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                dom.setAttribute(el1, "class", "error errorForValidation");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "message", ["loc", [null, [16, 44], [16, 55]]]]],
              locals: ["message"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "validationMessages", ["loc", [null, [15, 14], [15, 32]]]]], [], 0, null, ["loc", [null, [15, 6], [17, 15]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasError", ["loc", [null, [14, 10], [14, 18]]]]], [], 0, null, ["loc", [null, [14, 4], [18, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "view", ["select"], ["id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [4, 7], [4, 12]]]]], [], []], "content", ["subexpr", "@mut", [["get", "_content", ["loc", [null, [5, 12], [5, 20]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "optionLabelPath", ["subexpr", "@mut", [["get", "optionLabelPath", ["loc", [null, [7, 20], [7, 35]]]]], [], []], "optionValuePath", ["subexpr", "@mut", [["get", "optionValuePath", ["loc", [null, [8, 20], [8, 35]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [9, 14], [9, 23]]]]], [], []], "class", "form-control", "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [11, 13], [11, 21]]]]], [], []]], ["loc", [null, [3, 2], [11, 23]]]], ["block", "if", [["get", "showValidationError", ["loc", [null, [13, 8], [13, 27]]]]], [], 0, null, ["loc", [null, [13, 2], [19, 9]]]], ["content", "yield", ["loc", [null, [21, 2], [21, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 115], [1, 125]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 135], [1, 143]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 151], [1, 157]]]]], [], []], "hasError", ["subexpr", "@mut", [["get", "hasError", ["loc", [null, [1, 167], [1, 175]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [23, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/select-simple-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/select-simple-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "view", ["select"], ["content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [3, 26], [3, 33]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 40], [3, 45]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [3, 56], [3, 65]]]]], [], []], "prompt", ["subexpr", "@mut", [["get", "prompt", ["loc", [null, [3, 73], [3, 79]]]]], [], []], "class", "form-control", "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 104], [3, 109]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [3, 119], [3, 127]]]]], [], []]], ["loc", [null, [3, 2], [3, 129]]]], ["content", "yield", ["loc", [null, [5, 2], [5, 11]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/select-simple-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 115], [1, 125]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 135], [1, 143]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [7, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/sortable-objects", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/sortable-objects.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/step-number", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/step-number.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "value", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/text-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["fa ", ["get", "eyeIcon", ["loc", [null, [7, 51], [7, 58]]]], " eye-icon"]]], ["element", "action", ["showPassword"], [], ["loc", [null, [7, 13], [7, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 13,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "error errorForValidation");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "message", ["loc", [null, [12, 44], [12, 55]]]]],
            locals: ["message"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "error errorForValidation");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "each", [["get", "validationMessages", ["loc", [null, [11, 12], [11, 30]]]]], [], 0, null, ["loc", [null, [11, 4], [13, 13]]]], ["content", "errors.name", ["loc", [null, [15, 40], [15, 55]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["content", "preText", ["loc", [null, [3, 2], [3, 13]]]], ["inline", "input", [], ["class", ["subexpr", "@mut", [["get", "cssFormClass", ["loc", [null, [3, 27], [3, 39]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 46], [3, 51]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 64], [3, 75]]]]], [], []], "type", ["subexpr", "@mut", [["get", "typeInput", ["loc", [null, [3, 81], [3, 90]]]]], [], []], "focus-out", "showValidationErrors", "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 127], [3, 132]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [3, 142], [3, 150]]]]], [], []], "autocomplete", "off", "maxlength", "250"], ["loc", [null, [3, 13], [4, 19]]]], ["content", "postText", ["loc", [null, [4, 19], [4, 31]]]], ["block", "if", [["get", "canShowPassword", ["loc", [null, [6, 8], [6, 23]]]]], [], 0, null, ["loc", [null, [6, 2], [8, 9]]]], ["block", "if", [["get", "showValidationError", ["loc", [null, [10, 8], [10, 27]]]]], [], 1, null, ["loc", [null, [10, 2], [16, 9]]]], ["content", "yield", ["loc", [null, [18, 2], [18, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "help-inline", ["subexpr", "@mut", [["get", "help-inline", ["loc", [null, [1, 116], [1, 127]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 135], [1, 141]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 153], [1, 163]]]]], [], []], "hasError", ["subexpr", "@mut", [["get", "hasError", ["loc", [null, [1, 173], [1, 181]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 191], [1, 199]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [20, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/textarea-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/textarea-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [5, 42], [5, 47]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [5, 60], [5, 71]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "numRows", ["loc", [null, [5, 77], [5, 84]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [5, 88], [5, 93]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [5, 103], [5, 111]]]]], [], []]], ["loc", [null, [5, 4], [5, 113]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/textarea-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 42], [7, 47]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [7, 60], [7, 71]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [7, 75], [7, 80]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [7, 90], [7, 98]]]]], [], []]], ["loc", [null, [7, 4], [7, 100]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/textarea-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "rowsPassed", ["loc", [null, [4, 8], [4, 18]]]]], [], 0, 1, ["loc", [null, [4, 2], [8, 9]]]], ["content", "yield", ["loc", [null, [9, 2], [9, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/textarea-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 115], [1, 125]]]]], [], []], "help-inline", ["subexpr", "@mut", [["get", "help-inline", ["loc", [null, [1, 138], [1, 149]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 159], [1, 167]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/tool-tip", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tool-tip.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'src');
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "srcImage", ["loc", [null, [2, 14], [2, 22]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tool-tip.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa ", ["get", "faIcon", ["loc", [null, [5, 15], [5, 21]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tool-tip.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasImage", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "hasFaIcon", ["loc", [null, [4, 6], [4, 15]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["content", "yield", ["loc", [null, [7, 0], [7, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-deployment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 5
            },
            "end": {
              "line": 1,
              "column": 67
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-deployment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "deployment.name", ["loc", [null, [1, 47], [1, 66]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 77
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-deployment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" Edit ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-deployment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "delete-deployment-button", [], ["deployment", ["subexpr", "@mut", [["get", "deployment", ["loc", [null, [8, 46], [8, 56]]]]], [], []], "action", "openDeploymentModal"], ["loc", [null, [8, 8], [8, 87]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-deployment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [8]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[4] = dom.createMorphAt(element0, 1, 1);
        morphs[5] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", [["get", "routeNameForEdit", ["loc", [null, [1, 16], [1, 32]]]], ["get", "deployment", ["loc", [null, [1, 33], [1, 43]]]]], [], 0, null, ["loc", [null, [1, 5], [1, 79]]]], ["content", "deployment.lifecycle_environment.name", ["loc", [null, [2, 5], [2, 46]]]], ["content", "deployment.organization.name", ["loc", [null, [3, 5], [3, 37]]]], ["content", "foremanTask.state", ["loc", [null, [4, 5], [4, 26]]]], ["block", "link-to", ["deployment", ["get", "deployment", ["loc", [null, [6, 28], [6, 38]]]]], ["class", "btn btn-sm btn-default"], 1, null, ["loc", [null, [6, 4], [6, 89]]]], ["block", "if", [["get", "canDelete", ["loc", [null, [7, 10], [7, 19]]]]], [], 2, null, ["loc", [null, [7, 4], [9, 11]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-engine", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-engine.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "host.name", ["loc", [null, [7, 10], [7, 23]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 10
                },
                "end": {
                  "line": 14,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/tr-engine.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "error errorForValidation");
              var el2 = dom.createTextNode("\n                  invalid hostname\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-engine.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "host.name", ["loc", [null, [9, 36], [9, 45]]]]], [], []], "class", "form-control", "focus-out", "saveHostname", "id", ["subexpr", "@mut", [["get", "cssHostHostId", ["loc", [null, [9, 95], [9, 108]]]]], [], []]], ["loc", [null, [9, 10], [9, 110]]]], ["block", "if", [["get", "isInvalidHostname", ["loc", [null, [10, 16], [10, 33]]]]], [], 0, null, ["loc", [null, [10, 10], [14, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-engine.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "disabled", ["loc", [null, [6, 12], [6, 20]]]]], [], 0, 1, ["loc", [null, [6, 6], [15, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-engine.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Not Selected\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-engine.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" CPU");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [10]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [12]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(fragment, [14]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(fragment, [16]), 1, 1);
        return morphs;
      },
      statements: [["inline", "radio-button", [], ["value", ["subexpr", "@mut", [["get", "host", ["loc", [null, [2, 23], [2, 27]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "selectedRhevEngineHost", ["loc", [null, [2, 39], [2, 61]]]]], [], []], "changed", "engineHostChanged", "id", ["subexpr", "@mut", [["get", "cssIdHostId", ["loc", [null, [2, 93], [2, 104]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [2, 114], [2, 122]]]]], [], []]], ["loc", [null, [2, 2], [2, 124]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isSelectedAsEngine", ["loc", [null, [4, 16], [4, 34]]]], "white-font", "not-selected"], [], ["loc", [null, [4, 11], [4, 64]]]]]]], ["block", "if", [["get", "isSelectedAsEngine", ["loc", [null, [5, 10], [5, 28]]]]], [], 0, 1, ["loc", [null, [5, 4], [18, 11]]]], ["content", "host.mac", ["loc", [null, [20, 5], [20, 17]]]], ["inline", "host-type-icon", [], ["isVM", ["subexpr", "@mut", [["get", "host.is_virtual", ["loc", [null, [21, 47], [21, 62]]]]], [], []], "isInverted", ["subexpr", "@mut", [["get", "isSelectedAsEngine", ["loc", [null, [21, 74], [21, 92]]]]], [], []]], ["loc", [null, [21, 25], [21, 94]]]], ["content", "host.cpus", ["loc", [null, [22, 25], [22, 38]]]], ["content", "host.memory_human_size", ["loc", [null, [23, 25], [23, 51]]]], ["content", "host.disk_count", ["loc", [null, [24, 25], [24, 44]]]], ["content", "host.disks_human_size", ["loc", [null, [25, 25], [25, 50]]]], ["content", "host.subnet_to_s", ["loc", [null, [26, 5], [26, 25]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-hypervisor", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 10,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "host.name", ["loc", [null, [9, 10], [9, 23]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 10
                  },
                  "end": {
                    "line": 16,
                    "column": 10
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "error errorForValidation");
                var el2 = dom.createTextNode("\n                  invalid hostname\n              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 6
                },
                "end": {
                  "line": 17,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "host.name", ["loc", [null, [11, 36], [11, 45]]]]], [], []], "class", "form-control", "focus-out", "saveHostname", "id", ["subexpr", "@mut", [["get", "cssHostHostId", ["loc", [null, [11, 95], [11, 108]]]]], [], []]], ["loc", [null, [11, 10], [11, 111]]]], ["block", "if", [["get", "isInvalidHostname", ["loc", [null, [12, 16], [12, 33]]]]], [], 0, null, ["loc", [null, [12, 10], [16, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 18,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "disabled", ["loc", [null, [8, 12], [8, 20]]]]], [], 0, 1, ["loc", [null, [8, 6], [17, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "host.name", ["loc", [null, [19, 6], [19, 19]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 21,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isFreeform", ["loc", [null, [7, 10], [7, 20]]]]], [], 0, 1, ["loc", [null, [7, 4], [20, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 23,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Not Selected\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" CPU");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [10]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [12]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(fragment, [14]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(fragment, [16]), 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "name", "isSelectedAsHypervisor", "checked", ["subexpr", "@mut", [["get", "isSelectedAsHypervisor", ["loc", [null, [2, 64], [2, 86]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssIdHostId", ["loc", [null, [2, 90], [2, 101]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [2, 111], [2, 119]]]]], [], []]], ["loc", [null, [2, 2], [2, 121]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isSelectedAsHypervisor", ["loc", [null, [5, 16], [5, 38]]]], "white-font", "not-selected"], [], ["loc", [null, [5, 11], [5, 68]]]]]]], ["block", "if", [["get", "isSelectedAsHypervisor", ["loc", [null, [6, 8], [6, 30]]]]], [], 0, 1, ["loc", [null, [6, 2], [23, 9]]]], ["content", "host.mac", ["loc", [null, [25, 5], [25, 17]]]], ["inline", "host-type-icon", [], ["isVM", ["subexpr", "@mut", [["get", "host.is_virtual", ["loc", [null, [26, 47], [26, 62]]]]], [], []], "isInverted", ["subexpr", "@mut", [["get", "isSelectedAsHypervisor", ["loc", [null, [26, 74], [26, 96]]]]], [], []]], ["loc", [null, [26, 25], [26, 98]]]], ["content", "host.cpus", ["loc", [null, [27, 25], [27, 38]]]], ["content", "host.memory_human_size", ["loc", [null, [28, 25], [28, 51]]]], ["content", "host.disk_count", ["loc", [null, [29, 25], [29, 44]]]], ["content", "host.disks_human_size", ["loc", [null, [30, 25], [30, 50]]]], ["content", "host.subnet_to_s", ["loc", [null, [31, 5], [31, 25]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-management-app", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-management-app.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        return morphs;
      },
      statements: [["inline", "radio-button", [], ["value", ["subexpr", "@mut", [["get", "managementApp.id", ["loc", [null, [2, 24], [2, 40]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "consumerUUID", ["loc", [null, [2, 52], [2, 64]]]]], [], []], "changed", "changeManagementApp", "id", ["subexpr", "@mut", [["get", "org.id", ["loc", [null, [2, 98], [2, 104]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [2, 114], [2, 122]]]]], [], []]], ["loc", [null, [2, 3], [2, 124]]]], ["content", "managementApp.name", ["loc", [null, [5, 4], [5, 26]]]], ["content", "managementApp.entitlementCount", ["loc", [null, [8, 4], [8, 38]]]], ["content", "managementApp.id", ["loc", [null, [11, 4], [11, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-organization", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-organization.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        return morphs;
      },
      statements: [["inline", "radio-button", [], ["value", ["subexpr", "@mut", [["get", "org", ["loc", [null, [2, 25], [2, 28]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "selectedOrganization", ["loc", [null, [2, 40], [2, 60]]]]], [], []], "changed", "organizationChanged", "id", ["subexpr", "@mut", [["get", "org.id", ["loc", [null, [2, 94], [2, 100]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [2, 110], [2, 118]]]]], [], []]], ["loc", [null, [2, 4], [2, 120]]]], ["content", "org.name", ["loc", [null, [5, 4], [5, 16]]]], ["content", "org.description", ["loc", [null, [8, 4], [8, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-subscription-manifest", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-subscription-manifest.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [10]), 1, 1);
        return morphs;
      },
      statements: [["content", "subscription.product_name", ["loc", [null, [1, 5], [1, 34]]]], ["content", "subscription.contract_number", ["loc", [null, [2, 5], [2, 37]]]], ["inline", "moment", [["get", "subscription.start_date", ["loc", [null, [3, 34], [3, 57]]]], "ll"], [], ["loc", [null, [3, 25], [3, 64]]]], ["inline", "moment", [["get", "subscription.end_date", ["loc", [null, [4, 34], [4, 55]]]], "ll"], [], ["loc", [null, [4, 25], [4, 62]]]], ["content", "qtyColumn", ["loc", [null, [5, 25], [5, 38]]]], ["content", "subscription.total_quantity", ["loc", [null, [6, 25], [6, 56]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-subscription-saved", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 5
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-subscription-saved.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center white-font");
        var el2 = dom.createTextNode("\n     ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "checked", true, "disabled", true], ["loc", [null, [2, 2], [2, 54]]]], ["content", "subscription.product_name", ["loc", [null, [4, 5], [4, 34]]]], ["content", "subscription.contract_number", ["loc", [null, [5, 5], [5, 37]]]], ["content", "subscription.quantity_attached", ["loc", [null, [7, 5], [7, 39]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-subscription", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 21,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-subscription.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "input", "name", "qtyToAttach", "value", ["subexpr", "@mut", [["get", "subscription.qtyToAttach", ["loc", [null, [14, 32], [14, 56]]]]], [], []], "size", 5, "maxlength", 5, "class", "center {{if isQtyInValid 'invalid-input'}}", "disabled", ["subexpr", "@mut", [["get", "disableQty", ["loc", [null, [18, 35], [18, 45]]]]], [], []], "focus-out", "setValidQty"], ["loc", [null, [13, 5], [20, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 23,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-subscription.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Not Selected\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-subscription.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [16]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [10]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [12]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [14]), 1, 1);
        morphs[8] = dom.createAttrMorph(element0, 'class');
        morphs[9] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "name", "isSelectedSubscription", "checked", ["subexpr", "@mut", [["get", "subscription.isSelectedSubscription", ["loc", [null, [2, 64], [2, 99]]]]], [], []], "id", ["subexpr", "@mut", [["get", "subscription.id", ["loc", [null, [2, 103], [2, 118]]]]], [], []]], ["loc", [null, [2, 2], [2, 120]]]], ["content", "subscription.productName", ["loc", [null, [4, 5], [4, 33]]]], ["content", "subscription.contractNumber", ["loc", [null, [5, 5], [5, 36]]]], ["content", "systemType", ["loc", [null, [6, 5], [6, 19]]]], ["inline", "moment", [["get", "subscription.startDate", ["loc", [null, [7, 14], [7, 36]]]], "ll"], [], ["loc", [null, [7, 5], [7, 43]]]], ["inline", "moment", [["get", "subscription.endDate", ["loc", [null, [8, 14], [8, 34]]]], "ll"], [], ["loc", [null, [8, 5], [8, 41]]]], ["content", "subscription.qtyAttached", ["loc", [null, [9, 25], [9, 53]]]], ["content", "subscription.qtyAvailableOfTotal", ["loc", [null, [10, 25], [10, 61]]]], ["attribute", "class", ["concat", ["text-center ", ["subexpr", "if", [["get", "subscription.isSelectedSubscription", ["loc", [null, [11, 28], [11, 63]]]], "black-font", "not-selected"], [], ["loc", [null, [11, 23], [11, 93]]]]]]], ["block", "if", [["get", "subscription.isSelectedSubscription", ["loc", [null, [12, 8], [12, 43]]]]], [], 0, 1, ["loc", [null, [12, 2], [23, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-task", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 11,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element1, 'href');
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["attribute", "href", ["get", "task.taskUrl", ["loc", [null, [10, 20], [10, 32]]]]], ["content", "task.result", ["loc", [null, [10, 51], [10, 66]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "task.result", ["loc", [null, [12, 10], [12, 25]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 6
              },
              "end": {
                "line": 18,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["attribute", "href", ["get", "task.taskUrl", ["loc", [null, [17, 20], [17, 32]]]]], ["content", "percentProgress", ["loc", [null, [17, 51], [17, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "percentProgress", ["loc", [null, [19, 10], [19, 29]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "target", "_blank");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "center");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "center");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1, 1]);
          var element3 = dom.childAt(fragment, [5]);
          var element4 = dom.childAt(fragment, [7]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element2, 'href');
          morphs[1] = dom.createMorphAt(element2, 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[3] = dom.createAttrMorph(element3, 'class');
          morphs[4] = dom.createMorphAt(element3, 1, 1);
          morphs[5] = dom.createAttrMorph(element4, 'class');
          morphs[6] = dom.createMorphAt(element4, 1, 1);
          morphs[7] = dom.createMorphAt(dom.childAt(fragment, [9]), 1, 1);
          return morphs;
        },
        statements: [["attribute", "href", ["get", "task.taskUrl", ["loc", [null, [3, 16], [3, 28]]]]], ["content", "actionNameAndRepository", ["loc", [null, [3, 47], [3, 74]]]], ["content", "task.state", ["loc", [null, [6, 6], [6, 20]]]], ["attribute", "class", ["concat", ["center ", ["get", "textBold", ["loc", [null, [8, 22], [8, 30]]]], " ", ["get", "textColor", ["loc", [null, [8, 35], [8, 44]]]]]]], ["block", "if", [["get", "isError", ["loc", [null, [9, 12], [9, 19]]]]], [], 0, 1, ["loc", [null, [9, 6], [13, 13]]]], ["attribute", "class", ["concat", ["center ", ["get", "textBold", ["loc", [null, [15, 22], [15, 30]]]], " ", ["get", "textColor", ["loc", [null, [15, 35], [15, 44]]]]]]], ["block", "if", [["get", "isError", ["loc", [null, [16, 12], [16, 19]]]]], [], 2, 3, ["loc", [null, [16, 6], [20, 13]]]], ["inline", "moment", [["get", "task.started_at", ["loc", [null, [23, 15], [23, 30]]]], "lll"], [], ["loc", [null, [23, 6], [23, 38]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "task", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, null, ["loc", [null, [1, 0], [25, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/wizard-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/wizard-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(". ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "num", ["loc", [null, [2, 2], [2, 9]]]], ["content", "name", ["loc", [null, [2, 11], [2, 19]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/wizard-item.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(". ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["content", "num", ["loc", [null, [5, 4], [5, 11]]]], ["content", "name", ["loc", [null, [5, 13], [5, 21]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/wizard-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "routeName", ["loc", [null, [4, 13], [4, 22]]]]], [], 0, null, ["loc", [null, [4, 2], [6, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/wizard-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isDisabled", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/wizard-step", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/wizard-step.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-sm-8 col-md-9 col-lg-10 col-sm-push-4 col-md-push-3 col-lg-push-2 sidebar-pf-right");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-sm-4 col-md-3 col-lg-2 col-sm-pull-8 col-md-pull-9 col-lg-pull-10 sidebar-pf sidebar-pf-left");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "nav nav-pills nav-stacked");
        var el3 = dom.createTextNode("\n       ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'style');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createAttrMorph(element1, 'style');
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "style", ["concat", [["get", "minHeightStyle", ["loc", [null, [1, 109], [1, 123]]]]]]], ["content", "outlet", ["loc", [null, [2, 4], [2, 14]]]], ["attribute", "style", ["concat", [["get", "minHeightStyle", ["loc", [null, [5, 119], [5, 133]]]]]]], ["content", "yield", ["loc", [null, [7, 7], [7, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/configure-environment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-success rhci-alert");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-check-circle-o green-circle");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n         \n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" added successfully.\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "selectedEnvironment.name", ["loc", [null, [7, 8], [7, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Immediately ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element6, 'class');
          morphs[1] = dom.createMorphAt(element6, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "deploymentController.isStarted", ["loc", [null, [20, 26], [20, 56]]]], "disabled"], [], ["loc", [null, [20, 21], [20, 69]]]]]]], ["inline", "tool-tip", [], ["faIcon", "fa-info-circle blue-active", "title", "Choosing to not use a lifecycle environment will result in a faster deployment time, but new content will become available to your deployment automatically.  If you use a lifecycle environment, then content needs to be manually published to that environment to be available."], ["loc", [null, [21, 22], [22, 317]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n        After manually publishing them ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createMorphAt(element5, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [32, 24], [32, 33]]]], "disabled"], [], ["loc", [null, [32, 19], [32, 46]]]]]]], ["inline", "tool-tip", [], ["faIcon", "fa-info-circle blue-active", "title", "For updates to be available within a deployment, they must be published to the lifecycle environment that is assigned to that deployment."], ["loc", [null, [33, 39], [34, 166]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 4
              },
              "end": {
                "line": 55,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info rhci-alert");
            var el2 = dom.createTextNode("\n          No lifecycle environments are in organization ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            return morphs;
          },
          statements: [["content", "selectedOrganization.name", ["loc", [null, [53, 64], [53, 93]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 4
                },
                "end": {
                  "line": 69,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "path-selector");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("ul");
              dom.setAttribute(el2, "class", "path-list");
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("li");
              dom.setAttribute(el3, "class", "path-list-item");
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("label");
              dom.setAttribute(el4, "class", "path-list-item-label");
              var el5 = dom.createTextNode("\n                 \n              ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "env-path-list-item", [], ["env", ["subexpr", "@mut", [["get", "libraryEnv", ["loc", [null, [58, 37], [58, 47]]]]], [], []], "selectedEnvironment", ["subexpr", "@mut", [["get", "selectedEnvironment", ["loc", [null, [59, 53], [59, 72]]]]], [], []], "action", "selectEnvironment", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [61, 42], [61, 51]]]]], [], []]], ["loc", [null, [58, 12], [61, 53]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 70,
                    "column": 6
                  },
                  "end": {
                    "line": 88,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "path-selector");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("ul");
                dom.setAttribute(el2, "class", "path-list");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("li");
                dom.setAttribute(el3, "class", "path-list-item");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("label");
                dom.setAttribute(el4, "class", "path-list-item-label");
                var el5 = dom.createTextNode("\n                 \n              ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(element2, 1, 1);
                morphs[1] = dom.createMorphAt(element2, 3, 3);
                return morphs;
              },
              statements: [["inline", "env-path-list-item", [], ["env", ["subexpr", "@mut", [["get", "libraryEnv", ["loc", [null, [73, 37], [73, 47]]]]], [], []], "selectedEnvironment", ["subexpr", "@mut", [["get", "selectedEnvironment", ["loc", [null, [74, 53], [74, 72]]]]], [], []], "action", "selectEnvironment", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [76, 42], [76, 51]]]]], [], []]], ["loc", [null, [73, 12], [76, 53]]]], ["inline", "env-path-list-item", [], ["env", ["subexpr", "@mut", [["get", "env", ["loc", [null, [77, 37], [77, 40]]]]], [], []], "selectedEnvironment", ["subexpr", "@mut", [["get", "selectedEnvironment", ["loc", [null, [78, 53], [78, 72]]]]], [], []], "action", "selectEnvironment", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [80, 42], [80, 51]]]]], [], []]], ["loc", [null, [77, 12], [80, 53]]]]],
              locals: ["env"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 69,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "each", [["get", "priorLibraryEnvironments", ["loc", [null, [70, 14], [70, 38]]]]], [], 0, null, ["loc", [null, [70, 6], [88, 15]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 4
              },
              "end": {
                "line": 89,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasOnlyLibraryEnvironment", ["loc", [null, [55, 14], [55, 39]]]]], [], 0, 1, ["loc", [null, [55, 4], [89, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 0
            },
            "end": {
              "line": 99,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "style", "margin-top:15px;");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-default");
          var el5 = dom.createTextNode("\n        New Environment Path\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [0, 1]);
          var element4 = dom.childAt(element3, [3, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element3, 1, 1);
          morphs[1] = dom.createAttrMorph(element4, 'disabled');
          morphs[2] = dom.createElementMorph(element4);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasNoEnvironments", ["loc", [null, [51, 10], [51, 27]]]]], [], 0, 1, ["loc", [null, [51, 4], [89, 11]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [92, 77], [92, 86]]]]], ["element", "action", ["newEnvironment"], [], ["loc", [null, [92, 38], [92, 65]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 117,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Loading ... ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-angle-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 119,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Next ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-angle-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 111,
                "column": 4
              },
              "end": {
                "line": 121,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element1, 'disabled');
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "disableNextOnLifecycleEnvironment", ["loc", [null, [113, 25], [113, 58]]]]], ["element", "action", ["saveDeployment", ["get", "step1DRouteName", ["loc", [null, [112, 40], [112, 55]]]]], [], ["loc", [null, [112, 14], [112, 57]]]], ["block", "if", [["get", "deployment.isSaving", ["loc", [null, [115, 16], [115, 35]]]]], [], 0, 1, ["loc", [null, [115, 10], [119, 17]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 121,
                "column": 4
              },
              "end": {
                "line": 127,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("\n          Next ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-angle-right");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "disableNextOnLifecycleEnvironment", ["loc", [null, [123, 25], [123, 58]]]]], ["element", "action", ["saveDeployment", ["get", "step1DRouteName", ["loc", [null, [122, 40], [122, 55]]]]], [], ["loc", [null, [122, 14], [122, 57]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 106,
              "column": 0
            },
            "end": {
              "line": 128,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "deployment.isNew", ["loc", [null, [111, 10], [111, 26]]]]], [], 0, 1, ["loc", [null, [111, 4], [127, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 129,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select how this deployment's instances should receive updates.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4, "class", "lifecycle-option-help explanatory-text");
        var el5 = dom.createTextNode("\n        Updates will be available to install in the deployment as soon as they are released.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4, "class", "lifecycle-option-help explanatory-text");
        var el5 = dom.createTextNode("\n        Updates will only be available to install in the deployment after being manually published to the selected environment.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element7, [5]), 1, 1);
        morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 12, 12, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 14, 14, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showAlertMessage", ["loc", [null, [1, 6], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "radio-button", [], ["value", "immediately", "groupValue", ["subexpr", "@mut", [["get", "envSetup", ["loc", [null, [19, 53], [19, 61]]]]], [], []], "changed", "envSetupChanged", "id", "immediately", "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [19, 114], [19, 144]]]]], [], []]], 1, null, ["loc", [null, [19, 6], [24, 23]]]], ["block", "radio-button", [], ["value", "after_publishing", "groupValue", ["subexpr", "@mut", [["get", "envSetup", ["loc", [null, [31, 58], [31, 66]]]]], [], []], "changed", "envSetupChanged", "id", "after_publishing", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [31, 124], [31, 133]]]]], [], []]], 2, null, ["loc", [null, [31, 6], [36, 23]]]], ["block", "unless", [["get", "useDefaultOrgViewForEnv", ["loc", [null, [47, 10], [47, 33]]]]], [], 3, null, ["loc", [null, [47, 0], [99, 11]]]], ["inline", "partial", ["new-environment"], [], ["loc", [null, [104, 0], [104, 29]]]], ["block", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "satelliteTabRouteName", ["loc", [null, [106, 34], [106, 55]]]]], [], []], "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [108, 34], [108, 43]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [109, 35], [109, 49]]]]], [], []], "isNew", ["subexpr", "@mut", [["get", "isNew", ["loc", [null, [110, 26], [110, 31]]]]], [], []]], 4, null, ["loc", [null, [106, 0], [128, 21]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/configure-environment.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "fusor-ember-cli/templates/configure-environment.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Environments ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/configure-organization", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-organization.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-success rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-check-circle-o green-circle");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" added successfully.\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "selectedOrganization.name", ["loc", [null, [7, 10], [7, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/configure-organization.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-5");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Choose an organization for this deployment. Organizations divide hosts into logical groups based on ownership, purpose, content, security level, or other divisions.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-4");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "table table-bordered small fusor-table");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "org-radio-btn");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Description");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [6, 1, 1, 3]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 12, 12, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "showAlertMessage", ["loc", [null, [1, 6], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["inline", "tr-organization", [], ["org", ["subexpr", "@mut", [["get", "defaultOrg", ["loc", [null, [34, 32], [34, 42]]]]], [], []], "selectedOrganization", ["subexpr", "@mut", [["get", "selectedOrganization", ["loc", [null, [35, 49], [35, 69]]]]], [], []], "action", "selectOrganization", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [37, 37], [37, 46]]]]], [], []]], ["loc", [null, [34, 10], [37, 48]]]], ["inline", "partial", ["new-organization"], [], ["loc", [null, [45, 0], [45, 30]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "satelliteTabRouteName", ["loc", [null, [47, 33], [47, 54]]]]], [], []], "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "lifecycleEnvironmentTabRouteName", ["loc", [null, [49, 33], [49, 65]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOnConfigureOrganization", ["loc", [null, [50, 31], [50, 65]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [51, 33], [51, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [52, 34], [52, 48]]]]], [], []], "isNew", ["subexpr", "@mut", [["get", "isNew", ["loc", [null, [53, 25], [53, 30]]]]], [], []]], ["loc", [null, [47, 0], [53, 32]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/configure-organization.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "fusor-ember-cli/templates/configure-organization.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Organizations ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/consumer", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/consumer.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/continue-deployment-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/continue-deployment-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/continue-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Continue QCI Deployment - ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [3, 8], [5, 29]]]], ["content", "deploymentInModal.name", ["loc", [null, [6, 58], [6, 84]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/continue-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Are you sure that you want to deploy ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("? There\n        are warnings that were found that could cause problems during the\n        deployment.\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "deploymentInModal.name", ["loc", [null, [10, 45], [10, 71]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/continue-deployment-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          Cancel\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 4
              },
              "end": {
                "line": 21,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/continue-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-warning");
            var el2 = dom.createTextNode("Yes, Continue");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [2]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createElementMorph(element0);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "btn btn-default"], 0, null, ["loc", [null, [16, 8], [18, 29]]]], ["element", "action", ["installDeployment"], [], ["loc", [null, [19, 30], [19, 60]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/continue-deployment-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [2, 4], [7, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [9, 4], [13, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [15, 4], [21, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/continue-deployment-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "continueDeploymentModal", "open-if", ["subexpr", "@mut", [["get", "continueDeploymentModalOpen", ["loc", [null, [1, 65], [1, 92]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "continueDeploymentModalClosed", ["loc", [null, [1, 102], [1, 131]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [22, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/debug-deployment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 47,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/debug-deployment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("ID: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("  (isNew: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(")\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nDesc: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nOrg: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("   (");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(") ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nEnv: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("     (");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(") ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasName: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableTabConfigureOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableTabLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableAll: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnDeploymentName: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnConfigureOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledRhev: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledOpenstack: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledCloudForms: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledSubscriptions: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledReview: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_rhev: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_openstack: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_cfme: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_openshift: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(27);
        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 11, 11, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 13, 13, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 15, 15, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 19, 19, contextualElement);
        morphs[7] = dom.createMorphAt(fragment, 21, 21, contextualElement);
        morphs[8] = dom.createMorphAt(fragment, 23, 23, contextualElement);
        morphs[9] = dom.createMorphAt(fragment, 27, 27, contextualElement);
        morphs[10] = dom.createMorphAt(fragment, 31, 31, contextualElement);
        morphs[11] = dom.createMorphAt(fragment, 35, 35, contextualElement);
        morphs[12] = dom.createMorphAt(fragment, 39, 39, contextualElement);
        morphs[13] = dom.createMorphAt(fragment, 43, 43, contextualElement);
        morphs[14] = dom.createMorphAt(fragment, 47, 47, contextualElement);
        morphs[15] = dom.createMorphAt(fragment, 51, 51, contextualElement);
        morphs[16] = dom.createMorphAt(fragment, 55, 55, contextualElement);
        morphs[17] = dom.createMorphAt(fragment, 59, 59, contextualElement);
        morphs[18] = dom.createMorphAt(fragment, 65, 65, contextualElement);
        morphs[19] = dom.createMorphAt(fragment, 69, 69, contextualElement);
        morphs[20] = dom.createMorphAt(fragment, 73, 73, contextualElement);
        morphs[21] = dom.createMorphAt(fragment, 77, 77, contextualElement);
        morphs[22] = dom.createMorphAt(fragment, 81, 81, contextualElement);
        morphs[23] = dom.createMorphAt(fragment, 85, 85, contextualElement);
        morphs[24] = dom.createMorphAt(fragment, 89, 89, contextualElement);
        morphs[25] = dom.createMorphAt(fragment, 93, 93, contextualElement);
        morphs[26] = dom.createMorphAt(fragment, 97, 97, contextualElement);
        return morphs;
      },
      statements: [["content", "id", ["loc", [null, [1, 4], [1, 10]]]], ["content", "isNew", ["loc", [null, [1, 20], [1, 29]]]], ["content", "description", ["loc", [null, [3, 6], [3, 21]]]], ["content", "organization.name", ["loc", [null, [5, 5], [5, 26]]]], ["content", "organization.id", ["loc", [null, [5, 35], [5, 54]]]], ["content", "organization", ["loc", [null, [5, 56], [5, 72]]]], ["content", "lifecycle_environment.name", ["loc", [null, [7, 5], [7, 35]]]], ["content", "lifecycle_environment.id", ["loc", [null, [7, 46], [7, 74]]]], ["content", "lifecycle_environment", ["loc", [null, [7, 76], [7, 101]]]], ["content", "hasName", ["loc", [null, [9, 9], [9, 20]]]], ["content", "hasOrganization", ["loc", [null, [11, 17], [11, 36]]]], ["content", "hasLifecycleEnvironment", ["loc", [null, [13, 25], [13, 52]]]], ["content", "disableTabConfigureOrganization", ["loc", [null, [15, 33], [15, 68]]]], ["content", "disableTabLifecycleEnvironment", ["loc", [null, [17, 32], [17, 66]]]], ["content", "disableAll", ["loc", [null, [19, 12], [19, 26]]]], ["content", "disableNextOnDeploymentName", ["loc", [null, [21, 29], [21, 60]]]], ["content", "disableNextOnConfigureOrganization", ["loc", [null, [23, 36], [23, 74]]]], ["content", "disableNextOnLifecycleEnvironment", ["loc", [null, [25, 35], [25, 72]]]], ["content", "isDisabledRhev", ["loc", [null, [28, 16], [28, 34]]]], ["content", "isDisabledOpenstack", ["loc", [null, [30, 21], [30, 44]]]], ["content", "isDisabledCloudForms", ["loc", [null, [32, 22], [32, 46]]]], ["content", "isDisabledSubscriptions", ["loc", [null, [34, 25], [34, 52]]]], ["content", "isDisabledReview", ["loc", [null, [36, 18], [36, 38]]]], ["content", "model.deploy_rhev", ["loc", [null, [38, 13], [38, 34]]]], ["content", "model.deploy_openstack", ["loc", [null, [40, 18], [40, 44]]]], ["content", "model.deploy_cfme", ["loc", [null, [42, 13], [42, 34]]]], ["content", "model.deploy_openshift", ["loc", [null, [44, 18], [44, 44]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/delete-deployment-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/delete-deployment-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/delete-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Delete QCI Deployment - ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [3, 8], [5, 29]]]], ["content", "deploymentInModal.name", ["loc", [null, [6, 56], [6, 82]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/delete-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Are you sure that you want to delete this deployment - ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("?\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "deploymentInModal.name", ["loc", [null, [10, 63], [10, 89]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 8
                },
                "end": {
                  "line": 16,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/delete-deployment-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          No\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 19,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/delete-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-danger");
            var el2 = dom.createTextNode("Yes, Delete Deployment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [2]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createElementMorph(element0);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "btn btn-default"], 0, null, ["loc", [null, [14, 8], [16, 29]]]], ["element", "action", ["deleteDeployment", ["get", "deploymentInModal", ["loc", [null, [17, 58], [17, 75]]]]], [], ["loc", [null, [17, 30], [17, 77]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/delete-deployment-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [2, 4], [7, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [9, 4], [11, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [13, 4], [19, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/delete-deployment-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "deleteDeploymentModal", "open-if", ["subexpr", "@mut", [["get", "isOpenModal", ["loc", [null, [1, 63], [1, 74]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "isCloseModal", ["loc", [null, [1, 84], [1, 96]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [20, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/delete-node-confirmation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/delete-node-confirmation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/delete-node-confirmation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Delete Node ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [3, 4], [5, 25]]]], ["content", "nodeToDeleteLabel", ["loc", [null, [6, 40], [6, 61]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/delete-node-confirmation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createTextNode("Are you sure you want to delete node ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("?");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "nodeToDeleteLabel", ["loc", [null, [12, 48], [12, 69]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/delete-node-confirmation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "id", "deleteNodeCancelButton");
            dom.setAttribute(el1, "class", "btn btn-default delete-node-cancel-button");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "id", "deleteNodeConfirmButton");
            dom.setAttribute(el1, "class", "btn btn-danger delete-node-confirm-button");
            var el2 = dom.createTextNode("Delete");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["cancelDeleteNode"], [], ["loc", [null, [18, 104], [18, 133]]]], ["element", "action", ["confirmDeleteNode"], [], ["loc", [null, [19, 105], [19, 135]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/delete-node-confirmation.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [2, 2], [7, 21]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [9, 2], [15, 20]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [17, 2], [20, 22]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 13
          }
        },
        "moduleName": "fusor-ember-cli/templates/delete-node-confirmation.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "deleteNodeConfirmationModal", "closeIfClickedOutside", ["subexpr", "@mut", [["get", "handleOutsideClick", ["loc", [null, [1, 83], [1, 101]]]]], [], []], "open-if", ["subexpr", "@mut", [["get", "openDeleteNodeConfirmation", ["loc", [null, [1, 110], [1, 136]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "closeDeleteNodeConfirmation", ["loc", [null, [1, 146], [1, 173]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [21, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/deployment/start", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment/start.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "rhci-start", [], ["isRhev", ["subexpr", "@mut", [["get", "isRhev", ["loc", [null, [1, 20], [1, 26]]]]], [], []], "isOpenStack", ["subexpr", "@mut", [["get", "isOpenStack", ["loc", [null, [2, 25], [2, 36]]]]], [], []], "isCloudForms", ["subexpr", "@mut", [["get", "isCloudForms", ["loc", [null, [3, 26], [3, 38]]]]], [], []], "isOpenShift", ["subexpr", "@mut", [["get", "isOpenShift", ["loc", [null, [4, 25], [4, 36]]]]], [], []], "nameRedHat", ["subexpr", "@mut", [["get", "nameRedHat", ["loc", [null, [5, 24], [5, 34]]]]], [], []], "nameRhev", ["subexpr", "@mut", [["get", "nameRhev", ["loc", [null, [6, 22], [6, 30]]]]], [], []], "nameOpenStack", ["subexpr", "@mut", [["get", "nameOpenStack", ["loc", [null, [7, 27], [7, 40]]]]], [], []], "nameCloudForms", ["subexpr", "@mut", [["get", "nameCloudForms", ["loc", [null, [8, 28], [8, 42]]]]], [], []], "nameOpenShift", ["subexpr", "@mut", [["get", "nameOpenShift", ["loc", [null, [9, 27], [9, 40]]]]], [], []], "fullnameRhev", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [10, 26], [10, 38]]]]], [], []], "fullnameOpenStack", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [11, 31], [11, 48]]]]], [], []], "fullnameCloudForms", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [12, 32], [12, 50]]]]], [], []], "fullnameOpenShift", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [13, 31], [13, 48]]]]], [], []], "isUpstream", ["subexpr", "@mut", [["get", "isUpstream", ["loc", [null, [14, 24], [14, 34]]]]], [], []], "satelliteTabRouteName", ["subexpr", "@mut", [["get", "satelliteTabRouteName", ["loc", [null, [15, 35], [15, 56]]]]], [], []], "disableNextOnStart", ["subexpr", "@mut", [["get", "disableNextOnStart", ["loc", [null, [16, 32], [16, 50]]]]], [], []], "isDisabledOpenShift", ["subexpr", "@mut", [["get", "isDisabledOpenShift", ["loc", [null, [17, 33], [17, 52]]]]], [], []], "isDisabledCfme", ["subexpr", "@mut", [["get", "isDisabledCfme", ["loc", [null, [18, 28], [18, 42]]]]], [], []]], ["loc", [null, [1, 0], [19, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/configure-environment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/configure-environment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["configure-environment"], [], ["loc", [null, [1, 0], [1, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/configure-environment.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/configure-environment.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Environments ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/configure-organization", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 36
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/configure-organization.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", ["configure-organization"], [], ["loc", [null, [1, 0], [1, 36]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/configure-organization.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/configure-organization.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Organizations ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["satellite/index"], [], ["loc", [null, [1, 0], [1, 29]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading ....\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["satellite"], [], ["loc", [null, [1, 0], [1, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/start", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 30
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/start.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", ["deployment/start"], [], ["loc", [null, [1, 0], [1, 30]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["deployment"], [], ["loc", [null, [1, 0], [1, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
          return morphs;
        },
        statements: [["inline", "rhci-wizard", [], ["name", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [4, 21], [4, 31]]]]], [], []], "nameRHCI", ["subexpr", "@mut", [["get", "nameRHCI", ["loc", [null, [5, 25], [5, 33]]]]], [], []], "nameSatellite", ["subexpr", "@mut", [["get", "nameSatellite", ["loc", [null, [6, 30], [6, 43]]]]], [], []], "routeNameSatellite", ["subexpr", "@mut", [["get", "routeNameSatellite", ["loc", [null, [7, 35], [7, 53]]]]], [], []], "nameRhev", ["subexpr", "@mut", [["get", "nameRhev", ["loc", [null, [8, 25], [8, 33]]]]], [], []], "nameOpenStack", ["subexpr", "@mut", [["get", "nameOpenStack", ["loc", [null, [9, 30], [9, 43]]]]], [], []], "nameCloudForms", ["subexpr", "@mut", [["get", "nameCloudForms", ["loc", [null, [10, 31], [10, 45]]]]], [], []], "nameOpenShift", ["subexpr", "@mut", [["get", "nameOpenShift", ["loc", [null, [11, 30], [11, 43]]]]], [], []], "fullnameRhev", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [12, 29], [12, 41]]]]], [], []], "fullnameOpenStack", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [13, 34], [13, 51]]]]], [], []], "fullnameCloudForms", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [14, 35], [14, 53]]]]], [], []], "fullnameOpenShift", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [15, 34], [15, 51]]]]], [], []], "stepNumberRhev", ["subexpr", "@mut", [["get", "stepNumberRhev", ["loc", [null, [16, 31], [16, 45]]]]], [], []], "stepNumberOpenstack", ["subexpr", "@mut", [["get", "stepNumberOpenstack", ["loc", [null, [17, 36], [17, 55]]]]], [], []], "stepNumberCloudForms", ["subexpr", "@mut", [["get", "stepNumberCloudForms", ["loc", [null, [18, 37], [18, 57]]]]], [], []], "stepNumberOpenShift", ["subexpr", "@mut", [["get", "stepNumberOpenShift", ["loc", [null, [19, 36], [19, 55]]]]], [], []], "stepNumberSubscriptions", ["subexpr", "@mut", [["get", "stepNumberSubscriptions", ["loc", [null, [20, 40], [20, 63]]]]], [], []], "stepNumberReview", ["subexpr", "@mut", [["get", "stepNumberReview", ["loc", [null, [21, 33], [21, 49]]]]], [], []], "isDisabledRhev", ["subexpr", "@mut", [["get", "isDisabledRhev", ["loc", [null, [22, 31], [22, 45]]]]], [], []], "isDisabledOpenstack", ["subexpr", "@mut", [["get", "isDisabledOpenstack", ["loc", [null, [23, 36], [23, 55]]]]], [], []], "isDisabledCloudForms", ["subexpr", "@mut", [["get", "isDisabledCloudForms", ["loc", [null, [24, 37], [24, 57]]]]], [], []], "isDisabledOpenShift", ["subexpr", "@mut", [["get", "isDisabledOpenShift", ["loc", [null, [25, 36], [25, 55]]]]], [], []], "isDisabledSubscriptions", ["subexpr", "@mut", [["get", "isDisabledSubscriptions", ["loc", [null, [26, 40], [26, 63]]]]], [], []], "isDisabledReview", ["subexpr", "@mut", [["get", "isDisabledReview", ["loc", [null, [27, 33], [27, 49]]]]], [], []], "isRhev", ["subexpr", "@mut", [["get", "isRhev", ["loc", [null, [28, 23], [28, 29]]]]], [], []], "isOpenStack", ["subexpr", "@mut", [["get", "isOpenStack", ["loc", [null, [29, 28], [29, 39]]]]], [], []], "isCloudForms", ["subexpr", "@mut", [["get", "isCloudForms", ["loc", [null, [30, 29], [30, 41]]]]], [], []], "isOpenShift", ["subexpr", "@mut", [["get", "isOpenShift", ["loc", [null, [31, 28], [31, 39]]]]], [], []], "isSubscriptions", ["subexpr", "@mut", [["get", "isSubscriptions", ["loc", [null, [32, 32], [32, 47]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [33, 34], [33, 51]]]]], [], []], "errorMsg", ["subexpr", "@mut", [["get", "errorMsg", ["loc", [null, [34, 25], [34, 33]]]]], [], []]], ["loc", [null, [4, 2], [35, 18]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row parent-sidebar-pf");
        var el2 = dom.createTextNode("\n ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "unless", [["get", "isHideWizard", ["loc", [null, [1, 10], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [37, 11]]]], ["content", "outlet", ["loc", [null, [40, 1], [40, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/deployments", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 7,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      New Deployment\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 38,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "tr-deployment", [], ["deployment", ["subexpr", "@mut", [["get", "deployment", ["loc", [null, [37, 33], [37, 43]]]]], [], []]], ["loc", [null, [37, 6], [37, 45]]]]],
        locals: ["deployment"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployments.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Deployments");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "new-deployment-button");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "clearfix");
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "form-group filter-deployments");
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-md-5");
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "btn btn-default");
        dom.setAttribute(el4, "style", "margin-left:-20px");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-search");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Search");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n   ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "table table-bordered table-striped small deployments-table");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Name ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Environment ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Organization ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Status ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1, "class", "displaying-entries");
        var el2 = dom.createTextNode("\n  Displaying ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" of ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" entries\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [14, 1]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [8, 1, 1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [12, 3]), 1, 1);
        morphs[3] = dom.createMorphAt(element0, 0, 0);
        morphs[4] = dom.createMorphAt(element0, 2, 2);
        morphs[5] = dom.createMorphAt(fragment, 16, 16, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 18, 18, contextualElement);
        return morphs;
      },
      statements: [["block", "link-to", ["deployment-new.start"], ["class", "btn btn-success"], 0, null, ["loc", [null, [5, 2], [7, 14]]]], ["inline", "input", [], ["type", "text", "class", "form-control filter-input", "placeholder", "Filter ...", "value", ["subexpr", "@mut", [["get", "searchDeploymentString", ["loc", [null, [17, 33], [17, 55]]]]], [], []]], ["loc", [null, [15, 7], [17, 57]]]], ["block", "each", [["get", "filteredDeployments", ["loc", [null, [36, 10], [36, 29]]]]], [], 1, null, ["loc", [null, [36, 2], [38, 11]]]], ["content", "filteredDeployments.length", ["loc", [null, [43, 21], [43, 51]]]], ["content", "model.length", ["loc", [null, [43, 55], [43, 71]]]], ["content", "outlet", ["loc", [null, [46, 0], [46, 10]]]], ["inline", "partial", ["delete-deployment-modal"], [], ["loc", [null, [48, 0], [48, 37]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/edit-deployment-role", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 8
                },
                "end": {
                  "line": 6,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element13 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element13);
              return morphs;
            },
            statements: [["element", "action", ["cancelEditRole"], [], ["loc", [null, [5, 37], [5, 64]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Edit Deployment Role - ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [4, 8], [6, 29]]]], ["content", "editedRole.name", ["loc", [null, [7, 55], [7, 74]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 51,
                      "column": 44
                    },
                    "end": {
                      "line": 53,
                      "column": 44
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "check-f", [], ["label", ["subexpr", "@mut", [["get", "roleParameter.displayId", ["loc", [null, [52, 62], [52, 85]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "roleParameter.value", ["loc", [null, [52, 94], [52, 113]]]]], [], []], "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "roleParameter.description", ["loc", [null, [52, 182], [52, 207]]]]], [], []]], ["loc", [null, [52, 46], [52, 209]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.10",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 54,
                        "column": 46
                      },
                      "end": {
                        "line": 56,
                        "column": 46
                      }
                    },
                    "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "text-f", [], ["label", ["subexpr", "@mut", [["get", "roleParameter.displayId", ["loc", [null, [55, 63], [55, 86]]]]], [], []], "value", ["subexpr", "@mut", [["get", "roleParameter.value", ["loc", [null, [55, 93], [55, 112]]]]], [], []], "type", "password", "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "roleParameter.description", ["loc", [null, [55, 197], [55, 222]]]]], [], []]], ["loc", [null, [55, 48], [55, 224]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.10",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 56,
                        "column": 46
                      },
                      "end": {
                        "line": 58,
                        "column": 46
                      }
                    },
                    "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                                ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "text-f", [], ["label", ["subexpr", "@mut", [["get", "roleParameter.displayId", ["loc", [null, [57, 63], [57, 86]]]]], [], []], "value", ["subexpr", "@mut", [["get", "roleParameter.value", ["loc", [null, [57, 93], [57, 112]]]]], [], []], "type", ["subexpr", "@mut", [["get", "roleParameter.inputType", ["loc", [null, [57, 118], [57, 141]]]]], [], []], "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "roleParameter.description", ["loc", [null, [57, 210], [57, 235]]]]], [], []]], ["loc", [null, [57, 48], [57, 237]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 53,
                      "column": 44
                    },
                    "end": {
                      "line": 59,
                      "column": 44
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "rolerParameter.isPassword", ["loc", [null, [54, 52], [54, 77]]]]], [], 0, 1, ["loc", [null, [54, 46], [58, 53]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 50,
                    "column": 40
                  },
                  "end": {
                    "line": 60,
                    "column": 40
                  }
                },
                "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "roleParameter.isBoolean", ["loc", [null, [51, 50], [51, 73]]]]], [], 0, 1, ["loc", [null, [51, 44], [59, 51]]]]],
              locals: ["roleParameter"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "nav nav-tabs nav-tabs-pf");
              dom.setAttribute(el1, "role", "tablist");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              dom.setAttribute(el2, "role", "presentation");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3, "aria-controls", "overall-settings");
              dom.setAttribute(el3, "role", "tab");
              dom.setAttribute(el3, "data-toggle", "tab");
              var el4 = dom.createTextNode("Overall Settings");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              dom.setAttribute(el2, "role", "presentation");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3, "aria-controls", "service-configuration");
              dom.setAttribute(el3, "role", "tab");
              dom.setAttribute(el3, "data-toggle", "tab");
              var el4 = dom.createTextNode("Service Configuration");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "tab-content");
              dom.setAttribute(el1, "style", "margin-top: 30px;");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "role", "tabpanel");
              dom.setAttribute(el2, "id", "overall-settings");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "form-horizontal");
              var el4 = dom.createTextNode("\n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("fieldset");
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "form-group");
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("label");
              dom.setAttribute(el6, "class", "control-label col-sm-4 ");
              var el7 = dom.createTextNode("Name");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("div");
              dom.setAttribute(el6, "class", "col-sm-8");
              var el7 = dom.createTextNode("\n                                    ");
              dom.appendChild(el6, el7);
              var el7 = dom.createElement("input");
              dom.setAttribute(el7, "class", "form-control");
              dom.setAttribute(el7, "type", "text");
              dom.setAttribute(el7, "readOnly", "true");
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                ");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                            ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "form-group");
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("label");
              dom.setAttribute(el6, "class", "control-label col-sm-4 ");
              var el7 = dom.createTextNode("Description");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("div");
              dom.setAttribute(el6, "class", "col-sm-8");
              var el7 = dom.createTextNode("\n                                    ");
              dom.appendChild(el6, el7);
              var el7 = dom.createElement("textarea");
              dom.setAttribute(el7, "class", "form-control");
              dom.setAttribute(el7, "type", "text");
              dom.setAttribute(el7, "readOnly", "true");
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                ");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                            ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                        ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "role", "tabpanel");
              dom.setAttribute(el2, "id", "service-configuration");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "row");
              var el4 = dom.createTextNode("\n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4, "class", "col-md-12");
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "form-horizontal");
              var el6 = dom.createTextNode("\n                                ");
              dom.appendChild(el5, el6);
              var el6 = dom.createElement("fieldset");
              var el7 = dom.createTextNode("\n                                    ");
              dom.appendChild(el6, el7);
              var el7 = dom.createElement("div");
              dom.setAttribute(el7, "class", "required");
              var el8 = dom.createTextNode("\n");
              dom.appendChild(el7, el8);
              var el8 = dom.createComment("");
              dom.appendChild(el7, el8);
              var el8 = dom.createTextNode("                                    ");
              dom.appendChild(el7, el8);
              dom.appendChild(el6, el7);
              var el7 = dom.createTextNode("\n                                ");
              dom.appendChild(el6, el7);
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("\n                            ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                        ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(element2, [1]);
              var element4 = dom.childAt(element3, [1]);
              var element5 = dom.childAt(element2, [3]);
              var element6 = dom.childAt(element5, [1]);
              var element7 = dom.childAt(fragment, [3]);
              var element8 = dom.childAt(element7, [1]);
              var element9 = dom.childAt(element8, [1, 1]);
              var element10 = dom.childAt(element9, [1, 3, 1]);
              var element11 = dom.childAt(element9, [3, 3, 1]);
              var element12 = dom.childAt(element7, [3]);
              var morphs = new Array(12);
              morphs[0] = dom.createAttrMorph(element3, 'class');
              morphs[1] = dom.createElementMorph(element4);
              morphs[2] = dom.createAttrMorph(element5, 'class');
              morphs[3] = dom.createElementMorph(element6);
              morphs[4] = dom.createAttrMorph(element8, 'class');
              morphs[5] = dom.createAttrMorph(element10, 'value');
              morphs[6] = dom.createAttrMorph(element11, 'value');
              morphs[7] = dom.createMorphAt(element9, 5, 5);
              morphs[8] = dom.createMorphAt(element9, 7, 7);
              morphs[9] = dom.createMorphAt(element9, 9, 9);
              morphs[10] = dom.createAttrMorph(element12, 'class');
              morphs[11] = dom.createMorphAt(dom.childAt(element12, [1, 1, 1, 1, 1]), 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["get", "settingsTabActiveClass", ["loc", [null, [15, 48], [15, 70]]]]], ["element", "action", ["doShowSettings"], [], ["loc", [null, [16, 85], [16, 112]]]], ["attribute", "class", ["get", "configTabActiveClass", ["loc", [null, [18, 48], [18, 68]]]]], ["element", "action", ["doShowConfig"], [], ["loc", [null, [19, 91], [19, 116]]]], ["attribute", "class", ["concat", ["tab-pane deployment-role-settings-content ", ["get", "showRoleSettings", ["loc", [null, [23, 88], [23, 104]]]]]]], ["attribute", "value", ["get", "editedRole.name", ["loc", [null, [29, 84], [29, 99]]]]], ["attribute", "value", ["get", "editedRole.description", ["loc", [null, [35, 87], [35, 109]]]]], ["inline", "select-f", [], ["label", "Provisioning Image", "labelSize", "col-sm-4", "inputSize", "col-sm-8", "content", ["subexpr", "@mut", [["get", "images", ["loc", [null, [38, 116], [38, 122]]]]], [], []], "value", ["subexpr", "@mut", [["get", "editedRoleImage", ["loc", [null, [38, 129], [38, 144]]]]], [], []], "isRequired", false, "optionLabelPath", "content.name", "optionValuePath", "content.name"], ["loc", [null, [38, 28], [38, 225]]]], ["inline", "select-f", [], ["label", "Flavor", "labelSize", "col-sm-4", "inputSize", "col-sm-8", "content", ["subexpr", "@mut", [["get", "profiles", ["loc", [null, [39, 104], [39, 112]]]]], [], []], "value", ["subexpr", "@mut", [["get", "editedRoleProfile", ["loc", [null, [39, 119], [39, 136]]]]], [], []], "isRequired", false, "optionLabelPath", "content.name", "optionValuePath", "content.name"], ["loc", [null, [39, 28], [39, 218]]]], ["inline", "text-f", [], ["label", "Number of Nodes", "type", "number", "labelSize", "col-sm-4", "inputSize", "col-sm-8", "value", ["subexpr", "@mut", [["get", "editedRoleNodeCount", ["loc", [null, [40, 123], [40, 142]]]]], [], []], "isRequired", false], ["loc", [null, [40, 28], [40, 161]]]], ["attribute", "class", ["concat", ["tab-pane deployment-role-settings-content ", ["get", "showRoleConfig", ["loc", [null, [44, 88], [44, 102]]]]]]], ["block", "each", [["get", "editedRoleParameters", ["loc", [null, [50, 48], [50, 68]]]]], [], 0, null, ["loc", [null, [50, 40], [60, 49]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 69,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "async", ["loc", [null, [11, 14], [11, 19]]]]], [], 0, 1, ["loc", [null, [11, 8], [68, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 71,
                "column": 4
              },
              "end": {
                "line": 74,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "cancel");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("Save");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            morphs[1] = dom.createElementMorph(element0);
            morphs[2] = dom.createAttrMorph(element1, 'disabled');
            morphs[3] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["attribute", "disabled", ["concat", [["get", "async", ["loc", [null, [72, 66], [72, 71]]]]]]], ["element", "action", ["cancelEditRole"], [], ["loc", [null, [72, 75], [72, 102]]]], ["attribute", "disabled", ["concat", [["get", "async", ["loc", [null, [73, 66], [73, 71]]]]]]], ["element", "action", ["saveRole"], [], ["loc", [null, [73, 75], [73, 96]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 75,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [3, 4], [8, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [10, 4], [69, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [71, 4], [74, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 76,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/edit-deployment-role.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "editDeploymentRoleModal", "closeIfClickedOutside", ["subexpr", "@mut", [["get", "handleOutsideClick", ["loc", [null, [1, 79], [1, 97]]]]], [], []], "open-if", ["subexpr", "@mut", [["get", "editRoleModalOpened", ["loc", [null, [1, 106], [1, 125]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "editRoleModalClosed", ["loc", [null, [1, 135], [1, 154]]]]], [], []], "in-async", ["subexpr", "@mut", [["get", "async", ["loc", [null, [1, 164], [1, 169]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [75, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/edit-global-service-config", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 8
                },
                "end": {
                  "line": 6,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element2);
              return morphs;
            },
            statements: [["element", "action", ["cancelGlobalServiceConfig"], [], ["loc", [null, [5, 37], [5, 75]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Edit Global Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [4, 8], [6, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 19,
                      "column": 26
                    },
                    "end": {
                      "line": 21,
                      "column": 26
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "check-f", [], ["label", ["subexpr", "@mut", [["get", "planParameter.displayId", ["loc", [null, [20, 44], [20, 67]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "planParameter.value", ["loc", [null, [20, 76], [20, 95]]]]], [], []], "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "planParameter.description", ["loc", [null, [20, 164], [20, 189]]]]], [], []]], ["loc", [null, [20, 28], [20, 191]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.10",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 22,
                        "column": 28
                      },
                      "end": {
                        "line": 24,
                        "column": 28
                      }
                    },
                    "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "text-f", [], ["label", ["subexpr", "@mut", [["get", "planParameter.displayId", ["loc", [null, [23, 45], [23, 68]]]]], [], []], "value", ["subexpr", "@mut", [["get", "planParameter.value", ["loc", [null, [23, 75], [23, 94]]]]], [], []], "type", "password", "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "planParameter.description", ["loc", [null, [23, 180], [23, 205]]]]], [], []]], ["loc", [null, [23, 30], [23, 207]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.10",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 24,
                        "column": 28
                      },
                      "end": {
                        "line": 26,
                        "column": 28
                      }
                    },
                    "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "text-f", [], ["label", ["subexpr", "@mut", [["get", "planParameter.displayId", ["loc", [null, [25, 45], [25, 68]]]]], [], []], "value", ["subexpr", "@mut", [["get", "planParameter.value", ["loc", [null, [25, 75], [25, 94]]]]], [], []], "type", ["subexpr", "@mut", [["get", "planParameter.inputType", ["loc", [null, [25, 100], [25, 123]]]]], [], []], "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "planParameter.description", ["loc", [null, [25, 192], [25, 217]]]]], [], []]], ["loc", [null, [25, 30], [25, 219]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 21,
                      "column": 26
                    },
                    "end": {
                      "line": 27,
                      "column": 26
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "rolerParameter.isPassword", ["loc", [null, [22, 34], [22, 59]]]]], [], 0, 1, ["loc", [null, [22, 28], [26, 35]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 24
                  },
                  "end": {
                    "line": 28,
                    "column": 24
                  }
                },
                "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "planParameter.isBoolean", ["loc", [null, [19, 32], [19, 55]]]]], [], 0, 1, ["loc", [null, [19, 26], [27, 33]]]]],
              locals: ["planParameter"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 8
                },
                "end": {
                  "line": 33,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "role", "tabpanel");
              dom.setAttribute(el1, "class", "tab-pane active global-config-settings-content");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-horizontal");
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("fieldset");
              var el4 = dom.createTextNode("\n                      ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4, "class", "required");
              var el5 = dom.createTextNode("\n");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("                      ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                  ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 1]), 1, 1);
              return morphs;
            },
            statements: [["block", "each", [["get", "editedPlanParameters", ["loc", [null, [18, 32], [18, 52]]]]], [], 0, null, ["loc", [null, [18, 24], [28, 33]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 34,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "async", ["loc", [null, [11, 14], [11, 19]]]]], [], 0, 1, ["loc", [null, [11, 8], [33, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 4
              },
              "end": {
                "line": 39,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "cancel");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("Save");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            morphs[1] = dom.createElementMorph(element0);
            morphs[2] = dom.createAttrMorph(element1, 'disabled');
            morphs[3] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["attribute", "disabled", ["concat", [["get", "async", ["loc", [null, [37, 66], [37, 71]]]]]]], ["element", "action", ["cancelGlobalServiceConfig"], [], ["loc", [null, [37, 75], [37, 113]]]], ["attribute", "disabled", ["concat", [["get", "async", ["loc", [null, [38, 66], [38, 71]]]]]]], ["element", "action", ["saveGlobalServiceConfig"], [], ["loc", [null, [38, 75], [38, 111]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 40,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [3, 4], [8, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [10, 4], [34, 22]]]], ["block", "em-modal-footer", [], ["class", "modal-button-bar"], 2, null, ["loc", [null, [36, 4], [39, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 41,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/edit-global-service-config.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "editGlobalServiceConfigModal", "closeIfClickedOutside", ["subexpr", "@mut", [["get", "handleOutsideClick", ["loc", [null, [1, 84], [1, 102]]]]], [], []], "open-if", ["subexpr", "@mut", [["get", "editGlobalServiceConfigModalOpened", ["loc", [null, [1, 111], [1, 145]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "editGlobalServiceConfigModalClosed", ["loc", [null, [1, 155], [1, 189]]]]], [], []], "in-async", ["subexpr", "@mut", [["get", "async", ["loc", [null, [1, 199], [1, 204]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [40, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/engine/discovered-host", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/engine/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n        Loading ....\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 10
              },
              "end": {
                "line": 58,
                "column": 10
              }
            },
            "moduleName": "fusor-ember-cli/templates/engine/discovered-host.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("             ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "tr-engine", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [53, 30], [53, 34]]]]], [], []], "selectedRhevEngineHost", ["subexpr", "@mut", [["get", "selectedRhevEngineHost", ["loc", [null, [54, 48], [54, 70]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [55, 34], [55, 43]]]]], [], []], "action", "onEngineChanged", "setIfHostnameInvalid", "setIfHostnameInvalid"], ["loc", [null, [53, 13], [57, 70]]]]],
          locals: ["host"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/engine/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "rhev-searchbar clearfix");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("form");
          dom.setAttribute(el2, "class", "form-inline");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-5");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "form-group");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "rhev-search-box");
          var el6 = dom.createTextNode("\n                  ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-7 text-right");
          var el4 = dom.createTextNode("\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" selected\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-default btn-sm");
          var el5 = dom.createTextNode("\n                Refresh Data\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "class", "table table-bordered small fusor-table");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("thead");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-checkbox");
          var el5 = dom.createTextNode(" ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-hostname");
          var el5 = dom.createTextNode(" Host Name ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-mac-address");
          var el5 = dom.createTextNode(" MAC Address ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-host-type text-center");
          var el5 = dom.createTextNode(" Host Type ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-cpu text-center");
          var el5 = dom.createTextNode(" CPU ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-memory text-center");
          var el5 = dom.createTextNode(" Memory ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-disks text-center");
          var el5 = dom.createTextNode(" # Disks ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-diskspace text-center");
          var el5 = dom.createTextNode(" Disk Space ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-network");
          var el5 = dom.createTextNode(" Network ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tbody");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1, 1]), 1, 1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createAttrMorph(element2, 'disabled');
          morphs[3] = dom.createElementMorph(element2);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [3, 3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "form-control rhev-search-input", "placeholder", " Search ...", "value", ["subexpr", "@mut", [["get", "searchString", ["loc", [null, [19, 37], [19, 49]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [19, 59], [19, 68]]]]], [], []]], ["loc", [null, [17, 18], [19, 70]]]], ["content", "numSelected", ["loc", [null, [26, 12], [26, 27]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [29, 31], [29, 40]]]]], ["element", "action", ["refreshDiscoveredHosts"], [], ["loc", [null, [28, 51], [28, 86]]]], ["block", "each", [["get", "filteredHosts", ["loc", [null, [52, 18], [52, 31]]]]], [], 0, null, ["loc", [null, [52, 10], [58, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 73,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/engine/discovered-host.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-lg-9");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoadingHosts", ["loc", [null, [4, 10], [4, 24]]]]], [], 0, 1, ["loc", [null, [4, 4], [62, 11]]]], ["inline", "cancel-back-next", [], ["backRouteName", "rhev-setup", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "engineNextRouteName", ["loc", [null, [69, 33], [69, 52]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOnEngine", ["loc", [null, [70, 31], [70, 50]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [71, 33], [71, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [72, 34], [72, 48]]]]], [], []]], ["loc", [null, [67, 0], [72, 50]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/engine", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/engine.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select a target machine for the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(":\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["content", "engineTabNameLowercase", ["loc", [null, [5, 38], [5, 64]]]], ["content", "outlet", ["loc", [null, [8, 4], [8, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/entitlements.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/entitlements.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/hypervisor/discovered-host", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n        Loading ....\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 16
                },
                "end": {
                  "line": 33,
                  "column": 16
                }
              },
              "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createTextNode("Deselect all (");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(")");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createMorphAt(element2, 1, 1);
              return morphs;
            },
            statements: [["element", "action", ["setUncheckAll"], [], ["loc", [null, [32, 21], [32, 47]]]], ["content", "availableHosts.length", ["loc", [null, [32, 62], [32, 87]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 16
                },
                "end": {
                  "line": 35,
                  "column": 16
                }
              },
              "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createTextNode("Select all (");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(")");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["element", "action", ["setCheckAll"], [], ["loc", [null, [34, 21], [34, 45]]]], ["content", "availableHosts.length", ["loc", [null, [34, 58], [34, 83]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 12
              },
              "end": {
                "line": 37,
                "column": 12
              }
            },
            "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "rhev-select-all");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "isAllChecked", ["loc", [null, [31, 22], [31, 34]]]]], [], 0, 1, ["loc", [null, [31, 16], [35, 23]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 69,
                "column": 8
              },
              "end": {
                "line": 84,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("           ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "tr-hypervisor", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [70, 32], [70, 36]]]]], [], []], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [71, 33], [71, 38]]]]], [], []], "isCustomScheme", ["subexpr", "@mut", [["get", "isCustomScheme", ["loc", [null, [72, 42], [72, 56]]]]], [], []], "isMac", ["subexpr", "@mut", [["get", "isMac", ["loc", [null, [73, 33], [73, 38]]]]], [], []], "isHypervisorN", ["subexpr", "@mut", [["get", "isHypervisorN", ["loc", [null, [74, 41], [74, 54]]]]], [], []], "customPreprendName", ["subexpr", "@mut", [["get", "customPreprendName", ["loc", [null, [75, 46], [75, 64]]]]], [], []], "isFreeform", ["subexpr", "@mut", [["get", "isFreeform", ["loc", [null, [76, 38], [76, 48]]]]], [], []], "num", ["subexpr", "@mut", [["get", "host.id", ["loc", [null, [77, 31], [77, 38]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [78, 36], [78, 45]]]]], [], []], "filteredHosts", ["subexpr", "@mut", [["get", "filteredHosts", ["loc", [null, [79, 41], [79, 54]]]]], [], []], "setIfHostnameInvalid", "setIfHostnameInvalid", "checkAll", ["subexpr", "@mut", [["get", "checkAll", ["loc", [null, [81, 36], [81, 44]]]]], [], []], "uncheckAll", ["subexpr", "@mut", [["get", "uncheckAll", ["loc", [null, [82, 38], [82, 48]]]]], [], []]], ["loc", [null, [70, 11], [83, 29]]]]],
          locals: ["host"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "rhev-searchbar clearfix");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("form");
          dom.setAttribute(el2, "class", "form-inline");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-5");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "form-group");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "rhev-search-box");
          var el6 = dom.createTextNode("\n                  ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-7 text-right");
          var el4 = dom.createTextNode("\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" selected\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-default btn-sm");
          var el5 = dom.createTextNode("\n                Edit Naming Scheme\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-default btn-sm");
          var el5 = dom.createTextNode("\n                Refresh Data\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "class", "table table-bordered small fusor-table");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("thead");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-checkbox");
          var el5 = dom.createTextNode(" ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-hostname");
          var el5 = dom.createTextNode(" Host Name ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-mac-address");
          var el5 = dom.createTextNode(" MAC Address ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-host-type text-center");
          var el5 = dom.createTextNode(" Host Type ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-cpu text-center");
          var el5 = dom.createTextNode(" CPU ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-memory text-center");
          var el5 = dom.createTextNode(" Memory ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-disks text-center");
          var el5 = dom.createTextNode(" # Disks ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-diskspace text-center");
          var el5 = dom.createTextNode(" Disk Space ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          dom.setAttribute(el4, "class", "rhev-network");
          var el5 = dom.createTextNode(" Network ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tbody");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1, 1]);
          var element4 = dom.childAt(element3, [3]);
          var element5 = dom.childAt(element4, [5]);
          var element6 = dom.childAt(element4, [7]);
          var morphs = new Array(8);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [1, 1, 1]), 1, 1);
          morphs[1] = dom.createMorphAt(element4, 1, 1);
          morphs[2] = dom.createMorphAt(element4, 3, 3);
          morphs[3] = dom.createAttrMorph(element5, 'disabled');
          morphs[4] = dom.createElementMorph(element5);
          morphs[5] = dom.createAttrMorph(element6, 'disabled');
          morphs[6] = dom.createElementMorph(element6);
          morphs[7] = dom.createMorphAt(dom.childAt(fragment, [3, 3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "form-control rhev-search-input", "placeholder", " Search ...", "value", ["subexpr", "@mut", [["get", "searchString", ["loc", [null, [19, 37], [19, 49]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [20, 40], [20, 49]]]]], [], []]], ["loc", [null, [17, 18], [20, 51]]]], ["content", "model.length", ["loc", [null, [27, 12], [27, 28]]]], ["block", "if", [["get", "isNotStarted", ["loc", [null, [29, 18], [29, 30]]]]], [], 0, null, ["loc", [null, [29, 12], [37, 19]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [40, 31], [40, 40]]]]], ["element", "action", ["openNamingSchemeModal"], [], ["loc", [null, [39, 51], [39, 85]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [45, 31], [45, 40]]]]], ["element", "action", ["refreshDiscoveredHosts"], [], ["loc", [null, [44, 51], [44, 86]]]], ["block", "each", [["get", "filteredHosts", ["loc", [null, [69, 16], [69, 29]]]]], [], 1, null, ["loc", [null, [69, 8], [84, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 93,
              "column": 0
            },
            "end": {
              "line": 98,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-primary");
          var el2 = dom.createTextNode("Next ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "fa fa-angle-right");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'disabled');
          morphs[1] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["attribute", "disabled", ["get", "disableNextOnHypervisor", ["loc", [null, [97, 89], [97, 112]]]]], ["element", "action", ["saveHyperVisors", "rhev-options"], [], ["loc", [null, [97, 10], [97, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 101,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-lg-9");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoadingHosts", ["loc", [null, [4, 10], [4, 24]]]]], [], 0, 1, ["loc", [null, [4, 4], [88, 11]]]], ["block", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "hypervisorBackRouteName", ["loc", [null, [93, 34], [93, 57]]]]], [], []], "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [95, 34], [95, 43]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [96, 35], [96, 49]]]]], [], []]], 2, null, ["loc", [null, [93, 0], [98, 21]]]], ["inline", "partial", ["naming-scheme-modal"], [], ["loc", [null, [100, 0], [100, 33]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/hypervisor", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/hypervisor.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select one or more target machines to be hypervisors.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 5, 5);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [10, 4], [10, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "spinner-text");
        var el2 = dom.createTextNode("\n  Loading ....\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/mainmenu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 10
            },
            "end": {
              "line": 13,
              "column": 62
            }
          },
          "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("FUSOR-EMBER-CLI / QCI DEMO");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 10
            },
            "end": {
              "line": 14,
              "column": 51
            }
          },
          "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("All Deployments");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 10
            },
            "end": {
              "line": 15,
              "column": 59
            }
          },
          "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("New Deployment");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 16,
              "column": 37
            }
          },
          "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("README");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "style", "position: static; top: 0px;");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "navbar-header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "navbar-toggle collapsed");
        dom.setAttribute(el3, "data-toggle", "collapse");
        dom.setAttribute(el3, "data-target", "#bs-example-navbar-collapse-1");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "sr-only");
        var el5 = dom.createTextNode("Toggle navigation");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "class", "navbar-brand");
        dom.setAttribute(el3, "href", "#");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "nav navbar-nav");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "/tests?coverage=true");
        var el6 = dom.createTextNode("Run Tests");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["navbar navbar-default navbar-inner navbar-fixed-top persist-header ", ["subexpr", "if", [["get", "isUpstream", ["loc", [null, [1, 84], [1, 94]]]], "navbar-inner-upstream"], [], ["loc", [null, [1, 79], [1, 120]]]]]]], ["block", "link-to", ["deployments"], [], 0, null, ["loc", [null, [13, 10], [13, 74]]]], ["block", "link-to", ["deployments"], [], 1, null, ["loc", [null, [14, 10], [14, 63]]]], ["block", "link-to", ["deployment-new.start"], [], 2, null, ["loc", [null, [15, 10], [15, 71]]]], ["block", "link-to", ["readme"], [], 3, null, ["loc", [null, [16, 10], [16, 49]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("fusor-ember-cli/templates/naming-scheme-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Edit Naming Scheme");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [9, 8], [11, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 40,
                      "column": 20
                    },
                    "end": {
                      "line": 45,
                      "column": 20
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("1");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("br");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("2");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("br");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("3");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("br");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 9, 9, contextualElement);
                  return morphs;
                },
                statements: [["content", "customPreprendName", ["loc", [null, [42, 30], [42, 52]]]], ["content", "customPreprendName", ["loc", [null, [43, 30], [43, 52]]]], ["content", "customPreprendName", ["loc", [null, [44, 30], [44, 52]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 32,
                    "column": 16
                  },
                  "end": {
                    "line": 46,
                    "column": 16
                  }
                },
                "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "text-f", [], ["label", "Prepend host names with", "value", ["subexpr", "@mut", [["get", "customPreprendName", ["loc", [null, [34, 35], [34, 53]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [35, 38], [35, 47]]]]], [], []], "placeholder", "Enter custom prefix", "labelSize", "col-md-4", "inputSize", "col-md-5"], ["loc", [null, [33, 20], [38, 51]]]], ["block", "base-f", [], ["label", "Three host example", "labelSize", "col-md-4"], 0, null, ["loc", [null, [40, 20], [45, 31]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 49,
                      "column": 20
                    },
                    "end": {
                      "line": 53,
                      "column": 20
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        hypervisor1");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("br");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                        hypervisor2");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("br");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                        hypervisor3");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("br");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 48,
                    "column": 16
                  },
                  "end": {
                    "line": 54,
                    "column": 16
                  }
                },
                "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "base-f", [], ["label", "Three host example", "labelSize", "col-md-4"], 0, null, ["loc", [null, [49, 20], [53, 31]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 8
                },
                "end": {
                  "line": 59,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("\n            Enforcing a naming scheme will ensure all selected hypervisors get named automatically and consistently.\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("form");
              dom.setAttribute(el1, "class", "form-horizontal");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-group");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [3, 1]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(element2, 1, 1);
              morphs[1] = dom.createMorphAt(element2, 3, 3);
              morphs[2] = dom.createMorphAt(element2, 5, 5);
              return morphs;
            },
            statements: [["inline", "select-simple-f", [], ["label", "Host naming scheme", "content", ["subexpr", "@mut", [["get", "namingOptions", ["loc", [null, [26, 42], [26, 55]]]]], [], []], "value", ["subexpr", "@mut", [["get", "hostNamingScheme", ["loc", [null, [27, 40], [27, 56]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [28, 43], [28, 52]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-5"], ["loc", [null, [25, 16], [30, 56]]]], ["block", "if", [["get", "isCustomScheme", ["loc", [null, [32, 22], [32, 36]]]]], [], 0, null, ["loc", [null, [32, 16], [46, 23]]]], ["block", "if", [["get", "isHypervisorN", ["loc", [null, [48, 22], [48, 35]]]]], [], 1, null, ["loc", [null, [48, 16], [54, 23]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 4
              },
              "end": {
                "line": 60,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "async", ["loc", [null, [16, 14], [16, 19]]]]], [], 0, 1, ["loc", [null, [16, 8], [59, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 62,
                "column": 4
              },
              "end": {
                "line": 65,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("Edit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createAttrMorph(element1, 'disabled');
            return morphs;
          },
          statements: [["element", "action", ["cancelNamingScheme"], [], ["loc", [null, [63, 16], [63, 47]]]], ["attribute", "disabled", ["get", "async", ["loc", [null, [64, 65], [64, 70]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 67,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [8, 4], [13, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [15, 4], [60, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [62, 4], [65, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 68,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/naming-scheme-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal-form", [], ["configName", "bs", "id", "namingSchemeModal", "open-if", ["subexpr", "@mut", [["get", "isOpenNamingSchemeModal", ["loc", [null, [3, 25], [3, 48]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "isCloseNamingSchemeModal", ["loc", [null, [4, 26], [4, 50]]]]], [], []], "on-submit", "saveNamingScheme", "in-async", ["subexpr", "@mut", [["get", "async", ["loc", [null, [6, 26], [6, 31]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [67, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/new-environment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 10,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-environment.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Create Environment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [8, 8], [10, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 8
                },
                "end": {
                  "line": 17,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-environment.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 21,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-environment.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["inline", "text-f", [], ["label", "Environment Name", "value", ["subexpr", "@mut", [["get", "newEnvName", ["loc", [null, [18, 52], [18, 62]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8"], ["loc", [null, [18, 12], [18, 106]]]], ["inline", "text-f", [], ["label", "Label", "value", ["subexpr", "@mut", [["get", "envLabelName", ["loc", [null, [19, 41], [19, 53]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8"], ["loc", [null, [19, 12], [19, 97]]]], ["inline", "textarea-f", [], ["label", "Description (Optional)", "value", ["subexpr", "@mut", [["get", "description", ["loc", [null, [20, 62], [20, 73]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8"], ["loc", [null, [20, 12], [20, 117]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "async", ["loc", [null, [15, 14], [15, 19]]]]], [], 0, 1, ["loc", [null, [15, 8], [21, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 4
              },
              "end": {
                "line": 26,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("Submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "async", ["loc", [null, [25, 65], [25, 70]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [7, 4], [12, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [14, 4], [22, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [24, 4], [26, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-environment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal-form", [], ["configName", "bs", "id", "newLifecycleEnvironmentModal", "open-if", ["subexpr", "@mut", [["get", "openNewEnvironmentModal", ["loc", [null, [3, 25], [3, 48]]]]], [], []], "on-submit", "createEnvironment", "in-async", ["subexpr", "@mut", [["get", "async", ["loc", [null, [5, 26], [5, 31]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [28, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration-auto", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-auto.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "select-req-f", [], ["cssId", "autoVendorInputIpmi", "label", ["subexpr", "@mut", [["get", "newNodeVendorLabel", ["loc", [null, [17, 26], [17, 44]]]]], [], []], "labelSize", "col-xs-3", "inputSize", "col-xs-4", "content", ["subexpr", "@mut", [["get", "vendors", ["loc", [null, [20, 28], [20, 35]]]]], [], []], "optionLabelPath", "content.label", "optionValuePath", "content.value", "value", ["subexpr", "@mut", [["get", "ipmiVendor", ["loc", [null, [23, 26], [23, 36]]]]], [], []], "isRequired", true], ["loc", [null, [16, 4], [24, 37]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-auto.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "select-req-f", [], ["cssId", "autoVendorInputSsh", "label", ["subexpr", "@mut", [["get", "newNodeVendorLabel", ["loc", [null, [27, 26], [27, 44]]]]], [], []], "labelSize", "col-xs-3", "inputSize", "col-xs-4", "content", ["subexpr", "@mut", [["get", "vendors", ["loc", [null, [30, 28], [30, 35]]]]], [], []], "optionLabelPath", "content.label", "optionValuePath", "content.value", "value", ["subexpr", "@mut", [["get", "virtVendor", ["loc", [null, [33, 26], [33, 36]]]]], [], []], "isRequired", true], ["loc", [null, [26, 4], [34, 37]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 62,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration-auto.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form-horizontal new-node-form-manual");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(element0, 9, 9);
        return morphs;
      },
      statements: [["inline", "select-req-f", [], ["cssId", "autoDriverInput", "label", "Driver", "labelSize", "col-xs-3", "inputSize", "col-xs-4", "content", ["subexpr", "@mut", [["get", "drivers", ["loc", [null, [7, 26], [7, 33]]]]], [], []], "optionLabelPath", "content.label", "optionValuePath", "content.value", "value", ["subexpr", "@mut", [["get", "nodeInfo.driver", ["loc", [null, [10, 24], [10, 39]]]]], [], []], "isValid", ["subexpr", "@mut", [["get", "isDriverValid", ["loc", [null, [11, 26], [11, 39]]]]], [], []], "showValidationError", ["subexpr", "@mut", [["get", "showDriverValidationError", ["loc", [null, [12, 38], [12, 63]]]]], [], []], "isRequired", true], ["loc", [null, [3, 2], [13, 35]]]], ["block", "if", [["get", "isIpmi", ["loc", [null, [15, 8], [15, 14]]]]], [], 0, 1, ["loc", [null, [15, 2], [35, 9]]]], ["inline", "text-f", [], ["cssId", "autoAddressInput", "label", ["subexpr", "@mut", [["get", "newNodeAddressLabel", ["loc", [null, [38, 18], [38, 37]]]]], [], []], "type", "text", "labelSize", "col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "nodeInfo.address", ["loc", [null, [42, 18], [42, 34]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostAddressValidator", ["loc", [null, [43, 22], [43, 42]]]]], [], []], "isRequired", true], ["loc", [null, [37, 2], [44, 29]]]], ["inline", "text-f", [], ["cssId", "autoIpmiUserInput", "label", ["subexpr", "@mut", [["get", "newNodeUsernameLabel", ["loc", [null, [47, 18], [47, 38]]]]], [], []], "type", "text", "labelSize", "col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "nodeInfo.username", ["loc", [null, [51, 18], [51, 35]]]]], [], []], "isRequired", true], ["loc", [null, [46, 2], [52, 29]]]], ["inline", "text-f", [], ["cssId", "autoIpmiPasswordInput", "label", ["subexpr", "@mut", [["get", "newNodePasswordLabel", ["loc", [null, [55, 18], [55, 38]]]]], [], []], "type", "password", "labelSize", "form-label-nowrap col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "nodeInfo.password", ["loc", [null, [59, 18], [59, 35]]]]], [], []], "isRequired", true], ["loc", [null, [54, 2], [60, 29]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration-csv", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 8
              },
              "end": {
                "line": 17,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "error", ["loc", [null, [16, 14], [16, 23]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row new-node-registration-csv-errors");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-offset-1  col-xs-11");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("There were errors encountered while trying to parse the CSV file.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 3]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "csvErrors", ["loc", [null, [15, 16], [15, 25]]]]], [], 0, null, ["loc", [null, [15, 8], [17, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 0
              },
              "end": {
                "line": 27,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row new-node-registration-csv-success");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-offset-1 col-xs-11");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            dom.setAttribute(el3, "class", "csv-success-message");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" nodes ready for registration.");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
            return morphs;
          },
          statements: [["content", "csvInfo.length", ["loc", [null, [24, 37], [24, 55]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasCsvInfo", ["loc", [null, [21, 10], [21, 20]]]]], [], 0, null, ["loc", [null, [21, 0], [27, 0]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-offset-1  col-xs-11");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Sample syntax for specifying nodes via CSV can be seen here:\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "/assets/r/sample-nodes.csv");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("sample-nodes.csv");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form-horizontal new-node-form-csv");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "id", "csvUploadInput");
        dom.setAttribute(el4, "class", "csv-upload-input");
        dom.setAttribute(el4, "value", "selectedCSVFile");
        dom.setAttribute(el4, "type", "file");
        dom.setAttribute(el4, "accept", ".csv");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 3, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["element", "action", ["csvFileChosen"], ["on", "change"], ["loc", [null, [6, 108], [6, 146]]]], ["block", "if", [["get", "hasCsvErrors", ["loc", [null, [10, 6], [10, 18]]]]], [], 0, 1, ["loc", [null, [10, 0], [27, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration-manual", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 2
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-manual.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "new-node-registration-mac-address", [], ["macAddress", ["subexpr", "@mut", [["get", "macAddress", ["loc", [null, [41, 51], [41, 61]]]]], [], []], "index", ["subexpr", "@mut", [["get", "key", ["loc", [null, [41, 68], [41, 71]]]]], [], []]], ["loc", [null, [41, 4], [41, 73]]]]],
        locals: ["macAddress", "key"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration-manual.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form-horizontal new-node-form-manual");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-offset-3 col-xs-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "id", "manualAddMacAddressButton");
        dom.setAttribute(el3, "class", "btn btn-primary");
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "fa fa-plus");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Add Another Node");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2, 1, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(element0, 9, 9);
        morphs[5] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [["inline", "select-req-f", [], ["cssId", "manualDriverInput", "label", "Driver", "labelSize", "col-xs-3", "inputSize", "col-xs-4", "content", ["subexpr", "@mut", [["get", "drivers", ["loc", [null, [7, 26], [7, 33]]]]], [], []], "optionLabelPath", "content.label", "optionValuePath", "content.value", "value", ["subexpr", "@mut", [["get", "nodeInfo.driver", ["loc", [null, [10, 24], [10, 39]]]]], [], []], "isValid", ["subexpr", "@mut", [["get", "isDriverValid", ["loc", [null, [11, 26], [11, 39]]]]], [], []], "showValidationError", ["subexpr", "@mut", [["get", "showDriverValidationError", ["loc", [null, [12, 38], [12, 63]]]]], [], []], "isRequired", true], ["loc", [null, [3, 2], [13, 35]]]], ["inline", "text-f", [], ["cssId", "manualAddressInput", "label", ["subexpr", "@mut", [["get", "newNodeAddressLabel", ["loc", [null, [16, 18], [16, 37]]]]], [], []], "type", "text", "labelSize", "col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "nodeInfo.address", ["loc", [null, [20, 18], [20, 34]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostAddressValidator", ["loc", [null, [21, 22], [21, 42]]]]], [], []], "isRequired", true], ["loc", [null, [15, 2], [22, 29]]]], ["inline", "text-f", [], ["cssId", "manualUsernameInput", "label", ["subexpr", "@mut", [["get", "newNodeUsernameLabel", ["loc", [null, [25, 18], [25, 38]]]]], [], []], "type", "text", "labelSize", "col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "nodeInfo.username", ["loc", [null, [29, 18], [29, 35]]]]], [], []], "isRequired", true], ["loc", [null, [24, 2], [30, 29]]]], ["inline", "text-f", [], ["cssId", "manualPasswordInput", "label", ["subexpr", "@mut", [["get", "newNodePasswordLabel", ["loc", [null, [33, 18], [33, 38]]]]], [], []], "type", "password", "labelSize", "form-label-nowrap col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "nodeInfo.password", ["loc", [null, [37, 18], [37, 35]]]]], [], []], "isRequired", true], ["loc", [null, [32, 2], [38, 29]]]], ["block", "each", [["get", "nodeInfo.macAddresses", ["loc", [null, [40, 10], [40, 31]]]]], [], 0, null, ["loc", [null, [40, 2], [42, 11]]]], ["element", "action", ["addMacAddress"], [], ["loc", [null, [46, 81], [46, 107]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration-step1-body", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 8
            },
            "end": {
              "line": 14,
              "column": 105
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 21,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["new-node-registration-auto"], [], ["loc", [null, [20, 6], [20, 46]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 8
            },
            "end": {
              "line": 25,
              "column": 103
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["new-node-registration-csv"], [], ["loc", [null, [31, 6], [31, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 102
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["new-node-registration-manual"], [], ["loc", [null, [42, 6], [42, 48]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 47,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Nodes are registered with OpenStack by connecting to their power management interfaces.\n      In some environments, nodes can be auto-detected using those interfaces.\n      Otherwise, you can upload a CSV file that includes node details, or manually provide those details for each node.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Determine how to register nodes.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-offset-1 col-xs-11");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "radio");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        Auto-detection\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "radio");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        Upload a CSV file\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "radio");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        Manual entry\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [9, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element0, 11, 11);
        return morphs;
      },
      statements: [["block", "radio-button", [], ["value", "auto_detect", "groupValue", ["subexpr", "@mut", [["get", "registerNodesMethod", ["loc", [null, [14, 55], [14, 74]]]]], [], []], "id", "optionNewNodeMethodAuto"], 0, null, ["loc", [null, [14, 8], [14, 122]]]], ["block", "if", [["get", "isNewNodeMethodAuto", ["loc", [null, [19, 10], [19, 29]]]]], [], 1, null, ["loc", [null, [19, 4], [21, 11]]]], ["block", "radio-button", [], ["value", "csv_upload", "groupValue", ["subexpr", "@mut", [["get", "registerNodesMethod", ["loc", [null, [25, 54], [25, 73]]]]], [], []], "id", "optionNewNodeMethodCSV"], 2, null, ["loc", [null, [25, 8], [25, 120]]]], ["block", "if", [["get", "isNewNodeMethodCSV", ["loc", [null, [30, 10], [30, 28]]]]], [], 3, null, ["loc", [null, [30, 4], [32, 11]]]], ["block", "radio-button", [], ["value", "manual", "groupValue", ["subexpr", "@mut", [["get", "registerNodesMethod", ["loc", [null, [36, 50], [36, 69]]]]], [], []], "id", "optionNewNodeMethodManual"], 4, null, ["loc", [null, [36, 8], [36, 119]]]], ["block", "if", [["get", "isNewNodeMethodManual", ["loc", [null, [41, 10], [41, 31]]]]], [], 5, null, ["loc", [null, [41, 4], [43, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration-step2-body", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row new-node-detect-infobar");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-1 new-node-detect-infobar-col");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "new-node-detect-infobar-left");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "fa fa-exclamation-triangle detect-nodes-error-icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-9 new-node-detect-infobar-col");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "new-node-detect-infobar-middle");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-2 new-node-detect-infobar-col");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "new-node-detect-infobar-right");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          var el5 = dom.createTextNode("Re-scan");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [5, 1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element4, [3, 1, 1]), 0, 0);
          morphs[1] = dom.createElementMorph(element5);
          return morphs;
        },
        statements: [["content", "detectNodesErrorMsg", ["loc", [null, [10, 14], [10, 37]]]], ["element", "action", ["submitDetectNodes"], [], ["loc", [null, [15, 11], [15, 41]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 0
              },
              "end": {
                "line": 37,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row new-node-detect-infobar");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1 new-node-detect-infobar-col");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "new-node-detect-infobar-left");
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "fa fa-exclamation-triangle");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-9 new-node-detect-infobar-col");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "new-node-detect-infobar-middle");
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode("Detection canceled.");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-2 new-node-detect-infobar-col");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "new-node-detect-infobar-right");
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("a");
            var el5 = dom.createTextNode("Re-scan");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 5, 1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element3);
            return morphs;
          },
          statements: [["element", "action", ["submitDetectNodes"], [], ["loc", [null, [33, 11], [33, 41]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 37,
                  "column": 0
                },
                "end": {
                  "line": 55,
                  "column": 0
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row new-node-detect-infobar");
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-1 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-left");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "spinner spinner-sm spinner-inline");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-9 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-middle");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              var el5 = dom.createTextNode("Detecting nodes...");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-2 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-right");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createTextNode("Cancel");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1, 5, 1, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element2);
              return morphs;
            },
            statements: [["element", "action", ["cancelDetectNodes"], [], ["loc", [null, [51, 11], [51, 41]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 0
                },
                "end": {
                  "line": 73,
                  "column": 0
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row new-node-detect-infobar");
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-1 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-left");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "pficon pficon-info");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-9 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-middle");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              var el5 = dom.createTextNode("Detection finished.");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-2 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-right");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createTextNode("Re-scan");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1, 5, 1, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element1);
              return morphs;
            },
            statements: [["element", "action", ["submitDetectNodes"], [], ["loc", [null, [69, 11], [69, 41]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 0
              },
              "end": {
                "line": 73,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "autoDetectNodesInProgress", ["loc", [null, [37, 10], [37, 35]]]]], [], 0, 1, ["loc", [null, [37, 0], [73, 0]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 0
            },
            "end": {
              "line": 73,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "detectNodesCanceled", ["loc", [null, [19, 10], [19, 29]]]]], [], 0, 1, ["loc", [null, [19, 0], [73, 0]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 84,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No nodes detected yet...");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 87,
                "column": 6
              },
              "end": {
                "line": 89,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("No nodes detected. Double check your connection information.");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 91,
                "column": 6
              },
              "end": {
                "line": 93,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "new-node-auto-detect-count");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" nodes need attention");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "numAutoDetectedNodesInvalidCount", ["loc", [null, [92, 46], [92, 82]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 95,
                "column": 6
              },
              "end": {
                "line": 97,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "new-node-auto-detect-count");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" set to not register");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "numAutoDetectedNodesDeselectedCount", ["loc", [null, [96, 46], [96, 85]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 99,
                "column": 6
              },
              "end": {
                "line": 101,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "new-node-auto-detect-count");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("  nodes ready to register");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "numAutoDetectedNodesValidCount", ["loc", [null, [100, 46], [100, 80]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 107,
                  "column": 12
                },
                "end": {
                  "line": 109,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "auto-node-registration-mac-address", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [108, 56], [108, 60]]]]], [], []], "index", ["subexpr", "@mut", [["get", "index", ["loc", [null, [108, 67], [108, 72]]]]], [], []]], ["loc", [null, [108, 14], [108, 74]]]]],
            locals: ["host", "index"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 104,
                "column": 8
              },
              "end": {
                "line": 111,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "new-node-detect-list-multimac");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createTextNode("Select between available interfaces for the following nodes");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
            return morphs;
          },
          statements: [["block", "each", [["get", "autoDetectedNodesMultiMac", ["loc", [null, [107, 20], [107, 45]]]]], [], 0, null, ["loc", [null, [107, 12], [109, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child5 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 116,
                  "column": 12
                },
                "end": {
                  "line": 118,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "auto-node-registration-mac-address", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [117, 56], [117, 60]]]]], [], []], "index", ["subexpr", "@mut", [["get", "index", ["loc", [null, [117, 67], [117, 72]]]]], [], []], "indexOffset", ["subexpr", "@mut", [["get", "autoDetectedNodesMultiMac.length", ["loc", [null, [117, 85], [117, 117]]]]], [], []]], ["loc", [null, [117, 14], [117, 119]]]]],
            locals: ["host", "index"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 113,
                "column": 8
              },
              "end": {
                "line": 120,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "new-node-detect-list-singlemac");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createTextNode("Nodes ready to register");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
            return morphs;
          },
          statements: [["block", "each", [["get", "autoDetectedNodesSingleMac", ["loc", [null, [116, 20], [116, 46]]]]], [], 0, null, ["loc", [null, [116, 12], [118, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "new-node-detect-hosts-container");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [8]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[4] = dom.createMorphAt(element0, 1, 1);
          morphs[5] = dom.createMorphAt(element0, 3, 3);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "noNodesDetected", ["loc", [null, [87, 12], [87, 27]]]]], [], 0, null, ["loc", [null, [87, 6], [89, 13]]]], ["block", "if", [["get", "hasInvalidAutoDetectedNodes", ["loc", [null, [91, 12], [91, 39]]]]], [], 1, null, ["loc", [null, [91, 6], [93, 13]]]], ["block", "if", [["get", "hasDeselectedAutoDetectedNodes", ["loc", [null, [95, 12], [95, 42]]]]], [], 2, null, ["loc", [null, [95, 6], [97, 13]]]], ["block", "if", [["get", "hasValidAutoDetectedNodes", ["loc", [null, [99, 12], [99, 37]]]]], [], 3, null, ["loc", [null, [99, 6], [101, 13]]]], ["block", "if", [["get", "hasAutoDetectedNodesMultiMac", ["loc", [null, [104, 14], [104, 42]]]]], [], 4, null, ["loc", [null, [104, 8], [111, 15]]]], ["block", "if", [["get", "hasAutoDetectedNodesSingleMac", ["loc", [null, [113, 14], [113, 43]]]]], [], 5, null, ["loc", [null, [113, 8], [120, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 125,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-offset-1 col-xs-10");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Choose a network interface for registration on any node with multiple detected.\n      Unselected nodes will not be registered.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-offset-1 col-xs-10");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "detectNodesErrorMsg", ["loc", [null, [1, 6], [1, 25]]]]], [], 0, 1, ["loc", [null, [1, 0], [73, 7]]]], ["block", "if", [["get", "autoDetectNodesInProgress", ["loc", [null, [84, 10], [84, 35]]]]], [], 2, 3, ["loc", [null, [84, 4], [122, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 6
                  },
                  "end": {
                    "line": 7,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "aria-hidden", "true");
                var el2 = dom.createTextNode("×");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "sr-only");
                var el2 = dom.createTextNode("Close");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 9,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h4");
              dom.setAttribute(el1, "class", "modal-title");
              var el2 = dom.createTextNode("Register Nodes");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [5, 6], [7, 27]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 12,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "aria-hidden", "true");
                var el2 = dom.createTextNode("×");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "sr-only");
                var el2 = dom.createTextNode("Close");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h4");
              dom.setAttribute(el1, "class", "modal-title");
              var el2 = dom.createTextNode("Node Auto-detection");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [10, 6], [12, 27]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStep1", ["loc", [null, [4, 10], [4, 17]]]]], [], 0, 1, ["loc", [null, [4, 4], [14, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 4
                },
                "end": {
                  "line": 20,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "partial", ["new-node-registration-step1-body"], [], ["loc", [null, [19, 6], [19, 52]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 4
                },
                "end": {
                  "line": 22,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "partial", ["new-node-registration-step2-body"], [], ["loc", [null, [21, 6], [21, 52]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 2
              },
              "end": {
                "line": 23,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStep1", ["loc", [null, [18, 10], [18, 17]]]]], [], 0, 1, ["loc", [null, [18, 4], [22, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 6
                  },
                  "end": {
                    "line": 35,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "submit");
                dom.setAttribute(el1, "id", "detectNodeSubmitButton");
                dom.setAttribute(el1, "class", "btn btn-primary detect-node-submit-button");
                var el2 = dom.createTextNode("\n          Next ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "fa fa-angle-right");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element4, 'disabled');
                morphs[1] = dom.createElementMorph(element4);
                return morphs;
              },
              statements: [["attribute", "disabled", ["get", "disableDetectNodesSubmit", ["loc", [null, [32, 27], [32, 51]]]]], ["element", "action", ["submitDetectNodes"], [], ["loc", [null, [32, 54], [32, 84]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 35,
                    "column": 6
                  },
                  "end": {
                    "line": 40,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "submit");
                dom.setAttribute(el1, "id", "newNodeSubmitButton");
                dom.setAttribute(el1, "class", "btn btn-primary new-node-submit-button");
                var el2 = dom.createTextNode("\n          Register\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element3, 'disabled');
                morphs[1] = dom.createElementMorph(element3);
                return morphs;
              },
              statements: [["attribute", "disabled", ["get", "disableNewNodesSubmit", ["loc", [null, [37, 27], [37, 48]]]]], ["element", "action", ["submitRegisterNodes"], [], ["loc", [null, [37, 51], [37, 83]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "id", "newNodeCancelButton");
              dom.setAttribute(el1, "class", "btn btn-default delete-node-cancel-button");
              var el2 = dom.createTextNode("\n        Cancel\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element5);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["element", "action", ["cancelRegisterNodes"], [], ["loc", [null, [27, 103], [27, 135]]]], ["block", "if", [["get", "isNewNodeMethodAuto", ["loc", [null, [30, 12], [30, 31]]]]], [], 0, 1, ["loc", [null, [30, 6], [40, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 41,
                  "column": 4
                },
                "end": {
                  "line": 51,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "id", "newNodeCancelButton");
              dom.setAttribute(el1, "class", "btn btn-default delete-node-cancel-button pull-left");
              var el2 = dom.createTextNode("\n        Cancel\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "id", "newNodeBackButton");
              dom.setAttribute(el1, "class", "btn btn-default detect-node-back-button");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "fa fa-angle-left");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Back\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "submit");
              dom.setAttribute(el1, "id", "newNodeSubmitButton");
              dom.setAttribute(el1, "class", "btn btn-primary new-node-submit-button");
              var el2 = dom.createTextNode("\n        Register\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(fragment, [3]);
              var element2 = dom.childAt(fragment, [5]);
              var morphs = new Array(4);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createElementMorph(element1);
              morphs[2] = dom.createAttrMorph(element2, 'disabled');
              morphs[3] = dom.createElementMorph(element2);
              return morphs;
            },
            statements: [["element", "action", ["cancelRegisterNodes"], [], ["loc", [null, [42, 113], [42, 145]]]], ["element", "action", ["backStep"], [], ["loc", [null, [45, 99], [45, 120]]]], ["attribute", "disabled", ["get", "disableNewNodesSubmit", ["loc", [null, [48, 111], [48, 132]]]]], ["element", "action", ["submitRegisterNodes"], [], ["loc", [null, [48, 135], [48, 167]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 2
              },
              "end": {
                "line": 52,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStep1", ["loc", [null, [26, 10], [26, 17]]]]], [], 0, 1, ["loc", [null, [26, 4], [51, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 53,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [3, 2], [15, 21]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [17, 2], [23, 20]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [25, 2], [52, 22]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 13
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal", [], ["configName", "bs", "id", "nodeRegistrationModal", "class", "node-registration-modal", "closeIfClickedOutside", ["subexpr", "@mut", [["get", "handleOutsideClick", ["loc", [null, [2, 34], [2, 52]]]]], [], []], "open-if", ["subexpr", "@mut", [["get", "openNewNodeRegistrationModal", ["loc", [null, [2, 61], [2, 89]]]]], [], []], "close-if", ["subexpr", "@mut", [["get", "closeNewNodeRegistrationModal", ["loc", [null, [2, 99], [2, 128]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [53, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/new-organization", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 8
                },
                "end": {
                  "line": 6,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-organization.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-organization.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("Create Organization");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [4, 8], [6, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-organization.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 8
                },
                "end": {
                  "line": 17,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-organization.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              return morphs;
            },
            statements: [["inline", "text-f", [], ["label", "Organization Name", "value", ["subexpr", "@mut", [["get", "defaultOrgName", ["loc", [null, [14, 53], [14, 67]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8"], ["loc", [null, [14, 12], [14, 112]]]], ["inline", "textarea-f", [], ["label", "Description (Optional)", "value", ["subexpr", "@mut", [["get", "fields_org.description", ["loc", [null, [16, 62], [16, 84]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8"], ["loc", [null, [16, 12], [16, 128]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 18,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-organization.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "async", ["loc", [null, [11, 14], [11, 19]]]]], [], 0, 1, ["loc", [null, [11, 8], [17, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-organization.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("Submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "async", ["loc", [null, [21, 65], [21, 70]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-organization.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [3, 4], [8, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [10, 4], [18, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [20, 4], [22, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-organization.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal-form", [], ["configName", "bs", "id", "newOrganizationModal", "on-submit", "createOrganization", "in-async", ["subexpr", "@mut", [["get", "async", ["loc", [null, [1, 99], [1, 104]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [24, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/new-satellite", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 8
                },
                "end": {
                  "line": 6,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-satellite.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "aria-hidden", "true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "modal-title");
            var el2 = dom.createTextNode("New Subscription Management Application");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "close"], 0, null, ["loc", [null, [4, 8], [6, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-satellite.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 8
                },
                "end": {
                  "line": 15,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-satellite.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "text-f", [], ["label", "Name", "value", ["subexpr", "@mut", [["get", "newSatelliteName", ["loc", [null, [14, 40], [14, 56]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8"], ["loc", [null, [14, 12], [14, 101]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "async", ["loc", [null, [11, 14], [11, 19]]]]], [], 0, 1, ["loc", [null, [11, 8], [15, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 59
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-satellite.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Cancel");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 4
              },
              "end": {
                "line": 21,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("Register");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createAttrMorph(element0, 'disabled');
            return morphs;
          },
          statements: [["block", "em-modal-toggler", [], ["class", "btn btn-default"], 0, null, ["loc", [null, [19, 8], [19, 80]]]], ["attribute", "disabled", ["get", "async", ["loc", [null, [20, 65], [20, 70]]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-satellite.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "em-modal-title", [], [], 0, null, ["loc", [null, [3, 4], [8, 23]]]], ["block", "em-modal-body", [], [], 1, null, ["loc", [null, [10, 4], [16, 22]]]], ["block", "em-modal-footer", [], [], 2, null, ["loc", [null, [18, 4], [21, 24]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-satellite.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-modal-form", [], ["configName", "bs", "id", "registerNewSatellite", "open-if", ["subexpr", "@mut", [["get", "openRegisterNewSatelliteModal", ["loc", [null, [1, 67], [1, 96]]]]], [], []], "on-submit", "createSatellite", "in-async", ["subexpr", "@mut", [["get", "async", ["loc", [null, [1, 134], [1, 139]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [23, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/openshift/openshift-configuration", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        NFS\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [11, 24], [11, 33]]]], "disabled"], [], ["loc", [null, [11, 19], [11, 46]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "disabled");
            var el2 = dom.createTextNode("\n        Gluster\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 4
              },
              "end": {
                "line": 26,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "disabled");
            var el2 = dom.createTextNode("\n        Do not use\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "radio-button", [], ["value", "NFS", "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_type", ["loc", [null, [9, 43], [9, 71]]]]], [], []], "id", "nfs", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [10, 29], [10, 38]]]]], [], []]], 0, null, ["loc", [null, [9, 4], [14, 21]]]], ["block", "radio-button", [], ["value", "Gluster", "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_type", ["loc", [null, [16, 47], [16, 75]]]]], [], []], "id", "gluster", "disabled", true], 1, null, ["loc", [null, [16, 4], [20, 21]]]], ["block", "radio-button", [], ["value", "DoNotUse", "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_type", ["loc", [null, [22, 48], [22, 76]]]]], [], []], "id", "do_not_use", "disabled", true], 2, null, ["loc", [null, [22, 4], [26, 21]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n        Set the user account that will be created and used to configure all nodes.\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 15, 15, contextualElement);
          return morphs;
        },
        statements: [["inline", "text-f", [], ["label", "Name", "value", ["subexpr", "@mut", [["get", "model.openshift_storage_name", ["loc", [null, [30, 34], [30, 62]]]]], [], []], "isRequired", true, "cssId", "openshift_storage_name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [30, 119], [30, 128]]]]], [], []], "isAlphaNumeric", true], ["loc", [null, [30, 6], [30, 150]]]], ["inline", "text-f", [], ["label", "Description (Optional)", "value", ["subexpr", "@mut", [["get", "model.openshift_storage_desc", ["loc", [null, [31, 52], [31, 80]]]]], [], []], "cssId", "openshift_storage_desc", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [31, 122], [31, 131]]]]], [], []]], ["loc", [null, [31, 6], [31, 133]]]], ["inline", "text-f", [], ["label", "Export Path", "value", ["subexpr", "@mut", [["get", "model.openshift_export_path", ["loc", [null, [32, 41], [32, 68]]]]], [], []], "isRequired", true, "cssId", "openshift_export_path", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [32, 124], [32, 133]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errorsHashExportPath", ["loc", [null, [32, 141], [32, 161]]]]], [], []]], ["loc", [null, [32, 6], [32, 163]]]], ["inline", "text-f", [], ["label", "Username", "value", ["subexpr", "@mut", [["get", "model.openshift_username", ["loc", [null, [38, 38], [38, 62]]]]], [], []], "isRequired", true, "cssId", "openshift_username", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [38, 115], [38, 124]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "openshiftUsernameValidator", ["loc", [null, [38, 135], [38, 161]]]]], [], []]], ["loc", [null, [38, 6], [38, 163]]]], ["inline", "text-f", [], ["label", "Password", "type", "password", "value", ["subexpr", "@mut", [["get", "userpassword", ["loc", [null, [40, 54], [40, 66]]]]], [], []], "cssId", "openshift_password", "isRequired", true, "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [41, 32], [41, 49]]]]], [], []], "placeholder", "Must be 8 or more characters"], ["loc", [null, [40, 6], [42, 50]]]], ["inline", "text-f", [], ["label", "Confirm Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmUserpassword", ["loc", [null, [44, 62], [44, 81]]]]], [], []], "cssId", "confirm_openshift_password", "isRequired", true, "validator", ["subexpr", "@mut", [["get", "confirmUserpasswordValidator", ["loc", [null, [45, 32], [45, 60]]]]], [], []], "placeholder", "Must match user password"], ["loc", [null, [44, 6], [46, 46]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 2
              },
              "end": {
                "line": 50,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 50,
                  "column": 2
                },
                "end": {
                  "line": 52,
                  "column": 2
                }
              },
              "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n  ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 2
              },
              "end": {
                "line": 52,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isDoNotUse", ["loc", [null, [50, 12], [50, 22]]]]], [], 0, null, ["loc", [null, [50, 2], [52, 2]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isGluster", ["loc", [null, [48, 12], [48, 21]]]]], [], 0, 1, ["loc", [null, [48, 2], [52, 2]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 69,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  Select external storage to store the docker registry images.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form form-horizontal");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n    Set subdomain name for a wildcard entry to point to the OpenShift router.\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(element1, 3, 3);
        morphs[2] = dom.createMorphAt(element1, 9, 9);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", "Storage Type", "isRequired", true], 0, null, ["loc", [null, [7, 2], [27, 13]]]], ["block", "if", [["get", "isNFS", ["loc", [null, [29, 8], [29, 13]]]]], [], 1, 2, ["loc", [null, [29, 2], [52, 9]]]], ["inline", "text-f", [], ["label", "Subdomain", "value", ["subexpr", "@mut", [["get", "model.openshift_subdomain_name", ["loc", [null, [58, 35], [58, 65]]]]], [], []], "isRequired", true, "cssId", "openshift_subdomain_name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [58, 124], [58, 133]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostnameValidator", ["loc", [null, [58, 144], [58, 161]]]]], [], []], "preText", "*.", "postText", ["subexpr", "@mut", [["get", "postTextDomainName", ["loc", [null, [59, 24], [59, 42]]]]], [], []]], ["loc", [null, [58, 2], [59, 44]]]], ["inline", "cancel-back-next", [], ["backRouteName", "openshift.openshift-nodes", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "nextRouteNameAfterOpenshift", ["loc", [null, [65, 33], [65, 60]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOpenshiftConfig", ["loc", [null, [66, 31], [66, 57]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [67, 33], [67, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [68, 34], [68, 48]]]]], [], []]], ["loc", [null, [63, 0], [68, 50]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/openshift/openshift-nodes", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 6
            },
            "end": {
              "line": 13,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Red Hat Enterprise Virtualization\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "disableRHEV", ["loc", [null, [10, 26], [10, 37]]]], "disabled"], [], ["loc", [null, [10, 21], [10, 50]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Red Hat Enterprise Linux OpenStack Platform\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["inline-block ", ["subexpr", "if", [["get", "disableOpenStack", ["loc", [null, [18, 39], [18, 55]]]], "disabled"], [], ["loc", [null, [18, 34], [18, 68]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 83,
              "column": 4
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "ose-env-summary", [], ["numNodes", ["subexpr", "@mut", [["get", "numNodes", ["loc", [null, [84, 35], [84, 43]]]]], [], []], "numMasterNodes", ["subexpr", "@mut", [["get", "numMasterNodes", ["loc", [null, [85, 41], [85, 55]]]]], [], []], "numWorkerNodes", ["subexpr", "@mut", [["get", "numWorkerNodes", ["loc", [null, [86, 41], [86, 55]]]]], [], []], "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [87, 38], [87, 49]]]]], [], []], "masterVcpu", ["subexpr", "@mut", [["get", "masterVcpu", ["loc", [null, [88, 37], [88, 47]]]]], [], []], "masterRam", ["subexpr", "@mut", [["get", "masterRam", ["loc", [null, [89, 36], [89, 45]]]]], [], []], "masterDisk", ["subexpr", "@mut", [["get", "masterDisk", ["loc", [null, [90, 37], [90, 47]]]]], [], []], "nodeVcpu", ["subexpr", "@mut", [["get", "nodeVcpu", ["loc", [null, [91, 35], [91, 43]]]]], [], []], "nodeRam", ["subexpr", "@mut", [["get", "nodeRam", ["loc", [null, [92, 34], [92, 41]]]]], [], []], "nodeDisk", ["subexpr", "@mut", [["get", "nodeDisk", ["loc", [null, [93, 35], [93, 43]]]]], [], []], "vcpuNeeded", ["subexpr", "@mut", [["get", "vcpuNeeded", ["loc", [null, [94, 37], [94, 47]]]]], [], []], "ramNeeded", ["subexpr", "@mut", [["get", "ramNeeded", ["loc", [null, [95, 36], [95, 45]]]]], [], []], "diskNeeded", ["subexpr", "@mut", [["get", "diskNeeded", ["loc", [null, [96, 37], [96, 47]]]]], [], []], "vcpuAvailable", ["subexpr", "@mut", [["get", "vcpuAvailable", ["loc", [null, [97, 40], [97, 53]]]]], [], []], "ramAvailable", ["subexpr", "@mut", [["get", "ramAvailable", ["loc", [null, [98, 39], [98, 51]]]]], [], []], "diskAvailable", ["subexpr", "@mut", [["get", "diskAvailable", ["loc", [null, [99, 40], [99, 53]]]]], [], []], "substractCfme", ["subexpr", "@mut", [["get", "substractCfme", ["loc", [null, [100, 40], [100, 53]]]]], [], []], "cfmeDisk", ["subexpr", "@mut", [["get", "cfmeDisk", ["loc", [null, [101, 35], [101, 43]]]]], [], []], "cfmeRam", ["subexpr", "@mut", [["get", "cfmeRam", ["loc", [null, [102, 34], [102, 41]]]]], [], []], "cfmeVcpu", ["subexpr", "@mut", [["get", "cfmeVcpu", ["loc", [null, [103, 35], [103, 43]]]]], [], []]], ["loc", [null, [84, 8], [103, 45]]]], ["inline", "node-details", [], ["numNodes", ["subexpr", "@mut", [["get", "model.numNodes", ["loc", [null, [105, 32], [105, 46]]]]], [], []], "numMasterNodes", ["subexpr", "@mut", [["get", "numMasterNodes", ["loc", [null, [106, 38], [106, 52]]]]], [], []], "numWorkerNodes", ["subexpr", "@mut", [["get", "numWorkerNodes", ["loc", [null, [107, 38], [107, 52]]]]], [], []], "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [108, 35], [108, 46]]]]], [], []], "masterVcpu", ["subexpr", "@mut", [["get", "masterVcpu", ["loc", [null, [109, 34], [109, 44]]]]], [], []], "masterRam", ["subexpr", "@mut", [["get", "masterRam", ["loc", [null, [110, 33], [110, 42]]]]], [], []], "masterDisk", ["subexpr", "@mut", [["get", "masterDisk", ["loc", [null, [111, 34], [111, 44]]]]], [], []], "nodeVcpu", ["subexpr", "@mut", [["get", "nodeVcpu", ["loc", [null, [112, 32], [112, 40]]]]], [], []], "nodeRam", ["subexpr", "@mut", [["get", "nodeRam", ["loc", [null, [113, 31], [113, 38]]]]], [], []], "nodeDisk", ["subexpr", "@mut", [["get", "nodeDisk", ["loc", [null, [114, 32], [114, 40]]]]], [], []]], ["loc", [null, [105, 8], [114, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 126,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select where to provision the OpenShift Enterprise nodes.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select how many virtual machines should be created as nodes for the OpenShift environment.\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("<div style='color: #999; font-style: italic;'>\n      Not Highly Available\n    </div>");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n    Select how much additional storage is needed for Docker containers on each worker node.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(14);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [9]), 1, 1);
        morphs[3] = dom.createMorphAt(element2, 11, 11);
        morphs[4] = dom.createMorphAt(element2, 13, 13);
        morphs[5] = dom.createMorphAt(element2, 15, 15);
        morphs[6] = dom.createMorphAt(element2, 17, 17);
        morphs[7] = dom.createMorphAt(element2, 19, 19);
        morphs[8] = dom.createMorphAt(element2, 29, 29);
        morphs[9] = dom.createMorphAt(element2, 31, 31);
        morphs[10] = dom.createMorphAt(element2, 33, 33);
        morphs[11] = dom.createMorphAt(element2, 35, 35);
        morphs[12] = dom.createMorphAt(element2, 37, 37);
        morphs[13] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["block", "radio-button", [], ["value", "RHEV", "groupValue", ["subexpr", "@mut", [["get", "openshiftInstallLoc", ["loc", [null, [9, 46], [9, 65]]]]], [], []], "changed", "openshiftLocationChanged", "id", "install_on_rhev", "disabled", ["subexpr", "@mut", [["get", "disableRHEVradio", ["loc", [null, [9, 131], [9, 147]]]]], [], []]], 0, null, ["loc", [null, [9, 6], [13, 23]]]], ["block", "radio-button", [], ["value", "OpenStack", "groupValue", ["subexpr", "@mut", [["get", "openshiftInstallLoc", ["loc", [null, [17, 51], [17, 70]]]]], [], []], "changed", "openshiftLocationChanged", "id", "install_on_openstack", "disabled", ["subexpr", "@mut", [["get", "disableOpenstackradio", ["loc", [null, [17, 141], [17, 162]]]]], [], []]], 1, null, ["loc", [null, [17, 6], [21, 23]]]], ["inline", "tool-tip", [], ["faIcon", "fa-info-circle", "title", "The environment consists of worker nodes and one master node, which orchestrates tasks across the other nodes. Master and worker nodes are provisioned with different specifications, as seen in Node Details."], ["loc", [null, [27, 6], [28, 233]]]], ["inline", "button-selection", [], ["label", 1, "value", 1, "groupValue", ["subexpr", "@mut", [["get", "model.numNodes", ["loc", [null, [34, 34], [34, 48]]]]], [], []], "changed", "numNodesChanged", "disabled", ["subexpr", "@mut", [["get", "isOver1Capacity", ["loc", [null, [36, 32], [36, 47]]]]], [], []]], ["loc", [null, [32, 4], [36, 49]]]], ["inline", "button-selection", [], ["label", 2, "value", 2, "groupValue", ["subexpr", "@mut", [["get", "model.numNodes", ["loc", [null, [39, 34], [39, 48]]]]], [], []], "changed", "numNodesChanged", "disabled", ["subexpr", "@mut", [["get", "isOver2Capacity", ["loc", [null, [41, 32], [41, 47]]]]], [], []]], ["loc", [null, [37, 4], [41, 49]]]], ["inline", "button-selection", [], ["label", 3, "value", 3, "groupValue", ["subexpr", "@mut", [["get", "model.numNodes", ["loc", [null, [44, 34], [44, 48]]]]], [], []], "changed", "numNodesChanged", "disabled", ["subexpr", "@mut", [["get", "isOver3Capacity", ["loc", [null, [46, 32], [46, 47]]]]], [], []]], ["loc", [null, [42, 4], [46, 49]]]], ["inline", "button-selection", [], ["label", 4, "value", 4, "groupValue", ["subexpr", "@mut", [["get", "model.numNodes", ["loc", [null, [49, 34], [49, 48]]]]], [], []], "changed", "numNodesChanged", "disabled", ["subexpr", "@mut", [["get", "isOver4Capacity", ["loc", [null, [51, 32], [51, 47]]]]], [], []]], ["loc", [null, [47, 4], [51, 49]]]], ["inline", "button-selection", [], ["label", 5, "value", 5, "groupValue", ["subexpr", "@mut", [["get", "model.numNodes", ["loc", [null, [54, 34], [54, 48]]]]], [], []], "changed", "numNodesChanged", "disabled", ["subexpr", "@mut", [["get", "isOver5Capacity", ["loc", [null, [56, 32], [56, 47]]]]], [], []]], ["loc", [null, [52, 4], [56, 49]]]], ["inline", "button-selection", [], ["label", "15 GB", "value", 15, "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_size", ["loc", [null, [68, 34], [68, 62]]]]], [], []], "changed", "storageSizeChanged"], ["loc", [null, [66, 4], [69, 53]]]], ["inline", "button-selection", [], ["label", "20 GB", "value", 20, "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_size", ["loc", [null, [72, 34], [72, 62]]]]], [], []], "changed", "storageSizeChanged"], ["loc", [null, [70, 4], [73, 53]]]], ["inline", "button-selection", [], ["label", "25 GB", "value", 25, "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_size", ["loc", [null, [76, 34], [76, 62]]]]], [], []], "changed", "storageSizeChanged"], ["loc", [null, [74, 4], [77, 53]]]], ["inline", "button-selection", [], ["label", "30 GB", "value", 30, "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_size", ["loc", [null, [80, 34], [80, 62]]]]], [], []], "changed", "storageSizeChanged"], ["loc", [null, [78, 4], [81, 53]]]], ["block", "if", [["get", "showEnvironmentSummary", ["loc", [null, [83, 10], [83, 32]]]]], [], 2, null, ["loc", [null, [83, 4], [115, 11]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteName", ["loc", [null, [120, 33], [120, 46]]]]], [], []], "disableBack", false, "nextRouteName", "openshift.openshift-configuration", "disableNext", ["subexpr", "@mut", [["get", "isInvalidOpenshiftNodes", ["loc", [null, [123, 31], [123, 54]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [124, 33], [124, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [125, 34], [125, 48]]]]], [], []]], ["loc", [null, [120, 0], [125, 50]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/openshift", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("A. Master/Nodes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberOpenShift", ["loc", [null, [4, 11], [4, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("B. Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberOpenShift", ["loc", [null, [8, 11], [8, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["openshift.openshift-nodes"], ["tagName", "li"], 0, null, ["loc", [null, [3, 6], [5, 18]]]], ["block", "link-to", ["openshift.openshift-configuration"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "isInvalidOpenshiftNodes", ["loc", [null, [7, 75], [7, 98]]]]], [], []]], 1, null, ["loc", [null, [7, 6], [9, 18]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openshift.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/openstack/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/openstack/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "loading-spinner", [], ["show", true, "text", "Loading..."], ["loc", [null, [1, 0], [1, 47]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/openstack/overcloud", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 81,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack/overcloud.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form form-horizontal");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n      Enter an interface to provide external network access for the overcloud.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n      Enter network blocks to assign to the overcloud for private networking and floating IP addresses.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n      Create an administrative password for the overcloud.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element0, 3, 3);
        morphs[1] = dom.createMorphAt(element0, 9, 9);
        morphs[2] = dom.createMorphAt(element0, 11, 11);
        morphs[3] = dom.createMorphAt(element0, 13, 13);
        morphs[4] = dom.createMorphAt(element0, 19, 19);
        morphs[5] = dom.createMorphAt(element0, 21, 21);
        morphs[6] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["label", "External Network Interface", "value", ["subexpr", "@mut", [["get", "model.openstack_overcloud_ext_net_interface", ["loc", [null, [11, 21], [11, 64]]]]], [], []], "cssId", "external-osp-interface", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [14, 24], [14, 33]]]]], [], []], "placeholder", "Enter External Network Interface"], ["loc", [null, [10, 6], [16, 17]]]], ["inline", "text-f", [], ["label", "Private Network", "value", ["subexpr", "@mut", [["get", "model.openstack_overcloud_private_net", ["loc", [null, [25, 21], [25, 58]]]]], [], []], "cssId", "osp-private-network", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [28, 24], [28, 33]]]]], [], []], "placeholder", "192.168.254.0/24", "help-inline", "CIDR notation, 192.168.254.0/24", "validator", ["subexpr", "@mut", [["get", "cidrValidator", ["loc", [null, [31, 25], [31, 38]]]]], [], []]], ["loc", [null, [24, 6], [32, 17]]]], ["inline", "text-f", [], ["label", "Floating IP Network", "value", ["subexpr", "@mut", [["get", "model.openstack_overcloud_float_net", ["loc", [null, [35, 21], [35, 56]]]]], [], []], "cssId", "osp-floating-network", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [38, 24], [38, 33]]]]], [], []], "placeholder", "192.168.253.0/24", "help-inline", "CIDR notation, 192.168.253.0/24", "validator", ["subexpr", "@mut", [["get", "cidrValidator", ["loc", [null, [41, 25], [41, 38]]]]], [], []]], ["loc", [null, [34, 6], [42, 17]]]], ["inline", "text-f", [], ["label", "Floating IP Network Gateway", "value", ["subexpr", "@mut", [["get", "model.openstack_overcloud_float_gateway", ["loc", [null, [45, 21], [45, 60]]]]], [], []], "cssId", "osp-float-gatewway", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [48, 24], [48, 33]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "ipValidator", ["loc", [null, [49, 25], [49, 36]]]]], [], []]], ["loc", [null, [44, 6], [50, 17]]]], ["inline", "text-f", [], ["label", "Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "overcloudPassword", ["loc", [null, [57, 60], [57, 77]]]]], [], []], "cssId", "osp_overcloud_password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [60, 24], [60, 33]]]]], [], []]], ["loc", [null, [57, 6], [60, 35]]]], ["inline", "text-f", [], ["label", "Confirm Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmOvercloudPassword", ["loc", [null, [62, 62], [62, 86]]]]], [], []], "cssId", "confirm_osp_overcloud_password", "isRequired", true, "validator", ["subexpr", "@mut", [["get", "confirmOvercloudPasswordValidator", ["loc", [null, [65, 25], [65, 58]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [66, 24], [66, 33]]]]], [], []], "placeholder", "Must match admin password"], ["loc", [null, [62, 6], [67, 56]]]], ["inline", "cancel-back-next", [], ["backRouteName", "assign-nodes", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "nextStepRouteNameOvercloud", ["loc", [null, [76, 33], [76, 59]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOvercloud", ["loc", [null, [77, 31], [77, 51]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [78, 33], [78, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [79, 34], [79, 48]]]]], [], []]], ["loc", [null, [74, 0], [79, 50]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/openstack", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("A. Detect Undercloud");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberOpenstack", ["loc", [null, [4, 11], [4, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("B. Register Nodes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberOpenstack", ["loc", [null, [8, 11], [8, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("C. Assign Nodes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberOpenstack", ["loc", [null, [12, 11], [12, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("D. Configure Overcloud");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberOpenstack", ["loc", [null, [16, 11], [16, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openstack.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["undercloud-deploy"], ["tagName", "li"], 0, null, ["loc", [null, [3, 6], [5, 18]]]], ["block", "link-to", ["register-nodes"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRegisterNodes", ["loc", [null, [7, 56], [7, 79]]]]], [], []]], 1, null, ["loc", [null, [7, 6], [9, 18]]]], ["block", "link-to", ["assign-nodes"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabAssignNodes", ["loc", [null, [11, 54], [11, 75]]]]], [], []]], 2, null, ["loc", [null, [11, 6], [13, 18]]]], ["block", "link-to", ["openstack.overcloud"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabOvercloud", ["loc", [null, [15, 61], [15, 80]]]]], [], []]], 3, null, ["loc", [null, [15, 6], [17, 18]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [19, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/readme", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/readme.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "markdown-to-html", [], ["markdown", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 28], [1, 33]]]]], [], []]], ["loc", [null, [1, 0], [1, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/register-nodes", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n    Loading OSP Nodes\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 17,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row register-nodes-errors");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]), 0, 0);
            return morphs;
          },
          statements: [["content", "errorMsg", ["loc", [null, [13, 46], [13, 58]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 12
                },
                "end": {
                  "line": 28,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "target", "_blank");
              dom.setAttribute(el2, "class", "foreman-task-error-link");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element3, 'href');
              morphs[1] = dom.createMorphAt(element3, 0, 0);
              return morphs;
            },
            statements: [["attribute", "href", ["concat", [["get", "registrationError.taskUrl", ["loc", [null, [27, 29], [27, 54]]]]]]], ["content", "registrationError.message", ["loc", [null, [27, 106], [27, 135]]]]],
            locals: ["registrationError"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row register-nodes-errors");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("There were errors encountered while trying to register nodes:");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("ul");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 5]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "registrationErrors", ["loc", [null, [26, 20], [26, 38]]]]], [], 0, null, ["loc", [null, [26, 12], [28, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 12
                },
                "end": {
                  "line": 44,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "target", "_blank");
              dom.setAttribute(el2, "class", "foreman-task-error-link");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element2, 'href');
              morphs[1] = dom.createMorphAt(element2, 0, 0);
              return morphs;
            },
            statements: [["attribute", "href", ["concat", [["get", "nodeError.taskUrl", ["loc", [null, [43, 29], [43, 46]]]]]]], ["content", "nodeError.message", ["loc", [null, [43, 98], [43, 119]]]]],
            locals: ["nodeError"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 2
              },
              "end": {
                "line": 49,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row register-nodes-errors");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("The following nodes have errors:");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("ul");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 5]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "nodeErrors", ["loc", [null, [42, 20], [42, 30]]]]], [], 0, null, ["loc", [null, [42, 12], [44, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 57,
                "column": 2
              },
              "end": {
                "line": 65,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "id", "register-nodes-button");
            dom.setAttribute(el3, "class", "btn btn-default register-more-nodes-button");
            var el4 = dom.createTextNode("\n          Register More Nodes\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["showNodeRegistrationModal"], [], ["loc", [null, [60, 94], [60, 132]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 65,
                "column": 2
              },
              "end": {
                "line": 82,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "id", "register-nodes-button");
            dom.setAttribute(el3, "class", "btn btn-primary register-nodes-button");
            var el4 = dom.createTextNode("\n          Register Nodes\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createTextNode("\n          No nodes have been registered yet. Discover nodes through auto-detection,\n          mapping them in a CSV file, or entering node information manually.\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["showNodeRegistrationModal"], [], ["loc", [null, [68, 89], [68, 127]]]]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 85,
                "column": 4
              },
              "end": {
                "line": 92,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "osp-node-manager", [], ["nodeManager", ["subexpr", "@mut", [["get", "nodeManager", ["loc", [null, [86, 38], [86, 49]]]]], [], []], "ports", ["subexpr", "@mut", [["get", "ports", ["loc", [null, [87, 32], [87, 37]]]]], [], []], "introspectionTasks", ["subexpr", "@mut", [["get", "introspectionTasks", ["loc", [null, [88, 45], [88, 63]]]]], [], []], "foremanTasks", ["subexpr", "@mut", [["get", "foremanTasks", ["loc", [null, [89, 39], [89, 51]]]]], [], []], "addNodes", "addNodesToManager", "deleteNode", "deleteNode"], ["loc", [null, [86, 6], [91, 51]]]]],
          locals: ["nodeManager"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 94,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Register at least 2 nodes with the selected undercloud to build out your OpenStack environment.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "osp-node-manager-list");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [11]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "errorMsg", ["loc", [null, [8, 8], [8, 16]]]]], [], 0, null, ["loc", [null, [8, 2], [17, 9]]]], ["block", "if", [["get", "showRegistrationErrors", ["loc", [null, [19, 8], [19, 30]]]]], [], 1, null, ["loc", [null, [19, 2], [33, 9]]]], ["block", "if", [["get", "showNodeErrors", ["loc", [null, [35, 8], [35, 22]]]]], [], 2, null, ["loc", [null, [35, 2], [49, 9]]]], ["block", "if", [["get", "hasNodes", ["loc", [null, [57, 8], [57, 16]]]]], [], 3, 4, ["loc", [null, [57, 2], [82, 9]]]], ["block", "each", [["get", "nodeManagers", ["loc", [null, [85, 12], [85, 24]]]]], [], 5, null, ["loc", [null, [85, 4], [92, 13]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 106,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/register-nodes.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "showSpinner", ["loc", [null, [1, 6], [1, 17]]]]], [], 0, 1, ["loc", [null, [1, 0], [94, 7]]]], ["inline", "cancel-back-next", [], ["backRouteName", "undercloud-deploy", "disableBack", false, "nextRouteName", "assign-nodes", "disableNext", ["subexpr", "@mut", [["get", "disableRegisterNodesNext", ["loc", [null, [99, 32], [99, 56]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [100, 34], [100, 43]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [101, 35], [101, 49]]]]], [], []]], ["loc", [null, [96, 0], [101, 51]]]], ["inline", "partial", ["new-node-registration"], [], ["loc", [null, [103, 0], [103, 35]]]], ["inline", "partial", ["add-node-registration"], [], ["loc", [null, [104, 0], [104, 35]]]], ["inline", "partial", ["delete-node-confirmation"], [], ["loc", [null, [105, 0], [105, 38]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/req-cloudforms", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-cloudforms.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("Red Hat CloudForms");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("No specific requirements");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-disconnected", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-disconnected.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("Disconnected network scenario");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("If you are deploying into an environment that does not have external network access, these are additional requirements:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("URL to an alternate repository to download content from");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://access.redhat.com/solutions/118573");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("Subscription manifest");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-general", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-general.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("General");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Red Hat Customer Portal username and password");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://access.redhat.com/management/subscriptions");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("Sufficient subscriptions");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" to complete this deployment");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Host machines are started and discoverable");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Networks and subsets are set up and available");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-openshift", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-openshift.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("OpenShift Enterprise by Red Hat");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("No specific requirements");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-openstack", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-openstack.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("Red Hat OpenStack Platform");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("IP address to the undercloud that was set up according to the instructions found in QuickStart Cloud Installer Installation Guide");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("2 nodes (1 controller, 1 compute). Each node requires 100GB disk space, 16GB RAM, and 4 CPUs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("All node hardware clocks are synchronized with the hardware clock on the Satellite system");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-rhev", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-rhev.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("Red Hat Enterprise Virtualization");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("2 hosts (1 for engine, 1 for hypervisor).\n    Engine host requires 10 GB disk space, 2GB RAM, and 1 CPU.\n    Hypervisor host requires 10 GB disk space, 12GB RAM, and 4 CPUs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("All host hardware clocks are synchronized with the hardware clock on the Satellite system");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("NFS share. For both data domain and export domain: IP address and shared path");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/review/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/review/installation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n           \n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
            return morphs;
          },
          statements: [["content", "errorMsg", ["loc", [null, [9, 10], [9, 22]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 12
                },
                "end": {
                  "line": 23,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "errorMsg", ["loc", [null, [22, 18], [22, 30]]]]],
            locals: ["errorMsg"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("ul");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "validationErrors", ["loc", [null, [21, 20], [21, 36]]]]], [], 0, null, ["loc", [null, [21, 12], [23, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 14
                },
                "end": {
                  "line": 38,
                  "column": 14
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "warningMsg", ["loc", [null, [37, 20], [37, 34]]]]],
            locals: ["warningMsg"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-warning rhci-alert");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle warningForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("ul");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("            ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "validationWarnings", ["loc", [null, [36, 22], [36, 40]]]]], [], 0, null, ["loc", [null, [36, 14], [38, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 6
              },
              "end": {
                "line": 62,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["inline", "review-link", [], ["label", "Name", "routeName", "satellite", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [50, 32], [50, 42]]]]], [], []]], ["loc", [null, [49, 8], [50, 44]]]], ["inline", "review-link", [], ["label", "Organization", "routeName", "configure-organization", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.organization.name", ["loc", [null, [53, 32], [53, 55]]]]], [], []]], ["loc", [null, [52, 8], [53, 57]]]], ["inline", "review-link", [], ["label", "Environment", "routeName", "configure-environment", "value", ["subexpr", "@mut", [["get", "lifecycleEnvironmentName", ["loc", [null, [56, 32], [56, 56]]]]], [], []]], ["loc", [null, [55, 8], [56, 58]]]], ["inline", "review-link", [], ["label", "Red Hat Insights", "routeName", "satellite.access-insights", "value", ["subexpr", "@mut", [["get", "deploymentController.enableAccessInsights", ["loc", [null, [60, 28], [60, 69]]]]], [], []]], ["loc", [null, [58, 8], [60, 72]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 69,
                    "column": 8
                  },
                  "end": {
                    "line": 72,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Engine/Hypervisor", "routeName", "engine.discovered-host", "isRequired", true, "value", ["subexpr", "@mut", [["get", "engineNamePlusDomain", ["loc", [null, [71, 32], [71, 52]]]]], [], []]], ["loc", [null, [70, 12], [71, 54]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.10",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 77,
                        "column": 16
                      },
                      "end": {
                        "line": 79,
                        "column": 16
                      }
                    },
                    "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                   ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "hypervisor-name", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [78, 42], [78, 46]]]]], [], []], "hypervisorDomain", ["subexpr", "@mut", [["get", "hypervisorDomain", ["loc", [null, [78, 64], [78, 80]]]]], [], []]], ["loc", [null, [78, 19], [78, 82]]]]],
                  locals: ["host"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 76,
                      "column": 12
                    },
                    "end": {
                      "line": 80,
                      "column": 12
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "each", [["get", "selectedHypervisorHosts", ["loc", [null, [77, 24], [77, 47]]]]], [], 0, null, ["loc", [null, [77, 16], [79, 25]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 72,
                    "column": 8
                  },
                  "end": {
                    "line": 81,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Engine Host Name", "routeName", "engine.discovered-host", "isRequired", true, "value", ["subexpr", "@mut", [["get", "engineNamePlusDomain", ["loc", [null, [74, 32], [74, 52]]]]], [], []]], ["loc", [null, [73, 12], [74, 54]]]], ["block", "review-link", [], ["label", "Hypervisor Host Name", "routeName", "hypervisor.discovered-host", "isRequired", true, "value", ["subexpr", "@mut", [["get", "selectedHypervisorHosts", ["loc", [null, [76, 117], [76, 140]]]]], [], []], "useYieldInstead", true], 0, null, ["loc", [null, [76, 12], [80, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 110,
                    "column": 8
                  },
                  "end": {
                    "line": 121,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Export Domain Name", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_name", ["loc", [null, [113, 32], [113, 61]]]]], [], []]], ["loc", [null, [112, 12], [113, 63]]]], ["inline", "review-link", [], ["label", "Export Storage Address", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_address", ["loc", [null, [116, 32], [116, 64]]]]], [], []]], ["loc", [null, [115, 12], [116, 66]]]], ["inline", "review-link", [], ["label", "Export Storage Path", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_path", ["loc", [null, [119, 32], [119, 61]]]]], [], []]], ["loc", [null, [118, 12], [119, 63]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 65,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("br");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(12);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
              morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
              morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
              morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
              morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
              morphs[9] = dom.createMorphAt(fragment, 19, 19, contextualElement);
              morphs[10] = dom.createMorphAt(fragment, 21, 21, contextualElement);
              morphs[11] = dom.createMorphAt(fragment, 23, 23, contextualElement);
              return morphs;
            },
            statements: [["inline", "review-link", [], ["label", "Setup Type", "routeName", "rhev-setup", "isRequired", true, "value", ["subexpr", "@mut", [["get", "rhevSetupController.rhevSetupTitle", ["loc", [null, [68, 32], [68, 66]]]]], [], []]], ["loc", [null, [67, 8], [68, 68]]]], ["block", "if", [["get", "isSelfHosted", ["loc", [null, [69, 14], [69, 26]]]]], [], 0, 1, ["loc", [null, [69, 8], [81, 15]]]], ["inline", "review-link", [], ["label", "Root password Engine & Hypervisor", "routeName", "rhev-options", "isRequired", true, "isPassword", true, "value", ["subexpr", "@mut", [["get", "model.rhev_root_password", ["loc", [null, [84, 44], [84, 68]]]]], [], []]], ["loc", [null, [83, 8], [84, 71]]]], ["inline", "review-link", [], ["label", "Engine admin password", "routeName", "rhev-options", "isRequired", true, "isPassword", true, "value", ["subexpr", "@mut", [["get", "model.rhev_engine_admin_password", ["loc", [null, [87, 28], [87, 60]]]]], [], []]], ["loc", [null, [86, 8], [87, 63]]]], ["inline", "review-link", [], ["label", "Datacenter Name", "routeName", "rhev-options", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_data_center_name", ["loc", [null, [90, 28], [90, 55]]]]], [], []]], ["loc", [null, [89, 8], [90, 57]]]], ["inline", "review-link", [], ["label", "Cluster Name", "routeName", "rhev-options", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_cluster_name", ["loc", [null, [93, 28], [93, 51]]]]], [], []]], ["loc", [null, [92, 8], [93, 53]]]], ["inline", "review-link", [], ["label", "CPU Type", "routeName", "rhev-options", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_cpu_type", ["loc", [null, [96, 28], [96, 47]]]]], [], []]], ["loc", [null, [95, 8], [96, 49]]]], ["inline", "review-link", [], ["label", "Storage Type", "routeName", "storage", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.rhev_storage_type", ["loc", [null, [99, 28], [99, 51]]]]], [], []]], ["loc", [null, [98, 8], [99, 53]]]], ["inline", "review-link", [], ["label", "Data Domain Name", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_storage_name", ["loc", [null, [102, 28], [102, 51]]]]], [], []]], ["loc", [null, [101, 8], [102, 53]]]], ["inline", "review-link", [], ["label", "Data Storage Address", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_storage_address", ["loc", [null, [105, 28], [105, 54]]]]], [], []]], ["loc", [null, [104, 8], [105, 56]]]], ["inline", "review-link", [], ["label", "Data Storage Path", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_share_path", ["loc", [null, [108, 28], [108, 49]]]]], [], []]], ["loc", [null, [107, 8], [108, 51]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [110, 14], [110, 26]]]]], [], 2, null, ["loc", [null, [110, 8], [121, 15]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 64,
                "column": 4
              },
              "end": {
                "line": 125,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "accordion-item", [], ["name", "Red Hat Enterprise Virtualization", "isOpen", ["subexpr", "@mut", [["get", "isRhevOpen", ["loc", [null, [65, 72], [65, 82]]]]], [], []]], 0, null, ["loc", [null, [65, 6], [124, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child5 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.10",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 136,
                        "column": 16
                      },
                      "end": {
                        "line": 138,
                        "column": 16
                      }
                    },
                    "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                  ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "node-count-review-link");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" Nodes");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(element0, 0, 0);
                    morphs[1] = dom.createMorphAt(element0, 2, 2);
                    return morphs;
                  },
                  statements: [["content", "node.count", ["loc", [null, [137, 54], [137, 68]]]], ["content", "node.name", ["loc", [null, [137, 69], [137, 82]]]]],
                  locals: ["node"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 134,
                      "column": 14
                    },
                    "end": {
                      "line": 139,
                      "column": 14
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(":");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["content", "profile.flavor", ["loc", [null, [135, 21], [135, 39]]]], ["block", "each", [["get", "profile.nodes", ["loc", [null, [136, 24], [136, 37]]]]], [], 0, null, ["loc", [null, [136, 16], [138, 25]]]]],
                locals: ["profile"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 132,
                    "column": 12
                  },
                  "end": {
                    "line": 140,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "profiles", ["loc", [null, [134, 22], [134, 30]]]]], [], 0, null, ["loc", [null, [134, 14], [139, 23]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 162,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(9);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
              morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
              morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
              morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
              morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
              return morphs;
            },
            statements: [["inline", "review-link", [], ["label", "Undercloud URL", "value", ["subexpr", "@mut", [["get", "undercloudUrl", ["loc", [null, [129, 53], [129, 66]]]]], [], []], "isRequired", true, "isExternalURL", true], ["loc", [null, [129, 10], [129, 103]]]], ["inline", "review-link", [], ["label", "Undercloud username", "value", ["subexpr", "@mut", [["get", "undercloudUsername", ["loc", [null, [130, 60], [130, 78]]]]], [], []], "isRequired", true], ["loc", [null, [130, 12], [130, 96]]]], ["inline", "review-link", [], ["label", "Undercloud password", "value", ["subexpr", "@mut", [["get", "undercloudPassword", ["loc", [null, [131, 60], [131, 78]]]]], [], []], "isPassword", true, "isRequired", true], ["loc", [null, [131, 12], [131, 112]]]], ["block", "review-link", [], ["label", "Assigned Nodes", "routeName", "assign-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "profiles", ["loc", [null, [133, 24], [133, 32]]]]], [], []], "useYieldInstead", true], 0, null, ["loc", [null, [132, 12], [140, 28]]]], ["inline", "review-link", [], ["label", "External Network Interface", "value", ["subexpr", "@mut", [["get", "model.openstack_overcloud_ext_net_interface", ["loc", [null, [142, 32], [142, 75]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [141, 12], [144, 59]]]], ["inline", "review-link", [], ["label", "Private Network", "value", ["subexpr", "@mut", [["get", "model.openstack_overcloud_private_net", ["loc", [null, [146, 32], [146, 69]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [145, 12], [148, 59]]]], ["inline", "review-link", [], ["label", "Floating IP Network", "value", ["subexpr", "@mut", [["get", "model.openstack_overcloud_float_net", ["loc", [null, [150, 32], [150, 67]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [149, 12], [152, 59]]]], ["inline", "review-link", [], ["label", "Floating IP Network Gateway", "value", ["subexpr", "@mut", [["get", "model.openstack_overcloud_float_gateway", ["loc", [null, [154, 32], [154, 71]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [153, 12], [156, 59]]]], ["inline", "review-link", [], ["label", "Overcloud Admin Password", "value", ["subexpr", "@mut", [["get", "model.openstack_overcloud_password", ["loc", [null, [158, 32], [158, 66]]]]], [], []], "isPassword", true, "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [157, 12], [161, 59]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 127,
                "column": 4
              },
              "end": {
                "line": 163,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "deploymentController.nameOpenStack", ["loc", [null, [128, 29], [128, 63]]]]], [], []], "isOpen", ["subexpr", "@mut", [["get", "isOpenStackOpen", ["loc", [null, [128, 71], [128, 86]]]]], [], []]], 0, null, ["loc", [null, [128, 6], [162, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child6 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 166,
                  "column": 6
                },
                "end": {
                  "line": 229,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(13);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
              morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
              morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
              morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
              morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
              morphs[9] = dom.createMorphAt(fragment, 19, 19, contextualElement);
              morphs[10] = dom.createMorphAt(fragment, 21, 21, contextualElement);
              morphs[11] = dom.createMorphAt(fragment, 23, 23, contextualElement);
              morphs[12] = dom.createMorphAt(fragment, 25, 25, contextualElement);
              return morphs;
            },
            statements: [["inline", "review-link", [], ["label", "Nodes Location", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.openshift_install_loc", ["loc", [null, [171, 28], [171, 55]]]]], [], []]], ["loc", [null, [168, 8], [171, 57]]]], ["inline", "review-link", [], ["label", "# of Master Nodes", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.openshift_number_master_nodes", ["loc", [null, [176, 28], [176, 63]]]]], [], []]], ["loc", [null, [173, 8], [176, 65]]]], ["inline", "review-link", [], ["label", "# of Worker Nodes", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.openshift_number_worker_nodes", ["loc", [null, [181, 28], [181, 63]]]]], [], []]], ["loc", [null, [178, 8], [181, 65]]]], ["inline", "review-link", [], ["label", "Docker Storage per Worker", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "storageSizeGB", ["loc", [null, [186, 28], [186, 41]]]]], [], []]], ["loc", [null, [183, 8], [186, 43]]]], ["inline", "review-link", [], ["label", "vCPU Needed", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "vcpuNeeded", ["loc", [null, [191, 28], [191, 38]]]]], [], []]], ["loc", [null, [188, 8], [191, 40]]]], ["inline", "review-link", [], ["label", "RAM Needed", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "ramNeededGB", ["loc", [null, [196, 28], [196, 39]]]]], [], []]], ["loc", [null, [193, 8], [196, 41]]]], ["inline", "review-link", [], ["label", "Disk Needed", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "diskNeededGB", ["loc", [null, [201, 28], [201, 40]]]]], [], []]], ["loc", [null, [198, 8], [201, 42]]]], ["inline", "review-link", [], ["label", "Storage Type", "routeName", "openshift.openshift-configuration", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.openshift_storage_type", ["loc", [null, [206, 28], [206, 56]]]]], [], []]], ["loc", [null, [203, 8], [206, 58]]]], ["inline", "review-link", [], ["label", "Storage Name", "routeName", "openshift.openshift-configuration", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.openshift_storage_name", ["loc", [null, [211, 28], [211, 56]]]]], [], []]], ["loc", [null, [208, 8], [211, 58]]]], ["inline", "review-link", [], ["label", "Storage Description", "routeName", "openshift.openshift-configuration", "value", ["subexpr", "@mut", [["get", "model.openshift_storage_desc", ["loc", [null, [215, 28], [215, 56]]]]], [], []]], ["loc", [null, [213, 8], [215, 58]]]], ["inline", "review-link", [], ["label", "Export Path", "routeName", "openshift.openshift-configuration", "value", ["subexpr", "@mut", [["get", "model.openshift_export_path", ["loc", [null, [219, 28], [219, 55]]]]], [], []]], ["loc", [null, [217, 8], [219, 57]]]], ["inline", "review-link", [], ["label", "Username", "routeName", "openshift.openshift-configuration", "value", ["subexpr", "@mut", [["get", "model.openshift_username", ["loc", [null, [223, 28], [223, 52]]]]], [], []]], ["loc", [null, [221, 8], [223, 54]]]], ["inline", "review-link", [], ["label", "Subdomain", "routeName", "openshift.openshift-configuration", "value", ["subexpr", "@mut", [["get", "fullOpenshiftSubdomain", ["loc", [null, [227, 28], [227, 50]]]]], [], []]], ["loc", [null, [225, 8], [227, 52]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 165,
                "column": 4
              },
              "end": {
                "line": 230,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "accordion-item", [], ["name", "Openshift Enterprise", "isOpen", ["subexpr", "@mut", [["get", "isOpenshiftOpen", ["loc", [null, [166, 59], [166, 74]]]]], [], []]], 0, null, ["loc", [null, [166, 6], [229, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child7 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 233,
                  "column": 6
                },
                "end": {
                  "line": 238,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["inline", "review-link", [], ["label", "Installation Location", "routeName", "where-install", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.cfme_install_loc", ["loc", [null, [235, 30], [235, 52]]]]], [], []]], ["loc", [null, [234, 10], [235, 55]]]], ["inline", "review-link", [], ["label", "CFME Root password", "routeName", "cloudforms.cfme-configuration", "isRequired", true, "isPassword", true, "value", ["subexpr", "@mut", [["get", "model.cfme_root_password", ["loc", [null, [236, 131], [236, 155]]]]], [], []]], ["loc", [null, [236, 10], [236, 158]]]], ["inline", "review-link", [], ["label", "CFME Admin password", "routeName", "cloudforms.cfme-configuration", "isRequired", true, "isPassword", true, "value", ["subexpr", "@mut", [["get", "model.cfme_admin_password", ["loc", [null, [237, 132], [237, 157]]]]], [], []]], ["loc", [null, [237, 10], [237, 160]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 232,
                "column": 4
              },
              "end": {
                "line": 239,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "accordion-item", [], ["name", "Cloud Forms Management Engine", "isOpen", ["subexpr", "@mut", [["get", "isCloudFormsOpen", ["loc", [null, [233, 68], [233, 84]]]]], [], []]], 0, null, ["loc", [null, [233, 6], [238, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child8 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 253,
                      "column": 16
                    },
                    "end": {
                      "line": 263,
                      "column": 16
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  return morphs;
                },
                statements: [["inline", "review-link", [], ["label", "Subscription Name", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "@mut", [["get", "sub.product_name", ["loc", [null, [256, 40], [256, 56]]]]], [], []]], ["loc", [null, [254, 20], [256, 59]]]], ["inline", "review-link", [], ["label", "Contract Number", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "@mut", [["get", "sub.contract_number", ["loc", [null, [259, 40], [259, 59]]]]], [], []]], ["loc", [null, [257, 20], [259, 62]]]], ["inline", "review-link", [], ["label", "Quantity", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "@mut", [["get", "sub.quantity_attached", ["loc", [null, [262, 40], [262, 61]]]]], [], []]], ["loc", [null, [260, 20], [262, 64]]]]],
                locals: ["sub"],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 263,
                      "column": 16
                    },
                    "end": {
                      "line": 267,
                      "column": 16
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "review-link", [], ["label", "Quantity", "routeName", "subscriptions.select-subscriptions", "value", "0 - no subscriptions in manifest"], ["loc", [null, [264, 22], [266, 79]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 243,
                    "column": 12
                  },
                  "end": {
                    "line": 269,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Content Mirror URL", "routeName", "subscriptions.credentials", "isRequired", true, "value", ["subexpr", "@mut", [["get", "cdnUrl", ["loc", [null, [247, 36], [247, 42]]]]], [], []]], ["loc", [null, [244, 16], [247, 45]]]], ["inline", "review-link", [], ["label", "Manifest File", "routeName", "subscriptions.credentials", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.manifest_file", ["loc", [null, [251, 36], [251, 55]]]]], [], []]], ["loc", [null, [248, 16], [251, 58]]]], ["block", "each", [["get", "reviewSubscriptions", ["loc", [null, [253, 24], [253, 43]]]]], [], 0, 1, ["loc", [null, [253, 16], [267, 25]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 242,
                  "column": 8
                },
                "end": {
                  "line": 271,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "accordion-item", [], ["name", "Subscriptions", "isOpen", ["subexpr", "@mut", [["get", "isSubscriptionsOpen", ["loc", [null, [243, 58], [243, 77]]]]], [], []]], 0, null, ["loc", [null, [243, 12], [269, 31]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 277,
                      "column": 16
                    },
                    "end": {
                      "line": 289,
                      "column": 16
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  return morphs;
                },
                statements: [["inline", "review-link", [], ["label", "Subscription Name", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "@mut", [["get", "sub.product_name", ["loc", [null, [280, 40], [280, 56]]]]], [], []]], ["loc", [null, [278, 20], [280, 59]]]], ["inline", "review-link", [], ["label", "Contract Number", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "@mut", [["get", "sub.contract_number", ["loc", [null, [283, 40], [283, 59]]]]], [], []]], ["loc", [null, [281, 20], [283, 62]]]], ["inline", "review-link", [], ["label", ["subexpr", "@mut", [["get", "qtyLabel", ["loc", [null, [284, 40], [284, 48]]]]], [], []], "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "if", [["get", "isMissingSubscriptions", ["loc", [null, [286, 44], [286, 66]]]], null, ["get", "sub.quantity_to_add", ["loc", [null, [286, 72], [286, 91]]]]], [], ["loc", [null, [286, 40], [286, 92]]]], "isRequired", true, "validationMessage", "Need to re-enter"], ["loc", [null, [284, 20], [288, 72]]]]],
                locals: ["sub"],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 289,
                      "column": 16
                    },
                    "end": {
                      "line": 295,
                      "column": 16
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "review-link", [], ["label", "Quantity", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "if", [["get", "isMissingSubscriptions", ["loc", [null, [292, 46], [292, 68]]]], null, "0 - no new subscriptions to attach"], [], ["loc", [null, [292, 42], [292, 111]]]], "isRequired", true, "validationMessage", "Need to re-enter"], ["loc", [null, [290, 22], [294, 74]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 272,
                    "column": 12
                  },
                  "end": {
                    "line": 297,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Subscription Management Application", "routeName", "subscriptions.management-application", "isRequired", true, "value", ["subexpr", "@mut", [["get", "deploymentController.managementApplicationName", ["loc", [null, [275, 36], [275, 82]]]]], [], []]], ["loc", [null, [273, 16], [275, 85]]]], ["block", "each", [["get", "reviewSubscriptions", ["loc", [null, [277, 24], [277, 43]]]]], [], 0, 1, ["loc", [null, [277, 16], [295, 25]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 271,
                  "column": 8
                },
                "end": {
                  "line": 298,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "accordion-item", [], ["name", "Subscriptions", "isOpen", ["subexpr", "@mut", [["get", "isSubscriptionsOpen", ["loc", [null, [272, 58], [272, 77]]]]], [], []]], 0, null, ["loc", [null, [272, 12], [297, 31]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 241,
                "column": 4
              },
              "end": {
                "line": 299,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isDisconnected", ["loc", [null, [242, 14], [242, 28]]]]], [], 0, 1, ["loc", [null, [242, 8], [298, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child9 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 308,
                    "column": 10
                  },
                  "end": {
                    "line": 310,
                    "column": 10
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            Next ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "fa fa-angle-right");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 307,
                  "column": 6
                },
                "end": {
                  "line": 311,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", ["review.progress.overview"], ["role", "button", "class", "btn btn-primary"], 0, null, ["loc", [null, [308, 10], [310, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 312,
                    "column": 10
                  },
                  "end": {
                    "line": 314,
                    "column": 10
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("             ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "fa fa-angle-right");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "buttonDeployTitle", ["loc", [null, [313, 13], [313, 34]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 311,
                  "column": 6
                },
                "end": {
                  "line": 315,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "button-f", [], ["disabled", ["subexpr", "@mut", [["get", "buttonDeployDisabled", ["loc", [null, [312, 31], [312, 51]]]]], [], []], "action", "onDeployButton"], 0, null, ["loc", [null, [312, 10], [314, 23]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 304,
                "column": 2
              },
              "end": {
                "line": 316,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStarted", ["loc", [null, [307, 12], [307, 21]]]]], [], 0, 1, ["loc", [null, [307, 6], [315, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 318,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-12");
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [7, 1]);
          var morphs = new Array(10);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(element1, 3, 3);
          morphs[5] = dom.createMorphAt(element1, 5, 5);
          morphs[6] = dom.createMorphAt(element1, 7, 7);
          morphs[7] = dom.createMorphAt(element1, 9, 9);
          morphs[8] = dom.createMorphAt(element1, 11, 11);
          morphs[9] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "showErrorMessage", ["loc", [null, [3, 8], [3, 24]]]]], [], 0, null, ["loc", [null, [3, 2], [13, 9]]]], ["block", "if", [["get", "showValidationErrors", ["loc", [null, [15, 8], [15, 28]]]]], [], 1, null, ["loc", [null, [15, 2], [28, 9]]]], ["block", "if", [["get", "showValidationWarnings", ["loc", [null, [30, 8], [30, 30]]]]], [], 2, null, ["loc", [null, [30, 2], [43, 9]]]], ["block", "accordion-item", [], ["name", "Red Hat Satellite", "isOpen", true], 3, null, ["loc", [null, [48, 6], [62, 25]]]], ["block", "if", [["get", "isRhev", ["loc", [null, [64, 10], [64, 16]]]]], [], 4, null, ["loc", [null, [64, 4], [125, 11]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [127, 10], [127, 21]]]]], [], 5, null, ["loc", [null, [127, 4], [163, 11]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [165, 10], [165, 21]]]]], [], 6, null, ["loc", [null, [165, 4], [230, 11]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [232, 10], [232, 22]]]]], [], 7, null, ["loc", [null, [232, 4], [239, 11]]]], ["block", "if", [["get", "isSubscriptions", ["loc", [null, [241, 10], [241, 25]]]]], [], 8, null, ["loc", [null, [241, 4], [299, 11]]]], ["block", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameonReviewInstallation", ["loc", [null, [304, 36], [304, 69]]]]], [], []], "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [306, 36], [306, 45]]]]], [], []]], 9, null, ["loc", [null, [304, 2], [316, 23]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 318,
              "column": 0
            },
            "end": {
              "line": 325,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "spinnerTextMessage", ["loc", [null, [322, 6], [322, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 328,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "unless", [["get", "showSpinner", ["loc", [null, [1, 10], [1, 21]]]]], [], 0, 1, ["loc", [null, [1, 0], [325, 11]]]], ["inline", "partial", ["continue-deployment-modal"], [], ["loc", [null, [327, 0], [327, 39]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/review/progress/details", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/details.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n      Loading Data from Tasks ...\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 14
              },
              "end": {
                "line": 28,
                "column": 14
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/details.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "synctask", ["loc", [null, [27, 33], [27, 41]]]]], [], []]], ["loc", [null, [27, 18], [27, 43]]]]],
          locals: ["synctask"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/details.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3, "class", "table table-bordered small");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("thead");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Action");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "center");
          var el6 = dom.createTextNode("State");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "center");
          var el6 = dom.createTextNode("Result");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "center");
          var el6 = dom.createTextNode("Progress");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "center");
          var el6 = dom.createTextNode("Started at");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tbody");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1, 1, 3]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          morphs[2] = dom.createMorphAt(element0, 5, 5);
          morphs[3] = dom.createMorphAt(element0, 7, 7);
          morphs[4] = dom.createMorphAt(element0, 9, 9);
          morphs[5] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "model.deployTask", ["loc", [null, [22, 29], [22, 45]]]]], [], []]], ["loc", [null, [22, 14], [22, 47]]]], ["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "model.manageContentTask", ["loc", [null, [23, 29], [23, 52]]]]], [], []]], ["loc", [null, [23, 14], [23, 54]]]], ["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "model.rhevTask", ["loc", [null, [24, 29], [24, 43]]]]], [], []]], ["loc", [null, [24, 14], [24, 45]]]], ["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "model.cfmeTask", ["loc", [null, [25, 29], [25, 43]]]]], [], []]], ["loc", [null, [25, 14], [25, 45]]]], ["block", "each", [["get", "synctasks", ["loc", [null, [26, 22], [26, 31]]]]], [], 0, null, ["loc", [null, [26, 14], [28, 23]]]], ["content", "outlet", ["loc", [null, [33, 4], [33, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/progress/details.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoadingMoreTasks", ["loc", [null, [2, 6], [2, 24]]]]], [], 0, 1, ["loc", [null, [2, 0], [35, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/review/progress/log", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 14
            },
            "end": {
              "line": 26,
              "column": 14
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "log-search-result-counter inside-log-search-input");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" of ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "clear btn btn-log-result-up");
          dom.setAttribute(el1, "aria-hidden", "true");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "fa fa-angle-up inside-log-search-input");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "clear btn btn-log-result-down");
          dom.setAttribute(el1, "aria-hidden", "true");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "fa fa-angle-down inside-log-search-input");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "clear btn");
          dom.setAttribute(el1, "aria-hidden", "true");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "pficon pficon-close");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var element2 = dom.childAt(fragment, [5]);
          var element3 = dom.childAt(fragment, [7]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element0, 0, 0);
          morphs[1] = dom.createMorphAt(element0, 2, 2);
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createElementMorph(element2);
          morphs[4] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["content", "searchResultIdx", ["loc", [null, [22, 80], [22, 99]]]], ["content", "searchResults.length", ["loc", [null, [22, 103], [22, 127]]]], ["element", "action", ["navPreviousSearchResult"], [], ["loc", [null, [23, 93], [23, 129]]]], ["element", "action", ["navNextSearchResult"], [], ["loc", [null, [24, 95], [24, 127]]]], ["element", "action", ["clearSearch"], [], ["loc", [null, [25, 75], [25, 99]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-top-message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "spinner spinner-md spinner-inline log-updating-spinner");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Loading...");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 64,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-top-message");
          var el2 = dom.createTextNode("No data in the log file yet, there should be something to see in a few minutes.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 69,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-top-message");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "fa fa-2x fa-exclamation-triangle log-warning-icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Very large log file.  Only the last ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" lines shown");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 2, 2);
          return morphs;
        },
        statements: [["content", "displayedLog.entries.length", ["loc", [null, [68, 137], [68, 168]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 74,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "newEntry", ["loc", [null, [73, 8], [73, 22]]]]],
        locals: ["newEntry"],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 6
            },
            "end": {
              "line": 78,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-bottom-message");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "fa fa-2x fa-exclamation-triangle log-error-icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 2, 2);
          return morphs;
        },
        statements: [["content", "errorMessage", ["loc", [null, [77, 102], [77, 118]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-bottom-message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "spinner spinner-md spinner-inline log-updating-spinner");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Deployment in progress, log file updating.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 96,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row log-selection-row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-12 col-lg-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "role", "form-inline");
        dom.setAttribute(el3, "class", "log-file-form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "log-file-path");
        var el5 = dom.createTextNode("Viewing ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-5 col-lg-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row log-search-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-12");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "role", "form-inline");
        dom.setAttribute(el5, "class", "search-pf has-button log-search-form");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "form-group has-clear");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "search-pf-input-group log-search-input-group");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("label");
        dom.setAttribute(el8, "for", "log-search-input");
        dom.setAttribute(el8, "class", "sr-only");
        var el9 = dom.createTextNode("Search Log Input");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "form-group");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "class", "btn btn-default");
        dom.setAttribute(el7, "type", "submit");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "fa fa-search");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-7 col-lg-5");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "pull-right log-level-form form-inline");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Show:");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n         ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Error");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Warning");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Informational");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Debug");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-12 col-lg-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "log-output");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "log-output-bottom");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-12 col-lg-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "pull-right log-scroll-output-form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Auto-scroll to follow new log data");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0, 1, 1]);
        var element5 = dom.childAt(fragment, [2]);
        var element6 = dom.childAt(element5, [1, 1, 1, 1]);
        var element7 = dom.childAt(element6, [1, 1]);
        var element8 = dom.childAt(element6, [3, 1]);
        var element9 = dom.childAt(element5, [3, 1]);
        var element10 = dom.childAt(fragment, [4, 1, 1]);
        var morphs = new Array(17);
        morphs[0] = dom.createMorphAt(element4, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(element7, 3, 3);
        morphs[3] = dom.createMorphAt(element7, 5, 5);
        morphs[4] = dom.createElementMorph(element8);
        morphs[5] = dom.createMorphAt(dom.childAt(element9, [3, 1]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element9, [5, 1]), 0, 0);
        morphs[7] = dom.createMorphAt(dom.childAt(element9, [7, 1]), 0, 0);
        morphs[8] = dom.createMorphAt(dom.childAt(element9, [9, 1]), 0, 0);
        morphs[9] = dom.createMorphAt(element10, 1, 1);
        morphs[10] = dom.createMorphAt(element10, 2, 2);
        morphs[11] = dom.createMorphAt(element10, 3, 3);
        morphs[12] = dom.createUnsafeMorphAt(element10, 5, 5);
        morphs[13] = dom.createMorphAt(element10, 7, 7);
        morphs[14] = dom.createMorphAt(element10, 9, 9);
        morphs[15] = dom.createMorphAt(element10, 10, 10);
        morphs[16] = dom.createMorphAt(dom.childAt(fragment, [6, 1, 1, 1, 1]), 0, 0);
        return morphs;
      },
      statements: [["inline", "view", ["select"], ["id", "log-file-select", "class", "selectpicker log-file-select", "content", ["subexpr", "@mut", [["get", "logTypes", ["loc", [null, [5, 30], [5, 38]]]]], [], []], "value", ["subexpr", "@mut", [["get", "logType", ["loc", [null, [5, 45], [5, 52]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "logTypeSelection", ["loc", [null, [5, 63], [5, 79]]]]], [], []], "optionLabelPath", "content.label", "optionValuePath", "content.value"], ["loc", [null, [4, 6], [6, 87]]]], ["content", "logPath", ["loc", [null, [7, 42], [7, 53]]]], ["inline", "input", [], ["id", "log-search-input", "type", "text", "class", "form-control log-search-input", "placeholder", "Search", "value", ["subexpr", "@mut", [["get", "searchLogInputValue", ["loc", [null, [20, 121], [20, 140]]]]], [], []]], ["loc", [null, [20, 14], [20, 142]]]], ["block", "if", [["get", "isSearchActive", ["loc", [null, [21, 20], [21, 34]]]]], [], 0, null, ["loc", [null, [21, 14], [26, 21]]]], ["element", "action", ["search"], [], ["loc", [null, [30, 58], [30, 77]]]], ["inline", "input", [], ["type", "checkbox", "name", "error", "checked", ["subexpr", "@mut", [["get", "errorChecked", ["loc", [null, [43, 62], [43, 74]]]]], [], []]], ["loc", [null, [43, 17], [43, 76]]]], ["inline", "input", [], ["type", "checkbox", "name", "warn", "checked", ["subexpr", "@mut", [["get", "warnChecked", ["loc", [null, [46, 61], [46, 72]]]]], [], []]], ["loc", [null, [46, 17], [46, 74]]]], ["inline", "input", [], ["type", "checkbox", "name", "info", "checked", ["subexpr", "@mut", [["get", "infoChecked", ["loc", [null, [49, 61], [49, 72]]]]], [], []]], ["loc", [null, [49, 17], [49, 74]]]], ["inline", "input", [], ["type", "checkbox", "name", "debug", "checked", ["subexpr", "@mut", [["get", "debugChecked", ["loc", [null, [52, 62], [52, 74]]]]], [], []]], ["loc", [null, [52, 17], [52, 76]]]], ["block", "if", [["get", "showLogLoading", ["loc", [null, [61, 12], [61, 26]]]]], [], 1, null, ["loc", [null, [61, 6], [63, 13]]]], ["block", "if", [["get", "showLogEmpty", ["loc", [null, [64, 12], [64, 24]]]]], [], 2, null, ["loc", [null, [64, 6], [66, 13]]]], ["block", "if", [["get", "showLogTruncated", ["loc", [null, [67, 12], [67, 28]]]]], [], 3, null, ["loc", [null, [67, 6], [69, 13]]]], ["content", "displayedLogHtml", ["loc", [null, [71, 6], [71, 28]]]], ["block", "each", [["get", "newEntries", ["loc", [null, [72, 14], [72, 24]]]]], [], 4, null, ["loc", [null, [72, 6], [74, 15]]]], ["block", "if", [["get", "errorMessage", ["loc", [null, [76, 12], [76, 24]]]]], [], 5, null, ["loc", [null, [76, 6], [78, 13]]]], ["block", "if", [["get", "showLogUpdating", ["loc", [null, [79, 12], [79, 27]]]]], [], 6, null, ["loc", [null, [79, 6], [81, 13]]]], ["inline", "input", [], ["type", "checkbox", "name", "scrollToEnd", "checked", ["subexpr", "@mut", [["get", "scrollToEndChecked", ["loc", [null, [91, 66], [91, 84]]]]], [], []]], ["loc", [null, [91, 15], [91, 86]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define("fusor-ember-cli/templates/review/progress/overview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h1");
            dom.setAttribute(el1, "style", "float: left; margin: 0 15px 0 0");
            var el2 = dom.createTextNode("Content Error Occurred");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "style", "float: left; margin-top: 2px");
            dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h1");
            var el2 = dom.createTextNode("Content Error Occurred");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("Abandon Deployment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("Redeploy");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var element1 = dom.childAt(fragment, [5]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["abandon"], [], ["loc", [null, [9, 36], [9, 56]]]], ["element", "action", ["redeploy"], [], ["loc", [null, [10, 36], [10, 57]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "loadingRedeployment", ["loc", [null, [4, 8], [4, 27]]]]], [], 0, 1, ["loc", [null, [4, 2], [11, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["model", ["subexpr", "@mut", [["get", "rhevTask", ["loc", [null, [17, 25], [17, 33]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameRhev", ["loc", [null, [17, 39], [17, 47]]]]], [], []], "isSatelliteProgressBar", false], ["loc", [null, [17, 4], [17, 78]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["model", ["subexpr", "@mut", [["get", "openstackTask", ["loc", [null, [21, 25], [21, 38]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameOpenStack", ["loc", [null, [21, 44], [21, 57]]]]], [], []], "isSatelliteProgressBar", false], ["loc", [null, [21, 4], [21, 88]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["model", ["subexpr", "@mut", [["get", "cfmeTask", ["loc", [null, [25, 25], [25, 33]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameCloudForms", ["loc", [null, [25, 39], [25, 53]]]]], [], []], "isSatelliteProgressBar", false], ["loc", [null, [25, 4], [25, 84]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["model", ["subexpr", "@mut", [["get", "openshiftTask", ["loc", [null, [29, 25], [29, 38]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameOpenShift", ["loc", [null, [29, 44], [29, 57]]]]], [], []], "isSatelliteProgressBar", false], ["loc", [null, [29, 4], [29, 88]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 2
              },
              "end": {
                "line": 34,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["model", ["subexpr", "@mut", [["get", "deployTask", ["loc", [null, [33, 25], [33, 35]]]]], [], []], "name", "Total Deployment", "isSatelliteProgressBar", false], ["loc", [null, [33, 4], [33, 90]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          return morphs;
        },
        statements: [["inline", "progress-bar", [], ["model", ["subexpr", "@mut", [["get", "manageContentTask", ["loc", [null, [14, 23], [14, 40]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameSatellite", ["loc", [null, [14, 46], [14, 59]]]]], [], []], "isSatelliteProgressBar", true], ["loc", [null, [14, 2], [14, 89]]]], ["block", "if", [["get", "isRhev", ["loc", [null, [16, 8], [16, 14]]]]], [], 0, null, ["loc", [null, [16, 2], [18, 9]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [20, 8], [20, 19]]]]], [], 1, null, ["loc", [null, [20, 2], [22, 9]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [24, 8], [24, 20]]]]], [], 2, null, ["loc", [null, [24, 2], [26, 9]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [28, 8], [28, 19]]]]], [], 3, null, ["loc", [null, [28, 2], [30, 9]]]], ["block", "if", [["get", "showDeployTaskProgressBar", ["loc", [null, [32, 8], [32, 33]]]]], [], 4, null, ["loc", [null, [32, 2], [34, 9]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "deployment.has_content_error", ["loc", [null, [3, 6], [3, 34]]]]], [], 0, 1, ["loc", [null, [3, 0], [36, 7]]]], ["inline", "partial", ["abandon-deployment-modal"], [], ["loc", [null, [38, 0], [38, 38]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/review/progress", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 10], [7, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 8
            },
            "end": {
              "line": 18,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Overview");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Details");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 24,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Log");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 40,
                    "column": 6
                  },
                  "end": {
                    "line": 42,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          Next ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "fa fa-angle-right");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", ["review.summary"], ["role", "button", "class", "btn btn-primary"], 0, null, ["loc", [null, [40, 6], [42, 18]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 47,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-primary");
              dom.setAttribute(el1, "disabled", "true");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "fa fa-angle-right");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["content", "deployButtonTitle", ["loc", [null, [45, 10], [45, 31]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 2
              },
              "end": {
                "line": 48,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "deployTaskIsFinished", ["loc", [null, [39, 10], [39, 30]]]]], [], 0, 1, ["loc", [null, [39, 4], [47, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 0
            },
            "end": {
              "line": 49,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "cancel-back-next", [], ["backRouteName", "review.installation", "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [38, 36], [38, 45]]]]], [], []]], 0, null, ["loc", [null, [36, 2], [48, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "nav nav-tabs col-md-12");
        dom.setAttribute(el3, "data-tabs", "pills");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-md-12");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createMorphAt(element1, 2, 2);
        morphs[3] = dom.createMorphAt(element1, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showErrorMessage", ["loc", [null, [1, 6], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "link-to", ["review.progress.overview"], ["tagName", "li"], 1, null, ["loc", [null, [16, 8], [18, 20]]]], ["block", "link-to", ["review.progress.details"], ["tagName", "li"], 2, null, ["loc", [null, [19, 8], [21, 20]]]], ["block", "link-to", ["review.progress.log"], ["tagName", "li"], 3, null, ["loc", [null, [22, 8], [24, 20]]]], ["content", "outlet", ["loc", [null, [28, 8], [28, 18]]]], ["block", "unless", [["get", "deploymentController.model.has_content_error", ["loc", [null, [35, 10], [35, 54]]]]], [], 4, null, ["loc", [null, [35, 0], [49, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/review/summary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "review-link", [], ["label", "URL", "value", ["subexpr", "@mut", [["get", "rhevEngineUrl", ["loc", [null, [9, 28], [9, 41]]]]], [], []], "isExternalURL", true, "ipAddress", ["subexpr", "@mut", [["get", "rhevEngineUrlIP", ["loc", [null, [11, 32], [11, 47]]]]], [], []]], ["loc", [null, [8, 8], [11, 49]]]], ["inline", "review-link", [], ["label", "Username", "value", "admin"], ["loc", [null, [13, 8], [13, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "accordion-item", [], ["name", "Red Hat Enterprise Virtualization", "isOpen", true], 0, null, ["loc", [null, [6, 6], [15, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 36,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
            return morphs;
          },
          statements: [["inline", "review-link", [], ["label", "Undercloud URL", "value", ["subexpr", "@mut", [["get", "undercloudUrlIP", ["loc", [null, [21, 32], [21, 47]]]]], [], []], "isExternalURL", true], ["loc", [null, [20, 12], [22, 46]]]], ["inline", "review-link", [], ["label", "Undercloud username", "value", ["subexpr", "@mut", [["get", "undercloudUsername", ["loc", [null, [24, 32], [24, 50]]]]], [], []]], ["loc", [null, [23, 12], [24, 52]]]], ["inline", "review-link", [], ["label", "Undercloud password", "value", ["subexpr", "@mut", [["get", "undercloudPassword", ["loc", [null, [26, 32], [26, 50]]]]], [], []]], ["loc", [null, [25, 12], [26, 52]]]], ["inline", "review-link", [], ["label", "Overcloud URL", "value", ["subexpr", "@mut", [["get", "overcloudUrl", ["loc", [null, [29, 32], [29, 44]]]]], [], []], "isExternalURL", true, "ipAddress", ["subexpr", "@mut", [["get", "overcloudUrlIP", ["loc", [null, [31, 36], [31, 50]]]]], [], []]], ["loc", [null, [28, 12], [31, 52]]]], ["inline", "review-link", [], ["label", "Overcloud username", "value", ["subexpr", "@mut", [["get", "overcloudUsername", ["loc", [null, [33, 32], [33, 49]]]]], [], []]], ["loc", [null, [32, 12], [33, 51]]]], ["inline", "review-link", [], ["label", "Overcloud password", "value", ["subexpr", "@mut", [["get", "overcloudPassword", ["loc", [null, [35, 32], [35, 49]]]]], [], []]], ["loc", [null, [34, 12], [35, 51]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "accordion-item", [], ["name", "Red Hat Enterprise Linux - OpenStack Platform", "isOpen", ["subexpr", "@mut", [["get", "isOpenStackOpen", ["loc", [null, [19, 86], [19, 101]]]]], [], []]], 0, null, ["loc", [null, [19, 8], [36, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 8
              },
              "end": {
                "line": 45,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "review-link", [], ["label", "Master URL", "value", ["subexpr", "@mut", [["get", "oseMasterUrl", ["loc", [null, [42, 32], [42, 44]]]]], [], []], "isExternalURL", true, "ipAddress", ["subexpr", "@mut", [["get", "oseMasterIpUrl", ["loc", [null, [44, 36], [44, 50]]]]], [], []]], ["loc", [null, [41, 12], [44, 52]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "accordion-item", [], ["name", "OpenShift Enterprise", "isOpen", ["subexpr", "@mut", [["get", "isOpenShiftOpen", ["loc", [null, [40, 61], [40, 76]]]]], [], []]], 0, null, ["loc", [null, [40, 8], [45, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 6
              },
              "end": {
                "line": 63,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "review-link", [], ["label", "Admin Console", "value", ["subexpr", "@mut", [["get", "cfmeUrl", ["loc", [null, [52, 28], [52, 35]]]]], [], []], "isExternalURL", true, "ipAddress", ["subexpr", "@mut", [["get", "cfmeUrlIP", ["loc", [null, [54, 32], [54, 41]]]]], [], []]], ["loc", [null, [51, 8], [54, 43]]]], ["inline", "review-link", [], ["label", "Self-Service Console", "value", ["subexpr", "@mut", [["get", "cfmeUrlSelfService", ["loc", [null, [57, 28], [57, 46]]]]], [], []], "isExternalURL", true, "ipAddress", ["subexpr", "@mut", [["get", "cfmeUrlSelfServiceIP", ["loc", [null, [59, 32], [59, 52]]]]], [], []]], ["loc", [null, [56, 8], [59, 54]]]], ["inline", "review-link", [], ["label", "Username", "value", "admin"], ["loc", [null, [61, 8], [61, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "accordion-item", [], ["name", "Cloud Forms Management Engine", "isOpen", true], 0, null, ["loc", [null, [49, 6], [63, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 4
              },
              "end": {
                "line": 75,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        View Deployments\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 0
            },
            "end": {
              "line": 76,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["deployments"], ["role", "button", "class", "btn btn-primary"], 0, null, ["loc", [null, [73, 4], [75, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "isRhev", ["loc", [null, [5, 10], [5, 16]]]]], [], 0, null, ["loc", [null, [5, 4], [16, 11]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [18, 10], [18, 21]]]]], [], 1, null, ["loc", [null, [18, 4], [37, 11]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [39, 10], [39, 21]]]]], [], 2, null, ["loc", [null, [39, 4], [46, 11]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [48, 10], [48, 22]]]]], [], 3, null, ["loc", [null, [48, 4], [64, 11]]]], ["block", "cancel-back-next", [], ["backRouteName", "review.progress.overview", "disableBack", false, "disableCancel", true], 4, null, ["loc", [null, [69, 0], [76, 21]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/review", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("A. Installation Review");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberReview", ["loc", [null, [4, 11], [4, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("B. Installation Progress");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberReview", ["loc", [null, [8, 11], [8, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("C. Installation Summary");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberReview", ["loc", [null, [12, 11], [12, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["review.installation"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabInstallation", ["loc", [null, [3, 61], [3, 83]]]]], [], []]], 0, null, ["loc", [null, [3, 6], [5, 18]]]], ["block", "link-to", ["review.progress"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabProgress", ["loc", [null, [7, 57], [7, 75]]]]], [], []]], 1, null, ["loc", [null, [7, 6], [9, 18]]]], ["block", "link-to", ["review.summary"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabSummary", ["loc", [null, [11, 56], [11, 73]]]]], [], []]], 2, null, ["loc", [null, [11, 6], [13, 18]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 16
          }
        },
        "moduleName": "fusor-ember-cli/templates/review.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [15, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/rhev-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/rhev-options.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form form-horizontal");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(element0, 9, 9);
        morphs[5] = dom.createMorphAt(element0, 11, 11);
        morphs[6] = dom.createMorphAt(element0, 13, 13);
        morphs[7] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["label", "Root Password", "type", "password", "value", ["subexpr", "@mut", [["get", "rhevRootPassword", ["loc", [null, [5, 59], [5, 75]]]]], [], []], "cssId", "rhev-root-password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [6, 31], [6, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [6, 51], [6, 68]]]]], [], []], "help-inline", "Applies to root user accounts for deployed RHEV hosts", "placeholder", "Must be 8 or more characters"], ["loc", [null, [5, 6], [8, 50]]]], ["inline", "text-f", [], ["label", "Confirm Root Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmRhevRootPassword", ["loc", [null, [10, 67], [10, 90]]]]], [], []], "cssId", "confirm-rhev-root-password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [11, 31], [11, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "confirmRhevRootPasswordValidator", ["loc", [null, [11, 51], [11, 83]]]]], [], []], "placeholder", "Must match root password"], ["loc", [null, [10, 6], [12, 46]]]], ["inline", "text-f", [], ["label", "Engine Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "rhevEngineAdminPassword", ["loc", [null, [14, 67], [14, 90]]]]], [], []], "cssId", "rhev-engine-admin-password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [15, 31], [15, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [15, 51], [15, 68]]]]], [], []], "help-inline", "Applies to admin user account for RHEV web UI", "placeholder", "Must be 8 or more characters"], ["loc", [null, [14, 6], [17, 50]]]], ["inline", "text-f", [], ["label", "Confirm Engine Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmRhevEngineAdminPassword", ["loc", [null, [19, 75], [19, 105]]]]], [], []], "cssId", "confirm-rhev-engine-pdmin-password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [20, 31], [20, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "confirmRhevEngineAdminPasswordValidator", ["loc", [null, [20, 51], [20, 90]]]]], [], []], "placeholder", "Must match engine admin password"], ["loc", [null, [19, 6], [21, 54]]]], ["inline", "text-f", [], ["label", "Data Center Name", "value", ["subexpr", "@mut", [["get", "rhevDataCenterName", ["loc", [null, [23, 46], [23, 64]]]]], [], []], "placeholder", "Leave blank for default", "cssId", "rhev-data-center-name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [24, 24], [24, 33]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "dataCenterNameValidator", ["loc", [null, [24, 44], [24, 67]]]]], [], []], "showValidationError", true], ["loc", [null, [23, 6], [24, 94]]]], ["inline", "text-f", [], ["label", "Cluster Name", "value", ["subexpr", "@mut", [["get", "rhevClusterName", ["loc", [null, [26, 42], [26, 57]]]]], [], []], "placeholder", "Leave blank for default", "cssId", "rhev-cluster-name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [27, 24], [27, 33]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "clusterNameValidator", ["loc", [null, [27, 44], [27, 64]]]]], [], []], "showValidationError", true], ["loc", [null, [26, 6], [27, 91]]]], ["inline", "select-simple-f", [], ["label", "CPU Type", "content", ["subexpr", "@mut", [["get", "cpuTypes", ["loc", [null, [30, 32], [30, 40]]]]], [], []], "value", ["subexpr", "@mut", [["get", "rhevCpuType", ["loc", [null, [31, 30], [31, 41]]]]], [], []], "prompt", "Autodetect CPU family", "cssId", "rhev-cpu-type", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [34, 33], [34, 42]]]]], [], []]], ["loc", [null, [29, 6], [34, 44]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "optionsBackRouteName", ["loc", [null, [39, 33], [39, 53]]]]], [], []], "disableBack", false, "nextRouteName", "storage", "disableNext", ["subexpr", "@mut", [["get", "disableNextRhevOptions", ["loc", [null, [42, 31], [42, 53]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [43, 33], [43, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [44, 34], [44, 48]]]]], [], []]], ["loc", [null, [39, 0], [44, 50]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/rhev-setup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 12,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/rhev-setup.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "disabled");
          var el2 = dom.createTextNode("\n          Self-hosted\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 6
            },
            "end": {
              "line": 20,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/rhev-setup.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n        Hypervisor + engine\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [17, 24], [17, 33]]]], "disabled"], [], ["loc", [null, [17, 19], [17, 46]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/rhev-setup.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select the setup type.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["block", "radio-button", [], ["value", "selfhost", "groupValue", ["subexpr", "@mut", [["get", "rhevSetup", ["loc", [null, [8, 50], [8, 59]]]]], [], []], "changed", "rhevSetupChanged", "id", "selfhost", "disabled", true], 0, null, ["loc", [null, [8, 6], [12, 23]]]], ["block", "radio-button", [], ["value", "rhevhost", "groupValue", ["subexpr", "@mut", [["get", "rhevSetup", ["loc", [null, [16, 50], [16, 59]]]]], [], []], "changed", "rhevSetupChanged", "id", "rhevhost", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [16, 110], [16, 119]]]]], [], []]], 1, null, ["loc", [null, [16, 6], [20, 23]]]], ["inline", "cancel-back-next", [], ["backRouteName", "satellite.access-insights", "disableBack", false, "nextRouteName", "engine.discovered-host", "disableNext", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [32, 33], [32, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [33, 34], [33, 48]]]]], [], []]], ["loc", [null, [28, 0], [33, 50]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/rhev", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("2A. Setup Type");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("2B. ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "engineTabName", ["loc", [null, [8, 15], [8, 32]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 6
                },
                "end": {
                  "line": 14,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/rhev.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createTextNode("2C. Hypervisors");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "link-to", ["hypervisor"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevHypervisors", ["loc", [null, [12, 52], [12, 77]]]]], [], []]], 0, null, ["loc", [null, [12, 6], [14, 18]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 6
              },
              "end": {
                "line": 19,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(". Configuration");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "if", [["get", "isSelfHost", ["loc", [null, [18, 16], [18, 26]]]], "2C", "2D"], [], ["loc", [null, [18, 11], [18, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 6
              },
              "end": {
                "line": 23,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(". Storage");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "if", [["get", "isSelfHost", ["loc", [null, [22, 16], [22, 26]]]], "2D", "2E"], [], ["loc", [null, [22, 11], [22, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/rhev.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["rhev-setup"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevSetupType", ["loc", [null, [3, 52], [3, 75]]]]], [], []]], 0, null, ["loc", [null, [3, 6], [5, 18]]]], ["block", "link-to", ["engine"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevEngine", ["loc", [null, [7, 48], [7, 68]]]]], [], []]], 1, null, ["loc", [null, [7, 6], [9, 18]]]], ["block", "unless", [["get", "isSelfHost", ["loc", [null, [11, 16], [11, 26]]]]], [], 2, null, ["loc", [null, [11, 6], [15, 17]]]], ["block", "link-to", ["rhev-options"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevConfiguration", ["loc", [null, [17, 54], [17, 81]]]]], [], []]], 3, null, ["loc", [null, [17, 6], [19, 18]]]], ["block", "link-to", ["storage"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevStorage", ["loc", [null, [21, 49], [21, 70]]]]], [], []]], 4, null, ["loc", [null, [21, 6], [23, 18]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/rhev.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [25, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/satellite/access-insights", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/satellite/access-insights.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-6");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select whether to enable Red Hat Insights for this deployment.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      Enable Red Hat Insights\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [5]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element0, 3, 3);
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "name", "enable_access_insights", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [7, 67], [7, 76]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "model.enable_access_insights", ["loc", [null, [7, 85], [7, 113]]]]], [], []]], ["loc", [null, [7, 4], [7, 115]]]], ["attribute", "class", ["get", "analyticsColor", ["loc", [null, [8, 18], [8, 32]]]]], ["inline", "cancel-back-next", [], ["backRouteName", "configure-environment", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "step2RouteName", ["loc", [null, [18, 33], [18, 47]]]]], [], []], "disableNext", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [20, 33], [20, 42]]]]], [], []]], ["loc", [null, [16, 0], [20, 44]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/satellite/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/satellite/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form-horizontal");
        dom.setAttribute(el3, "role", "form");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["label", "Name", "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [5, 34], [5, 44]]]]], [], []], "inputSize", "col-md-5", "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [5, 73], [5, 79]]]]], [], []], "cssId", ["subexpr", "@mut", [["get", "idSatName", ["loc", [null, [5, 86], [5, 95]]]]], [], []], "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [6, 40], [6, 49]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "deploymentNameValidator", ["loc", [null, [6, 60], [6, 83]]]]], [], []]], ["loc", [null, [5, 6], [6, 85]]]], ["inline", "textarea-f", [], ["label", "Description (Optional)", "value", ["subexpr", "@mut", [["get", "model.description", ["loc", [null, [8, 56], [8, 73]]]]], [], []], "inputSize", "col-md-5", "cssId", ["subexpr", "@mut", [["get", "idSatDesc", ["loc", [null, [8, 101], [8, 110]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [8, 120], [8, 129]]]]], [], []]], ["loc", [null, [8, 6], [8, 132]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameOnSatIndex", ["loc", [null, [13, 33], [13, 56]]]]], [], []], "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "lifecycleEnvironmentTabRouteName", ["loc", [null, [15, 33], [15, 65]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOnDeploymentName", ["loc", [null, [16, 31], [16, 58]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [17, 33], [17, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [18, 34], [18, 48]]]]], [], []], "isNew", ["subexpr", "@mut", [["get", "isNew", ["loc", [null, [19, 25], [19, 30]]]]], [], []]], ["loc", [null, [13, 0], [19, 32]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/satellite/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/satellite/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "loading-spinner", [], ["show", true, "text", "Loading..."], ["loc", [null, [1, 0], [1, 47]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/satellite", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("1A. Deployment Name");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("1B. Configure Lifecycle Environment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("1C. Insights");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/satellite.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "satelliteTabRouteName", ["loc", [null, [3, 17], [3, 38]]]]], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabDeploymentName", ["loc", [null, [3, 61], [3, 85]]]]], [], []]], 0, null, ["loc", [null, [3, 6], [5, 18]]]], ["block", "link-to", [["get", "lifecycleEnvironmentTabRouteName", ["loc", [null, [7, 17], [7, 49]]]]], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabLifecycleEnvironment", ["loc", [null, [7, 72], [7, 102]]]]], [], []]], 1, null, ["loc", [null, [7, 6], [9, 18]]]], ["block", "link-to", ["satellite.access-insights"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabAccessInsights", ["loc", [null, [11, 67], [11, 91]]]]], [], []]], 2, null, ["loc", [null, [11, 6], [13, 18]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/satellite.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [15, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/storage", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          var el2 = dom.createTextNode(" Data Domain ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        NFS\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [11, 24], [11, 33]]]], "disabled"], [], ["loc", [null, [11, 19], [11, 46]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "disabled");
            var el2 = dom.createTextNode("\n        Local\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 4
              },
              "end": {
                "line": 26,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        Gluster\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "deploymentController.isStarted", ["loc", [null, [23, 24], [23, 54]]]], "disabled"], [], ["loc", [null, [23, 19], [23, 67]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "radio-button", [], ["value", "NFS", "groupValue", ["subexpr", "@mut", [["get", "model.rhev_storage_type", ["loc", [null, [9, 43], [9, 66]]]]], [], []], "id", "nfs", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [10, 29], [10, 38]]]]], [], []]], 0, null, ["loc", [null, [9, 4], [14, 21]]]], ["block", "radio-button", [], ["value", "Local", "groupValue", ["subexpr", "@mut", [["get", "model.rhev_storage_type", ["loc", [null, [16, 45], [16, 68]]]]], [], []], "id", "local", "disabled", true], 1, null, ["loc", [null, [16, 4], [20, 21]]]], ["block", "radio-button", [], ["value", "glusterfs", "groupValue", ["subexpr", "@mut", [["get", "model.rhev_storage_type", ["loc", [null, [22, 49], [22, 72]]]]], [], []], "id", "gluster", "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [22, 95], [22, 125]]]]], [], []]], 2, null, ["loc", [null, [22, 4], [26, 21]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 6
              },
              "end": {
                "line": 38,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            var el2 = dom.createTextNode(" Export Domain ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["inline", "text-f", [], ["label", "Export Domain Name", "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_name", ["loc", [null, [35, 52], [35, 81]]]]], [], []], "cssId", "rhev_export_domain_name", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [35, 139], [35, 169]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "computerNameValidator", ["loc", [null, [35, 180], [35, 201]]]]], [], []]], ["loc", [null, [35, 10], [35, 203]]]], ["inline", "text-f", [], ["label", "Storage Address", "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_address", ["loc", [null, [36, 49], [36, 81]]]]], [], []], "cssId", "rhev_export_domain_address", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [36, 142], [36, 172]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostnameValidator", ["loc", [null, [36, 183], [36, 200]]]]], [], []]], ["loc", [null, [36, 10], [36, 202]]]], ["inline", "text-f", [], ["label", "Share Path", "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_path", ["loc", [null, [37, 44], [37, 73]]]]], [], []], "cssId", "rhev_export_domain_path", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [37, 131], [37, 161]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errorsHashExportPath", ["loc", [null, [37, 169], [37, 189]]]]], [], []]], ["loc", [null, [37, 10], [37, 191]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 2
            },
            "end": {
              "line": 40,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["inline", "text-f", [], ["label", "Data Domain Name", "value", ["subexpr", "@mut", [["get", "model.rhev_storage_name", ["loc", [null, [29, 46], [29, 69]]]]], [], []], "isRequired", true, "cssId", "rhev_storage_name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [29, 121], [29, 130]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "computerNameValidator", ["loc", [null, [29, 141], [29, 162]]]]], [], []]], ["loc", [null, [29, 6], [29, 164]]]], ["inline", "text-f", [], ["label", "Storage Address", "value", ["subexpr", "@mut", [["get", "model.rhev_storage_address", ["loc", [null, [30, 45], [30, 71]]]]], [], []], "isRequired", true, "cssId", "rhev_storage_address", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [30, 126], [30, 135]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostnameValidator", ["loc", [null, [30, 146], [30, 163]]]]], [], []]], ["loc", [null, [30, 6], [30, 165]]]], ["inline", "text-f", [], ["label", "Share Path", "value", ["subexpr", "@mut", [["get", "model.rhev_share_path", ["loc", [null, [31, 40], [31, 61]]]]], [], []], "isRequired", true, "cssId", "rhev_share_path", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [31, 111], [31, 120]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errorsHashSharePath", ["loc", [null, [31, 128], [31, 147]]]]], [], []]], ["loc", [null, [31, 6], [31, 149]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [33, 12], [33, 24]]]]], [], 0, null, ["loc", [null, [33, 6], [38, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "text-f", [], ["label", "Storage Path", "value", ["subexpr", "@mut", [["get", "model.rhev_local_storage_path", ["loc", [null, [41, 42], [41, 71]]]]], [], []], "placeholder", "Ex. /rhev/data_storage", "isRequired", true, "cssId", "rhev_local_storage_path", "help-inline", "This path will be created and given appropriate permissions - chown 36:36; chmod 0755, etc", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [41, 271], [41, 280]]]]], [], []]], ["loc", [null, [41, 6], [41, 282]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 47,
                    "column": 6
                  },
                  "end": {
                    "line": 52,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/storage.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("h4");
                var el2 = dom.createTextNode(" Export Domain ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                return morphs;
              },
              statements: [["inline", "text-f", [], ["label", "Export Domain Name", "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_name", ["loc", [null, [49, 52], [49, 81]]]]], [], []], "cssId", "rhev_export_domain_name", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [49, 139], [49, 169]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "computerNameValidator", ["loc", [null, [49, 180], [49, 201]]]]], [], []]], ["loc", [null, [49, 10], [49, 203]]]], ["inline", "text-f", [], ["label", "Storage Address", "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_address", ["loc", [null, [50, 49], [50, 81]]]]], [], []], "cssId", "rhev_export_domain_address", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [50, 142], [50, 172]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostnameValidator", ["loc", [null, [50, 183], [50, 200]]]]], [], []]], ["loc", [null, [50, 10], [50, 202]]]], ["inline", "text-f", [], ["label", "Share Path", "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_path", ["loc", [null, [51, 44], [51, 73]]]]], [], []], "cssId", "rhev_export_domain_path", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [51, 131], [51, 161]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errorsHashExportPath", ["loc", [null, [51, 169], [51, 189]]]]], [], []]], ["loc", [null, [51, 10], [51, 191]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 2
                },
                "end": {
                  "line": 53,
                  "column": 2
                }
              },
              "moduleName": "fusor-ember-cli/templates/storage.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("  ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              return morphs;
            },
            statements: [["inline", "text-f", [], ["label", "Data Domain Name", "value", ["subexpr", "@mut", [["get", "model.rhev_storage_name", ["loc", [null, [44, 46], [44, 69]]]]], [], []], "isRequired", true, "cssId", "rhev_storage_name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [44, 121], [44, 130]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "computerNameValidator", ["loc", [null, [44, 141], [44, 162]]]]], [], []]], ["loc", [null, [44, 6], [44, 164]]]], ["inline", "text-f", [], ["label", "Storage Address", "value", ["subexpr", "@mut", [["get", "model.rhev_storage_address", ["loc", [null, [45, 45], [45, 71]]]]], [], []], "isRequired", true, "cssId", "rhev_storage_address", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [45, 126], [45, 135]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostnameValidator", ["loc", [null, [45, 146], [45, 163]]]]], [], []]], ["loc", [null, [45, 6], [45, 165]]]], ["inline", "text-f", [], ["label", "Share Path", "value", ["subexpr", "@mut", [["get", "model.rhev_share_path", ["loc", [null, [46, 40], [46, 61]]]]], [], []], "isRequired", true, "cssId", "rhev_share_path", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [46, 111], [46, 120]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errorsHashSharePath", ["loc", [null, [46, 128], [46, 147]]]]], [], []]], ["loc", [null, [46, 6], [46, 149]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [47, 12], [47, 24]]]]], [], 0, null, ["loc", [null, [47, 6], [52, 13]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 2
              },
              "end": {
                "line": 53,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isGluster", ["loc", [null, [43, 12], [43, 21]]]]], [], 0, null, ["loc", [null, [43, 2], [53, 2]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isLocal", ["loc", [null, [40, 12], [40, 19]]]]], [], 0, 1, ["loc", [null, [40, 2], [53, 2]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 63,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/storage.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form form-horizontal");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 2, 2);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "isCloudForms", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "base-f", [], ["label", "Storage Type", "isRequired", true], 1, null, ["loc", [null, [7, 2], [27, 13]]]], ["block", "if", [["get", "isNFS", ["loc", [null, [28, 8], [28, 13]]]]], [], 2, 3, ["loc", [null, [28, 2], [53, 9]]]], ["inline", "cancel-back-next", [], ["backRouteName", "rhev-options", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "step3RouteName", ["loc", [null, [59, 33], [59, 47]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextStorage", ["loc", [null, [60, 31], [60, 49]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [61, 33], [61, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [62, 34], [62, 48]]]]], [], []]], ["loc", [null, [57, 0], [62, 50]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/credentials", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-info rhci-alert");
          var el4 = dom.createTextNode("\n          This deployment already has a subscription management application ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" assigned to it.\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "upstreamConsumerName", ["loc", [null, [5, 84], [5, 108]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 17,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-info rhci-alert");
            var el4 = dom.createTextNode("\n          There is already a manifest uploaded for your organization: ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("strong");
            var el5 = dom.createTextNode(" ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "organizationUpstreamConsumerName", ["loc", [null, [13, 79], [13, 115]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasOrganizationUpstreamConsumerUUID", ["loc", [null, [9, 10], [9, 45]]]]], [], 0, null, ["loc", [null, [9, 0], [17, 0]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [25, 10], [25, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 45,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Yes\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element6, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [42, 26], [42, 35]]]], "disabled"], [], ["loc", [null, [42, 21], [42, 48]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 10
              },
              "end": {
                "line": 61,
                "column": 10
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-success rhci-alert");
            var el4 = dom.createTextNode("\n                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-check-circle-o green-circle");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                     \n                    You are already successfully authenticated as ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("strong");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" with the Red Hat Customer Portal.\n                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "style", "margin-left:30px;");
            var el5 = dom.createTextNode("\n                      You may ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("a");
            var el6 = dom.createTextNode("logout");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(" and then login as a different user.\n                    ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1, 1, 1]);
            var element5 = dom.childAt(element4, [5, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
            morphs[1] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["content", "model.identification", ["loc", [null, [54, 74], [54, 98]]]], ["element", "action", ["logoutPortal"], [], ["loc", [null, [56, 33], [56, 58]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 76,
                  "column": 18
                },
                "end": {
                  "line": 80,
                  "column": 18
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "https://www.redhat.com/wapps/sso/lostPassword.html");
              dom.setAttribute(el1, "target", "_blank");
              var el2 = dom.createTextNode("\n                      Forgot your login or password?\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 10
              },
              "end": {
                "line": 84,
                "column": 10
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("br");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              Enter your Red Hat account information.\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("br");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("br");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("form");
            dom.setAttribute(el3, "class", "form form-horizontal");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment(" invisble input password is hack to remove chrome autocomplete ");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("input");
            dom.setAttribute(el4, "style", "display:none");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("input");
            dom.setAttribute(el4, "type", "password");
            dom.setAttribute(el4, "style", "display:none");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("              ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 1, 7]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element3, 7, 7);
            morphs[1] = dom.createMorphAt(element3, 9, 9);
            morphs[2] = dom.createMorphAt(element3, 11, 11);
            return morphs;
          },
          statements: [["inline", "text-f", [], ["label", "Red Hat login", "value", ["subexpr", "@mut", [["get", "model.identification", ["loc", [null, [73, 53], [73, 73]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [73, 83], [73, 92]]]]], [], []]], ["loc", [null, [73, 16], [73, 94]]]], ["inline", "text-f", [], ["label", "Password", "value", ["subexpr", "@mut", [["get", "password", ["loc", [null, [74, 48], [74, 56]]]]], [], []], "type", "password", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [74, 82], [74, 91]]]]], [], []]], ["loc", [null, [74, 16], [74, 93]]]], ["block", "base-f", [], [], 0, null, ["loc", [null, [76, 18], [80, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model.isAuthenticated", ["loc", [null, [48, 16], [48, 37]]]]], [], 0, 1, ["loc", [null, [48, 10], [84, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n        No, Satellite will have restricted network access.\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [95, 24], [95, 33]]]], "disabled"], [], ["loc", [null, [95, 19], [95, 46]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 118,
                "column": 14
              },
              "end": {
                "line": 129,
                "column": 14
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-success");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-2x fa-check-circle-o green-circle");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                             \n                            You successfully uploaded manifest\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "style", "margin-left:30px;");
            var el3 = dom.createTextNode("\n                              You may ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            var el4 = dom.createTextNode("upload");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" a different manifest.\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [5, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["content", "manifestFile", ["loc", [null, [123, 36], [123, 52]]]], ["element", "action", ["uploadDifferentManifest"], [], ["loc", [null, [126, 41], [126, 77]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 129,
                "column": 14
              },
              "end": {
                "line": 134,
                "column": 14
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "type", "file");
            dom.setAttribute(el1, "id", "manifest-file-field");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "button-f", [], ["title", "Upload", "action", "uploadManifest"], ["loc", [null, [133, 18], [133, 69]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 100,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n            Satellite needs a URL within the network from which it can access content.\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("br");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            Subscriptions that are managed by Satellite need to be added through a subscription management application manifest, which you create and obtain through Customer Portal. This manifest will be assigned to an organization, and any system that registers with that organization can use those subscriptions.\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "style", "padding-left:25px");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
          return morphs;
        },
        statements: [["inline", "content-mirror-f", [], ["cdnUrl", ["subexpr", "@mut", [["get", "cdnUrl", ["loc", [null, [106, 19], [106, 25]]]]], [], []], "deploymentId", ["subexpr", "@mut", [["get", "deploymentId", ["loc", [null, [107, 25], [107, 37]]]]], [], []], "MirrorStatus", ["subexpr", "@mut", [["get", "MirrorStatus", ["loc", [null, [108, 25], [108, 37]]]]], [], []], "mirrorStatusUpdate", "mirrorStatusUpdate"], ["loc", [null, [105, 10], [110, 12]]]], ["block", "if", [["get", "hasManifestFile", ["loc", [null, [118, 20], [118, 35]]]]], [], 0, 1, ["loc", [null, [118, 14], [134, 21]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 142,
              "column": 0
            },
            "end": {
              "line": 151,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameonCredentials", ["loc", [null, [144, 37], [144, 63]]]]], [], []], "disableBack", false, "nextRouteName", "subscriptions.review-subscriptions", "disableNext", ["subexpr", "@mut", [["get", "disableNextDisconnected", ["loc", [null, [147, 35], [147, 58]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [148, 37], [148, 46]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [149, 38], [149, 52]]]]], [], []]], ["loc", [null, [144, 4], [149, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 157,
                  "column": 8
                },
                "end": {
                  "line": 159,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-angle-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "nextButtonTitle", ["loc", [null, [158, 12], [158, 31]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 153,
                "column": 4
              },
              "end": {
                "line": 160,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "button-f", [], ["disabled", ["subexpr", "@mut", [["get", "disableCredentialsNext", ["loc", [null, [157, 29], [157, 51]]]]], [], []], "action", ["subexpr", "@mut", [["get", "actionCredentialsNext", ["loc", [null, [157, 59], [157, 80]]]]], [], []]], 0, null, ["loc", [null, [157, 8], [159, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 151,
              "column": 0
            },
            "end": {
              "line": 162,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameonCredentials", ["loc", [null, [153, 38], [153, 64]]]]], [], []], "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [155, 38], [155, 47]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [156, 39], [156, 53]]]]], [], []]], 0, null, ["loc", [null, [153, 4], [160, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 163,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Satellite will have external network access and receive content directly from Red Hat Customer Portal.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [4, 1]);
        var element8 = dom.childAt(element7, [3]);
        var element9 = dom.childAt(element7, [5]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(element8, 1, 1);
        morphs[3] = dom.createMorphAt(element8, 3, 3);
        morphs[4] = dom.createMorphAt(element9, 1, 1);
        morphs[5] = dom.createMorphAt(element9, 3, 3);
        morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasUpstreamConsumerUuid", ["loc", [null, [1, 6], [1, 29]]]]], [], 0, 1, ["loc", [null, [1, 0], [17, 7]]]], ["block", "if", [["get", "showErrorMessage", ["loc", [null, [19, 6], [19, 22]]]]], [], 2, null, ["loc", [null, [19, 0], [29, 7]]]], ["block", "radio-button", [], ["value", "redhat_cdn", "groupValue", ["subexpr", "@mut", [["get", "contentProviderType", ["loc", [null, [38, 33], [38, 52]]]]], [], []], "changed", "providerTypeChanged", "id", "redhat_cdn", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [41, 31], [41, 40]]]]], [], []]], 3, null, ["loc", [null, [37, 6], [45, 23]]]], ["block", "unless", [["get", "isDisconnected", ["loc", [null, [47, 16], [47, 30]]]]], [], 4, null, ["loc", [null, [47, 6], [85, 17]]]], ["block", "radio-button", [], ["value", "disconnected", "groupValue", ["subexpr", "@mut", [["get", "contentProviderType", ["loc", [null, [91, 33], [91, 52]]]]], [], []], "changed", "providerTypeChanged", "id", "disconnected", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [94, 31], [94, 40]]]]], [], []]], 5, null, ["loc", [null, [90, 6], [98, 23]]]], ["block", "if", [["get", "isDisconnected", ["loc", [null, [100, 12], [100, 26]]]]], [], 6, null, ["loc", [null, [100, 6], [136, 13]]]], ["block", "if", [["get", "isDisconnected", ["loc", [null, [142, 6], [142, 20]]]]], [], 7, 8, ["loc", [null, [142, 0], [162, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "loading-spinner", [], ["show", true, "text", "Loading from Red Hat Customer Portal ..."], ["loc", [null, [1, 0], [1, 77]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/management-application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 15,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-success rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-check-circle-o green-circle");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n           \n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" added successfully.\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
            return morphs;
          },
          statements: [["content", "newSatelliteName", ["loc", [null, [11, 10], [11, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 0
                },
                "end": {
                  "line": 17,
                  "column": 0
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "loading-spinner", [], ["show", true, "text", ["subexpr", "@mut", [["get", "msgWaiting", ["loc", [null, [16, 39], [16, 49]]]]], [], []]], ["loc", [null, [16, 6], [16, 51]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 0
              },
              "end": {
                "line": 17,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "showWaitingMessage", ["loc", [null, [15, 10], [15, 28]]]]], [], 0, null, ["loc", [null, [15, 0], [17, 0]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 0
              },
              "end": {
                "line": 29,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n           \n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
            return morphs;
          },
          statements: [["content", "errorMsg", ["loc", [null, [25, 10], [25, 22]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 54,
                "column": 8
              },
              "end": {
                "line": 59,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "tr-management-app", [], ["managementApp", ["subexpr", "@mut", [["get", "managementApp", ["loc", [null, [55, 44], [55, 57]]]]], [], []], "consumerUUID", ["subexpr", "@mut", [["get", "sessionPortal.consumerUUID", ["loc", [null, [56, 43], [56, 69]]]]], [], []], "action", "selectManagementApp", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [58, 39], [58, 48]]]]], [], []]], ["loc", [null, [55, 10], [58, 50]]]]],
          locals: ["managementApp"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 73,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "pull-right");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-primary");
          var el5 = dom.createTextNode("\n        New Subscription Management Application\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3, "class", "table table-bordered");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("thead");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Name");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Subscriptions Attached");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("UUID");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tbody");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [5, 1, 1, 1]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createAttrMorph(element0, 'disabled');
          morphs[3] = dom.createElementMorph(element0);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [9, 1, 1, 3]), 1, 1);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "showAlertMessage", ["loc", [null, [5, 6], [5, 22]]]]], [], 0, 1, ["loc", [null, [5, 0], [17, 7]]]], ["block", "if", [["get", "showErrorMessage", ["loc", [null, [19, 6], [19, 22]]]]], [], 2, null, ["loc", [null, [19, 0], [29, 7]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [35, 83], [35, 92]]]]], ["element", "action", ["registerNewSatellite"], [], ["loc", [null, [35, 38], [35, 71]]]], ["block", "each", [["get", "model", ["loc", [null, [54, 16], [54, 21]]]]], [], 3, null, ["loc", [null, [54, 8], [59, 17]]]], ["inline", "partial", ["new-satellite"], [], ["loc", [null, [65, 0], [65, 27]]]], ["inline", "cancel-back-next", [], ["backRouteName", "subscriptions.credentials", "disableBack", false, "nextRouteName", "subscriptions.select-subscriptions", "disableNext", ["subexpr", "@mut", [["get", "disableNextOnManagementApp", ["loc", [null, [70, 31], [70, 57]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [71, 33], [71, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [72, 34], [72, 48]]]]], [], []]], ["loc", [null, [67, 0], [72, 50]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 77,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]], ["block", "if", [["get", "showManagementApplications", ["loc", [null, [3, 6], [3, 32]]]]], [], 0, null, ["loc", [null, [3, 0], [73, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/management-application.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 40
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading from Red Hat Customer Portal ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/review-subscriptions", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 19,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/review-subscriptions.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "tr-subscription-manifest", [], ["subscription", ["subexpr", "@mut", [["get", "subscription", ["loc", [null, [18, 50], [18, 62]]]]], [], []], "isDisconnected", ["subexpr", "@mut", [["get", "isDisconnected", ["loc", [null, [18, 78], [18, 92]]]]], [], []]], ["loc", [null, [18, 10], [18, 94]]]]],
        locals: ["subscription"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/review-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "colspan", "8");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "no_subscriptions");
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h3");
          var el5 = dom.createTextNode(" No subscriptions found ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 41,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/review-subscriptions.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "table table-bordered small");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Subscription Name ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Contract Number ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "text-center");
        var el7 = dom.createTextNode(" Start Date ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "text-center");
        var el7 = dom.createTextNode(" End Date ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "text-center");
        var el7 = dom.createTextNode(" Quantity Attached ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "text-center");
        var el7 = dom.createTextNode(" Total Quantity ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1, 3]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["block", "each", [["get", "sortedModel", ["loc", [null, [17, 14], [17, 25]]]]], [], 0, 1, ["loc", [null, [17, 6], [27, 15]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameReviewSubs", ["loc", [null, [35, 33], [35, 56]]]]], [], []], "disableBack", false, "nextRouteName", "review", "disableNext", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [39, 33], [39, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [40, 34], [40, 48]]]]], [], []]], ["loc", [null, [35, 0], [40, 50]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/select-subscriptions", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 10], [7, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n        Loading from Red Hat Customer Portal ...\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-9");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
              var el4 = dom.createTextNode("\n                  You previously selected subscriptions (Contract Number ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(") that are no longer available to be selected in the pool.\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 1, 1);
              return morphs;
            },
            statements: [["content", "contractNumbersInModelNotInPool", ["loc", [null, [34, 73], [34, 108]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 57,
                    "column": 12
                  },
                  "end": {
                    "line": 62,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "tr-subscription", [], ["subscription", ["subexpr", "@mut", [["get", "subscription", ["loc", [null, [58, 45], [58, 57]]]]], [], []], "numSubscriptionsRequired", ["subexpr", "@mut", [["get", "numSubscriptionsRequired", ["loc", [null, [59, 57], [59, 81]]]]], [], []], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [60, 38], [60, 43]]]]], [], []], "saveSubscription", "saveSubscription"], ["loc", [null, [58, 14], [61, 69]]]]],
              locals: ["subscription"],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 62,
                    "column": 12
                  },
                  "end": {
                    "line": 70,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "colspan", "8");
                var el3 = dom.createTextNode("\n                  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("p");
                dom.setAttribute(el3, "class", "no_subscriptions");
                var el4 = dom.createTextNode("\n                    No subscriptions found. Check your account in in the ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4, "href", "https://idp.redhat.com/idp/");
                dom.setAttribute(el4, "target", "_blank");
                var el5 = dom.createTextNode("Red Hat Customer Portal");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" to verify you have subscriptions available.\n                  ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 8
                },
                "end": {
                  "line": 75,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("table");
              dom.setAttribute(el1, "class", "table table-bordered small");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("thead");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("tr");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Subscription Name ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Contract Number ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" System Type ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Start Date ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" End Date ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Attached ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Available ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Quantity ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("tbody");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
              return morphs;
            },
            statements: [["block", "each", [["get", "subscriptionPools", ["loc", [null, [57, 20], [57, 37]]]]], [], 0, 1, ["loc", [null, [57, 12], [70, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 100,
                      "column": 20
                    },
                    "end": {
                      "line": 102,
                      "column": 20
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "tr-subscription-saved", [], ["subscription", ["subexpr", "@mut", [["get", "sub", ["loc", [null, [101, 59], [101, 62]]]]], [], []]], ["loc", [null, [101, 22], [101, 64]]]]],
                locals: ["sub"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 84,
                    "column": 12
                  },
                  "end": {
                    "line": 105,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "alert alert-danger rhci-alert");
                var el2 = dom.createTextNode("\n                        Below are the subscriptions that you previously saved with the deployment.\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("table");
                dom.setAttribute(el1, "class", "table table-bordered small");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("thead");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("tr");
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" Subscription Name ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" Contract Number ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" Quantity ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("tbody");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 3]), 1, 1);
                return morphs;
              },
              statements: [["block", "each", [["get", "model", ["loc", [null, [100, 28], [100, 33]]]]], [], 0, null, ["loc", [null, [100, 20], [102, 29]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 107,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "col-md-9");
              var el2 = dom.createTextNode("\n\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "alert alert-info rhci-alert");
              var el3 = dom.createTextNode("\n                    You have no additional subscriptions to add to this subscription management application. Please see the\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3, "href", "https://idp.redhat.com/idp/");
              dom.setAttribute(el3, "target", "_blank");
              var el4 = dom.createTextNode("Red Hat Customer Portal");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" for more information.\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
              return morphs;
            },
            statements: [["block", "if", [["get", "hasSubscriptionSavedInModel", ["loc", [null, [84, 18], [84, 45]]]]], [], 0, null, ["loc", [null, [84, 12], [105, 19]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 4
              },
              "end": {
                "line": 109,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasContractNumbersInModelNotInPool", ["loc", [null, [30, 14], [30, 48]]]]], [], 0, null, ["loc", [null, [30, 8], [38, 15]]]], ["block", "if", [["get", "hasSubscriptionPools", ["loc", [null, [40, 14], [40, 34]]]]], [], 1, 2, ["loc", [null, [40, 8], [107, 15]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 122,
                  "column": 14
                },
                "end": {
                  "line": 124,
                  "column": 14
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "tr-subscription-saved", [], ["subscription", ["subexpr", "@mut", [["get", "sub", ["loc", [null, [123, 53], [123, 56]]]]], [], []]], ["loc", [null, [123, 16], [123, 58]]]]],
            locals: ["sub"],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 124,
                  "column": 14
                },
                "end": {
                  "line": 130,
                  "column": 14
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "colspan", "4");
              var el3 = dom.createTextNode("\n                    No subscriptions were attached to deployment\n                  ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 109,
                "column": 4
              },
              "end": {
                "line": 134,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table table-bordered small");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("thead");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tr");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" Subscription Name ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" Contract Number ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" Quantity ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tbody");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "model", ["loc", [null, [122, 22], [122, 27]]]]], [], 0, 1, ["loc", [null, [122, 14], [130, 23]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 144,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createTextNode("Optional");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(": If you need to ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createTextNode("attach more");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" subscriptions to ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" for the components of your QCI deployment, please do so before proceeding.\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("br");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 5]), 0, 0);
          morphs[1] = dom.createMorphAt(element0, 5, 5);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          return morphs;
        },
        statements: [["content", "deploymentController.model.upstream_consumer_name", ["loc", [null, [23, 100], [23, 153]]]], ["block", "unless", [["get", "isStarted", ["loc", [null, [28, 14], [28, 23]]]]], [], 0, 1, ["loc", [null, [28, 4], [134, 15]]]], ["inline", "cancel-back-next", [], ["backRouteName", "subscriptions.management-application", "disableBack", false, "nextRouteName", "subscriptions.review-subscriptions", "disableNext", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [142, 33], [142, 42]]]]], [], []]], ["loc", [null, [138, 0], [142, 44]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 145,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showErrorMessage", ["loc", [null, [1, 6], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "if", [["get", "isLoading", ["loc", [null, [13, 6], [13, 15]]]]], [], 1, 2, ["loc", [null, [13, 0], [144, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("A. Content Provider");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "stepNumberSubscriptions", ["loc", [null, [4, 11], [4, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 10
                },
                "end": {
                  "line": 10,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("B. Review Subscriptions");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "stepNumberSubscriptions", ["loc", [null, [9, 15], [9, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 12,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "link-to", ["subscriptions.review-subscriptions"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabReviewSubsciptions", ["loc", [null, [8, 80], [8, 108]]]]], [], []]], 0, null, ["loc", [null, [8, 10], [10, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 10
                },
                "end": {
                  "line": 16,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("B. Subscription Management Application");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "stepNumberSubscriptions", ["loc", [null, [15, 15], [15, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 10
                },
                "end": {
                  "line": 20,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("C. Add Subscriptions");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "stepNumberSubscriptions", ["loc", [null, [19, 15], [19, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("D. Review Subscriptions");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "stepNumberSubscriptions", ["loc", [null, [23, 15], [23, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 6
              },
              "end": {
                "line": 25,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "link-to", ["subscriptions.management-application"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabManagementApplication", ["loc", [null, [14, 82], [14, 113]]]]], [], []]], 0, null, ["loc", [null, [14, 10], [16, 22]]]], ["block", "link-to", ["subscriptions.select-subscriptions"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabSelectSubsciptions", ["loc", [null, [18, 80], [18, 108]]]]], [], []]], 1, null, ["loc", [null, [18, 10], [20, 22]]]], ["block", "link-to", ["subscriptions.review-subscriptions"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabSelectSubsciptions", ["loc", [null, [22, 80], [22, 108]]]]], [], []]], 2, null, ["loc", [null, [22, 10], [24, 22]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["subscriptions.credentials"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabCredentials", ["loc", [null, [3, 67], [3, 88]]]]], [], []]], 0, null, ["loc", [null, [3, 6], [5, 18]]]], ["block", "if", [["get", "isDisconnected", ["loc", [null, [7, 12], [7, 26]]]]], [], 1, 2, ["loc", [null, [7, 6], [25, 13]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [27, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/undercloud-deploy", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 0
              },
              "end": {
                "line": 42,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/undercloud-deploy.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            dom.setAttribute(el2, "style", "padding-top: 10px;");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger");
            dom.setAttribute(el3, "style", "margin-bottom: 0px; max-width: 600px");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "pficon pficon-error-circle-o");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          Undercloud detection failed: ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
            return morphs;
          },
          statements: [["content", "deploymentError", ["loc", [null, [38, 39], [38, 58]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 44,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/undercloud-deploy.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("form");
          dom.setAttribute(el3, "class", "form-horizontal");
          dom.setAttribute(el3, "role", "form");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-primary pull-left");
          var el5 = dom.createTextNode("\n            Detect Undercloud\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [0, 1, 1]);
          var element2 = dom.childAt(element1, [7]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element1, 1, 1);
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          morphs[2] = dom.createMorphAt(element1, 5, 5);
          morphs[3] = dom.createAttrMorph(element2, 'disabled');
          morphs[4] = dom.createElementMorph(element2);
          morphs[5] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          return morphs;
        },
        statements: [["inline", "text-f", [], ["label", "Undercloud IP", "value", ["subexpr", "@mut", [["get", "undercloudIP", ["loc", [null, [6, 23], [6, 35]]]]], [], []], "labelSize", "deploy-undercloud-param-label", "inputSize", "deploy-undercloud-param-input", "isRequired", true, "helpText", ["subexpr", "@mut", [["get", "undercloudIPHelp", ["loc", [null, [10, 26], [10, 42]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "undercloudIpValidator", ["loc", [null, [11, 27], [11, 48]]]]], [], []]], ["loc", [null, [5, 8], [11, 50]]]], ["inline", "text-f", [], ["label", "SSH User", "value", ["subexpr", "@mut", [["get", "sshUser", ["loc", [null, [13, 23], [13, 30]]]]], [], []], "labelSize", "deploy-undercloud-param-label", "inputSize", "deploy-undercloud-param-input", "isRequired", true], ["loc", [null, [12, 8], [16, 34]]]], ["inline", "text-f", [], ["label", "SSH Password", "value", ["subexpr", "@mut", [["get", "sshPassword", ["loc", [null, [18, 23], [18, 34]]]]], [], []], "labelSize", "deploy-undercloud-param-label", "inputSize", "deploy-undercloud-param-input", "type", "password", "isRequired", true], ["loc", [null, [17, 8], [22, 34]]]], ["attribute", "disabled", ["get", "deployDisabled", ["loc", [null, [26, 27], [26, 41]]]]], ["element", "action", ["deployUndercloud"], [], ["loc", [null, [25, 16], [25, 45]]]], ["block", "if", [["get", "deploymentError", ["loc", [null, [33, 6], [33, 21]]]]], [], 0, null, ["loc", [null, [33, 0], [42, 7]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/undercloud-deploy.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-9");
          dom.setAttribute(el3, "style", "padding-top: 10px;");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "alert alert-success");
          dom.setAttribute(el4, "style", "margin-bottom: 0px;");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "pficon pficon-ok");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            Undercloud has been successfully detected. If you want to connect to a different undercloud ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          var el6 = dom.createTextNode(" click here to enter new credentials");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(".\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 1, 1, 1, 3]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["resetCredentials"], [], ["loc", [null, [50, 107], [50, 136]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/undercloud-deploy.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "unless", [["get", "isDeployed", ["loc", [null, [1, 10], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [55, 11]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameUndercloud", ["loc", [null, [57, 33], [57, 56]]]]], [], []], "disableBack", false, "nextRouteName", "register-nodes", "disableNext", ["subexpr", "@mut", [["get", "disableDeployUndercloudNext", ["loc", [null, [60, 31], [60, 58]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [61, 34], [61, 48]]]]], [], []]], ["loc", [null, [57, 0], [61, 50]]]], ["inline", "loading-spinner", [], ["show", ["subexpr", "@mut", [["get", "showLoadingSpinner", ["loc", [null, [63, 23], [63, 41]]]]], [], []], "text", ["subexpr", "@mut", [["get", "loadingSpinnerText", ["loc", [null, [63, 47], [63, 65]]]]], [], []]], ["loc", [null, [63, 0], [63, 67]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/where-install", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 6
            },
            "end": {
              "line": 13,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/where-install.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Install CloudForms on Red Hat Enterprise Virtualization\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "disableRHEV", ["loc", [null, [10, 26], [10, 37]]]], "disabled"], [], ["loc", [null, [10, 21], [10, 50]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/where-install.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Install CloudForms on ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "style", "margin-left:16px;");
          dom.setAttribute(el2, "class", "explanatory-text");
          var el3 = dom.createTextNode("\n            Able to split virtualization workloads across multiple controller nodes\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["inline-block ", ["subexpr", "if", [["get", "disableOpenStack", ["loc", [null, [18, 39], [18, 55]]]], "disabled"], [], ["loc", [null, [18, 34], [18, 68]]]]]]], ["content", "fullnameOpenStack", ["loc", [null, [19, 32], [19, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/where-install.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select a product to create and manage virtual machines.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["block", "radio-button", [], ["value", "RHEV", "groupValue", ["subexpr", "@mut", [["get", "cfmeInstallLoc", ["loc", [null, [9, 46], [9, 60]]]]], [], []], "changed", "cfmeLocationChanged", "id", "install_on_rhev", "disabled", ["subexpr", "@mut", [["get", "disableRHEVradio", ["loc", [null, [9, 121], [9, 137]]]]], [], []]], 0, null, ["loc", [null, [9, 6], [13, 23]]]], ["block", "radio-button", [], ["value", "OpenStack", "groupValue", ["subexpr", "@mut", [["get", "cfmeInstallLoc", ["loc", [null, [17, 51], [17, 65]]]]], [], []], "changed", "cfmeLocationChanged", "id", "install_on_openstack", "disabled", ["subexpr", "@mut", [["get", "disableOpenstackradio", ["loc", [null, [17, 131], [17, 152]]]]], [], []]], 1, null, ["loc", [null, [17, 6], [24, 23]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteName", ["loc", [null, [30, 33], [30, 46]]]]], [], []], "disableBack", false, "nextRouteName", "cloudforms.cfme-configuration", "disableNext", ["subexpr", "@mut", [["get", "isInvalidCfmeInstallLocation", ["loc", [null, [33, 31], [33, 59]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [34, 33], [34, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [35, 34], [35, 48]]]]], [], []]], ["loc", [null, [30, 0], [35, 50]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('fusor-ember-cli/utils/foreman-task-util', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Promise = _ember['default'].RSVP.Promise;

  var ForemanTaskUtil = (function () {
    function ForemanTaskUtil(csrfToken) {
      _classCallCheck(this, ForemanTaskUtil);

      this._csrfToken = csrfToken;
      this._uriRoot = window.location.protocol + '//' + window.location.host;
      this._foremanApiPath = '/foreman_tasks/api';
      this._foremanApiUri = '' + this._uriRoot + this._foremanApiPath;
      this._resumePath = '/tasks/bulk_resume';
      this._resumeUri = '' + this._foremanApiUri + this._resumePath;
    }

    _createClass(ForemanTaskUtil, [{
      key: 'resume',
      value: function resume(taskId) {
        return (0, _icAjax['default'])({
          url: this._resumeUri,
          type: 'POST',
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": this._csrfToken
          },
          data: JSON.stringify({ 'search': taskId })
        });
      }
    }]);

    return ForemanTaskUtil;
  })();

  exports['default'] = ForemanTaskUtil;
});
// ForemanTaskUtil: Wrappers around driving foreman tasks
define('fusor-ember-cli/utils/osp/osp-node-manager', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Object.extend({
    init: function init() {
      if (!this.get('nodes')) {
        this.set('nodes', []);
      }
    },

    driverMatchesNode: function driverMatchesNode(node) {
      var nodeDriver = this.get('driver');

      if (nodeDriver !== this.get('driver')) {
        return false;
      }

      if (nodeDriver === 'pxe_ipmitool') {
        return node.get('driver_info.ipmi_address') === this.get('address') && node.get('driver_info.ipmi_username') === this.get('username');
      }
      return node.get('driver_info.ssh_address') === this.get('address') && node.get('driver_info.ssh_username') === this.get('username');
    },

    setDriverInfoFromNode: function setDriverInfoFromNode(node) {
      var nodeDriver = node.get('driver');

      this.set('driver', nodeDriver);

      if (nodeDriver === 'pxe_ipmitool') {
        this.set('address', node.get('driver_info.ipmi_address'));
        this.set('username', node.get('driver_info.ipmi_username'));
      } else {
        this.set('address', node.get('driver_info.ssh_address'));
        this.set('username', node.get('driver_info.ssh_username'));
      }
    },

    putNode: function putNode(newNode) {
      var found = false;
      var nodes = this.get('nodes');

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (node.id === newNode.id) {
          nodes[i] = newNode;
          found = true;
        }
      }

      if (!found) {
        this.get('nodes').pushObject(newNode);
      }
    },

    removeNode: function removeNode(node) {
      var nodes = this.get('nodes');
      if (this.driverMatchesNode(node)) {
        this.set('nodes', nodes.without(node));
      }
    }
  });
});
define('fusor-ember-cli/utils/validation-util', ['exports'], function (exports) {
  // validation-util.js
  //============================================================
  // Create new regex from multiple line string, zipped up w/join
  // No regex flags: RegExp(string, flags)
  // NOTE: Regex backslashes must be escaped since this is not a literal regex!
  // No regex subgroupings js?
  var ipRangeRegex = new RegExp(['\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'].join(''), '');

  var CIDRFormatRegex = /\/(3[0-2]|[1-2]?[0-9])$/;

  var mgmtAppNameRegex = new RegExp(/^([a-zA-Z0-9\-\.\_]*)$/);

  var ValidationUtil = {
    validateIpRange: function validateIpRange(testString) {
      return !!testString && ipRangeRegex.test(testString.trim());
    },
    validateCIDRFormat: function validateCIDRFormat(testString) {
      return !!testString && CIDRFormatRegex.test(testString.trim());
    },
    validateIpRangeAndFormat: function validateIpRangeAndFormat(testString) {
      return this.validateIpRange(testString) && this.validateCIDRFormat(testString);
    },
    validateMgmtAppName: function validateMgmtAppName(testString) {
      return !!testString && mgmtAppNameRegex.test(testString.trim());
    }
  };

  exports['default'] = ValidationUtil;
});
define('fusor-ember-cli/utils/validators', ['exports', 'ember'], function (exports, _ember) {

  var Validator = _ember['default'].Object.extend({
    isValid: function isValid(value) {
      //override me
      return false;
    },

    isInvalid: function isInvalid(value) {
      return !this.isValid(value);
    },

    getMessages: function getMessages(value) {
      if (this.isValid(value)) {
        return [];
      }
      var message = this.get('message');
      if (message) {
        return [message];
      }
      var messages = this.get('messages');
      return messages ? messages : [value + ' is invalid'];
    }
  });

  var AllValidator = Validator.extend({
    isValid: function isValid(value) {
      var validators = this.get('validators');
      return validators ? validators.every(function (validator) {
        return validator.isValid(value);
      }) : true;
    },

    getMessages: function getMessages(value) {
      var message = this.get('message'),
          messages = [],
          validators = this.get('validators');

      if (message) {
        return this.isValid(value) ? [] : [message];
      }

      if (validators) {
        validators.forEach(function (validator) {
          return validator.getMessages(value).forEach(function (message) {
            return messages.push(message);
          });
        });
      }

      return messages;
    }
  });

  var AnyValidator = Validator.extend({
    isValid: function isValid(value) {
      var validators = this.get('validators');
      return validators ? validators.any(function (validator) {
        return validator.isValid(value);
      }) : true;
    }
  });

  var PresenceValidator = Validator.extend({
    message: 'cannot be blank',

    isValid: function isValid(value) {
      return _ember['default'].isPresent(value);
    }
  });

  // expects values to be set during construction:
  // equals;
  var EqualityValidator = Validator.extend({
    message: 'does not match',

    isValid: function isValid(value) {
      return value === this.get('equals');
    }
  });

  var LengthValidator = Validator.extend({
    isValid: function isValid(value) {
      var min = this.get('min'),
          max = this.get('max');

      return _ember['default'].isPresent(value) && (_ember['default'].isBlank(min) || value.length >= min) && (_ember['default'].isBlank(max) || value.length <= max);
    },

    getMessages: function getMessages(value) {
      var min = this.get('min'),
          max = this.get('max');

      //Avoid double failing with presence validator
      if (!_ember['default'].isPresent(value)) {
        return ['cannot be blank'];
      }

      if (_ember['default'].isPresent(min) && value.length < min) {
        return ['must be ' + min + ' or more characters'];
      }

      if (_ember['default'].isPresent(max) && value.length > max) {
        return ['must be ' + max + ' characters or less'];
      }

      return [];
    }
  });

  var PasswordValidator = LengthValidator.extend({
    min: 8
  });

  // expects values to be set during construction:
  // Array[String] values;
  var UniquenessValidator = Validator.extend({
    message: 'must be unique',

    isValid: function isValid(value) {
      var existingValues = this.get('existingValues');
      if (!existingValues) {
        return true;
      }

      var cleanValue = _ember['default'].typeOf(value) === 'string' ? value.trim() : value;
      return !existingValues.contains(cleanValue);
    }
  });

  // expects values to be set during construction:
  // RegExp regExp;
  // String message;
  var RegExpValidator = Validator.extend({
    trim: true,

    isValid: function isValid(value) {
      var trimmedValue = this.get('trim') && _ember['default'].typeOf(value) === 'string' ? value.trim() : value;
      return _ember['default'].isBlank(trimmedValue) || this.get('regExp').test(trimmedValue);
    }
  });

  var AlphaNumericDashUnderscoreValidator = RegExpValidator.extend({
    regExp: new RegExp(/^[A-Za-z0-9_-]*$/),
    message: "must contain only 'A-Z', 'a-z', '0-9', '_' or '-' characters"
  });

  var IpRangeValidator = RegExpValidator.extend({
    regExp: new RegExp(['\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'].join(''), ''),
    message: 'invalid network range'
  });

  var IpAddressValidator = RegExpValidator.extend({
    regExp: new RegExp(['^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'].join(''), ''),
    message: 'invalid ip address'
  });

  var CidrValidator = AllValidator.extend({
    validators: [IpRangeValidator.create({}), RegExpValidator.create({ regExp: new RegExp(/\/(3[0-2]|[1-2]?[0-9])$/) })],
    message: 'invalid CIDR notation'
  });

  var MacAddressValidator = RegExpValidator.extend({
    regExp: new RegExp(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/),
    message: 'invalid mac address'
  });

  var HostnameValidator = RegExpValidator.extend({
    regExp: new RegExp(/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/),
    message: 'invalid hostname'
  });

  var HostAddressValidator = AnyValidator.extend({
    validators: [IpAddressValidator.create({}), HostnameValidator.create({})],
    message: 'invalid host or ip address'
  });

  function validateZipper(zipper) {
    return zipper.map(function (pair) {
      return pair[0].isValid(pair[1]);
    }).reduce(function (lhs, rhs) {
      return lhs && rhs;
    });
  }

  exports.Validator = Validator;
  exports.AllValidator = AllValidator;
  exports.AnyValidator = AnyValidator;
  exports.PresenceValidator = PresenceValidator;
  exports.EqualityValidator = EqualityValidator;
  exports.LengthValidator = LengthValidator;
  exports.PasswordValidator = PasswordValidator;
  exports.UniquenessValidator = UniquenessValidator;
  exports.RegExpValidator = RegExpValidator;
  exports.AlphaNumericDashUnderscoreValidator = AlphaNumericDashUnderscoreValidator;
  exports.IpRangeValidator = IpRangeValidator;
  exports.IpAddressValidator = IpAddressValidator;
  exports.CidrValidator = CidrValidator;
  exports.HostAddressValidator = HostAddressValidator;
  exports.MacAddressValidator = MacAddressValidator;
  exports.HostnameValidator = HostnameValidator;
  exports.validateZipper = validateZipper;
});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('fusor-ember-cli/config/environment', ['ember'], function(Ember) {
  return { 'default': {"modulePrefix":"fusor-ember-cli","environment":"development","baseURL":"/","locationType":"hash","EmberENV":{"FEATURES":{}},"contentSecurityPolicyHeader":"Disabled-Content-Security-Policy","emberDevTools":{"global":true},"APP":{"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_VIEW_LOOKUPS":true,"rootElement":"#ember-app","name":"fusor-ember-cli","version":"0.0.0+cbe6d5be"},"ember-cli-mirage":{"enabled":false,"usingProxy":true},"contentSecurityPolicy":{"default-src":"'none'","script-src":"'self' 'unsafe-eval'","font-src":"'self'","connect-src":"'self'","img-src":"'self'","style-src":"'self'","media-src":"'self'"},"ember-devtools":{"enabled":true,"global":false},"exportApplicationGlobal":true}};
});

if (!runningTests) {
  require("fusor-ember-cli/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_VIEW_LOOKUPS":true,"rootElement":"#ember-app","name":"fusor-ember-cli","version":"0.0.0+cbe6d5be"});
}

/* jshint ignore:end */
//# sourceMappingURL=fusor-ember-cli.map